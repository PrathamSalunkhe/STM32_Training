
UART_Rx_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005268  08005268  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005270  08005270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  080052e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080052e8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d799  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f86  00000000  00000000  0002d839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  00030260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291ae  00000000  00000000  00030c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb7c  00000000  00000000  00059de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f76e0  00000000  00000000  00066962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e042  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003220  00000000  00000000  0015e094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005168 	.word	0x08005168

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005168 	.word	0x08005168

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 faad 	bl	8000af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f81a 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f88c 	bl	80006bc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005a4:	f000 f85e 	bl	8000664 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* call the function to receive data into interrupt mode */
  HAL_UART_Receive_IT(&hlpuart1, rx_buffer, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4907      	ldr	r1, [pc, #28]	; (80005c8 <main+0x34>)
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <main+0x38>)
 80005ae:	f002 fac7 	bl	8002b40 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* continuous operation */
	  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <main+0x3c>)
 80005b8:	f000 fe70 	bl	800129c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c0:	f000 fb0e 	bl	8000be0 <HAL_Delay>
	  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 80005c4:	e7f5      	b.n	80005b2 <main+0x1e>
 80005c6:	bf00      	nop
 80005c8:	20000110 	.word	0x20000110
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	48000400 	.word	0x48000400

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b096      	sub	sp, #88	; 0x58
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2244      	movs	r2, #68	; 0x44
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fe2a 	bl	800423c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fa:	f000 fe77 	bl	80012ec <HAL_PWREx_ControlVoltageScaling>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000604:	f000 f8da 	bl	80007bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000608:	2310      	movs	r3, #16
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fec9 	bl	80013b8 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800062c:	f000 f8c6 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f001 face 	bl	8001bec <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000656:	f000 f8b1 	bl	80007bc <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3758      	adds	r7, #88	; 0x58
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <MX_LPUART1_UART_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_LPUART1_UART_Init+0x50>)
 80006a2:	f002 f991 	bl	80029c8 <HAL_UART_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 f886 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	40008000 	.word	0x40008000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_GPIO_Init+0x7c>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_GPIO_Init+0x7c>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_GPIO_Init+0x7c>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_GPIO_Init+0x7c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_GPIO_Init+0x7c>)
 80006f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_GPIO_Init+0x7c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000702:	f000 fe49 	bl	8001398 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0x80>)
 800070e:	f000 fdad 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 8000712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0x80>)
 800072c:	f000 fc0c 	bl	8000f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000400 	.word	0x48000400

08000740 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	/* start the reception of data in interrupt mode again */
	HAL_UART_Receive_IT(&hlpuart1, rx_buffer, 1);
 8000748:	2201      	movs	r2, #1
 800074a:	4917      	ldr	r1, [pc, #92]	; (80007a8 <HAL_UART_RxCpltCallback+0x68>)
 800074c:	4817      	ldr	r0, [pc, #92]	; (80007ac <HAL_UART_RxCpltCallback+0x6c>)
 800074e:	f002 f9f7 	bl	8002b40 <HAL_UART_Receive_IT>
	if(rx_buffer[0]!= RETURN_CHAR && rx_buffer[0] != NEWLINE_CHAR)
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_UART_RxCpltCallback+0x68>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b0d      	cmp	r3, #13
 8000758:	d011      	beq.n	800077e <HAL_UART_RxCpltCallback+0x3e>
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <HAL_UART_RxCpltCallback+0x68>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b0a      	cmp	r3, #10
 8000760:	d00d      	beq.n	800077e <HAL_UART_RxCpltCallback+0x3e>
	{
		print_buffer[Index] = rx_buffer[0];
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_UART_RxCpltCallback+0x70>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_UART_RxCpltCallback+0x68>)
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_UART_RxCpltCallback+0x74>)
 800076e:	5499      	strb	r1, [r3, r2]
		Index++;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_UART_RxCpltCallback+0x70>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <HAL_UART_RxCpltCallback+0x70>)
 800077a:	801a      	strh	r2, [r3, #0]
		Index = 0;
  }
		/* If you want to print data using uart
		 * use below line */
//	HAL_UART_Transmit_IT(&hlpuart1, rx_buffer, 1);
}
 800077c:	e00f      	b.n	800079e <HAL_UART_RxCpltCallback+0x5e>
	else if (rx_buffer[0] == NEWLINE_CHAR)
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_UART_RxCpltCallback+0x68>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d10b      	bne.n	800079e <HAL_UART_RxCpltCallback+0x5e>
		printf("%s\r\n", print_buffer);	//print the data on the terminal
 8000786:	490b      	ldr	r1, [pc, #44]	; (80007b4 <HAL_UART_RxCpltCallback+0x74>)
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <HAL_UART_RxCpltCallback+0x78>)
 800078a:	f003 fd5f 	bl	800424c <iprintf>
		memset(print_buffer, 0, MAX_SIZE);
 800078e:	220a      	movs	r2, #10
 8000790:	2100      	movs	r1, #0
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <HAL_UART_RxCpltCallback+0x74>)
 8000794:	f003 fd52 	bl	800423c <memset>
		Index = 0;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_UART_RxCpltCallback+0x70>)
 800079a:	2200      	movs	r2, #0
 800079c:	801a      	strh	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000110 	.word	0x20000110
 80007ac:	2000008c 	.word	0x2000008c
 80007b0:	20000126 	.word	0x20000126
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	08005180 	.word	0x08005180

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0ac      	sub	sp, #176	; 0xb0
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	228c      	movs	r2, #140	; 0x8c
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fd03 	bl	800423c <memset>
  if(huart->Instance==LPUART1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <HAL_UART_MspInit+0xc4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d145      	bne.n	80008cc <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000840:	2320      	movs	r3, #32
 8000842:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000844:	2300      	movs	r3, #0
 8000846:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fbf1 	bl	8002034 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000858:	f7ff ffb0 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <HAL_UART_MspInit+0xc8>)
 800085e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <HAL_UART_MspInit+0xc8>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <HAL_UART_MspInit+0xc8>)
 800086a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0xc8>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0xc8>)
 800087a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0xc8>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800088c:	f000 fd84 	bl	8001398 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000890:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008aa:	2308      	movs	r3, #8
 80008ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_UART_MspInit+0xcc>)
 80008b8:	f000 fb46 	bl	8000f48 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2046      	movs	r0, #70	; 0x46
 80008c2:	f000 fa8c 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80008c6:	2046      	movs	r0, #70	; 0x46
 80008c8:	f000 faa5 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	37b0      	adds	r7, #176	; 0xb0
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40008000 	.word	0x40008000
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48001800 	.word	0x48001800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f938 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <LPUART1_IRQHandler+0x10>)
 800093a:	f002 f957 	bl	8002bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c

08000948 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00a      	b.n	8000970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800095a:	f3af 8000 	nop.w
 800095e:	4601      	mov	r1, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf0      	blt.n	800095a <_read+0x12>
  }

  return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit_IT(&hlpuart1, (uint8_t *)ptr, len);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	b29b      	uxth	r3, r3
 8000994:	461a      	mov	r2, r3
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <_write+0x24>)
 800099a:	f002 f863 	bl	8002a64 <HAL_UART_Transmit_IT>
  return len;
 800099e:	687b      	ldr	r3, [r7, #4]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000008c 	.word	0x2000008c

080009ac <_close>:

int _close(int file)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d4:	605a      	str	r2, [r3, #4]
  return 0;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_isatty>:

int _isatty(int file)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f003 fbd0 	bl	80041e8 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20050000 	.word	0x20050000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	20000128 	.word	0x20000128
 8000a7c:	20000140 	.word	0x20000140

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f003 fb8f 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fd5d 	bl	8000594 <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000adc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ae8:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 8000aec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000af0:	20000140 	.word	0x20000140

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>

08000af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f961 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f80e 	bl	8000b28 <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e001      	b.n	8000b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b18:	f7ff fe56 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d023      	beq.n	8000b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_InitTick+0x70>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f96d 	bl	8000e32 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10f      	bne.n	8000b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d809      	bhi.n	8000b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 f937 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0x74>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e007      	b.n	8000b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e004      	b.n	8000b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e001      	b.n	8000b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	2000012c 	.word	0x2000012c

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2000012c 	.word	0x2000012c

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d008      	beq.n	8000e74 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e022      	b.n	8000eba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020e 	bic.w	r2, r2, #14
 8000e82:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f003 021c 	and.w	r2, r3, #28
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d005      	beq.n	8000eea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e029      	b.n	8000f3e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 020e 	bic.w	r2, r2, #14
 8000ef8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0201 	bic.w	r2, r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 021c 	and.w	r2, r3, #28
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	4798      	blx	r3
    }
  }
  return status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	e166      	b.n	8001226 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8158 	beq.w	8001220 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d017      	beq.n	8001026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d123      	bne.n	800107a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	6939      	ldr	r1, [r7, #16]
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0203 	and.w	r2, r3, #3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80b2 	beq.w	8001220 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b61      	ldr	r3, [pc, #388]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	4a60      	ldr	r2, [pc, #384]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6613      	str	r3, [r2, #96]	; 0x60
 80010c8:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <HAL_GPIO_Init+0x2fc>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d4:	4a5c      	ldr	r2, [pc, #368]	; (8001248 <HAL_GPIO_Init+0x300>)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010fe:	d02b      	beq.n	8001158 <HAL_GPIO_Init+0x210>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_GPIO_Init+0x304>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d025      	beq.n	8001154 <HAL_GPIO_Init+0x20c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x308>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d01f      	beq.n	8001150 <HAL_GPIO_Init+0x208>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_GPIO_Init+0x30c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d019      	beq.n	800114c <HAL_GPIO_Init+0x204>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <HAL_GPIO_Init+0x310>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d013      	beq.n	8001148 <HAL_GPIO_Init+0x200>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4e      	ldr	r2, [pc, #312]	; (800125c <HAL_GPIO_Init+0x314>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d00d      	beq.n	8001144 <HAL_GPIO_Init+0x1fc>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <HAL_GPIO_Init+0x318>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x1f8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <HAL_GPIO_Init+0x31c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_GPIO_Init+0x1f4>
 8001138:	2307      	movs	r3, #7
 800113a:	e00e      	b.n	800115a <HAL_GPIO_Init+0x212>
 800113c:	2308      	movs	r3, #8
 800113e:	e00c      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001140:	2306      	movs	r3, #6
 8001142:	e00a      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001144:	2305      	movs	r3, #5
 8001146:	e008      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001148:	2304      	movs	r3, #4
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x212>
 800114c:	2303      	movs	r3, #3
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x212>
 8001158:	2300      	movs	r3, #0
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800116a:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_GPIO_Init+0x300>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_GPIO_Init+0x320>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800119c:	4a32      	ldr	r2, [pc, #200]	; (8001268 <HAL_GPIO_Init+0x320>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c6:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x320>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <HAL_GPIO_Init+0x320>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	f47f ae91 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	48001000 	.word	0x48001000
 800125c:	48001400 	.word	0x48001400
 8001260:	48001800 	.word	0x48001800
 8001264:	48001c00 	.word	0x48001c00
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001288:	e002      	b.n	8001290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4013      	ands	r3, r2
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43d9      	mvns	r1, r3
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	400b      	ands	r3, r1
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000

080012ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fa:	d130      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fc:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001308:	d038      	beq.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800131a:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2232      	movs	r2, #50	; 0x32
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001330:	e002      	b.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3b01      	subs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d102      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f2      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d110      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e00f      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d007      	beq.n	800137c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000
 8001390:	20000000 	.word	0x20000000
 8001394:	431bde83 	.word	0x431bde83

08001398 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80013a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a6:	6053      	str	r3, [r2, #4]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40007000 	.word	0x40007000

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f000 bc08 	b.w	8001bdc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013cc:	4b96      	ldr	r3, [pc, #600]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d6:	4b94      	ldr	r3, [pc, #592]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80e4 	beq.w	80015b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_RCC_OscConfig+0x4c>
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	f040 808b 	bne.w	8001512 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 8087 	bne.w	8001512 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001404:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_OscConfig+0x64>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e3df      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1a      	ldr	r2, [r3, #32]
 8001420:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <HAL_RCC_OscConfig+0x7e>
 800142c:	4b7e      	ldr	r3, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001434:	e005      	b.n	8001442 <HAL_RCC_OscConfig+0x8a>
 8001436:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001442:	4293      	cmp	r3, r2
 8001444:	d223      	bcs.n	800148e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fd92 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e3c0      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145a:	4b73      	ldr	r3, [pc, #460]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a72      	ldr	r2, [pc, #456]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b70      	ldr	r3, [pc, #448]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	496d      	ldr	r1, [pc, #436]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001478:	4b6b      	ldr	r3, [pc, #428]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4968      	ldr	r1, [pc, #416]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	e025      	b.n	80014da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148e:	4b66      	ldr	r3, [pc, #408]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a65      	ldr	r2, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4960      	ldr	r1, [pc, #384]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ac:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	495b      	ldr	r1, [pc, #364]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fd52 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e380      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014da:	f000 fc87 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b51      	ldr	r3, [pc, #324]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	4950      	ldr	r1, [pc, #320]	; (800162c <HAL_RCC_OscConfig+0x274>)
 80014ec:	5ccb      	ldrb	r3, [r1, r3]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_RCC_OscConfig+0x278>)
 80014f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014fa:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fb12 	bl	8000b28 <HAL_InitTick>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d052      	beq.n	80015b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	e364      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d032      	beq.n	8001580 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a42      	ldr	r2, [pc, #264]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb4f 	bl	8000bc8 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152e:	f7ff fb4b 	bl	8000bc8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e34d      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4b36      	ldr	r3, [pc, #216]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a35      	ldr	r2, [pc, #212]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4930      	ldr	r1, [pc, #192]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	492b      	ldr	r1, [pc, #172]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
 800157e:	e01a      	b.n	80015b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a28      	ldr	r2, [pc, #160]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb1c 	bl	8000bc8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001594:	f7ff fb18 	bl	8000bc8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e31a      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x1dc>
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d073      	beq.n	80016aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_OscConfig+0x21c>
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d10e      	bne.n	80015ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d10b      	bne.n	80015ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d063      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d15f      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e2f7      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x24c>
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e025      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160c:	d114      	bne.n	8001638 <HAL_RCC_OscConfig+0x280>
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a02      	ldr	r2, [pc, #8]	; (8001628 <HAL_RCC_OscConfig+0x270>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e013      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001628:	40021000 	.word	0x40021000
 800162c:	08005188 	.word	0x08005188
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004
 8001638:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9f      	ldr	r2, [pc, #636]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b9d      	ldr	r3, [pc, #628]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a9c      	ldr	r2, [pc, #624]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fab6 	bl	8000bc8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fab2 	bl	8000bc8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e2b4      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x2a8>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff faa2 	bl	8000bc8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fa9e 	bl	8000bc8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e2a0      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169a:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d0>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d060      	beq.n	8001778 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x310>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x328>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e27d      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b76      	ldr	r3, [pc, #472]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	4973      	ldr	r1, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f4:	e040      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d023      	beq.n	8001746 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6e      	ldr	r2, [pc, #440]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fa5d 	bl	8000bc8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fa59 	bl	8000bc8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e25b      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001724:	4b65      	ldr	r3, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b62      	ldr	r3, [pc, #392]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	495f      	ldr	r1, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e018      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5c      	ldr	r2, [pc, #368]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fa39 	bl	8000bc8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fa35 	bl	8000bc8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e237      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d03c      	beq.n	80017fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fa14 	bl	8000bc8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fa10 	bl	8000bc8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e212      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ef      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3ec>
 80017c4:	e01b      	b.n	80017fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017cc:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff f9f7 	bl	8000bc8 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff f9f3 	bl	8000bc8 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1f5      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ef      	bne.n	80017de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001826:	6593      	str	r3, [r2, #88]	; 0x58
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001834:	2301      	movs	r3, #1
 8001836:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d118      	bne.n	8001876 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001850:	f7ff f9ba 	bl	8000bc8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001858:	f7ff f9b6 	bl	8000bc8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1b8      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x508>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_RCC_OscConfig+0x4d8>
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188e:	e029      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d115      	bne.n	80018c4 <HAL_RCC_OscConfig+0x50c>
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ae:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
 80018c4:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a9c      	ldr	r2, [pc, #624]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a98      	ldr	r2, [pc, #608]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff f96c 	bl	8000bc8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff f968 	bl	8000bc8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e168      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ed      	beq.n	80018f4 <HAL_RCC_OscConfig+0x53c>
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff f955 	bl	8000bc8 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff f951 	bl	8000bc8 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e151      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ed      	bne.n	8001922 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	4a7a      	ldr	r2, [pc, #488]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 800196e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001972:	4a72      	ldr	r2, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f924 	bl	8000bc8 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001984:	f7ff f920 	bl	8000bc8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e122      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001996:	4b69      	ldr	r3, [pc, #420]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001998:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x5cc>
 80019a4:	e01b      	b.n	80019de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ac:	4a63      	ldr	r2, [pc, #396]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f907 	bl	8000bc8 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019be:	f7ff f903 	bl	8000bc8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e105      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d0:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80f9 	beq.w	8001bda <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	f040 80cf 	bne.w	8001b90 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019f2:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0203 	and.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d12c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	3b01      	subs	r3, #1
 8001a12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d123      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d11b      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d113      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	3b01      	subs	r3, #1
 8001a46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d109      	bne.n	8001a60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d071      	beq.n	8001b44 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d068      	beq.n	8001b38 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0ac      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8e:	f7ff f89b 	bl	8000bc8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f897 	bl	8000bc8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e099      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_RCC_OscConfig+0x788>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ac4:	3a01      	subs	r2, #1
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ace:	0212      	lsls	r2, r2, #8
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad6:	0852      	lsrs	r2, r2, #1
 8001ad8:	3a01      	subs	r2, #1
 8001ada:	0552      	lsls	r2, r2, #21
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0652      	lsls	r2, r2, #25
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aee:	06d2      	lsls	r2, r2, #27
 8001af0:	430a      	orrs	r2, r1
 8001af2:	4912      	ldr	r1, [pc, #72]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b10:	f7ff f85a 	bl	8000bc8 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f856 	bl	8000bc8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	e050      	b.n	8001bda <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04f      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d144      	bne.n	8001bda <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b68:	f7ff f82e 	bl	8000bc8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f82a 	bl	8000bc8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e02c      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x7b8>
 8001b8e:	e024      	b.n	8001bda <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d01f      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f811 	bl	8000bc8 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f80d 	bl	8000bc8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4905      	ldr	r1, [pc, #20]	; (8001be4 <HAL_RCC_OscConfig+0x82c>)
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_OscConfig+0x830>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	feeefffc 	.word	0xfeeefffc

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0e7      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b72      	ldr	r3, [pc, #456]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4970      	ldr	r1, [pc, #448]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b6e      	ldr	r3, [pc, #440]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cf      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4960      	ldr	r1, [pc, #384]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04c      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d121      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0a6      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e09a      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e086      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b46      	ldr	r3, [pc, #280]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4943      	ldr	r1, [pc, #268]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd4:	f7fe ff78 	bl	8000bc8 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7fe ff74 	bl	8000bc8 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e06e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d010      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d208      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	492b      	ldr	r1, [pc, #172]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d210      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4923      	ldr	r1, [pc, #140]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e036      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4918      	ldr	r1, [pc, #96]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4910      	ldr	r1, [pc, #64]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da0:	f000 f824 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	490b      	ldr	r1, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1fc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe feaf 	bl	8000b28 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dce:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08005188 	.word	0x08005188
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d121      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d11e      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e48:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e004      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d134      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0xac>
 8001e90:	e005      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	e005      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9a:	617b      	str	r3, [r7, #20]
      break;
 8001e9c:	e002      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	617b      	str	r3, [r7, #20]
      break;
 8001ea2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	3301      	adds	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	0e5b      	lsrs	r3, r3, #25
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	080051a0 	.word	0x080051a0
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4904      	ldr	r1, [pc, #16]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08005198 	.word	0x08005198

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f4c:	f7ff ffda 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0adb      	lsrs	r3, r3, #11
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4904      	ldr	r1, [pc, #16]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08005198 	.word	0x08005198

08001f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f9a0 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
 8001f92:	e014      	b.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fac:	f7ff f990 	bl	80012d0 <HAL_PWREx_GetVoltageRange>
 8001fb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc4:	d10b      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d919      	bls.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd0:	d902      	bls.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e013      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e010      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d902      	bls.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e00a      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d102      	bne.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	e004      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b70      	cmp	r3, #112	; 0x70
 8001ffa:	d101      	bne.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0207 	bic.w	r2, r3, #7
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800203c:	2300      	movs	r3, #0
 800203e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002040:	2300      	movs	r3, #0
 8002042:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d041      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002054:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002058:	d02a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800205a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800205e:	d824      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002064:	d008      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800206a:	d81e      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002074:	d010      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002076:	e018      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002078:	4b86      	ldr	r3, [pc, #536]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a85      	ldr	r2, [pc, #532]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002084:	e015      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f000 facd 	bl	800262c <RCCEx_PLLSAI1_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002096:	e00c      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3320      	adds	r3, #32
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fbb6 	bl	8002810 <RCCEx_PLLSAI2_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a8:	e003      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	74fb      	strb	r3, [r7, #19]
      break;
 80020ae:	e000      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b8:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c6:	4973      	ldr	r1, [pc, #460]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ce:	e001      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d041      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e8:	d02a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020ee:	d824      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f4:	d008      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020fa:	d81e      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d010      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002106:	e018      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002108:	4b62      	ldr	r3, [pc, #392]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a61      	ldr	r2, [pc, #388]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002114:	e015      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fa85 	bl	800262c <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002126:	e00c      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3320      	adds	r3, #32
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fb6e 	bl	8002810 <RCCEx_PLLSAI2_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002138:	e003      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	74fb      	strb	r3, [r7, #19]
      break;
 800213e:	e000      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002156:	494f      	ldr	r1, [pc, #316]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215e:	e001      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a0 	beq.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a40      	ldr	r2, [pc, #256]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fd08 	bl	8000bc8 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe fd04 	bl	8000bc8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d902      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	74fb      	strb	r3, [r7, #19]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15c      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01f      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d019      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a20      	ldr	r2, [pc, #128]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fcc3 	bl	8000bc8 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002244:	e00b      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fcbf 	bl	8000bc8 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d902      	bls.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	74fb      	strb	r3, [r7, #19]
            break;
 800225c:	e006      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ec      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4904      	ldr	r1, [pc, #16]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800228a:	e009      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
 8002290:	e006      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a0:	7c7b      	ldrb	r3, [r7, #17]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a6:	4ba6      	ldr	r3, [pc, #664]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	4aa5      	ldr	r2, [pc, #660]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022be:	4ba0      	ldr	r3, [pc, #640]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f023 0203 	bic.w	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	499c      	ldr	r1, [pc, #624]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022e0:	4b97      	ldr	r3, [pc, #604]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 020c 	bic.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	4994      	ldr	r1, [pc, #592]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002302:	4b8f      	ldr	r3, [pc, #572]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	498b      	ldr	r1, [pc, #556]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002324:	4b86      	ldr	r3, [pc, #536]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	4983      	ldr	r1, [pc, #524]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002346:	4b7e      	ldr	r3, [pc, #504]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	497a      	ldr	r1, [pc, #488]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002368:	4b75      	ldr	r3, [pc, #468]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	4972      	ldr	r1, [pc, #456]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	4969      	ldr	r1, [pc, #420]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023ac:	4b64      	ldr	r3, [pc, #400]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ba:	4961      	ldr	r1, [pc, #388]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ce:	4b5c      	ldr	r3, [pc, #368]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023dc:	4958      	ldr	r1, [pc, #352]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	4950      	ldr	r1, [pc, #320]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002412:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	4947      	ldr	r1, [pc, #284]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002434:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	493f      	ldr	r1, [pc, #252]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d028      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002456:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002474:	d106      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a31      	ldr	r2, [pc, #196]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002480:	60d3      	str	r3, [r2, #12]
 8002482:	e011      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f8c9 	bl	800262c <RCCEx_PLLSAI1_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d028      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	491f      	ldr	r1, [pc, #124]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024de:	60d3      	str	r3, [r2, #12]
 80024e0:	e011      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ea:	d10c      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f89a 	bl	800262c <RCCEx_PLLSAI1_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d02a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002530:	d108      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002532:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4a02      	ldr	r2, [pc, #8]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800253c:	60d3      	str	r3, [r2, #12]
 800253e:	e013      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002540:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254c:	d10c      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3304      	adds	r3, #4
 8002552:	2101      	movs	r1, #1
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f869 	bl	800262c <RCCEx_PLLSAI1_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d02f      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002582:	4929      	ldr	r1, [pc, #164]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002592:	d10d      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f846 	bl	800262c <RCCEx_PLLSAI1_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d014      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	74bb      	strb	r3, [r7, #18]
 80025ae:	e011      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3320      	adds	r3, #32
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f925 	bl	8002810 <RCCEx_PLLSAI2_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f0:	490d      	ldr	r1, [pc, #52]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00b      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	4904      	ldr	r1, [pc, #16]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800261c:	7cbb      	ldrb	r3, [r7, #18]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000

0800262c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800263a:	4b74      	ldr	r3, [pc, #464]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d018      	beq.n	8002678 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002646:	4b71      	ldr	r3, [pc, #452]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0203 	and.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d10d      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
       ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800265e:	4b6b      	ldr	r3, [pc, #428]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
       ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d047      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e044      	b.n	8002702 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d018      	beq.n	80026b2 <RCCEx_PLLSAI1_Config+0x86>
 8002680:	2b03      	cmp	r3, #3
 8002682:	d825      	bhi.n	80026d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002684:	2b01      	cmp	r3, #1
 8002686:	d002      	beq.n	800268e <RCCEx_PLLSAI1_Config+0x62>
 8002688:	2b02      	cmp	r3, #2
 800268a:	d009      	beq.n	80026a0 <RCCEx_PLLSAI1_Config+0x74>
 800268c:	e020      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800268e:	4b5f      	ldr	r3, [pc, #380]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d11d      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269e:	e01a      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b0:	e013      	b.n	80026da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ce:	e006      	b.n	80026de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      break;
 80026d4:	e004      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d6:	bf00      	nop
 80026d8:	e002      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026de:	bf00      	nop
    }

    if(status == HAL_OK)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	430b      	orrs	r3, r1
 80026fc:	4943      	ldr	r1, [pc, #268]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d17c      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3f      	ldr	r2, [pc, #252]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800270e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002714:	f7fe fa58 	bl	8000bc8 <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800271a:	e009      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800271c:	f7fe fa54 	bl	8000bc8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	73fb      	strb	r3, [r7, #15]
        break;
 800272e:	e005      	b.n	800273c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ef      	bne.n	800271c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d15f      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d110      	bne.n	800276a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002748:	4b30      	ldr	r3, [pc, #192]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002750:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6892      	ldr	r2, [r2, #8]
 8002758:	0211      	lsls	r1, r2, #8
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	06d2      	lsls	r2, r2, #27
 8002760:	430a      	orrs	r2, r1
 8002762:	492a      	ldr	r1, [pc, #168]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002764:	4313      	orrs	r3, r2
 8002766:	610b      	str	r3, [r1, #16]
 8002768:	e027      	b.n	80027ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d112      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002778:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6892      	ldr	r2, [r2, #8]
 8002780:	0211      	lsls	r1, r2, #8
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6912      	ldr	r2, [r2, #16]
 8002786:	0852      	lsrs	r2, r2, #1
 8002788:	3a01      	subs	r2, #1
 800278a:	0552      	lsls	r2, r2, #21
 800278c:	430a      	orrs	r2, r1
 800278e:	491f      	ldr	r1, [pc, #124]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	610b      	str	r3, [r1, #16]
 8002794:	e011      	b.n	80027ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800279e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6892      	ldr	r2, [r2, #8]
 80027a6:	0211      	lsls	r1, r2, #8
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6952      	ldr	r2, [r2, #20]
 80027ac:	0852      	lsrs	r2, r2, #1
 80027ae:	3a01      	subs	r2, #1
 80027b0:	0652      	lsls	r2, r2, #25
 80027b2:	430a      	orrs	r2, r1
 80027b4:	4915      	ldr	r1, [pc, #84]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe f9ff 	bl	8000bc8 <HAL_GetTick>
 80027ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027cc:	e009      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ce:	f7fe f9fb 	bl	8000bc8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d902      	bls.n	80027e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	73fb      	strb	r3, [r7, #15]
          break;
 80027e0:	e005      	b.n	80027ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ef      	beq.n	80027ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4903      	ldr	r1, [pc, #12]	; (800280c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000

08002810 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800281e:	4b69      	ldr	r3, [pc, #420]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800282a:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0203 	and.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d10d      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
       ||
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002842:	4b60      	ldr	r3, [pc, #384]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
       ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d047      	beq.n	80028e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e044      	b.n	80028e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d018      	beq.n	8002896 <RCCEx_PLLSAI2_Config+0x86>
 8002864:	2b03      	cmp	r3, #3
 8002866:	d825      	bhi.n	80028b4 <RCCEx_PLLSAI2_Config+0xa4>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d002      	beq.n	8002872 <RCCEx_PLLSAI2_Config+0x62>
 800286c:	2b02      	cmp	r3, #2
 800286e:	d009      	beq.n	8002884 <RCCEx_PLLSAI2_Config+0x74>
 8002870:	e020      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002872:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11d      	bne.n	80028ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002882:	e01a      	b.n	80028ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002884:	4b4f      	ldr	r3, [pc, #316]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d116      	bne.n	80028be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e013      	b.n	80028be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002896:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028a2:	4b48      	ldr	r3, [pc, #288]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028b2:	e006      	b.n	80028c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      break;
 80028b8:	e004      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	430b      	orrs	r3, r1
 80028e0:	4938      	ldr	r1, [pc, #224]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d166      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f8:	f7fe f966 	bl	8000bc8 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028fe:	e009      	b.n	8002914 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002900:	f7fe f962 	bl	8000bc8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	73fb      	strb	r3, [r7, #15]
        break;
 8002912:	e005      	b.n	8002920 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ef      	bne.n	8002900 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d149      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d110      	bne.n	800294e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002934:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6892      	ldr	r2, [r2, #8]
 800293c:	0211      	lsls	r1, r2, #8
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68d2      	ldr	r2, [r2, #12]
 8002942:	06d2      	lsls	r2, r2, #27
 8002944:	430a      	orrs	r2, r1
 8002946:	491f      	ldr	r1, [pc, #124]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	614b      	str	r3, [r1, #20]
 800294c:	e011      	b.n	8002972 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002956:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6892      	ldr	r2, [r2, #8]
 800295e:	0211      	lsls	r1, r2, #8
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6912      	ldr	r2, [r2, #16]
 8002964:	0852      	lsrs	r2, r2, #1
 8002966:	3a01      	subs	r2, #1
 8002968:	0652      	lsls	r2, r2, #25
 800296a:	430a      	orrs	r2, r1
 800296c:	4915      	ldr	r1, [pc, #84]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297e:	f7fe f923 	bl	8000bc8 <HAL_GetTick>
 8002982:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002984:	e009      	b.n	800299a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002986:	f7fe f91f 	bl	8000bc8 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d902      	bls.n	800299a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	73fb      	strb	r3, [r7, #15]
          break;
 8002998:	e005      	b.n	80029a6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0ef      	beq.n	8002986 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e040      	b.n	8002a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fd ff10 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fbf2 	bl	80031f0 <UART_SetConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e022      	b.n	8002a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fe9e 	bl	8003760 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 ff25 	bl	80038a4 <UART_CheckIdleState>
 8002a5a:	4603      	mov	r3, r0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b08b      	sub	sp, #44	; 0x2c
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d156      	bne.n	8002b28 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_UART_Transmit_IT+0x22>
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e04f      	b.n	8002b2a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Transmit_IT+0x34>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e048      	b.n	8002b2a <HAL_UART_Transmit_IT+0xc6>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	; 0x21
 8002ac8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d107      	bne.n	8002ae4 <HAL_UART_Transmit_IT+0x80>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d103      	bne.n	8002ae4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_UART_Transmit_IT+0xd4>)
 8002ae0:	669a      	str	r2, [r3, #104]	; 0x68
 8002ae2:	e002      	b.n	8002aea <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <HAL_UART_Transmit_IT+0xd8>)
 8002ae8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	613b      	str	r3, [r7, #16]
   return(result);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	69f9      	ldr	r1, [r7, #28]
 8002b16:	6a3a      	ldr	r2, [r7, #32]
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e6      	bne.n	8002af2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	372c      	adds	r7, #44	; 0x2c
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	08003dff 	.word	0x08003dff
 8002b3c:	08003d47 	.word	0x08003d47

08002b40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d142      	bne.n	8002bdc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_Receive_IT+0x22>
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e03b      	b.n	8002bde <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_UART_Receive_IT+0x34>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e034      	b.n	8002bde <HAL_UART_Receive_IT+0x9e>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_UART_Receive_IT+0xa8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d01f      	beq.n	8002bcc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d018      	beq.n	8002bcc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	e853 3f00 	ldrex	r3, [r3]
 8002ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	623b      	str	r3, [r7, #32]
 8002bba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	69f9      	ldr	r1, [r7, #28]
 8002bbe:	6a3a      	ldr	r2, [r7, #32]
 8002bc0:	e841 2300 	strex	r3, r2, [r1]
 8002bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e6      	bne.n	8002b9a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 ff74 	bl	8003ac0 <UART_Start_Receive_IT>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	e000      	b.n	8002bde <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40008000 	.word	0x40008000

08002bec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0ba      	sub	sp, #232	; 0xe8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c16:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d115      	bne.n	8002c54 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00f      	beq.n	8002c54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 82a6 	beq.w	8003196 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
      }
      return;
 8002c52:	e2a0      	b.n	8003196 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8117 	beq.w	8002e8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c6e:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <HAL_UART_IRQHandler+0x298>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 810a 	beq.w	8002e8c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d011      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xbc>
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d011      	beq.n	8002cd8 <HAL_UART_IRQHandler+0xec>
 8002cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cce:	f043 0204 	orr.w	r2, r3, #4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d011      	beq.n	8002d08 <HAL_UART_IRQHandler+0x11c>
 8002ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d017      	beq.n	8002d44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2208      	movs	r2, #8
 8002d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3a:	f043 0208 	orr.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_UART_IRQHandler+0x18a>
 8002d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00c      	beq.n	8002d76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 820c 	beq.w	800319a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d005      	beq.n	8002dce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d04f      	beq.n	8002e6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 ff40 	bl	8003c54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d141      	bne.n	8002e66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3308      	adds	r3, #8
 8002de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1d9      	bne.n	8002de2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d013      	beq.n	8002e5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <HAL_UART_IRQHandler+0x29c>)
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe f83f 	bl	8000ec6 <HAL_DMA_Abort_IT>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	e00f      	b.n	8002e7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9b0 	bl	80031c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	e00b      	b.n	8002e7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9ac 	bl	80031c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e007      	b.n	8002e7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9a8 	bl	80031c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e7c:	e18d      	b.n	800319a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7e:	bf00      	nop
    return;
 8002e80:	e18b      	b.n	800319a <HAL_UART_IRQHandler+0x5ae>
 8002e82:	bf00      	nop
 8002e84:	04000120 	.word	0x04000120
 8002e88:	08003d1b 	.word	0x08003d1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	f040 8146 	bne.w	8003122 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 813f 	beq.w	8003122 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8138 	beq.w	8003122 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	f040 80b4 	bne.w	8003032 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ed6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 815f 	beq.w	800319e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eea:	429a      	cmp	r2, r3
 8002eec:	f080 8157 	bcs.w	800319e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 8085 	bne.w	8003016 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1da      	bne.n	8002f0c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3308      	adds	r3, #8
 8002f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e1      	bne.n	8002f56 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3308      	adds	r3, #8
 8002f98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e3      	bne.n	8002f92 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe6:	f023 0310 	bic.w	r3, r3, #16
 8002fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ffa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e4      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd ff1a 	bl	8000e4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003022:	b29b      	uxth	r3, r3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8d4 	bl	80031d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003030:	e0b5      	b.n	800319e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800303e:	b29b      	uxth	r3, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80a7 	beq.w	80031a2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a2 	beq.w	80031a2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003072:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
 8003082:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800308e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e4      	bne.n	800305e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3308      	adds	r3, #8
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	623b      	str	r3, [r7, #32]
   return(result);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3308      	adds	r3, #8
 80030b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030b8:	633a      	str	r2, [r7, #48]	; 0x30
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e3      	bne.n	8003094 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	617b      	str	r3, [r7, #20]
   return(result);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e4      	bne.n	80030de <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003118:	4619      	mov	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f85c 	bl	80031d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003120:	e03f      	b.n	80031a2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00e      	beq.n	800314c <HAL_UART_IRQHandler+0x560>
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003142:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f001 f844 	bl	80041d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800314a:	e02d      	b.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01c      	beq.n	80031a6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
    }
    return;
 8003174:	e017      	b.n	80031a6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d012      	beq.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
 8003182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fe95 	bl	8003ebe <UART_EndTransmit_IT>
    return;
 8003194:	e008      	b.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003196:	bf00      	nop
 8003198:	e006      	b.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800319a:	bf00      	nop
 800319c:	e004      	b.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800319e:	bf00      	nop
 80031a0:	e002      	b.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80031a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80031a8:	37e8      	adds	r7, #232	; 0xe8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop

080031b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	b08a      	sub	sp, #40	; 0x28
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	431a      	orrs	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	4313      	orrs	r3, r2
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4ba4      	ldr	r3, [pc, #656]	; (80034b0 <UART_SetConfig+0x2c0>)
 8003220:	4013      	ands	r3, r2
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003228:	430b      	orrs	r3, r1
 800322a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a99      	ldr	r2, [pc, #612]	; (80034b4 <UART_SetConfig+0x2c4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	4313      	orrs	r3, r2
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a90      	ldr	r2, [pc, #576]	; (80034b8 <UART_SetConfig+0x2c8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d126      	bne.n	80032c8 <UART_SetConfig+0xd8>
 800327a:	4b90      	ldr	r3, [pc, #576]	; (80034bc <UART_SetConfig+0x2cc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b03      	cmp	r3, #3
 8003286:	d81b      	bhi.n	80032c0 <UART_SetConfig+0xd0>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <UART_SetConfig+0xa0>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032a1 	.word	0x080032a1
 8003294:	080032b1 	.word	0x080032b1
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b9 	.word	0x080032b9
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e116      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80032a8:	2302      	movs	r3, #2
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e112      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80032b0:	2304      	movs	r3, #4
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e10e      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80032b8:	2308      	movs	r3, #8
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e10a      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80032c0:	2310      	movs	r3, #16
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e106      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a7c      	ldr	r2, [pc, #496]	; (80034c0 <UART_SetConfig+0x2d0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d138      	bne.n	8003344 <UART_SetConfig+0x154>
 80032d2:	4b7a      	ldr	r3, [pc, #488]	; (80034bc <UART_SetConfig+0x2cc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d82d      	bhi.n	800333c <UART_SetConfig+0x14c>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <UART_SetConfig+0xf8>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	0800333d 	.word	0x0800333d
 80032f0:	0800333d 	.word	0x0800333d
 80032f4:	0800333d 	.word	0x0800333d
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	0800333d 	.word	0x0800333d
 8003300:	0800333d 	.word	0x0800333d
 8003304:	0800333d 	.word	0x0800333d
 8003308:	08003325 	.word	0x08003325
 800330c:	0800333d 	.word	0x0800333d
 8003310:	0800333d 	.word	0x0800333d
 8003314:	0800333d 	.word	0x0800333d
 8003318:	08003335 	.word	0x08003335
 800331c:	2300      	movs	r3, #0
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e0d8      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003324:	2302      	movs	r3, #2
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e0d4      	b.n	80034d6 <UART_SetConfig+0x2e6>
 800332c:	2304      	movs	r3, #4
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003332:	e0d0      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003334:	2308      	movs	r3, #8
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333a:	e0cc      	b.n	80034d6 <UART_SetConfig+0x2e6>
 800333c:	2310      	movs	r3, #16
 800333e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003342:	e0c8      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5e      	ldr	r2, [pc, #376]	; (80034c4 <UART_SetConfig+0x2d4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d125      	bne.n	800339a <UART_SetConfig+0x1aa>
 800334e:	4b5b      	ldr	r3, [pc, #364]	; (80034bc <UART_SetConfig+0x2cc>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003358:	2b30      	cmp	r3, #48	; 0x30
 800335a:	d016      	beq.n	800338a <UART_SetConfig+0x19a>
 800335c:	2b30      	cmp	r3, #48	; 0x30
 800335e:	d818      	bhi.n	8003392 <UART_SetConfig+0x1a2>
 8003360:	2b20      	cmp	r3, #32
 8003362:	d00a      	beq.n	800337a <UART_SetConfig+0x18a>
 8003364:	2b20      	cmp	r3, #32
 8003366:	d814      	bhi.n	8003392 <UART_SetConfig+0x1a2>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <UART_SetConfig+0x182>
 800336c:	2b10      	cmp	r3, #16
 800336e:	d008      	beq.n	8003382 <UART_SetConfig+0x192>
 8003370:	e00f      	b.n	8003392 <UART_SetConfig+0x1a2>
 8003372:	2300      	movs	r3, #0
 8003374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003378:	e0ad      	b.n	80034d6 <UART_SetConfig+0x2e6>
 800337a:	2302      	movs	r3, #2
 800337c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003380:	e0a9      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003382:	2304      	movs	r3, #4
 8003384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003388:	e0a5      	b.n	80034d6 <UART_SetConfig+0x2e6>
 800338a:	2308      	movs	r3, #8
 800338c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003390:	e0a1      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003392:	2310      	movs	r3, #16
 8003394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003398:	e09d      	b.n	80034d6 <UART_SetConfig+0x2e6>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a4a      	ldr	r2, [pc, #296]	; (80034c8 <UART_SetConfig+0x2d8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d125      	bne.n	80033f0 <UART_SetConfig+0x200>
 80033a4:	4b45      	ldr	r3, [pc, #276]	; (80034bc <UART_SetConfig+0x2cc>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ae:	2bc0      	cmp	r3, #192	; 0xc0
 80033b0:	d016      	beq.n	80033e0 <UART_SetConfig+0x1f0>
 80033b2:	2bc0      	cmp	r3, #192	; 0xc0
 80033b4:	d818      	bhi.n	80033e8 <UART_SetConfig+0x1f8>
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d00a      	beq.n	80033d0 <UART_SetConfig+0x1e0>
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d814      	bhi.n	80033e8 <UART_SetConfig+0x1f8>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <UART_SetConfig+0x1d8>
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d008      	beq.n	80033d8 <UART_SetConfig+0x1e8>
 80033c6:	e00f      	b.n	80033e8 <UART_SetConfig+0x1f8>
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ce:	e082      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80033d0:	2302      	movs	r3, #2
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d6:	e07e      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80033d8:	2304      	movs	r3, #4
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e07a      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80033e0:	2308      	movs	r3, #8
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e076      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80033e8:	2310      	movs	r3, #16
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e072      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a35      	ldr	r2, [pc, #212]	; (80034cc <UART_SetConfig+0x2dc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d12a      	bne.n	8003450 <UART_SetConfig+0x260>
 80033fa:	4b30      	ldr	r3, [pc, #192]	; (80034bc <UART_SetConfig+0x2cc>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003408:	d01a      	beq.n	8003440 <UART_SetConfig+0x250>
 800340a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340e:	d81b      	bhi.n	8003448 <UART_SetConfig+0x258>
 8003410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003414:	d00c      	beq.n	8003430 <UART_SetConfig+0x240>
 8003416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341a:	d815      	bhi.n	8003448 <UART_SetConfig+0x258>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <UART_SetConfig+0x238>
 8003420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003424:	d008      	beq.n	8003438 <UART_SetConfig+0x248>
 8003426:	e00f      	b.n	8003448 <UART_SetConfig+0x258>
 8003428:	2300      	movs	r3, #0
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342e:	e052      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003430:	2302      	movs	r3, #2
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003436:	e04e      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003438:	2304      	movs	r3, #4
 800343a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343e:	e04a      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003440:	2308      	movs	r3, #8
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003446:	e046      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003448:	2310      	movs	r3, #16
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344e:	e042      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <UART_SetConfig+0x2c4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d13a      	bne.n	80034d0 <UART_SetConfig+0x2e0>
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <UART_SetConfig+0x2cc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003468:	d01a      	beq.n	80034a0 <UART_SetConfig+0x2b0>
 800346a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800346e:	d81b      	bhi.n	80034a8 <UART_SetConfig+0x2b8>
 8003470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003474:	d00c      	beq.n	8003490 <UART_SetConfig+0x2a0>
 8003476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347a:	d815      	bhi.n	80034a8 <UART_SetConfig+0x2b8>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <UART_SetConfig+0x298>
 8003480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003484:	d008      	beq.n	8003498 <UART_SetConfig+0x2a8>
 8003486:	e00f      	b.n	80034a8 <UART_SetConfig+0x2b8>
 8003488:	2300      	movs	r3, #0
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e022      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003490:	2302      	movs	r3, #2
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e01e      	b.n	80034d6 <UART_SetConfig+0x2e6>
 8003498:	2304      	movs	r3, #4
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349e:	e01a      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80034a0:	2308      	movs	r3, #8
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a6:	e016      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80034a8:	2310      	movs	r3, #16
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ae:	e012      	b.n	80034d6 <UART_SetConfig+0x2e6>
 80034b0:	efff69f3 	.word	0xefff69f3
 80034b4:	40008000 	.word	0x40008000
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40004400 	.word	0x40004400
 80034c4:	40004800 	.word	0x40004800
 80034c8:	40004c00 	.word	0x40004c00
 80034cc:	40005000 	.word	0x40005000
 80034d0:	2310      	movs	r3, #16
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a9f      	ldr	r2, [pc, #636]	; (8003758 <UART_SetConfig+0x568>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d17a      	bne.n	80035d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d824      	bhi.n	8003532 <UART_SetConfig+0x342>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_SetConfig+0x300>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003515 	.word	0x08003515
 80034f4:	08003533 	.word	0x08003533
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	08003533 	.word	0x08003533
 8003500:	08003523 	.word	0x08003523
 8003504:	08003533 	.word	0x08003533
 8003508:	08003533 	.word	0x08003533
 800350c:	08003533 	.word	0x08003533
 8003510:	0800352b 	.word	0x0800352b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003514:	f7fe fd02 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003518:	61f8      	str	r0, [r7, #28]
        break;
 800351a:	e010      	b.n	800353e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <UART_SetConfig+0x56c>)
 800351e:	61fb      	str	r3, [r7, #28]
        break;
 8003520:	e00d      	b.n	800353e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003522:	f7fe fc63 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003526:	61f8      	str	r0, [r7, #28]
        break;
 8003528:	e009      	b.n	800353e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352e:	61fb      	str	r3, [r7, #28]
        break;
 8003530:	e005      	b.n	800353e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800353c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80fb 	beq.w	800373c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	429a      	cmp	r2, r3
 8003554:	d305      	bcc.n	8003562 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	429a      	cmp	r2, r3
 8003560:	d903      	bls.n	800356a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003568:	e0e8      	b.n	800373c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2200      	movs	r2, #0
 800356e:	461c      	mov	r4, r3
 8003570:	4615      	mov	r5, r2
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	022b      	lsls	r3, r5, #8
 800357c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003580:	0222      	lsls	r2, r4, #8
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	6849      	ldr	r1, [r1, #4]
 8003586:	0849      	lsrs	r1, r1, #1
 8003588:	2000      	movs	r0, #0
 800358a:	4688      	mov	r8, r1
 800358c:	4681      	mov	r9, r0
 800358e:	eb12 0a08 	adds.w	sl, r2, r8
 8003592:	eb43 0b09 	adc.w	fp, r3, r9
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035a4:	4650      	mov	r0, sl
 80035a6:	4659      	mov	r1, fp
 80035a8:	f7fc fe72 	bl	8000290 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ba:	d308      	bcc.n	80035ce <UART_SetConfig+0x3de>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c2:	d204      	bcs.n	80035ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	e0b6      	b.n	800373c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035d4:	e0b2      	b.n	800373c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d15e      	bne.n	800369e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d828      	bhi.n	800363a <UART_SetConfig+0x44a>
 80035e8:	a201      	add	r2, pc, #4	; (adr r2, 80035f0 <UART_SetConfig+0x400>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003615 	.word	0x08003615
 80035f4:	0800361d 	.word	0x0800361d
 80035f8:	08003625 	.word	0x08003625
 80035fc:	0800363b 	.word	0x0800363b
 8003600:	0800362b 	.word	0x0800362b
 8003604:	0800363b 	.word	0x0800363b
 8003608:	0800363b 	.word	0x0800363b
 800360c:	0800363b 	.word	0x0800363b
 8003610:	08003633 	.word	0x08003633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003614:	f7fe fc82 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003618:	61f8      	str	r0, [r7, #28]
        break;
 800361a:	e014      	b.n	8003646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800361c:	f7fe fc94 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 8003620:	61f8      	str	r0, [r7, #28]
        break;
 8003622:	e010      	b.n	8003646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <UART_SetConfig+0x56c>)
 8003626:	61fb      	str	r3, [r7, #28]
        break;
 8003628:	e00d      	b.n	8003646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362a:	f7fe fbdf 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 800362e:	61f8      	str	r0, [r7, #28]
        break;
 8003630:	e009      	b.n	8003646 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003636:	61fb      	str	r3, [r7, #28]
        break;
 8003638:	e005      	b.n	8003646 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d077      	beq.n	800373c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005a      	lsls	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	441a      	add	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b0f      	cmp	r3, #15
 8003666:	d916      	bls.n	8003696 <UART_SetConfig+0x4a6>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366e:	d212      	bcs.n	8003696 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f023 030f 	bic.w	r3, r3, #15
 8003678:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	b29a      	uxth	r2, r3
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	4313      	orrs	r3, r2
 800368a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	8afa      	ldrh	r2, [r7, #22]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	e052      	b.n	800373c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800369c:	e04e      	b.n	800373c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800369e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d827      	bhi.n	80036f6 <UART_SetConfig+0x506>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0x4bc>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036d1 	.word	0x080036d1
 80036b0:	080036d9 	.word	0x080036d9
 80036b4:	080036e1 	.word	0x080036e1
 80036b8:	080036f7 	.word	0x080036f7
 80036bc:	080036e7 	.word	0x080036e7
 80036c0:	080036f7 	.word	0x080036f7
 80036c4:	080036f7 	.word	0x080036f7
 80036c8:	080036f7 	.word	0x080036f7
 80036cc:	080036ef 	.word	0x080036ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d0:	f7fe fc24 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 80036d4:	61f8      	str	r0, [r7, #28]
        break;
 80036d6:	e014      	b.n	8003702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d8:	f7fe fc36 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 80036dc:	61f8      	str	r0, [r7, #28]
        break;
 80036de:	e010      	b.n	8003702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <UART_SetConfig+0x56c>)
 80036e2:	61fb      	str	r3, [r7, #28]
        break;
 80036e4:	e00d      	b.n	8003702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e6:	f7fe fb81 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 80036ea:	61f8      	str	r0, [r7, #28]
        break;
 80036ec:	e009      	b.n	8003702 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f2:	61fb      	str	r3, [r7, #28]
        break;
 80036f4:	e005      	b.n	8003702 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003700:	bf00      	nop
    }

    if (pclk != 0U)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d019      	beq.n	800373c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	085a      	lsrs	r2, r3, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	441a      	add	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	d909      	bls.n	8003736 <UART_SetConfig+0x546>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d205      	bcs.n	8003736 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e002      	b.n	800373c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800374c:	4618      	mov	r0, r3
 800374e:	3728      	adds	r7, #40	; 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	40008000 	.word	0x40008000
 800375c:	00f42400 	.word	0x00f42400

08003760 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01a      	beq.n	8003876 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385e:	d10a      	bne.n	8003876 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
  }
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038b4:	f7fd f988 	bl	8000bc8 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d10e      	bne.n	80038e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f82d 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e023      	b.n	800392e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d10e      	bne.n	8003912 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f817 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e00d      	b.n	800392e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b09c      	sub	sp, #112	; 0x70
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	e0a5      	b.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394e:	f000 80a1 	beq.w	8003a94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fd f939 	bl	8000bc8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <UART_WaitOnFlagUntilTimeout+0x32>
 8003962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003964:	2b00      	cmp	r3, #0
 8003966:	d13e      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003978:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800397c:	667b      	str	r3, [r7, #100]	; 0x64
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003988:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800398c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e6      	bne.n	8003968 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3308      	adds	r3, #8
 80039a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	663b      	str	r3, [r7, #96]	; 0x60
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3308      	adds	r3, #8
 80039b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80039bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e5      	bne.n	800399a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e067      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d04f      	beq.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a02:	d147      	bne.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e6      	bne.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a60:	623a      	str	r2, [r7, #32]
 8003a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	69f9      	ldr	r1, [r7, #28]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e5      	bne.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e010      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f43f af4a 	beq.w	8003948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3770      	adds	r7, #112	; 0x70
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b097      	sub	sp, #92	; 0x5c
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d10e      	bne.n	8003b12 <UART_Start_Receive_IT+0x52>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <UART_Start_Receive_IT+0x48>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b06:	e02d      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b10:	e028      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <UART_Start_Receive_IT+0x76>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <UART_Start_Receive_IT+0x6c>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	22ff      	movs	r2, #255	; 0xff
 8003b26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b2a:	e01b      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	227f      	movs	r2, #127	; 0x7f
 8003b30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b34:	e016      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b3e:	d10d      	bne.n	8003b5c <UART_Start_Receive_IT+0x9c>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <UART_Start_Receive_IT+0x92>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	227f      	movs	r2, #127	; 0x7f
 8003b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b50:	e008      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b5a:	e003      	b.n	8003b64 <UART_Start_Receive_IT+0xa4>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2222      	movs	r2, #34	; 0x22
 8003b70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3308      	adds	r3, #8
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	657b      	str	r3, [r7, #84]	; 0x54
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e5      	bne.n	8003b72 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d107      	bne.n	8003bc0 <UART_Start_Receive_IT+0x100>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <UART_Start_Receive_IT+0x18c>)
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64
 8003bbe:	e002      	b.n	8003bc6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <UART_Start_Receive_IT+0x190>)
 8003bc4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d019      	beq.n	8003c0a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <UART_Start_Receive_IT+0x116>
 8003c08:	e018      	b.n	8003c3c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	613b      	str	r3, [r7, #16]
   return(result);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f043 0320 	orr.w	r3, r3, #32
 8003c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	69f9      	ldr	r1, [r7, #28]
 8003c2e:	6a3a      	ldr	r2, [r7, #32]
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e6      	bne.n	8003c0a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	375c      	adds	r7, #92	; 0x5c
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	08004073 	.word	0x08004073
 8003c50:	08003f13 	.word	0x08003f13

08003c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b095      	sub	sp, #84	; 0x54
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3308      	adds	r3, #8
 8003c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e5      	bne.n	8003c8e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d118      	bne.n	8003cfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d0e:	bf00      	nop
 8003d10:	3754      	adds	r7, #84	; 0x54
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7ff fa43 	bl	80031c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b08f      	sub	sp, #60	; 0x3c
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d14d      	bne.n	8003df2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d132      	bne.n	8003dc8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d82:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6979      	ldr	r1, [r7, #20]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e6      	bne.n	8003d94 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003dc6:	e014      	b.n	8003df2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003df2:	bf00      	nop
 8003df4:	373c      	adds	r7, #60	; 0x3c
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b091      	sub	sp, #68	; 0x44
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0a:	2b21      	cmp	r3, #33	; 0x21
 8003e0c:	d151      	bne.n	8003eb2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d132      	bne.n	8003e80 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	623b      	str	r3, [r7, #32]
   return(result);
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	617b      	str	r3, [r7, #20]
   return(result);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e7e:	e018      	b.n	8003eb2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	881a      	ldrh	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e92:	b292      	uxth	r2, r2
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003eb2:	bf00      	nop
 8003eb4:	3744      	adds	r7, #68	; 0x44
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b088      	sub	sp, #32
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e6      	bne.n	8003ec6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff f953 	bl	80031b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0a:	bf00      	nop
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b096      	sub	sp, #88	; 0x58
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f28:	2b22      	cmp	r3, #34	; 0x22
 8003f2a:	f040 8094 	bne.w	8004056 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f3c:	b2d9      	uxtb	r1, r3
 8003f3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	400a      	ands	r2, r1
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d179      	bne.n	800406a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
 8003f96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fc8:	633a      	str	r2, [r7, #48]	; 0x30
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d12e      	bne.n	800404e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60fb      	str	r3, [r7, #12]
   return(result);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	69b9      	ldr	r1, [r7, #24]
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	617b      	str	r3, [r7, #20]
   return(result);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e6      	bne.n	8003ff6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b10      	cmp	r3, #16
 8004034:	d103      	bne.n	800403e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff f8c6 	bl	80031d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800404c:	e00d      	b.n	800406a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fb76 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 8004054:	e009      	b.n	800406a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	8b1b      	ldrh	r3, [r3, #24]
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0208 	orr.w	r2, r2, #8
 8004066:	b292      	uxth	r2, r2
 8004068:	831a      	strh	r2, [r3, #24]
}
 800406a:	bf00      	nop
 800406c:	3758      	adds	r7, #88	; 0x58
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b096      	sub	sp, #88	; 0x58
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004080:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	2b22      	cmp	r3, #34	; 0x22
 800408a:	f040 8094 	bne.w	80041b6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004094:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800409e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80040a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040a6:	4013      	ands	r3, r2
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	1c9a      	adds	r2, r3, #2
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d179      	bne.n	80041ca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f4:	643b      	str	r3, [r7, #64]	; 0x40
 80040f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e6      	bne.n	80040d6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3308      	adds	r3, #8
 800410e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	61fb      	str	r3, [r7, #28]
   return(result);
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800412e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414c:	2b01      	cmp	r3, #1
 800414e:	d12e      	bne.n	80041ae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	60bb      	str	r3, [r7, #8]
   return(result);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	613b      	str	r3, [r7, #16]
   return(result);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e6      	bne.n	8004156 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b10      	cmp	r3, #16
 8004194:	d103      	bne.n	800419e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2210      	movs	r2, #16
 800419c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff f816 	bl	80031d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041ac:	e00d      	b.n	80041ca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fac6 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 80041b4:	e009      	b.n	80041ca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	8b1b      	ldrh	r3, [r3, #24]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0208 	orr.w	r2, r2, #8
 80041c6:	b292      	uxth	r2, r2
 80041c8:	831a      	strh	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	3758      	adds	r7, #88	; 0x58
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2000000c 	.word	0x2000000c

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	; (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	; (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x44>)
 8004208:	f000 ffae 	bl	8005168 <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08005270 	.word	0x08005270
 8004230:	08005270 	.word	0x08005270
 8004234:	08005270 	.word	0x08005270
 8004238:	08005274 	.word	0x08005274

0800423c <memset>:
 800423c:	4402      	add	r2, r0
 800423e:	4603      	mov	r3, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	d100      	bne.n	8004246 <memset+0xa>
 8004244:	4770      	bx	lr
 8004246:	f803 1b01 	strb.w	r1, [r3], #1
 800424a:	e7f9      	b.n	8004240 <memset+0x4>

0800424c <iprintf>:
 800424c:	b40f      	push	{r0, r1, r2, r3}
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <iprintf+0x2c>)
 8004250:	b513      	push	{r0, r1, r4, lr}
 8004252:	681c      	ldr	r4, [r3, #0]
 8004254:	b124      	cbz	r4, 8004260 <iprintf+0x14>
 8004256:	69a3      	ldr	r3, [r4, #24]
 8004258:	b913      	cbnz	r3, 8004260 <iprintf+0x14>
 800425a:	4620      	mov	r0, r4
 800425c:	f000 f866 	bl	800432c <__sinit>
 8004260:	ab05      	add	r3, sp, #20
 8004262:	9a04      	ldr	r2, [sp, #16]
 8004264:	68a1      	ldr	r1, [r4, #8]
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	4620      	mov	r0, r4
 800426a:	f000 f9bd 	bl	80045e8 <_vfiprintf_r>
 800426e:	b002      	add	sp, #8
 8004270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004274:	b004      	add	sp, #16
 8004276:	4770      	bx	lr
 8004278:	2000000c 	.word	0x2000000c

0800427c <std>:
 800427c:	2300      	movs	r3, #0
 800427e:	b510      	push	{r4, lr}
 8004280:	4604      	mov	r4, r0
 8004282:	e9c0 3300 	strd	r3, r3, [r0]
 8004286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800428a:	6083      	str	r3, [r0, #8]
 800428c:	8181      	strh	r1, [r0, #12]
 800428e:	6643      	str	r3, [r0, #100]	; 0x64
 8004290:	81c2      	strh	r2, [r0, #14]
 8004292:	6183      	str	r3, [r0, #24]
 8004294:	4619      	mov	r1, r3
 8004296:	2208      	movs	r2, #8
 8004298:	305c      	adds	r0, #92	; 0x5c
 800429a:	f7ff ffcf 	bl	800423c <memset>
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <std+0x38>)
 80042a0:	6263      	str	r3, [r4, #36]	; 0x24
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <std+0x3c>)
 80042a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x40>)
 80042a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <std+0x44>)
 80042ac:	6224      	str	r4, [r4, #32]
 80042ae:	6323      	str	r3, [r4, #48]	; 0x30
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	bf00      	nop
 80042b4:	08004b91 	.word	0x08004b91
 80042b8:	08004bb3 	.word	0x08004bb3
 80042bc:	08004beb 	.word	0x08004beb
 80042c0:	08004c0f 	.word	0x08004c0f

080042c4 <_cleanup_r>:
 80042c4:	4901      	ldr	r1, [pc, #4]	; (80042cc <_cleanup_r+0x8>)
 80042c6:	f000 b8af 	b.w	8004428 <_fwalk_reent>
 80042ca:	bf00      	nop
 80042cc:	08004ee9 	.word	0x08004ee9

080042d0 <__sfmoreglue>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	2268      	movs	r2, #104	; 0x68
 80042d4:	1e4d      	subs	r5, r1, #1
 80042d6:	4355      	muls	r5, r2
 80042d8:	460e      	mov	r6, r1
 80042da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042de:	f000 f8e5 	bl	80044ac <_malloc_r>
 80042e2:	4604      	mov	r4, r0
 80042e4:	b140      	cbz	r0, 80042f8 <__sfmoreglue+0x28>
 80042e6:	2100      	movs	r1, #0
 80042e8:	e9c0 1600 	strd	r1, r6, [r0]
 80042ec:	300c      	adds	r0, #12
 80042ee:	60a0      	str	r0, [r4, #8]
 80042f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042f4:	f7ff ffa2 	bl	800423c <memset>
 80042f8:	4620      	mov	r0, r4
 80042fa:	bd70      	pop	{r4, r5, r6, pc}

080042fc <__sfp_lock_acquire>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__sfp_lock_acquire+0x8>)
 80042fe:	f000 b8b3 	b.w	8004468 <__retarget_lock_acquire_recursive>
 8004302:	bf00      	nop
 8004304:	20000131 	.word	0x20000131

08004308 <__sfp_lock_release>:
 8004308:	4801      	ldr	r0, [pc, #4]	; (8004310 <__sfp_lock_release+0x8>)
 800430a:	f000 b8ae 	b.w	800446a <__retarget_lock_release_recursive>
 800430e:	bf00      	nop
 8004310:	20000131 	.word	0x20000131

08004314 <__sinit_lock_acquire>:
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <__sinit_lock_acquire+0x8>)
 8004316:	f000 b8a7 	b.w	8004468 <__retarget_lock_acquire_recursive>
 800431a:	bf00      	nop
 800431c:	20000132 	.word	0x20000132

08004320 <__sinit_lock_release>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__sinit_lock_release+0x8>)
 8004322:	f000 b8a2 	b.w	800446a <__retarget_lock_release_recursive>
 8004326:	bf00      	nop
 8004328:	20000132 	.word	0x20000132

0800432c <__sinit>:
 800432c:	b510      	push	{r4, lr}
 800432e:	4604      	mov	r4, r0
 8004330:	f7ff fff0 	bl	8004314 <__sinit_lock_acquire>
 8004334:	69a3      	ldr	r3, [r4, #24]
 8004336:	b11b      	cbz	r3, 8004340 <__sinit+0x14>
 8004338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800433c:	f7ff bff0 	b.w	8004320 <__sinit_lock_release>
 8004340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004344:	6523      	str	r3, [r4, #80]	; 0x50
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <__sinit+0x68>)
 8004348:	4a13      	ldr	r2, [pc, #76]	; (8004398 <__sinit+0x6c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	62a2      	str	r2, [r4, #40]	; 0x28
 800434e:	42a3      	cmp	r3, r4
 8004350:	bf04      	itt	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	61a3      	streq	r3, [r4, #24]
 8004356:	4620      	mov	r0, r4
 8004358:	f000 f820 	bl	800439c <__sfp>
 800435c:	6060      	str	r0, [r4, #4]
 800435e:	4620      	mov	r0, r4
 8004360:	f000 f81c 	bl	800439c <__sfp>
 8004364:	60a0      	str	r0, [r4, #8]
 8004366:	4620      	mov	r0, r4
 8004368:	f000 f818 	bl	800439c <__sfp>
 800436c:	2200      	movs	r2, #0
 800436e:	60e0      	str	r0, [r4, #12]
 8004370:	2104      	movs	r1, #4
 8004372:	6860      	ldr	r0, [r4, #4]
 8004374:	f7ff ff82 	bl	800427c <std>
 8004378:	68a0      	ldr	r0, [r4, #8]
 800437a:	2201      	movs	r2, #1
 800437c:	2109      	movs	r1, #9
 800437e:	f7ff ff7d 	bl	800427c <std>
 8004382:	68e0      	ldr	r0, [r4, #12]
 8004384:	2202      	movs	r2, #2
 8004386:	2112      	movs	r1, #18
 8004388:	f7ff ff78 	bl	800427c <std>
 800438c:	2301      	movs	r3, #1
 800438e:	61a3      	str	r3, [r4, #24]
 8004390:	e7d2      	b.n	8004338 <__sinit+0xc>
 8004392:	bf00      	nop
 8004394:	080051d0 	.word	0x080051d0
 8004398:	080042c5 	.word	0x080042c5

0800439c <__sfp>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	4607      	mov	r7, r0
 80043a0:	f7ff ffac 	bl	80042fc <__sfp_lock_acquire>
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <__sfp+0x84>)
 80043a6:	681e      	ldr	r6, [r3, #0]
 80043a8:	69b3      	ldr	r3, [r6, #24]
 80043aa:	b913      	cbnz	r3, 80043b2 <__sfp+0x16>
 80043ac:	4630      	mov	r0, r6
 80043ae:	f7ff ffbd 	bl	800432c <__sinit>
 80043b2:	3648      	adds	r6, #72	; 0x48
 80043b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	d503      	bpl.n	80043c4 <__sfp+0x28>
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	b30b      	cbz	r3, 8004404 <__sfp+0x68>
 80043c0:	6836      	ldr	r6, [r6, #0]
 80043c2:	e7f7      	b.n	80043b4 <__sfp+0x18>
 80043c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043c8:	b9d5      	cbnz	r5, 8004400 <__sfp+0x64>
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <__sfp+0x88>)
 80043cc:	60e3      	str	r3, [r4, #12]
 80043ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043d2:	6665      	str	r5, [r4, #100]	; 0x64
 80043d4:	f000 f847 	bl	8004466 <__retarget_lock_init_recursive>
 80043d8:	f7ff ff96 	bl	8004308 <__sfp_lock_release>
 80043dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043e4:	6025      	str	r5, [r4, #0]
 80043e6:	61a5      	str	r5, [r4, #24]
 80043e8:	2208      	movs	r2, #8
 80043ea:	4629      	mov	r1, r5
 80043ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043f0:	f7ff ff24 	bl	800423c <memset>
 80043f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043fc:	4620      	mov	r0, r4
 80043fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004400:	3468      	adds	r4, #104	; 0x68
 8004402:	e7d9      	b.n	80043b8 <__sfp+0x1c>
 8004404:	2104      	movs	r1, #4
 8004406:	4638      	mov	r0, r7
 8004408:	f7ff ff62 	bl	80042d0 <__sfmoreglue>
 800440c:	4604      	mov	r4, r0
 800440e:	6030      	str	r0, [r6, #0]
 8004410:	2800      	cmp	r0, #0
 8004412:	d1d5      	bne.n	80043c0 <__sfp+0x24>
 8004414:	f7ff ff78 	bl	8004308 <__sfp_lock_release>
 8004418:	230c      	movs	r3, #12
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	e7ee      	b.n	80043fc <__sfp+0x60>
 800441e:	bf00      	nop
 8004420:	080051d0 	.word	0x080051d0
 8004424:	ffff0001 	.word	0xffff0001

08004428 <_fwalk_reent>:
 8004428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800442c:	4606      	mov	r6, r0
 800442e:	4688      	mov	r8, r1
 8004430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004434:	2700      	movs	r7, #0
 8004436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800443a:	f1b9 0901 	subs.w	r9, r9, #1
 800443e:	d505      	bpl.n	800444c <_fwalk_reent+0x24>
 8004440:	6824      	ldr	r4, [r4, #0]
 8004442:	2c00      	cmp	r4, #0
 8004444:	d1f7      	bne.n	8004436 <_fwalk_reent+0xe>
 8004446:	4638      	mov	r0, r7
 8004448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800444c:	89ab      	ldrh	r3, [r5, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d907      	bls.n	8004462 <_fwalk_reent+0x3a>
 8004452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004456:	3301      	adds	r3, #1
 8004458:	d003      	beq.n	8004462 <_fwalk_reent+0x3a>
 800445a:	4629      	mov	r1, r5
 800445c:	4630      	mov	r0, r6
 800445e:	47c0      	blx	r8
 8004460:	4307      	orrs	r7, r0
 8004462:	3568      	adds	r5, #104	; 0x68
 8004464:	e7e9      	b.n	800443a <_fwalk_reent+0x12>

08004466 <__retarget_lock_init_recursive>:
 8004466:	4770      	bx	lr

08004468 <__retarget_lock_acquire_recursive>:
 8004468:	4770      	bx	lr

0800446a <__retarget_lock_release_recursive>:
 800446a:	4770      	bx	lr

0800446c <sbrk_aligned>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4e0e      	ldr	r6, [pc, #56]	; (80044a8 <sbrk_aligned+0x3c>)
 8004470:	460c      	mov	r4, r1
 8004472:	6831      	ldr	r1, [r6, #0]
 8004474:	4605      	mov	r5, r0
 8004476:	b911      	cbnz	r1, 800447e <sbrk_aligned+0x12>
 8004478:	f000 fb7a 	bl	8004b70 <_sbrk_r>
 800447c:	6030      	str	r0, [r6, #0]
 800447e:	4621      	mov	r1, r4
 8004480:	4628      	mov	r0, r5
 8004482:	f000 fb75 	bl	8004b70 <_sbrk_r>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	d00a      	beq.n	80044a0 <sbrk_aligned+0x34>
 800448a:	1cc4      	adds	r4, r0, #3
 800448c:	f024 0403 	bic.w	r4, r4, #3
 8004490:	42a0      	cmp	r0, r4
 8004492:	d007      	beq.n	80044a4 <sbrk_aligned+0x38>
 8004494:	1a21      	subs	r1, r4, r0
 8004496:	4628      	mov	r0, r5
 8004498:	f000 fb6a 	bl	8004b70 <_sbrk_r>
 800449c:	3001      	adds	r0, #1
 800449e:	d101      	bne.n	80044a4 <sbrk_aligned+0x38>
 80044a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80044a4:	4620      	mov	r0, r4
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	20000138 	.word	0x20000138

080044ac <_malloc_r>:
 80044ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b0:	1ccd      	adds	r5, r1, #3
 80044b2:	f025 0503 	bic.w	r5, r5, #3
 80044b6:	3508      	adds	r5, #8
 80044b8:	2d0c      	cmp	r5, #12
 80044ba:	bf38      	it	cc
 80044bc:	250c      	movcc	r5, #12
 80044be:	2d00      	cmp	r5, #0
 80044c0:	4607      	mov	r7, r0
 80044c2:	db01      	blt.n	80044c8 <_malloc_r+0x1c>
 80044c4:	42a9      	cmp	r1, r5
 80044c6:	d905      	bls.n	80044d4 <_malloc_r+0x28>
 80044c8:	230c      	movs	r3, #12
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	2600      	movs	r6, #0
 80044ce:	4630      	mov	r0, r6
 80044d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d4:	4e2e      	ldr	r6, [pc, #184]	; (8004590 <_malloc_r+0xe4>)
 80044d6:	f000 fdbb 	bl	8005050 <__malloc_lock>
 80044da:	6833      	ldr	r3, [r6, #0]
 80044dc:	461c      	mov	r4, r3
 80044de:	bb34      	cbnz	r4, 800452e <_malloc_r+0x82>
 80044e0:	4629      	mov	r1, r5
 80044e2:	4638      	mov	r0, r7
 80044e4:	f7ff ffc2 	bl	800446c <sbrk_aligned>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	4604      	mov	r4, r0
 80044ec:	d14d      	bne.n	800458a <_malloc_r+0xde>
 80044ee:	6834      	ldr	r4, [r6, #0]
 80044f0:	4626      	mov	r6, r4
 80044f2:	2e00      	cmp	r6, #0
 80044f4:	d140      	bne.n	8004578 <_malloc_r+0xcc>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	4631      	mov	r1, r6
 80044fa:	4638      	mov	r0, r7
 80044fc:	eb04 0803 	add.w	r8, r4, r3
 8004500:	f000 fb36 	bl	8004b70 <_sbrk_r>
 8004504:	4580      	cmp	r8, r0
 8004506:	d13a      	bne.n	800457e <_malloc_r+0xd2>
 8004508:	6821      	ldr	r1, [r4, #0]
 800450a:	3503      	adds	r5, #3
 800450c:	1a6d      	subs	r5, r5, r1
 800450e:	f025 0503 	bic.w	r5, r5, #3
 8004512:	3508      	adds	r5, #8
 8004514:	2d0c      	cmp	r5, #12
 8004516:	bf38      	it	cc
 8004518:	250c      	movcc	r5, #12
 800451a:	4629      	mov	r1, r5
 800451c:	4638      	mov	r0, r7
 800451e:	f7ff ffa5 	bl	800446c <sbrk_aligned>
 8004522:	3001      	adds	r0, #1
 8004524:	d02b      	beq.n	800457e <_malloc_r+0xd2>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	442b      	add	r3, r5
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	e00e      	b.n	800454c <_malloc_r+0xa0>
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	1b52      	subs	r2, r2, r5
 8004532:	d41e      	bmi.n	8004572 <_malloc_r+0xc6>
 8004534:	2a0b      	cmp	r2, #11
 8004536:	d916      	bls.n	8004566 <_malloc_r+0xba>
 8004538:	1961      	adds	r1, r4, r5
 800453a:	42a3      	cmp	r3, r4
 800453c:	6025      	str	r5, [r4, #0]
 800453e:	bf18      	it	ne
 8004540:	6059      	strne	r1, [r3, #4]
 8004542:	6863      	ldr	r3, [r4, #4]
 8004544:	bf08      	it	eq
 8004546:	6031      	streq	r1, [r6, #0]
 8004548:	5162      	str	r2, [r4, r5]
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	4638      	mov	r0, r7
 800454e:	f104 060b 	add.w	r6, r4, #11
 8004552:	f000 fd83 	bl	800505c <__malloc_unlock>
 8004556:	f026 0607 	bic.w	r6, r6, #7
 800455a:	1d23      	adds	r3, r4, #4
 800455c:	1af2      	subs	r2, r6, r3
 800455e:	d0b6      	beq.n	80044ce <_malloc_r+0x22>
 8004560:	1b9b      	subs	r3, r3, r6
 8004562:	50a3      	str	r3, [r4, r2]
 8004564:	e7b3      	b.n	80044ce <_malloc_r+0x22>
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	42a3      	cmp	r3, r4
 800456a:	bf0c      	ite	eq
 800456c:	6032      	streq	r2, [r6, #0]
 800456e:	605a      	strne	r2, [r3, #4]
 8004570:	e7ec      	b.n	800454c <_malloc_r+0xa0>
 8004572:	4623      	mov	r3, r4
 8004574:	6864      	ldr	r4, [r4, #4]
 8004576:	e7b2      	b.n	80044de <_malloc_r+0x32>
 8004578:	4634      	mov	r4, r6
 800457a:	6876      	ldr	r6, [r6, #4]
 800457c:	e7b9      	b.n	80044f2 <_malloc_r+0x46>
 800457e:	230c      	movs	r3, #12
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4638      	mov	r0, r7
 8004584:	f000 fd6a 	bl	800505c <__malloc_unlock>
 8004588:	e7a1      	b.n	80044ce <_malloc_r+0x22>
 800458a:	6025      	str	r5, [r4, #0]
 800458c:	e7de      	b.n	800454c <_malloc_r+0xa0>
 800458e:	bf00      	nop
 8004590:	20000134 	.word	0x20000134

08004594 <__sfputc_r>:
 8004594:	6893      	ldr	r3, [r2, #8]
 8004596:	3b01      	subs	r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	b410      	push	{r4}
 800459c:	6093      	str	r3, [r2, #8]
 800459e:	da08      	bge.n	80045b2 <__sfputc_r+0x1e>
 80045a0:	6994      	ldr	r4, [r2, #24]
 80045a2:	42a3      	cmp	r3, r4
 80045a4:	db01      	blt.n	80045aa <__sfputc_r+0x16>
 80045a6:	290a      	cmp	r1, #10
 80045a8:	d103      	bne.n	80045b2 <__sfputc_r+0x1e>
 80045aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ae:	f000 bb33 	b.w	8004c18 <__swbuf_r>
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	1c58      	adds	r0, r3, #1
 80045b6:	6010      	str	r0, [r2, #0]
 80045b8:	7019      	strb	r1, [r3, #0]
 80045ba:	4608      	mov	r0, r1
 80045bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <__sfputs_r>:
 80045c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c4:	4606      	mov	r6, r0
 80045c6:	460f      	mov	r7, r1
 80045c8:	4614      	mov	r4, r2
 80045ca:	18d5      	adds	r5, r2, r3
 80045cc:	42ac      	cmp	r4, r5
 80045ce:	d101      	bne.n	80045d4 <__sfputs_r+0x12>
 80045d0:	2000      	movs	r0, #0
 80045d2:	e007      	b.n	80045e4 <__sfputs_r+0x22>
 80045d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d8:	463a      	mov	r2, r7
 80045da:	4630      	mov	r0, r6
 80045dc:	f7ff ffda 	bl	8004594 <__sfputc_r>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d1f3      	bne.n	80045cc <__sfputs_r+0xa>
 80045e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045e8 <_vfiprintf_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	460d      	mov	r5, r1
 80045ee:	b09d      	sub	sp, #116	; 0x74
 80045f0:	4614      	mov	r4, r2
 80045f2:	4698      	mov	r8, r3
 80045f4:	4606      	mov	r6, r0
 80045f6:	b118      	cbz	r0, 8004600 <_vfiprintf_r+0x18>
 80045f8:	6983      	ldr	r3, [r0, #24]
 80045fa:	b90b      	cbnz	r3, 8004600 <_vfiprintf_r+0x18>
 80045fc:	f7ff fe96 	bl	800432c <__sinit>
 8004600:	4b89      	ldr	r3, [pc, #548]	; (8004828 <_vfiprintf_r+0x240>)
 8004602:	429d      	cmp	r5, r3
 8004604:	d11b      	bne.n	800463e <_vfiprintf_r+0x56>
 8004606:	6875      	ldr	r5, [r6, #4]
 8004608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800460a:	07d9      	lsls	r1, r3, #31
 800460c:	d405      	bmi.n	800461a <_vfiprintf_r+0x32>
 800460e:	89ab      	ldrh	r3, [r5, #12]
 8004610:	059a      	lsls	r2, r3, #22
 8004612:	d402      	bmi.n	800461a <_vfiprintf_r+0x32>
 8004614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004616:	f7ff ff27 	bl	8004468 <__retarget_lock_acquire_recursive>
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	d501      	bpl.n	8004624 <_vfiprintf_r+0x3c>
 8004620:	692b      	ldr	r3, [r5, #16]
 8004622:	b9eb      	cbnz	r3, 8004660 <_vfiprintf_r+0x78>
 8004624:	4629      	mov	r1, r5
 8004626:	4630      	mov	r0, r6
 8004628:	f000 fb5a 	bl	8004ce0 <__swsetup_r>
 800462c:	b1c0      	cbz	r0, 8004660 <_vfiprintf_r+0x78>
 800462e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004630:	07dc      	lsls	r4, r3, #31
 8004632:	d50e      	bpl.n	8004652 <_vfiprintf_r+0x6a>
 8004634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004638:	b01d      	add	sp, #116	; 0x74
 800463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463e:	4b7b      	ldr	r3, [pc, #492]	; (800482c <_vfiprintf_r+0x244>)
 8004640:	429d      	cmp	r5, r3
 8004642:	d101      	bne.n	8004648 <_vfiprintf_r+0x60>
 8004644:	68b5      	ldr	r5, [r6, #8]
 8004646:	e7df      	b.n	8004608 <_vfiprintf_r+0x20>
 8004648:	4b79      	ldr	r3, [pc, #484]	; (8004830 <_vfiprintf_r+0x248>)
 800464a:	429d      	cmp	r5, r3
 800464c:	bf08      	it	eq
 800464e:	68f5      	ldreq	r5, [r6, #12]
 8004650:	e7da      	b.n	8004608 <_vfiprintf_r+0x20>
 8004652:	89ab      	ldrh	r3, [r5, #12]
 8004654:	0598      	lsls	r0, r3, #22
 8004656:	d4ed      	bmi.n	8004634 <_vfiprintf_r+0x4c>
 8004658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800465a:	f7ff ff06 	bl	800446a <__retarget_lock_release_recursive>
 800465e:	e7e9      	b.n	8004634 <_vfiprintf_r+0x4c>
 8004660:	2300      	movs	r3, #0
 8004662:	9309      	str	r3, [sp, #36]	; 0x24
 8004664:	2320      	movs	r3, #32
 8004666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800466a:	f8cd 800c 	str.w	r8, [sp, #12]
 800466e:	2330      	movs	r3, #48	; 0x30
 8004670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004834 <_vfiprintf_r+0x24c>
 8004674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004678:	f04f 0901 	mov.w	r9, #1
 800467c:	4623      	mov	r3, r4
 800467e:	469a      	mov	sl, r3
 8004680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004684:	b10a      	cbz	r2, 800468a <_vfiprintf_r+0xa2>
 8004686:	2a25      	cmp	r2, #37	; 0x25
 8004688:	d1f9      	bne.n	800467e <_vfiprintf_r+0x96>
 800468a:	ebba 0b04 	subs.w	fp, sl, r4
 800468e:	d00b      	beq.n	80046a8 <_vfiprintf_r+0xc0>
 8004690:	465b      	mov	r3, fp
 8004692:	4622      	mov	r2, r4
 8004694:	4629      	mov	r1, r5
 8004696:	4630      	mov	r0, r6
 8004698:	f7ff ff93 	bl	80045c2 <__sfputs_r>
 800469c:	3001      	adds	r0, #1
 800469e:	f000 80aa 	beq.w	80047f6 <_vfiprintf_r+0x20e>
 80046a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a4:	445a      	add	r2, fp
 80046a6:	9209      	str	r2, [sp, #36]	; 0x24
 80046a8:	f89a 3000 	ldrb.w	r3, [sl]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80a2 	beq.w	80047f6 <_vfiprintf_r+0x20e>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046bc:	f10a 0a01 	add.w	sl, sl, #1
 80046c0:	9304      	str	r3, [sp, #16]
 80046c2:	9307      	str	r3, [sp, #28]
 80046c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046c8:	931a      	str	r3, [sp, #104]	; 0x68
 80046ca:	4654      	mov	r4, sl
 80046cc:	2205      	movs	r2, #5
 80046ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d2:	4858      	ldr	r0, [pc, #352]	; (8004834 <_vfiprintf_r+0x24c>)
 80046d4:	f7fb fd8c 	bl	80001f0 <memchr>
 80046d8:	9a04      	ldr	r2, [sp, #16]
 80046da:	b9d8      	cbnz	r0, 8004714 <_vfiprintf_r+0x12c>
 80046dc:	06d1      	lsls	r1, r2, #27
 80046de:	bf44      	itt	mi
 80046e0:	2320      	movmi	r3, #32
 80046e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e6:	0713      	lsls	r3, r2, #28
 80046e8:	bf44      	itt	mi
 80046ea:	232b      	movmi	r3, #43	; 0x2b
 80046ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f0:	f89a 3000 	ldrb.w	r3, [sl]
 80046f4:	2b2a      	cmp	r3, #42	; 0x2a
 80046f6:	d015      	beq.n	8004724 <_vfiprintf_r+0x13c>
 80046f8:	9a07      	ldr	r2, [sp, #28]
 80046fa:	4654      	mov	r4, sl
 80046fc:	2000      	movs	r0, #0
 80046fe:	f04f 0c0a 	mov.w	ip, #10
 8004702:	4621      	mov	r1, r4
 8004704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004708:	3b30      	subs	r3, #48	; 0x30
 800470a:	2b09      	cmp	r3, #9
 800470c:	d94e      	bls.n	80047ac <_vfiprintf_r+0x1c4>
 800470e:	b1b0      	cbz	r0, 800473e <_vfiprintf_r+0x156>
 8004710:	9207      	str	r2, [sp, #28]
 8004712:	e014      	b.n	800473e <_vfiprintf_r+0x156>
 8004714:	eba0 0308 	sub.w	r3, r0, r8
 8004718:	fa09 f303 	lsl.w	r3, r9, r3
 800471c:	4313      	orrs	r3, r2
 800471e:	9304      	str	r3, [sp, #16]
 8004720:	46a2      	mov	sl, r4
 8004722:	e7d2      	b.n	80046ca <_vfiprintf_r+0xe2>
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	1d19      	adds	r1, r3, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	9103      	str	r1, [sp, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	bfbb      	ittet	lt
 8004730:	425b      	neglt	r3, r3
 8004732:	f042 0202 	orrlt.w	r2, r2, #2
 8004736:	9307      	strge	r3, [sp, #28]
 8004738:	9307      	strlt	r3, [sp, #28]
 800473a:	bfb8      	it	lt
 800473c:	9204      	strlt	r2, [sp, #16]
 800473e:	7823      	ldrb	r3, [r4, #0]
 8004740:	2b2e      	cmp	r3, #46	; 0x2e
 8004742:	d10c      	bne.n	800475e <_vfiprintf_r+0x176>
 8004744:	7863      	ldrb	r3, [r4, #1]
 8004746:	2b2a      	cmp	r3, #42	; 0x2a
 8004748:	d135      	bne.n	80047b6 <_vfiprintf_r+0x1ce>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	9203      	str	r2, [sp, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfb8      	it	lt
 8004756:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800475a:	3402      	adds	r4, #2
 800475c:	9305      	str	r3, [sp, #20]
 800475e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004844 <_vfiprintf_r+0x25c>
 8004762:	7821      	ldrb	r1, [r4, #0]
 8004764:	2203      	movs	r2, #3
 8004766:	4650      	mov	r0, sl
 8004768:	f7fb fd42 	bl	80001f0 <memchr>
 800476c:	b140      	cbz	r0, 8004780 <_vfiprintf_r+0x198>
 800476e:	2340      	movs	r3, #64	; 0x40
 8004770:	eba0 000a 	sub.w	r0, r0, sl
 8004774:	fa03 f000 	lsl.w	r0, r3, r0
 8004778:	9b04      	ldr	r3, [sp, #16]
 800477a:	4303      	orrs	r3, r0
 800477c:	3401      	adds	r4, #1
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004784:	482c      	ldr	r0, [pc, #176]	; (8004838 <_vfiprintf_r+0x250>)
 8004786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800478a:	2206      	movs	r2, #6
 800478c:	f7fb fd30 	bl	80001f0 <memchr>
 8004790:	2800      	cmp	r0, #0
 8004792:	d03f      	beq.n	8004814 <_vfiprintf_r+0x22c>
 8004794:	4b29      	ldr	r3, [pc, #164]	; (800483c <_vfiprintf_r+0x254>)
 8004796:	bb1b      	cbnz	r3, 80047e0 <_vfiprintf_r+0x1f8>
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	3307      	adds	r3, #7
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	3308      	adds	r3, #8
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a6:	443b      	add	r3, r7
 80047a8:	9309      	str	r3, [sp, #36]	; 0x24
 80047aa:	e767      	b.n	800467c <_vfiprintf_r+0x94>
 80047ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b0:	460c      	mov	r4, r1
 80047b2:	2001      	movs	r0, #1
 80047b4:	e7a5      	b.n	8004702 <_vfiprintf_r+0x11a>
 80047b6:	2300      	movs	r3, #0
 80047b8:	3401      	adds	r4, #1
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	4619      	mov	r1, r3
 80047be:	f04f 0c0a 	mov.w	ip, #10
 80047c2:	4620      	mov	r0, r4
 80047c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c8:	3a30      	subs	r2, #48	; 0x30
 80047ca:	2a09      	cmp	r2, #9
 80047cc:	d903      	bls.n	80047d6 <_vfiprintf_r+0x1ee>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0c5      	beq.n	800475e <_vfiprintf_r+0x176>
 80047d2:	9105      	str	r1, [sp, #20]
 80047d4:	e7c3      	b.n	800475e <_vfiprintf_r+0x176>
 80047d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047da:	4604      	mov	r4, r0
 80047dc:	2301      	movs	r3, #1
 80047de:	e7f0      	b.n	80047c2 <_vfiprintf_r+0x1da>
 80047e0:	ab03      	add	r3, sp, #12
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	462a      	mov	r2, r5
 80047e6:	4b16      	ldr	r3, [pc, #88]	; (8004840 <_vfiprintf_r+0x258>)
 80047e8:	a904      	add	r1, sp, #16
 80047ea:	4630      	mov	r0, r6
 80047ec:	f3af 8000 	nop.w
 80047f0:	4607      	mov	r7, r0
 80047f2:	1c78      	adds	r0, r7, #1
 80047f4:	d1d6      	bne.n	80047a4 <_vfiprintf_r+0x1bc>
 80047f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f8:	07d9      	lsls	r1, r3, #31
 80047fa:	d405      	bmi.n	8004808 <_vfiprintf_r+0x220>
 80047fc:	89ab      	ldrh	r3, [r5, #12]
 80047fe:	059a      	lsls	r2, r3, #22
 8004800:	d402      	bmi.n	8004808 <_vfiprintf_r+0x220>
 8004802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004804:	f7ff fe31 	bl	800446a <__retarget_lock_release_recursive>
 8004808:	89ab      	ldrh	r3, [r5, #12]
 800480a:	065b      	lsls	r3, r3, #25
 800480c:	f53f af12 	bmi.w	8004634 <_vfiprintf_r+0x4c>
 8004810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004812:	e711      	b.n	8004638 <_vfiprintf_r+0x50>
 8004814:	ab03      	add	r3, sp, #12
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	462a      	mov	r2, r5
 800481a:	4b09      	ldr	r3, [pc, #36]	; (8004840 <_vfiprintf_r+0x258>)
 800481c:	a904      	add	r1, sp, #16
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f880 	bl	8004924 <_printf_i>
 8004824:	e7e4      	b.n	80047f0 <_vfiprintf_r+0x208>
 8004826:	bf00      	nop
 8004828:	080051f4 	.word	0x080051f4
 800482c:	08005214 	.word	0x08005214
 8004830:	080051d4 	.word	0x080051d4
 8004834:	08005234 	.word	0x08005234
 8004838:	0800523e 	.word	0x0800523e
 800483c:	00000000 	.word	0x00000000
 8004840:	080045c3 	.word	0x080045c3
 8004844:	0800523a 	.word	0x0800523a

08004848 <_printf_common>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	4616      	mov	r6, r2
 800484e:	4699      	mov	r9, r3
 8004850:	688a      	ldr	r2, [r1, #8]
 8004852:	690b      	ldr	r3, [r1, #16]
 8004854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004858:	4293      	cmp	r3, r2
 800485a:	bfb8      	it	lt
 800485c:	4613      	movlt	r3, r2
 800485e:	6033      	str	r3, [r6, #0]
 8004860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004864:	4607      	mov	r7, r0
 8004866:	460c      	mov	r4, r1
 8004868:	b10a      	cbz	r2, 800486e <_printf_common+0x26>
 800486a:	3301      	adds	r3, #1
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	0699      	lsls	r1, r3, #26
 8004872:	bf42      	ittt	mi
 8004874:	6833      	ldrmi	r3, [r6, #0]
 8004876:	3302      	addmi	r3, #2
 8004878:	6033      	strmi	r3, [r6, #0]
 800487a:	6825      	ldr	r5, [r4, #0]
 800487c:	f015 0506 	ands.w	r5, r5, #6
 8004880:	d106      	bne.n	8004890 <_printf_common+0x48>
 8004882:	f104 0a19 	add.w	sl, r4, #25
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	6832      	ldr	r2, [r6, #0]
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	42ab      	cmp	r3, r5
 800488e:	dc26      	bgt.n	80048de <_printf_common+0x96>
 8004890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004894:	1e13      	subs	r3, r2, #0
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	bf18      	it	ne
 800489a:	2301      	movne	r3, #1
 800489c:	0692      	lsls	r2, r2, #26
 800489e:	d42b      	bmi.n	80048f8 <_printf_common+0xb0>
 80048a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d01e      	beq.n	80048ec <_printf_common+0xa4>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	68e5      	ldr	r5, [r4, #12]
 80048b2:	6832      	ldr	r2, [r6, #0]
 80048b4:	f003 0306 	and.w	r3, r3, #6
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	bf08      	it	eq
 80048bc:	1aad      	subeq	r5, r5, r2
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	6922      	ldr	r2, [r4, #16]
 80048c2:	bf0c      	ite	eq
 80048c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c8:	2500      	movne	r5, #0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfc4      	itt	gt
 80048ce:	1a9b      	subgt	r3, r3, r2
 80048d0:	18ed      	addgt	r5, r5, r3
 80048d2:	2600      	movs	r6, #0
 80048d4:	341a      	adds	r4, #26
 80048d6:	42b5      	cmp	r5, r6
 80048d8:	d11a      	bne.n	8004910 <_printf_common+0xc8>
 80048da:	2000      	movs	r0, #0
 80048dc:	e008      	b.n	80048f0 <_printf_common+0xa8>
 80048de:	2301      	movs	r3, #1
 80048e0:	4652      	mov	r2, sl
 80048e2:	4649      	mov	r1, r9
 80048e4:	4638      	mov	r0, r7
 80048e6:	47c0      	blx	r8
 80048e8:	3001      	adds	r0, #1
 80048ea:	d103      	bne.n	80048f4 <_printf_common+0xac>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	3501      	adds	r5, #1
 80048f6:	e7c6      	b.n	8004886 <_printf_common+0x3e>
 80048f8:	18e1      	adds	r1, r4, r3
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	2030      	movs	r0, #48	; 0x30
 80048fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004902:	4422      	add	r2, r4
 8004904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800490c:	3302      	adds	r3, #2
 800490e:	e7c7      	b.n	80048a0 <_printf_common+0x58>
 8004910:	2301      	movs	r3, #1
 8004912:	4622      	mov	r2, r4
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	3001      	adds	r0, #1
 800491c:	d0e6      	beq.n	80048ec <_printf_common+0xa4>
 800491e:	3601      	adds	r6, #1
 8004920:	e7d9      	b.n	80048d6 <_printf_common+0x8e>
	...

08004924 <_printf_i>:
 8004924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	7e0f      	ldrb	r7, [r1, #24]
 800492a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800492c:	2f78      	cmp	r7, #120	; 0x78
 800492e:	4691      	mov	r9, r2
 8004930:	4680      	mov	r8, r0
 8004932:	460c      	mov	r4, r1
 8004934:	469a      	mov	sl, r3
 8004936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800493a:	d807      	bhi.n	800494c <_printf_i+0x28>
 800493c:	2f62      	cmp	r7, #98	; 0x62
 800493e:	d80a      	bhi.n	8004956 <_printf_i+0x32>
 8004940:	2f00      	cmp	r7, #0
 8004942:	f000 80d8 	beq.w	8004af6 <_printf_i+0x1d2>
 8004946:	2f58      	cmp	r7, #88	; 0x58
 8004948:	f000 80a3 	beq.w	8004a92 <_printf_i+0x16e>
 800494c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004954:	e03a      	b.n	80049cc <_printf_i+0xa8>
 8004956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800495a:	2b15      	cmp	r3, #21
 800495c:	d8f6      	bhi.n	800494c <_printf_i+0x28>
 800495e:	a101      	add	r1, pc, #4	; (adr r1, 8004964 <_printf_i+0x40>)
 8004960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004964:	080049bd 	.word	0x080049bd
 8004968:	080049d1 	.word	0x080049d1
 800496c:	0800494d 	.word	0x0800494d
 8004970:	0800494d 	.word	0x0800494d
 8004974:	0800494d 	.word	0x0800494d
 8004978:	0800494d 	.word	0x0800494d
 800497c:	080049d1 	.word	0x080049d1
 8004980:	0800494d 	.word	0x0800494d
 8004984:	0800494d 	.word	0x0800494d
 8004988:	0800494d 	.word	0x0800494d
 800498c:	0800494d 	.word	0x0800494d
 8004990:	08004add 	.word	0x08004add
 8004994:	08004a01 	.word	0x08004a01
 8004998:	08004abf 	.word	0x08004abf
 800499c:	0800494d 	.word	0x0800494d
 80049a0:	0800494d 	.word	0x0800494d
 80049a4:	08004aff 	.word	0x08004aff
 80049a8:	0800494d 	.word	0x0800494d
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	0800494d 	.word	0x0800494d
 80049b4:	0800494d 	.word	0x0800494d
 80049b8:	08004ac7 	.word	0x08004ac7
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	602a      	str	r2, [r5, #0]
 80049c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0a3      	b.n	8004b18 <_printf_i+0x1f4>
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	6829      	ldr	r1, [r5, #0]
 80049d4:	0606      	lsls	r6, r0, #24
 80049d6:	f101 0304 	add.w	r3, r1, #4
 80049da:	d50a      	bpl.n	80049f2 <_printf_i+0xce>
 80049dc:	680e      	ldr	r6, [r1, #0]
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	2e00      	cmp	r6, #0
 80049e2:	da03      	bge.n	80049ec <_printf_i+0xc8>
 80049e4:	232d      	movs	r3, #45	; 0x2d
 80049e6:	4276      	negs	r6, r6
 80049e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ec:	485e      	ldr	r0, [pc, #376]	; (8004b68 <_printf_i+0x244>)
 80049ee:	230a      	movs	r3, #10
 80049f0:	e019      	b.n	8004a26 <_printf_i+0x102>
 80049f2:	680e      	ldr	r6, [r1, #0]
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049fa:	bf18      	it	ne
 80049fc:	b236      	sxthne	r6, r6
 80049fe:	e7ef      	b.n	80049e0 <_printf_i+0xbc>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	1d19      	adds	r1, r3, #4
 8004a06:	6029      	str	r1, [r5, #0]
 8004a08:	0601      	lsls	r1, r0, #24
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0xec>
 8004a0c:	681e      	ldr	r6, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <_printf_i+0xf2>
 8004a10:	0646      	lsls	r6, r0, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0xe8>
 8004a14:	881e      	ldrh	r6, [r3, #0]
 8004a16:	4854      	ldr	r0, [pc, #336]	; (8004b68 <_printf_i+0x244>)
 8004a18:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2308      	moveq	r3, #8
 8004a1e:	230a      	movne	r3, #10
 8004a20:	2100      	movs	r1, #0
 8004a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a26:	6865      	ldr	r5, [r4, #4]
 8004a28:	60a5      	str	r5, [r4, #8]
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	bfa2      	ittt	ge
 8004a2e:	6821      	ldrge	r1, [r4, #0]
 8004a30:	f021 0104 	bicge.w	r1, r1, #4
 8004a34:	6021      	strge	r1, [r4, #0]
 8004a36:	b90e      	cbnz	r6, 8004a3c <_printf_i+0x118>
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	d04d      	beq.n	8004ad8 <_printf_i+0x1b4>
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a42:	fb03 6711 	mls	r7, r3, r1, r6
 8004a46:	5dc7      	ldrb	r7, [r0, r7]
 8004a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a4c:	4637      	mov	r7, r6
 8004a4e:	42bb      	cmp	r3, r7
 8004a50:	460e      	mov	r6, r1
 8004a52:	d9f4      	bls.n	8004a3e <_printf_i+0x11a>
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d10b      	bne.n	8004a70 <_printf_i+0x14c>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	07de      	lsls	r6, r3, #31
 8004a5c:	d508      	bpl.n	8004a70 <_printf_i+0x14c>
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	6861      	ldr	r1, [r4, #4]
 8004a62:	4299      	cmp	r1, r3
 8004a64:	bfde      	ittt	le
 8004a66:	2330      	movle	r3, #48	; 0x30
 8004a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a70:	1b52      	subs	r2, r2, r5
 8004a72:	6122      	str	r2, [r4, #16]
 8004a74:	f8cd a000 	str.w	sl, [sp]
 8004a78:	464b      	mov	r3, r9
 8004a7a:	aa03      	add	r2, sp, #12
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f7ff fee2 	bl	8004848 <_printf_common>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d14c      	bne.n	8004b22 <_printf_i+0x1fe>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a8c:	b004      	add	sp, #16
 8004a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a92:	4835      	ldr	r0, [pc, #212]	; (8004b68 <_printf_i+0x244>)
 8004a94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a98:	6829      	ldr	r1, [r5, #0]
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa0:	6029      	str	r1, [r5, #0]
 8004aa2:	061d      	lsls	r5, r3, #24
 8004aa4:	d514      	bpl.n	8004ad0 <_printf_i+0x1ac>
 8004aa6:	07df      	lsls	r7, r3, #31
 8004aa8:	bf44      	itt	mi
 8004aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8004aae:	6023      	strmi	r3, [r4, #0]
 8004ab0:	b91e      	cbnz	r6, 8004aba <_printf_i+0x196>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	f023 0320 	bic.w	r3, r3, #32
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	2310      	movs	r3, #16
 8004abc:	e7b0      	b.n	8004a20 <_printf_i+0xfc>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f043 0320 	orr.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	2378      	movs	r3, #120	; 0x78
 8004ac8:	4828      	ldr	r0, [pc, #160]	; (8004b6c <_printf_i+0x248>)
 8004aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ace:	e7e3      	b.n	8004a98 <_printf_i+0x174>
 8004ad0:	0659      	lsls	r1, r3, #25
 8004ad2:	bf48      	it	mi
 8004ad4:	b2b6      	uxthmi	r6, r6
 8004ad6:	e7e6      	b.n	8004aa6 <_printf_i+0x182>
 8004ad8:	4615      	mov	r5, r2
 8004ada:	e7bb      	b.n	8004a54 <_printf_i+0x130>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	6826      	ldr	r6, [r4, #0]
 8004ae0:	6961      	ldr	r1, [r4, #20]
 8004ae2:	1d18      	adds	r0, r3, #4
 8004ae4:	6028      	str	r0, [r5, #0]
 8004ae6:	0635      	lsls	r5, r6, #24
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0x1cc>
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <_printf_i+0x1d2>
 8004af0:	0670      	lsls	r0, r6, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0x1c8>
 8004af4:	8019      	strh	r1, [r3, #0]
 8004af6:	2300      	movs	r3, #0
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	4615      	mov	r5, r2
 8004afc:	e7ba      	b.n	8004a74 <_printf_i+0x150>
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	602a      	str	r2, [r5, #0]
 8004b04:	681d      	ldr	r5, [r3, #0]
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7fb fb70 	bl	80001f0 <memchr>
 8004b10:	b108      	cbz	r0, 8004b16 <_printf_i+0x1f2>
 8004b12:	1b40      	subs	r0, r0, r5
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b20:	e7a8      	b.n	8004a74 <_printf_i+0x150>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	462a      	mov	r2, r5
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d0ab      	beq.n	8004a88 <_printf_i+0x164>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d413      	bmi.n	8004b5e <_printf_i+0x23a>
 8004b36:	68e0      	ldr	r0, [r4, #12]
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	4298      	cmp	r0, r3
 8004b3c:	bfb8      	it	lt
 8004b3e:	4618      	movlt	r0, r3
 8004b40:	e7a4      	b.n	8004a8c <_printf_i+0x168>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4632      	mov	r2, r6
 8004b46:	4649      	mov	r1, r9
 8004b48:	4640      	mov	r0, r8
 8004b4a:	47d0      	blx	sl
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d09b      	beq.n	8004a88 <_printf_i+0x164>
 8004b50:	3501      	adds	r5, #1
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	9903      	ldr	r1, [sp, #12]
 8004b56:	1a5b      	subs	r3, r3, r1
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dcf2      	bgt.n	8004b42 <_printf_i+0x21e>
 8004b5c:	e7eb      	b.n	8004b36 <_printf_i+0x212>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	f104 0619 	add.w	r6, r4, #25
 8004b64:	e7f5      	b.n	8004b52 <_printf_i+0x22e>
 8004b66:	bf00      	nop
 8004b68:	08005245 	.word	0x08005245
 8004b6c:	08005256 	.word	0x08005256

08004b70 <_sbrk_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4d06      	ldr	r5, [pc, #24]	; (8004b8c <_sbrk_r+0x1c>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	f7fb ff4a 	bl	8000a14 <_sbrk>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_sbrk_r+0x1a>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_sbrk_r+0x1a>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	2000013c 	.word	0x2000013c

08004b90 <__sread>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	460c      	mov	r4, r1
 8004b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b98:	f000 fab2 	bl	8005100 <_read_r>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	bfab      	itete	ge
 8004ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ba4:	181b      	addge	r3, r3, r0
 8004ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004baa:	bfac      	ite	ge
 8004bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bae:	81a3      	strhlt	r3, [r4, #12]
 8004bb0:	bd10      	pop	{r4, pc}

08004bb2 <__swrite>:
 8004bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb6:	461f      	mov	r7, r3
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	05db      	lsls	r3, r3, #23
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	d505      	bpl.n	8004bd0 <__swrite+0x1e>
 8004bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc8:	2302      	movs	r3, #2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f000 f9c8 	bl	8004f60 <_lseek_r>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	4632      	mov	r2, r6
 8004bde:	463b      	mov	r3, r7
 8004be0:	4628      	mov	r0, r5
 8004be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be6:	f000 b869 	b.w	8004cbc <_write_r>

08004bea <__sseek>:
 8004bea:	b510      	push	{r4, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf2:	f000 f9b5 	bl	8004f60 <_lseek_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	bf15      	itete	ne
 8004bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c06:	81a3      	strheq	r3, [r4, #12]
 8004c08:	bf18      	it	ne
 8004c0a:	81a3      	strhne	r3, [r4, #12]
 8004c0c:	bd10      	pop	{r4, pc}

08004c0e <__sclose>:
 8004c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c12:	f000 b8d3 	b.w	8004dbc <_close_r>
	...

08004c18 <__swbuf_r>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	460e      	mov	r6, r1
 8004c1c:	4614      	mov	r4, r2
 8004c1e:	4605      	mov	r5, r0
 8004c20:	b118      	cbz	r0, 8004c2a <__swbuf_r+0x12>
 8004c22:	6983      	ldr	r3, [r0, #24]
 8004c24:	b90b      	cbnz	r3, 8004c2a <__swbuf_r+0x12>
 8004c26:	f7ff fb81 	bl	800432c <__sinit>
 8004c2a:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <__swbuf_r+0x98>)
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	d12b      	bne.n	8004c88 <__swbuf_r+0x70>
 8004c30:	686c      	ldr	r4, [r5, #4]
 8004c32:	69a3      	ldr	r3, [r4, #24]
 8004c34:	60a3      	str	r3, [r4, #8]
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	071a      	lsls	r2, r3, #28
 8004c3a:	d52f      	bpl.n	8004c9c <__swbuf_r+0x84>
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	b36b      	cbz	r3, 8004c9c <__swbuf_r+0x84>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	6820      	ldr	r0, [r4, #0]
 8004c44:	1ac0      	subs	r0, r0, r3
 8004c46:	6963      	ldr	r3, [r4, #20]
 8004c48:	b2f6      	uxtb	r6, r6
 8004c4a:	4283      	cmp	r3, r0
 8004c4c:	4637      	mov	r7, r6
 8004c4e:	dc04      	bgt.n	8004c5a <__swbuf_r+0x42>
 8004c50:	4621      	mov	r1, r4
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 f948 	bl	8004ee8 <_fflush_r>
 8004c58:	bb30      	cbnz	r0, 8004ca8 <__swbuf_r+0x90>
 8004c5a:	68a3      	ldr	r3, [r4, #8]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	60a3      	str	r3, [r4, #8]
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	701e      	strb	r6, [r3, #0]
 8004c68:	6963      	ldr	r3, [r4, #20]
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	4283      	cmp	r3, r0
 8004c6e:	d004      	beq.n	8004c7a <__swbuf_r+0x62>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	07db      	lsls	r3, r3, #31
 8004c74:	d506      	bpl.n	8004c84 <__swbuf_r+0x6c>
 8004c76:	2e0a      	cmp	r6, #10
 8004c78:	d104      	bne.n	8004c84 <__swbuf_r+0x6c>
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f000 f933 	bl	8004ee8 <_fflush_r>
 8004c82:	b988      	cbnz	r0, 8004ca8 <__swbuf_r+0x90>
 8004c84:	4638      	mov	r0, r7
 8004c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <__swbuf_r+0x9c>)
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	d101      	bne.n	8004c92 <__swbuf_r+0x7a>
 8004c8e:	68ac      	ldr	r4, [r5, #8]
 8004c90:	e7cf      	b.n	8004c32 <__swbuf_r+0x1a>
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <__swbuf_r+0xa0>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	bf08      	it	eq
 8004c98:	68ec      	ldreq	r4, [r5, #12]
 8004c9a:	e7ca      	b.n	8004c32 <__swbuf_r+0x1a>
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 f81e 	bl	8004ce0 <__swsetup_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d0cb      	beq.n	8004c40 <__swbuf_r+0x28>
 8004ca8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004cac:	e7ea      	b.n	8004c84 <__swbuf_r+0x6c>
 8004cae:	bf00      	nop
 8004cb0:	080051f4 	.word	0x080051f4
 8004cb4:	08005214 	.word	0x08005214
 8004cb8:	080051d4 	.word	0x080051d4

08004cbc <_write_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d07      	ldr	r5, [pc, #28]	; (8004cdc <_write_r+0x20>)
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	602a      	str	r2, [r5, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f7fb fe5a 	bl	8000984 <_write>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_write_r+0x1e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_write_r+0x1e>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	2000013c 	.word	0x2000013c

08004ce0 <__swsetup_r>:
 8004ce0:	4b32      	ldr	r3, [pc, #200]	; (8004dac <__swsetup_r+0xcc>)
 8004ce2:	b570      	push	{r4, r5, r6, lr}
 8004ce4:	681d      	ldr	r5, [r3, #0]
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	b125      	cbz	r5, 8004cf6 <__swsetup_r+0x16>
 8004cec:	69ab      	ldr	r3, [r5, #24]
 8004cee:	b913      	cbnz	r3, 8004cf6 <__swsetup_r+0x16>
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f7ff fb1b 	bl	800432c <__sinit>
 8004cf6:	4b2e      	ldr	r3, [pc, #184]	; (8004db0 <__swsetup_r+0xd0>)
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d10f      	bne.n	8004d1c <__swsetup_r+0x3c>
 8004cfc:	686c      	ldr	r4, [r5, #4]
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d04:	0719      	lsls	r1, r3, #28
 8004d06:	d42c      	bmi.n	8004d62 <__swsetup_r+0x82>
 8004d08:	06dd      	lsls	r5, r3, #27
 8004d0a:	d411      	bmi.n	8004d30 <__swsetup_r+0x50>
 8004d0c:	2309      	movs	r3, #9
 8004d0e:	6033      	str	r3, [r6, #0]
 8004d10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d1a:	e03e      	b.n	8004d9a <__swsetup_r+0xba>
 8004d1c:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <__swsetup_r+0xd4>)
 8004d1e:	429c      	cmp	r4, r3
 8004d20:	d101      	bne.n	8004d26 <__swsetup_r+0x46>
 8004d22:	68ac      	ldr	r4, [r5, #8]
 8004d24:	e7eb      	b.n	8004cfe <__swsetup_r+0x1e>
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <__swsetup_r+0xd8>)
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	bf08      	it	eq
 8004d2c:	68ec      	ldreq	r4, [r5, #12]
 8004d2e:	e7e6      	b.n	8004cfe <__swsetup_r+0x1e>
 8004d30:	0758      	lsls	r0, r3, #29
 8004d32:	d512      	bpl.n	8004d5a <__swsetup_r+0x7a>
 8004d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d36:	b141      	cbz	r1, 8004d4a <__swsetup_r+0x6a>
 8004d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <__swsetup_r+0x66>
 8004d40:	4630      	mov	r0, r6
 8004d42:	f000 f991 	bl	8005068 <_free_r>
 8004d46:	2300      	movs	r3, #0
 8004d48:	6363      	str	r3, [r4, #52]	; 0x34
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	2300      	movs	r3, #0
 8004d54:	6063      	str	r3, [r4, #4]
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	f043 0308 	orr.w	r3, r3, #8
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	b94b      	cbnz	r3, 8004d7a <__swsetup_r+0x9a>
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d70:	d003      	beq.n	8004d7a <__swsetup_r+0x9a>
 8004d72:	4621      	mov	r1, r4
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 f92b 	bl	8004fd0 <__smakebuf_r>
 8004d7a:	89a0      	ldrh	r0, [r4, #12]
 8004d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d80:	f010 0301 	ands.w	r3, r0, #1
 8004d84:	d00a      	beq.n	8004d9c <__swsetup_r+0xbc>
 8004d86:	2300      	movs	r3, #0
 8004d88:	60a3      	str	r3, [r4, #8]
 8004d8a:	6963      	ldr	r3, [r4, #20]
 8004d8c:	425b      	negs	r3, r3
 8004d8e:	61a3      	str	r3, [r4, #24]
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	b943      	cbnz	r3, 8004da6 <__swsetup_r+0xc6>
 8004d94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d98:	d1ba      	bne.n	8004d10 <__swsetup_r+0x30>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	0781      	lsls	r1, r0, #30
 8004d9e:	bf58      	it	pl
 8004da0:	6963      	ldrpl	r3, [r4, #20]
 8004da2:	60a3      	str	r3, [r4, #8]
 8004da4:	e7f4      	b.n	8004d90 <__swsetup_r+0xb0>
 8004da6:	2000      	movs	r0, #0
 8004da8:	e7f7      	b.n	8004d9a <__swsetup_r+0xba>
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	080051f4 	.word	0x080051f4
 8004db4:	08005214 	.word	0x08005214
 8004db8:	080051d4 	.word	0x080051d4

08004dbc <_close_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	; (8004dd8 <_close_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fb fdf0 	bl	80009ac <_close>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_close_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_close_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	2000013c 	.word	0x2000013c

08004ddc <__sflush_r>:
 8004ddc:	898a      	ldrh	r2, [r1, #12]
 8004dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	4605      	mov	r5, r0
 8004de4:	0710      	lsls	r0, r2, #28
 8004de6:	460c      	mov	r4, r1
 8004de8:	d458      	bmi.n	8004e9c <__sflush_r+0xc0>
 8004dea:	684b      	ldr	r3, [r1, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	dc05      	bgt.n	8004dfc <__sflush_r+0x20>
 8004df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dc02      	bgt.n	8004dfc <__sflush_r+0x20>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	d0f9      	beq.n	8004df6 <__sflush_r+0x1a>
 8004e02:	2300      	movs	r3, #0
 8004e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e08:	682f      	ldr	r7, [r5, #0]
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	d032      	beq.n	8004e74 <__sflush_r+0x98>
 8004e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	075a      	lsls	r2, r3, #29
 8004e14:	d505      	bpl.n	8004e22 <__sflush_r+0x46>
 8004e16:	6863      	ldr	r3, [r4, #4]
 8004e18:	1ac0      	subs	r0, r0, r3
 8004e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e1c:	b10b      	cbz	r3, 8004e22 <__sflush_r+0x46>
 8004e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e20:	1ac0      	subs	r0, r0, r3
 8004e22:	2300      	movs	r3, #0
 8004e24:	4602      	mov	r2, r0
 8004e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e28:	6a21      	ldr	r1, [r4, #32]
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b0      	blx	r6
 8004e2e:	1c43      	adds	r3, r0, #1
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	d106      	bne.n	8004e42 <__sflush_r+0x66>
 8004e34:	6829      	ldr	r1, [r5, #0]
 8004e36:	291d      	cmp	r1, #29
 8004e38:	d82c      	bhi.n	8004e94 <__sflush_r+0xb8>
 8004e3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ee4 <__sflush_r+0x108>)
 8004e3c:	40ca      	lsrs	r2, r1
 8004e3e:	07d6      	lsls	r6, r2, #31
 8004e40:	d528      	bpl.n	8004e94 <__sflush_r+0xb8>
 8004e42:	2200      	movs	r2, #0
 8004e44:	6062      	str	r2, [r4, #4]
 8004e46:	04d9      	lsls	r1, r3, #19
 8004e48:	6922      	ldr	r2, [r4, #16]
 8004e4a:	6022      	str	r2, [r4, #0]
 8004e4c:	d504      	bpl.n	8004e58 <__sflush_r+0x7c>
 8004e4e:	1c42      	adds	r2, r0, #1
 8004e50:	d101      	bne.n	8004e56 <__sflush_r+0x7a>
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	b903      	cbnz	r3, 8004e58 <__sflush_r+0x7c>
 8004e56:	6560      	str	r0, [r4, #84]	; 0x54
 8004e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e5a:	602f      	str	r7, [r5, #0]
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	d0ca      	beq.n	8004df6 <__sflush_r+0x1a>
 8004e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e64:	4299      	cmp	r1, r3
 8004e66:	d002      	beq.n	8004e6e <__sflush_r+0x92>
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 f8fd 	bl	8005068 <_free_r>
 8004e6e:	2000      	movs	r0, #0
 8004e70:	6360      	str	r0, [r4, #52]	; 0x34
 8004e72:	e7c1      	b.n	8004df8 <__sflush_r+0x1c>
 8004e74:	6a21      	ldr	r1, [r4, #32]
 8004e76:	2301      	movs	r3, #1
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b0      	blx	r6
 8004e7c:	1c41      	adds	r1, r0, #1
 8004e7e:	d1c7      	bne.n	8004e10 <__sflush_r+0x34>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0c4      	beq.n	8004e10 <__sflush_r+0x34>
 8004e86:	2b1d      	cmp	r3, #29
 8004e88:	d001      	beq.n	8004e8e <__sflush_r+0xb2>
 8004e8a:	2b16      	cmp	r3, #22
 8004e8c:	d101      	bne.n	8004e92 <__sflush_r+0xb6>
 8004e8e:	602f      	str	r7, [r5, #0]
 8004e90:	e7b1      	b.n	8004df6 <__sflush_r+0x1a>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	e7ad      	b.n	8004df8 <__sflush_r+0x1c>
 8004e9c:	690f      	ldr	r7, [r1, #16]
 8004e9e:	2f00      	cmp	r7, #0
 8004ea0:	d0a9      	beq.n	8004df6 <__sflush_r+0x1a>
 8004ea2:	0793      	lsls	r3, r2, #30
 8004ea4:	680e      	ldr	r6, [r1, #0]
 8004ea6:	bf08      	it	eq
 8004ea8:	694b      	ldreq	r3, [r1, #20]
 8004eaa:	600f      	str	r7, [r1, #0]
 8004eac:	bf18      	it	ne
 8004eae:	2300      	movne	r3, #0
 8004eb0:	eba6 0807 	sub.w	r8, r6, r7
 8004eb4:	608b      	str	r3, [r1, #8]
 8004eb6:	f1b8 0f00 	cmp.w	r8, #0
 8004eba:	dd9c      	ble.n	8004df6 <__sflush_r+0x1a>
 8004ebc:	6a21      	ldr	r1, [r4, #32]
 8004ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	463a      	mov	r2, r7
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b0      	blx	r6
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	dc06      	bgt.n	8004eda <__sflush_r+0xfe>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed2:	81a3      	strh	r3, [r4, #12]
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed8:	e78e      	b.n	8004df8 <__sflush_r+0x1c>
 8004eda:	4407      	add	r7, r0
 8004edc:	eba8 0800 	sub.w	r8, r8, r0
 8004ee0:	e7e9      	b.n	8004eb6 <__sflush_r+0xda>
 8004ee2:	bf00      	nop
 8004ee4:	20400001 	.word	0x20400001

08004ee8 <_fflush_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	690b      	ldr	r3, [r1, #16]
 8004eec:	4605      	mov	r5, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	b913      	cbnz	r3, 8004ef8 <_fflush_r+0x10>
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	b118      	cbz	r0, 8004f02 <_fflush_r+0x1a>
 8004efa:	6983      	ldr	r3, [r0, #24]
 8004efc:	b90b      	cbnz	r3, 8004f02 <_fflush_r+0x1a>
 8004efe:	f7ff fa15 	bl	800432c <__sinit>
 8004f02:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <_fflush_r+0x6c>)
 8004f04:	429c      	cmp	r4, r3
 8004f06:	d11b      	bne.n	8004f40 <_fflush_r+0x58>
 8004f08:	686c      	ldr	r4, [r5, #4]
 8004f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ef      	beq.n	8004ef2 <_fflush_r+0xa>
 8004f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f14:	07d0      	lsls	r0, r2, #31
 8004f16:	d404      	bmi.n	8004f22 <_fflush_r+0x3a>
 8004f18:	0599      	lsls	r1, r3, #22
 8004f1a:	d402      	bmi.n	8004f22 <_fflush_r+0x3a>
 8004f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1e:	f7ff faa3 	bl	8004468 <__retarget_lock_acquire_recursive>
 8004f22:	4628      	mov	r0, r5
 8004f24:	4621      	mov	r1, r4
 8004f26:	f7ff ff59 	bl	8004ddc <__sflush_r>
 8004f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f2c:	07da      	lsls	r2, r3, #31
 8004f2e:	4605      	mov	r5, r0
 8004f30:	d4e0      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	059b      	lsls	r3, r3, #22
 8004f36:	d4dd      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f3a:	f7ff fa96 	bl	800446a <__retarget_lock_release_recursive>
 8004f3e:	e7d9      	b.n	8004ef4 <_fflush_r+0xc>
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <_fflush_r+0x70>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d101      	bne.n	8004f4a <_fflush_r+0x62>
 8004f46:	68ac      	ldr	r4, [r5, #8]
 8004f48:	e7df      	b.n	8004f0a <_fflush_r+0x22>
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <_fflush_r+0x74>)
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	bf08      	it	eq
 8004f50:	68ec      	ldreq	r4, [r5, #12]
 8004f52:	e7da      	b.n	8004f0a <_fflush_r+0x22>
 8004f54:	080051f4 	.word	0x080051f4
 8004f58:	08005214 	.word	0x08005214
 8004f5c:	080051d4 	.word	0x080051d4

08004f60 <_lseek_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	; (8004f80 <_lseek_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fb fd43 	bl	80009fa <_lseek>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_lseek_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_lseek_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	2000013c 	.word	0x2000013c

08004f84 <__swhatbuf_r>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	460e      	mov	r6, r1
 8004f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	b096      	sub	sp, #88	; 0x58
 8004f90:	4614      	mov	r4, r2
 8004f92:	461d      	mov	r5, r3
 8004f94:	da08      	bge.n	8004fa8 <__swhatbuf_r+0x24>
 8004f96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	061a      	lsls	r2, r3, #24
 8004fa0:	d410      	bmi.n	8004fc4 <__swhatbuf_r+0x40>
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	e00e      	b.n	8004fc6 <__swhatbuf_r+0x42>
 8004fa8:	466a      	mov	r2, sp
 8004faa:	f000 f8bb 	bl	8005124 <_fstat_r>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	dbf1      	blt.n	8004f96 <__swhatbuf_r+0x12>
 8004fb2:	9a01      	ldr	r2, [sp, #4]
 8004fb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fbc:	425a      	negs	r2, r3
 8004fbe:	415a      	adcs	r2, r3
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	e7ee      	b.n	8004fa2 <__swhatbuf_r+0x1e>
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	b016      	add	sp, #88	; 0x58
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fd0 <__smakebuf_r>:
 8004fd0:	898b      	ldrh	r3, [r1, #12]
 8004fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fd4:	079d      	lsls	r5, r3, #30
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	460c      	mov	r4, r1
 8004fda:	d507      	bpl.n	8004fec <__smakebuf_r+0x1c>
 8004fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	6163      	str	r3, [r4, #20]
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	ab01      	add	r3, sp, #4
 8004fee:	466a      	mov	r2, sp
 8004ff0:	f7ff ffc8 	bl	8004f84 <__swhatbuf_r>
 8004ff4:	9900      	ldr	r1, [sp, #0]
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7ff fa57 	bl	80044ac <_malloc_r>
 8004ffe:	b948      	cbnz	r0, 8005014 <__smakebuf_r+0x44>
 8005000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005004:	059a      	lsls	r2, r3, #22
 8005006:	d4ef      	bmi.n	8004fe8 <__smakebuf_r+0x18>
 8005008:	f023 0303 	bic.w	r3, r3, #3
 800500c:	f043 0302 	orr.w	r3, r3, #2
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	e7e3      	b.n	8004fdc <__smakebuf_r+0xc>
 8005014:	4b0d      	ldr	r3, [pc, #52]	; (800504c <__smakebuf_r+0x7c>)
 8005016:	62b3      	str	r3, [r6, #40]	; 0x28
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	6020      	str	r0, [r4, #0]
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	9b00      	ldr	r3, [sp, #0]
 8005024:	6163      	str	r3, [r4, #20]
 8005026:	9b01      	ldr	r3, [sp, #4]
 8005028:	6120      	str	r0, [r4, #16]
 800502a:	b15b      	cbz	r3, 8005044 <__smakebuf_r+0x74>
 800502c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005030:	4630      	mov	r0, r6
 8005032:	f000 f889 	bl	8005148 <_isatty_r>
 8005036:	b128      	cbz	r0, 8005044 <__smakebuf_r+0x74>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	89a0      	ldrh	r0, [r4, #12]
 8005046:	4305      	orrs	r5, r0
 8005048:	81a5      	strh	r5, [r4, #12]
 800504a:	e7cd      	b.n	8004fe8 <__smakebuf_r+0x18>
 800504c:	080042c5 	.word	0x080042c5

08005050 <__malloc_lock>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__malloc_lock+0x8>)
 8005052:	f7ff ba09 	b.w	8004468 <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	20000130 	.word	0x20000130

0800505c <__malloc_unlock>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__malloc_unlock+0x8>)
 800505e:	f7ff ba04 	b.w	800446a <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	20000130 	.word	0x20000130

08005068 <_free_r>:
 8005068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800506a:	2900      	cmp	r1, #0
 800506c:	d044      	beq.n	80050f8 <_free_r+0x90>
 800506e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005072:	9001      	str	r0, [sp, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f1a1 0404 	sub.w	r4, r1, #4
 800507a:	bfb8      	it	lt
 800507c:	18e4      	addlt	r4, r4, r3
 800507e:	f7ff ffe7 	bl	8005050 <__malloc_lock>
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <_free_r+0x94>)
 8005084:	9801      	ldr	r0, [sp, #4]
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	b933      	cbnz	r3, 8005098 <_free_r+0x30>
 800508a:	6063      	str	r3, [r4, #4]
 800508c:	6014      	str	r4, [r2, #0]
 800508e:	b003      	add	sp, #12
 8005090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005094:	f7ff bfe2 	b.w	800505c <__malloc_unlock>
 8005098:	42a3      	cmp	r3, r4
 800509a:	d908      	bls.n	80050ae <_free_r+0x46>
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	1961      	adds	r1, r4, r5
 80050a0:	428b      	cmp	r3, r1
 80050a2:	bf01      	itttt	eq
 80050a4:	6819      	ldreq	r1, [r3, #0]
 80050a6:	685b      	ldreq	r3, [r3, #4]
 80050a8:	1949      	addeq	r1, r1, r5
 80050aa:	6021      	streq	r1, [r4, #0]
 80050ac:	e7ed      	b.n	800508a <_free_r+0x22>
 80050ae:	461a      	mov	r2, r3
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	b10b      	cbz	r3, 80050b8 <_free_r+0x50>
 80050b4:	42a3      	cmp	r3, r4
 80050b6:	d9fa      	bls.n	80050ae <_free_r+0x46>
 80050b8:	6811      	ldr	r1, [r2, #0]
 80050ba:	1855      	adds	r5, r2, r1
 80050bc:	42a5      	cmp	r5, r4
 80050be:	d10b      	bne.n	80050d8 <_free_r+0x70>
 80050c0:	6824      	ldr	r4, [r4, #0]
 80050c2:	4421      	add	r1, r4
 80050c4:	1854      	adds	r4, r2, r1
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	6011      	str	r1, [r2, #0]
 80050ca:	d1e0      	bne.n	800508e <_free_r+0x26>
 80050cc:	681c      	ldr	r4, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	6053      	str	r3, [r2, #4]
 80050d2:	4421      	add	r1, r4
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	e7da      	b.n	800508e <_free_r+0x26>
 80050d8:	d902      	bls.n	80050e0 <_free_r+0x78>
 80050da:	230c      	movs	r3, #12
 80050dc:	6003      	str	r3, [r0, #0]
 80050de:	e7d6      	b.n	800508e <_free_r+0x26>
 80050e0:	6825      	ldr	r5, [r4, #0]
 80050e2:	1961      	adds	r1, r4, r5
 80050e4:	428b      	cmp	r3, r1
 80050e6:	bf04      	itt	eq
 80050e8:	6819      	ldreq	r1, [r3, #0]
 80050ea:	685b      	ldreq	r3, [r3, #4]
 80050ec:	6063      	str	r3, [r4, #4]
 80050ee:	bf04      	itt	eq
 80050f0:	1949      	addeq	r1, r1, r5
 80050f2:	6021      	streq	r1, [r4, #0]
 80050f4:	6054      	str	r4, [r2, #4]
 80050f6:	e7ca      	b.n	800508e <_free_r+0x26>
 80050f8:	b003      	add	sp, #12
 80050fa:	bd30      	pop	{r4, r5, pc}
 80050fc:	20000134 	.word	0x20000134

08005100 <_read_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d07      	ldr	r5, [pc, #28]	; (8005120 <_read_r+0x20>)
 8005104:	4604      	mov	r4, r0
 8005106:	4608      	mov	r0, r1
 8005108:	4611      	mov	r1, r2
 800510a:	2200      	movs	r2, #0
 800510c:	602a      	str	r2, [r5, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	f7fb fc1a 	bl	8000948 <_read>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_read_r+0x1e>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_read_r+0x1e>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	2000013c 	.word	0x2000013c

08005124 <_fstat_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	; (8005144 <_fstat_r+0x20>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	f7fb fc47 	bl	80009c4 <_fstat>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d102      	bne.n	8005140 <_fstat_r+0x1c>
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	b103      	cbz	r3, 8005140 <_fstat_r+0x1c>
 800513e:	6023      	str	r3, [r4, #0]
 8005140:	bd38      	pop	{r3, r4, r5, pc}
 8005142:	bf00      	nop
 8005144:	2000013c 	.word	0x2000013c

08005148 <_isatty_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_isatty_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fb fc46 	bl	80009e4 <_isatty>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_isatty_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_isatty_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	2000013c 	.word	0x2000013c

08005168 <_init>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr

08005174 <_fini>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr
