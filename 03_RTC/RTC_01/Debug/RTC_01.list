
RTC_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004820  08004820  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004828  08004828  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  080048a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080048a0  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7cf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e73  00000000  00000000  0002e86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  000306e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291a0  00000000  00000000  00031e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d92f  00000000  00000000  0005afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc928  00000000  00000000  000688cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001651f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  00165248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800476c 	.word	0x0800476c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800476c 	.word	0x0800476c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fb55 	bl	8000c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f820 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8d0 	bl	8000754 <MX_GPIO_Init>
  MX_RTC_Init();
 80005b4:	f000 f8a6 	bl	8000704 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80005b8:	f000 f878 	bl	80006ac <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)!= 0x32F2)
//  {
	  set_time();
 80005bc:	f000 f924 	bl	8000808 <set_time>
//  }

  set_alarm();
 80005c0:	f000 f95c 	bl	800087c <set_alarm>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_time();
 80005c4:	f000 f98c 	bl	80008e0 <get_time>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)timeString, strlen(timeString), HAL_MAX_DELAY);
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x44>)
 80005ca:	f7ff fe11 	bl	80001f0 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d6:	4904      	ldr	r1, [pc, #16]	; (80005e8 <main+0x44>)
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x48>)
 80005da:	f002 ff2b 	bl	8003434 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e2:	f000 fbad 	bl	8000d40 <HAL_Delay>
	  get_time();
 80005e6:	e7ed      	b.n	80005c4 <main+0x20>
 80005e8:	20000134 	.word	0x20000134
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fc3e 	bl	8003e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f000 feab 	bl	8001370 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 f9b0 	bl	8000984 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f000 fe86 	bl	8001334 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xb8>)
 800062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062e:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <SystemClock_Config+0xb8>)
 8000630:	f023 0318 	bic.w	r3, r3, #24
 8000634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000638:	2305      	movs	r3, #5
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	2303      	movs	r3, #3
 800064c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000652:	2314      	movs	r3, #20
 8000654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fee8 	bl	800143c <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000672:	f000 f987 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f001 faee 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800069a:	f000 f973 	bl	8000984 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3758      	adds	r7, #88	; 0x58
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_LPUART1_UART_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_LPUART1_UART_Init+0x50>)
 80006ea:	f002 fe55 	bl	8003398 <HAL_UART_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f946 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40008000 	.word	0x40008000

08000704 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_RTC_Init+0x48>)
 800070a:	4a11      	ldr	r2, [pc, #68]	; (8000750 <MX_RTC_Init+0x4c>)
 800070c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_RTC_Init+0x48>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_RTC_Init+0x48>)
 8000716:	227f      	movs	r2, #127	; 0x7f
 8000718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_RTC_Init+0x48>)
 800071c:	22ff      	movs	r2, #255	; 0xff
 800071e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_RTC_Init+0x48>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_RTC_Init+0x48>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_RTC_Init+0x48>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_RTC_Init+0x48>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_RTC_Init+0x48>)
 800073a:	f002 f987 	bl	8002a4c <HAL_RTC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000744:	f000 f91e 	bl	8000984 <Error_Handler>
  }

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000110 	.word	0x20000110
 8000750:	40002800 	.word	0x40002800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_GPIO_Init+0xac>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a24      	ldr	r2, [pc, #144]	; (8000800 <MX_GPIO_Init+0xac>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_GPIO_Init+0xac>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xac>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0xac>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0xac>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0xac>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_GPIO_Init+0xac>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_GPIO_Init+0xac>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_GPIO_Init+0xac>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_GPIO_Init+0xac>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_GPIO_Init+0xac>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007ca:	f000 fe27 	bl	800141c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0xb0>)
 80007d6:	f000 fd7b 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 80007da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0xb0>)
 80007f4:	f000 fbda 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	48000400 	.word	0x48000400

08000808 <set_time>:

/* USER CODE BEGIN 4 */

void set_time(void)
 {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = { 0 };
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x15;
 8000820:	2315      	movs	r3, #21
 8000822:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x28;
 8000824:	2328      	movs	r3, #40	; 0x28
 8000826:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x00;
 8000828:	2300      	movs	r3, #0
 800082a:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2201      	movs	r2, #1
 8000838:	4619      	mov	r1, r3
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <set_time+0x70>)
 800083c:	f002 f981 	bl	8002b42 <HAL_RTC_SetTime>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <set_time+0x42>
		Error_Handler();
 8000846:	f000 f89d 	bl	8000984 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800084a:	2302      	movs	r3, #2
 800084c:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_MAY;
 800084e:	2305      	movs	r3, #5
 8000850:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x14;
 8000852:	2314      	movs	r3, #20
 8000854:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x24;
 8000856:	2324      	movs	r3, #36	; 0x24
 8000858:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800085a:	463b      	mov	r3, r7
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <set_time+0x70>)
 8000862:	f002 fa67 	bl	8002d34 <HAL_RTC_SetDate>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <set_time+0x68>
		Error_Handler();
 800086c:	f000 f88a 	bl	8000984 <Error_Handler>
	/* USER CODE BEGIN Check_RTC_BKUP */

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);

	/* USER CODE END Check_RTC_BKUP */
}
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000110 	.word	0x20000110

0800087c <set_alarm>:

void set_alarm(void)
 {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm = { 0 };
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	222c      	movs	r2, #44	; 0x2c
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f003 faf9 	bl	8003e80 <memset>
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x15;
 800088e:	2315      	movs	r3, #21
 8000890:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x28;
 8000892:	2328      	movs	r3, #40	; 0x28
 8000894:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x30;
 8000896:	2330      	movs	r3, #48	; 0x30
 8000898:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x14;
 80008b2:	2314      	movs	r3, #20
 80008b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 80008b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2201      	movs	r2, #1
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <set_alarm+0x60>)
 80008c6:	f002 fb09 	bl	8002edc <HAL_RTC_SetAlarm_IT>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <set_alarm+0x58>
		Error_Handler();
 80008d0:	f000 f858 	bl	8000984 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000110 	.word	0x20000110

080008e0 <get_time>:

void get_time(void)
 {
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af04      	add	r7, sp, #16
	RTC_DateTypeDef gDate = { 0 };
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef gTime = { 0 };
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <get_time+0x68>)
 8000900:	f002 f9bc 	bl	8002c7c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	480e      	ldr	r0, [pc, #56]	; (8000948 <get_time+0x68>)
 800090e:	f002 fa98 	bl	8002e42 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
//	sprintf((char*) time, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
	/* Display date Format: dd-mm-yy */
//	sprintf((char*) date, "%02d-%02d-%2d", gDate.Date, gDate.Month, 2000 + gDate.Year);

	sprintf((char *) timeString, "%02d:%02d:%02d-%02d-%02d-%2d\r\n", gTime.Hours, gTime.Minutes, gTime.Seconds, gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000912:	783b      	ldrb	r3, [r7, #0]
 8000914:	461c      	mov	r4, r3
 8000916:	787b      	ldrb	r3, [r7, #1]
 8000918:	461d      	mov	r5, r3
 800091a:	78bb      	ldrb	r3, [r7, #2]
 800091c:	461a      	mov	r2, r3
 800091e:	7dbb      	ldrb	r3, [r7, #22]
 8000920:	4619      	mov	r1, r3
 8000922:	7d7b      	ldrb	r3, [r7, #21]
 8000924:	4618      	mov	r0, r3
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800092c:	9303      	str	r3, [sp, #12]
 800092e:	9002      	str	r0, [sp, #8]
 8000930:	9101      	str	r1, [sp, #4]
 8000932:	9200      	str	r2, [sp, #0]
 8000934:	462b      	mov	r3, r5
 8000936:	4622      	mov	r2, r4
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <get_time+0x6c>)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <get_time+0x70>)
 800093c:	f003 faa8 	bl	8003e90 <siprintf>
}
 8000940:	bf00      	nop
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bdb0      	pop	{r4, r5, r7, pc}
 8000948:	20000110 	.word	0x20000110
 800094c:	08004784 	.word	0x08004784
 8000950:	20000134 	.word	0x20000134

08000954 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	alarm = 1;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <HAL_RTC_AlarmAEventCallback+0x28>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 8000962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8000968:	f000 fcca 	bl	8001300 <HAL_GPIO_TogglePin>
	HAL_Delay(3000);
 800096c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000970:	f000 f9e6 	bl	8000d40 <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000148 	.word	0x20000148
 8000980:	48000400 	.word	0x48000400

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_MspInit+0x44>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x44>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x44>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x44>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0ac      	sub	sp, #176	; 0xb0
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	228c      	movs	r2, #140	; 0x8c
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fa41 	bl	8003e80 <memset>
  if(huart->Instance==LPUART1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d13d      	bne.n	8000a84 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fb4f 	bl	80020b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f7ff ffb0 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_UART_MspInit+0xb8>)
 8000a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0xb8>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0xb8>)
 8000a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_UART_MspInit+0xb8>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_UART_MspInit+0xb8>)
 8000a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_UART_MspInit+0xb8>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000a54:	f000 fce2 	bl	800141c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000a58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a72:	2308      	movs	r3, #8
 8000a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_UART_MspInit+0xbc>)
 8000a80:	f000 fa94 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	; 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40008000 	.word	0x40008000
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48001800 	.word	0x48001800

08000a98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0a6      	sub	sp, #152	; 0x98
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	228c      	movs	r2, #140	; 0x8c
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 f9e9 	bl	8003e80 <memset>
  if(hrtc->Instance==RTC)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_RTC_MspInit+0x6c>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d120      	bne.n	8000afa <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000abc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 faf4 	bl	80020b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ad6:	f7ff ff55 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_RTC_MspInit+0x70>)
 8000adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ae0:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <HAL_RTC_MspInit+0x70>)
 8000ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2029      	movs	r0, #41	; 0x29
 8000af0:	f000 fa25 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000af4:	2029      	movs	r0, #41	; 0x29
 8000af6:	f000 fa3e 	bl	8000f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3798      	adds	r7, #152	; 0x98
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40002800 	.word	0x40002800
 8000b08:	40021000 	.word	0x40021000

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8d2 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <RTC_Alarm_IRQHandler+0x10>)
 8000b66:	f002 faf5 	bl	8003154 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000110 	.word	0x20000110

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f003 f942 	bl	8003e2c <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20050000 	.word	0x20050000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	2000014c 	.word	0x2000014c
 8000bdc:	20000168 	.word	0x20000168

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f003 f901 	bl	8003e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fcb5 	bl	80005a4 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c48:	08004830 	.word	0x08004830
  ldr r2, =_sbss
 8000c4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c50:	20000164 	.word	0x20000164

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>

08000c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f961 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f80e 	bl	8000c88 <HAL_InitTick>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff fe8a 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_InitTick+0x6c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d023      	beq.n	8000ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_InitTick+0x70>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_InitTick+0x6c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f96d 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10f      	bne.n	8000cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d809      	bhi.n	8000cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 f937 	bl	8000f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_InitTick+0x74>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e004      	b.n	8000ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e001      	b.n	8000ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000150 	.word	0x20000150

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000150 	.word	0x20000150

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff ffee 	bl	8000d28 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffde 	bl	8000d28 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	; (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff3e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff31 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e166      	b.n	800128a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8158 	beq.w	8001284 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x40>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d017      	beq.n	800108a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0203 	and.w	r2, r3, #3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80b2 	beq.w	8001284 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001124:	4a60      	ldr	r2, [pc, #384]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6613      	str	r3, [r2, #96]	; 0x60
 800112c:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001138:	4a5c      	ldr	r2, [pc, #368]	; (80012ac <HAL_GPIO_Init+0x300>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d02b      	beq.n	80011bc <HAL_GPIO_Init+0x210>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d025      	beq.n	80011b8 <HAL_GPIO_Init+0x20c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_GPIO_Init+0x308>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d01f      	beq.n	80011b4 <HAL_GPIO_Init+0x208>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_GPIO_Init+0x30c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d019      	beq.n	80011b0 <HAL_GPIO_Init+0x204>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_GPIO_Init+0x310>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d013      	beq.n	80011ac <HAL_GPIO_Init+0x200>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x314>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_GPIO_Init+0x1fc>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x318>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <HAL_GPIO_Init+0x1f8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x31c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <HAL_GPIO_Init+0x1f4>
 800119c:	2307      	movs	r3, #7
 800119e:	e00e      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011a0:	2308      	movs	r3, #8
 80011a2:	e00c      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011a4:	2306      	movs	r3, #6
 80011a6:	e00a      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011a8:	2305      	movs	r3, #5
 80011aa:	e008      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011b0:	2303      	movs	r3, #3
 80011b2:	e004      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e002      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_GPIO_Init+0x212>
 80011bc:	2300      	movs	r3, #0
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4093      	lsls	r3, r2
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ce:	4937      	ldr	r1, [pc, #220]	; (80012ac <HAL_GPIO_Init+0x300>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011dc:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_GPIO_Init+0x320>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001200:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122a:	4a28      	ldr	r2, [pc, #160]	; (80012cc <HAL_GPIO_Init+0x320>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001254:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_GPIO_Init+0x320>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_GPIO_Init+0x320>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	f47f ae91 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	371c      	adds	r7, #28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	48001000 	.word	0x48001000
 80012c0:	48001400 	.word	0x48001400
 80012c4:	48001800 	.word	0x48001800
 80012c8:	48001c00 	.word	0x48001c00
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4013      	ands	r3, r2
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43d9      	mvns	r1, r3
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	400b      	ands	r3, r1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40007000 	.word	0x40007000

08001354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_PWREx_GetVoltageRange+0x18>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40007000 	.word	0x40007000

08001370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137e:	d130      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800138c:	d038      	beq.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2232      	movs	r2, #50	; 0x32
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b4:	e002      	b.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c8:	d102      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f2      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013dc:	d110      	bne.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e00f      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d007      	beq.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f8:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000
 8001414:	20000000 	.word	0x20000000
 8001418:	431bde83 	.word	0x431bde83

0800141c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142a:	6053      	str	r3, [r2, #4]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f000 bc08 	b.w	8001c60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145a:	4b94      	ldr	r3, [pc, #592]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80e4 	beq.w	800163a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <HAL_RCC_OscConfig+0x4c>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	f040 808b 	bne.w	8001596 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b01      	cmp	r3, #1
 8001484:	f040 8087 	bne.w	8001596 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001488:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x64>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e3df      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1a      	ldr	r2, [r3, #32]
 80014a4:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <HAL_RCC_OscConfig+0x7e>
 80014b0:	4b7e      	ldr	r3, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b8:	e005      	b.n	80014c6 <HAL_RCC_OscConfig+0x8a>
 80014ba:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d223      	bcs.n	8001512 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fd92 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e3c0      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a72      	ldr	r2, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b70      	ldr	r3, [pc, #448]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	496d      	ldr	r1, [pc, #436]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fc:	4b6b      	ldr	r3, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	4968      	ldr	r1, [pc, #416]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
 8001510:	e025      	b.n	800155e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001512:	4b66      	ldr	r3, [pc, #408]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a65      	ldr	r2, [pc, #404]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4960      	ldr	r1, [pc, #384]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001530:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	495b      	ldr	r1, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fd52 	bl	8001ff8 <RCC_SetFlashLatencyFromMSIRange>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e380      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800155e:	f000 fc87 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001562:	4602      	mov	r2, r0
 8001564:	4b51      	ldr	r3, [pc, #324]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	4950      	ldr	r1, [pc, #320]	; (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	fa22 f303 	lsr.w	r3, r2, r3
 800157a:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_RCC_OscConfig+0x278>)
 800157c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800157e:	4b4e      	ldr	r3, [pc, #312]	; (80016b8 <HAL_RCC_OscConfig+0x27c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb80 	bl	8000c88 <HAL_InitTick>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d052      	beq.n	8001638 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	e364      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d032      	beq.n	8001604 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a42      	ldr	r2, [pc, #264]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fbbd 	bl	8000d28 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b2:	f7ff fbb9 	bl	8000d28 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e34d      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a35      	ldr	r2, [pc, #212]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4930      	ldr	r1, [pc, #192]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	492b      	ldr	r1, [pc, #172]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
 8001602:	e01a      	b.n	800163a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001610:	f7ff fb8a 	bl	8000d28 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001618:	f7ff fb86 	bl	8000d28 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e31a      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x1dc>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d073      	beq.n	800172e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b08      	cmp	r3, #8
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x21c>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d10e      	bne.n	8001670 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d063      	beq.n	800172c <HAL_RCC_OscConfig+0x2f0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d15f      	bne.n	800172c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e2f7      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x24c>
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e025      	b.n	80016d4 <HAL_RCC_OscConfig+0x298>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001690:	d114      	bne.n	80016bc <HAL_RCC_OscConfig+0x280>
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a02      	ldr	r2, [pc, #8]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e013      	b.n	80016d4 <HAL_RCC_OscConfig+0x298>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	080047a4 	.word	0x080047a4
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004
 80016bc:	4ba0      	ldr	r3, [pc, #640]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a9f      	ldr	r2, [pc, #636]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b9d      	ldr	r3, [pc, #628]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a9c      	ldr	r2, [pc, #624]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb24 	bl	8000d28 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb20 	bl	8000d28 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e2b4      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f6:	4b92      	ldr	r3, [pc, #584]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x2a8>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fb10 	bl	8000d28 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fb0c 	bl	8000d28 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e2a0      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x2d0>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d060      	beq.n	80017fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x310>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d119      	bne.n	800177a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d116      	bne.n	800177a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174c:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x328>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e27d      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b76      	ldr	r3, [pc, #472]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4973      	ldr	r1, [pc, #460]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001778:	e040      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d023      	beq.n	80017ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001782:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff facb 	bl	8000d28 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fac7 	bl	8000d28 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e25b      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a8:	4b65      	ldr	r3, [pc, #404]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b62      	ldr	r3, [pc, #392]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	495f      	ldr	r1, [pc, #380]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
 80017c8:	e018      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ca:	4b5d      	ldr	r3, [pc, #372]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5c      	ldr	r2, [pc, #368]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80017d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff faa7 	bl	8000d28 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff faa3 	bl	8000d28 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e237      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f0:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03c      	beq.n	8001882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01c      	beq.n	800184a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001816:	4a4a      	ldr	r2, [pc, #296]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fa82 	bl	8000d28 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fa7e 	bl	8000d28 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e212      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ef      	beq.n	8001828 <HAL_RCC_OscConfig+0x3ec>
 8001848:	e01b      	b.n	8001882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 800184c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001850:	4a3b      	ldr	r2, [pc, #236]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fa65 	bl	8000d28 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fa61 	bl	8000d28 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1f5      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ef      	bne.n	8001862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80a6 	beq.w	80019dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10d      	bne.n	80018bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6593      	str	r3, [r2, #88]	; 0x58
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b8:	2301      	movs	r3, #1
 80018ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x508>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d118      	bne.n	80018fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCC_OscConfig+0x508>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x508>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fa28 	bl	8000d28 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018dc:	f7ff fa24 	bl	8000d28 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1b8      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_RCC_OscConfig+0x508>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d108      	bne.n	8001914 <HAL_RCC_OscConfig+0x4d8>
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001912:	e029      	b.n	8001968 <HAL_RCC_OscConfig+0x52c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d115      	bne.n	8001948 <HAL_RCC_OscConfig+0x50c>
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a03      	ldr	r2, [pc, #12]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	e014      	b.n	8001968 <HAL_RCC_OscConfig+0x52c>
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	40007000 	.word	0x40007000
 8001948:	4b9d      	ldr	r3, [pc, #628]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	4a9c      	ldr	r2, [pc, #624]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001958:	4b99      	ldr	r3, [pc, #612]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	4a98      	ldr	r2, [pc, #608]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff f9da 	bl	8000d28 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff f9d6 	bl	8000d28 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f241 3288 	movw	r2, #5000	; 0x1388
 8001986:	4293      	cmp	r3, r2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e168      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198e:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ed      	beq.n	8001978 <HAL_RCC_OscConfig+0x53c>
 800199c:	e015      	b.n	80019ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f9c3 	bl	8000d28 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f9bf 	bl	8000d28 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e151      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019bc:	4b80      	ldr	r3, [pc, #512]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1ed      	bne.n	80019a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	4a7a      	ldr	r2, [pc, #488]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 80019d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d03c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f0:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 80019f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f6:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f992 	bl	8000d28 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a08:	f7ff f98e 	bl	8000d28 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e122      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a1a:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ef      	beq.n	8001a08 <HAL_RCC_OscConfig+0x5cc>
 8001a28:	e01b      	b.n	8001a62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a2a:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a30:	4a63      	ldr	r2, [pc, #396]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f975 	bl	8000d28 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a42:	f7ff f971 	bl	8000d28 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e105      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a54:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ef      	bne.n	8001a42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80f9 	beq.w	8001c5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	f040 80cf 	bne.w	8001c14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a76:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0203 	and.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d12c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	3b01      	subs	r3, #1
 8001a96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d123      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d113      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d109      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	3b01      	subs	r3, #1
 8001ade:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d071      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d068      	beq.n	8001bbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001aea:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001af6:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0ac      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b12:	f7ff f909 	bl	8000d28 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff f905 	bl	8000d28 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e099      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <HAL_RCC_OscConfig+0x788>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b52:	0212      	lsls	r2, r2, #8
 8001b54:	4311      	orrs	r1, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b5a:	0852      	lsrs	r2, r2, #1
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	0552      	lsls	r2, r2, #21
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b66:	0852      	lsrs	r2, r2, #1
 8001b68:	3a01      	subs	r2, #1
 8001b6a:	0652      	lsls	r2, r2, #25
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b72:	06d2      	lsls	r2, r2, #27
 8001b74:	430a      	orrs	r2, r1
 8001b76:	4912      	ldr	r1, [pc, #72]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b94:	f7ff f8c8 	bl	8000d28 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f8c4 	bl	8000d28 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e058      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_RCC_OscConfig+0x784>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bba:	e050      	b.n	8001c5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e04f      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d144      	bne.n	8001c5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bec:	f7ff f89c 	bl	8000d28 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f898 	bl	8000d28 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e02c      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x7b8>
 8001c12:	e024      	b.n	8001c5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d01f      	beq.n	8001c5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f87f 	bl	8000d28 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f87b 	bl	8000d28 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	4905      	ldr	r1, [pc, #20]	; (8001c68 <HAL_RCC_OscConfig+0x82c>)
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_RCC_OscConfig+0x830>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
 8001c58:	e001      	b.n	8001c5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	feeefffc 	.word	0xfeeefffc

08001c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0e7      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d910      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4970      	ldr	r1, [pc, #448]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b6e      	ldr	r3, [pc, #440]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0cf      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	4b66      	ldr	r3, [pc, #408]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d908      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4960      	ldr	r1, [pc, #384]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d04c      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d121      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0a6      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0e:	4b54      	ldr	r3, [pc, #336]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d115      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e09a      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d26:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e08e      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d36:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e086      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4943      	ldr	r1, [pc, #268]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d58:	f7fe ffe6 	bl	8000d28 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7fe ffe2 	bl	8000d28 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e06e      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d208      	bcs.n	8001db6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	492b      	ldr	r1, [pc, #172]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d210      	bcs.n	8001de6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0207 	bic.w	r2, r3, #7
 8001dcc:	4923      	ldr	r1, [pc, #140]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e036      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	4918      	ldr	r1, [pc, #96]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4910      	ldr	r1, [pc, #64]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e24:	f000 f824 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	490b      	ldr	r1, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x1f4>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x1fc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff1d 	bl	8000c88 <HAL_InitTick>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e52:	7afb      	ldrb	r3, [r7, #11]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	080047a4 	.word	0x080047a4
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e88:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d121      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d11e      	bne.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea4:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e005      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d102      	bne.n	8001eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	e004      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef4:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d134      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d003      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0xac>
 8001f14:	e005      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f18:	617b      	str	r3, [r7, #20]
      break;
 8001f1a:	e005      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f1e:	617b      	str	r3, [r7, #20]
      break;
 8001f20:	e002      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	617b      	str	r3, [r7, #20]
      break;
 8001f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	3301      	adds	r3, #1
 8001f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	fb03 f202 	mul.w	r2, r3, r2
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	0e5b      	lsrs	r3, r3, #25
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f68:	69bb      	ldr	r3, [r7, #24]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	080047bc 	.word	0x080047bc
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	007a1200 	.word	0x007a1200

08001f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4904      	ldr	r1, [pc, #16]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	080047b4 	.word	0x080047b4

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fd0:	f7ff ffda 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0adb      	lsrs	r3, r3, #11
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4904      	ldr	r1, [pc, #16]	; (8001ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	080047b4 	.word	0x080047b4

08001ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002010:	f7ff f9a0 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 8002014:	6178      	str	r0, [r7, #20]
 8002016:	e014      	b.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002030:	f7ff f990 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 8002034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002048:	d10b      	bne.n	8002062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d919      	bls.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2ba0      	cmp	r3, #160	; 0xa0
 8002054:	d902      	bls.n	800205c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	e013      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800205c:	2301      	movs	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	e010      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b80      	cmp	r3, #128	; 0x80
 8002066:	d902      	bls.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002068:	2303      	movs	r3, #3
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e00a      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d102      	bne.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002074:	2302      	movs	r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e004      	b.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b70      	cmp	r3, #112	; 0x70
 800207e:	d101      	bne.n	8002084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 0207 	bic.w	r2, r3, #7
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020c0:	2300      	movs	r3, #0
 80020c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020c4:	2300      	movs	r3, #0
 80020c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d041      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020dc:	d02a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020e2:	d824      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020e8:	d008      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020ee:	d81e      	bhi.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f8:	d010      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020fa:	e018      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020fc:	4b86      	ldr	r3, [pc, #536]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a85      	ldr	r2, [pc, #532]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002108:	e015      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f000 facd 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002116:	4603      	mov	r3, r0
 8002118:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800211a:	e00c      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3320      	adds	r3, #32
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fbb6 	bl	8002894 <RCCEx_PLLSAI2_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800212c:	e003      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	74fb      	strb	r3, [r7, #19]
      break;
 8002132:	e000      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800213c:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214a:	4973      	ldr	r1, [pc, #460]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002152:	e001      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d041      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800216c:	d02a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800216e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002172:	d824      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800217a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800217e:	d81e      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002188:	d010      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800218a:	e018      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800218c:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a61      	ldr	r2, [pc, #388]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002198:	e015      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fa85 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021aa:	e00c      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3320      	adds	r3, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fb6e 	bl	8002894 <RCCEx_PLLSAI2_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021bc:	e003      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	74fb      	strb	r3, [r7, #19]
      break;
 80021c2:	e000      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021cc:	4b52      	ldr	r3, [pc, #328]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021da:	494f      	ldr	r1, [pc, #316]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e2:	e001      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a0 	beq.w	8002336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800220a:	2300      	movs	r3, #0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002210:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	4a40      	ldr	r2, [pc, #256]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002228:	2301      	movs	r3, #1
 800222a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a3a      	ldr	r2, [pc, #232]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002238:	f7fe fd76 	bl	8000d28 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800223e:	e009      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002240:	f7fe fd72 	bl	8000d28 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d902      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	74fb      	strb	r3, [r7, #19]
        break;
 8002252:	e005      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ef      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d15c      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01f      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d019      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002290:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a20      	ldr	r2, [pc, #128]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d016      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7fe fd31 	bl	8000d28 <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c8:	e00b      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fd2d 	bl	8000d28 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d902      	bls.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	74fb      	strb	r3, [r7, #19]
            break;
 80022e0:	e006      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ec      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	4904      	ldr	r1, [pc, #16]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800230e:	e009      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
 8002314:	e006      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002324:	7c7b      	ldrb	r3, [r7, #17]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4ba6      	ldr	r3, [pc, #664]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	4aa5      	ldr	r2, [pc, #660]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002342:	4ba0      	ldr	r3, [pc, #640]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f023 0203 	bic.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	499c      	ldr	r1, [pc, #624]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002364:	4b97      	ldr	r3, [pc, #604]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 020c 	bic.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	4994      	ldr	r1, [pc, #592]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002386:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	498b      	ldr	r1, [pc, #556]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a8:	4b86      	ldr	r3, [pc, #536]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4983      	ldr	r1, [pc, #524]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ca:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d8:	497a      	ldr	r1, [pc, #488]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ec:	4b75      	ldr	r3, [pc, #468]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4972      	ldr	r1, [pc, #456]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800240e:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	4969      	ldr	r1, [pc, #420]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002430:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243e:	4961      	ldr	r1, [pc, #388]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002452:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002460:	4958      	ldr	r1, [pc, #352]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	4950      	ldr	r1, [pc, #320]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002496:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4947      	ldr	r1, [pc, #284]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	493f      	ldr	r1, [pc, #252]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d028      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024da:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4936      	ldr	r1, [pc, #216]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f8:	d106      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002504:	60d3      	str	r3, [r2, #12]
 8002506:	e011      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	2101      	movs	r1, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f8c9 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d028      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	491f      	ldr	r1, [pc, #124]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002556:	d106      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002562:	60d3      	str	r3, [r2, #12]
 8002564:	e011      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800256e:	d10c      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f89a 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d02a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b4:	d108      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b6:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4a02      	ldr	r2, [pc, #8]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c0:	60d3      	str	r3, [r2, #12]
 80025c2:	e013      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x534>
 80025c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2101      	movs	r1, #1
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 f869 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02f      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f8:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002606:	4929      	ldr	r1, [pc, #164]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002616:	d10d      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f846 	bl	80026b0 <RCCEx_PLLSAI1_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d014      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	74bb      	strb	r3, [r7, #18]
 8002632:	e011      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3320      	adds	r3, #32
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f925 	bl	8002894 <RCCEx_PLLSAI2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002674:	490d      	ldr	r1, [pc, #52]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002698:	4904      	ldr	r1, [pc, #16]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000

080026b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026be:	4b74      	ldr	r3, [pc, #464]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ca:	4b71      	ldr	r3, [pc, #452]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0203 	and.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d10d      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
       ||
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026e2:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
       ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d047      	beq.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e044      	b.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d018      	beq.n	8002736 <RCCEx_PLLSAI1_Config+0x86>
 8002704:	2b03      	cmp	r3, #3
 8002706:	d825      	bhi.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
 8002708:	2b01      	cmp	r3, #1
 800270a:	d002      	beq.n	8002712 <RCCEx_PLLSAI1_Config+0x62>
 800270c:	2b02      	cmp	r3, #2
 800270e:	d009      	beq.n	8002724 <RCCEx_PLLSAI1_Config+0x74>
 8002710:	e020      	b.n	8002754 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11d      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002722:	e01a      	b.n	800275a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002724:	4b5a      	ldr	r3, [pc, #360]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002734:	e013      	b.n	800275e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002752:	e006      	b.n	8002762 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e004      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275a:	bf00      	nop
 800275c:	e002      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002762:	bf00      	nop
    }

    if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	430b      	orrs	r3, r1
 8002780:	4943      	ldr	r1, [pc, #268]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d17c      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002798:	f7fe fac6 	bl	8000d28 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a0:	f7fe fac2 	bl	8000d28 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
        break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ef      	bne.n	80027a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d15f      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d110      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6892      	ldr	r2, [r2, #8]
 80027dc:	0211      	lsls	r1, r2, #8
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68d2      	ldr	r2, [r2, #12]
 80027e2:	06d2      	lsls	r2, r2, #27
 80027e4:	430a      	orrs	r2, r1
 80027e6:	492a      	ldr	r1, [pc, #168]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	610b      	str	r3, [r1, #16]
 80027ec:	e027      	b.n	800283e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d112      	bne.n	800281a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	0211      	lsls	r1, r2, #8
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6912      	ldr	r2, [r2, #16]
 800280a:	0852      	lsrs	r2, r2, #1
 800280c:	3a01      	subs	r2, #1
 800280e:	0552      	lsls	r2, r2, #21
 8002810:	430a      	orrs	r2, r1
 8002812:	491f      	ldr	r1, [pc, #124]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	610b      	str	r3, [r1, #16]
 8002818:	e011      	b.n	800283e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002822:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6892      	ldr	r2, [r2, #8]
 800282a:	0211      	lsls	r1, r2, #8
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6952      	ldr	r2, [r2, #20]
 8002830:	0852      	lsrs	r2, r2, #1
 8002832:	3a01      	subs	r2, #1
 8002834:	0652      	lsls	r2, r2, #25
 8002836:	430a      	orrs	r2, r1
 8002838:	4915      	ldr	r1, [pc, #84]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283a:	4313      	orrs	r3, r2
 800283c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002848:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fe fa6d 	bl	8000d28 <HAL_GetTick>
 800284e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002850:	e009      	b.n	8002866 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002852:	f7fe fa69 	bl	8000d28 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	73fb      	strb	r3, [r7, #15]
          break;
 8002864:	e005      	b.n	8002872 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ef      	beq.n	8002852 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000

08002894 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028a2:	4b69      	ldr	r3, [pc, #420]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d018      	beq.n	80028e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d10d      	bne.n	80028da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
       ||
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028c6:	4b60      	ldr	r3, [pc, #384]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
       ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d047      	beq.n	800296a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	e044      	b.n	800296a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d018      	beq.n	800291a <RCCEx_PLLSAI2_Config+0x86>
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d825      	bhi.n	8002938 <RCCEx_PLLSAI2_Config+0xa4>
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d002      	beq.n	80028f6 <RCCEx_PLLSAI2_Config+0x62>
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d009      	beq.n	8002908 <RCCEx_PLLSAI2_Config+0x74>
 80028f4:	e020      	b.n	8002938 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028f6:	4b54      	ldr	r3, [pc, #336]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d11d      	bne.n	800293e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002906:	e01a      	b.n	800293e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002918:	e013      	b.n	8002942 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800291a:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002926:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002936:	e006      	b.n	8002946 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e004      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002946:	bf00      	nop
    }

    if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	430b      	orrs	r3, r1
 8002964:	4938      	ldr	r1, [pc, #224]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d166      	bne.n	8002a3e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002970:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297c:	f7fe f9d4 	bl	8000d28 <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002982:	e009      	b.n	8002998 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002984:	f7fe f9d0 	bl	8000d28 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d902      	bls.n	8002998 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	73fb      	strb	r3, [r7, #15]
        break;
 8002996:	e005      	b.n	80029a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ef      	bne.n	8002984 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d149      	bne.n	8002a3e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d110      	bne.n	80029d2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029b0:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	0211      	lsls	r1, r2, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	06d2      	lsls	r2, r2, #27
 80029c8:	430a      	orrs	r2, r1
 80029ca:	491f      	ldr	r1, [pc, #124]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	614b      	str	r3, [r1, #20]
 80029d0:	e011      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	0211      	lsls	r1, r2, #8
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6912      	ldr	r2, [r2, #16]
 80029e8:	0852      	lsrs	r2, r2, #1
 80029ea:	3a01      	subs	r2, #1
 80029ec:	0652      	lsls	r2, r2, #25
 80029ee:	430a      	orrs	r2, r1
 80029f0:	4915      	ldr	r1, [pc, #84]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe f991 	bl	8000d28 <HAL_GetTick>
 8002a06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a08:	e009      	b.n	8002a1e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a0a:	f7fe f98d 	bl	8000d28 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d902      	bls.n	8002a1e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	73fb      	strb	r3, [r7, #15]
          break;
 8002a1c:	e005      	b.n	8002a2a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ef      	beq.n	8002a0a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06c      	beq.n	8002b38 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe f810 	bl	8000a98 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	22ca      	movs	r2, #202	; 0xca
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2253      	movs	r2, #83	; 0x53
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fbcb 	bl	800322c <RTC_EnterInitMode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d14b      	bne.n	8002b38 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6899      	ldr	r1, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68d2      	ldr	r2, [r2, #12]
 8002ada:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6919      	ldr	r1, [r3, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	041a      	lsls	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fbcf 	bl	8003294 <RTC_ExitInitMode>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d11b      	bne.n	8002b38 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0203 	bic.w	r2, r2, #3
 8002b0e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b42:	b590      	push	{r4, r7, lr}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_RTC_SetTime+0x1a>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e08b      	b.n	8002c74 <HAL_RTC_SetTime+0x132>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	22ca      	movs	r2, #202	; 0xca
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2253      	movs	r2, #83	; 0x53
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fb55 	bl	800322c <RTC_EnterInitMode>
 8002b82:	4603      	mov	r3, r0
 8002b84:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d163      	bne.n	8002c54 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d126      	bne.n	8002be0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fbb0 	bl	8003310 <RTC_ByteToBcd2>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fba9 	bl	8003310 <RTC_ByteToBcd2>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bc2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fba1 	bl	8003310 <RTC_ByteToBcd2>
 8002bce:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bd0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	78db      	ldrb	r3, [r3, #3]
 8002bd8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e018      	b.n	8002c12 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c00:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c06:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	78db      	ldrb	r3, [r3, #3]
 8002c0c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002c1c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c20:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fb22 	bl	8003294 <RTC_ExitInitMode>
 8002c50:	4603      	mov	r3, r0
 8002c52:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}

08002c7c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002caa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	0d9b      	lsrs	r3, r3, #22
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11a      	bne.n	8002d2a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fb29 	bl	8003350 <RTC_Bcd2ToByte>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fb20 	bl	8003350 <RTC_Bcd2ToByte>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	789b      	ldrb	r3, [r3, #2]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fb17 	bl	8003350 <RTC_Bcd2ToByte>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_RTC_SetDate+0x1a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e075      	b.n	8002e3a <HAL_RTC_SetDate+0x106>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10e      	bne.n	8002d82 <HAL_RTC_SetDate+0x4e>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	785b      	ldrb	r3, [r3, #1]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	785b      	ldrb	r3, [r3, #1]
 8002d74:	f023 0310 	bic.w	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	330a      	adds	r3, #10
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11c      	bne.n	8002dc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	78db      	ldrb	r3, [r3, #3]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fabf 	bl	8003310 <RTC_ByteToBcd2>
 8002d92:	4603      	mov	r3, r0
 8002d94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fab8 	bl	8003310 <RTC_ByteToBcd2>
 8002da0:	4603      	mov	r3, r0
 8002da2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002da4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	789b      	ldrb	r3, [r3, #2]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fab0 	bl	8003310 <RTC_ByteToBcd2>
 8002db0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002db2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e00e      	b.n	8002de0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	78db      	ldrb	r3, [r3, #3]
 8002dc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002dce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002dd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	22ca      	movs	r2, #202	; 0xca
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2253      	movs	r2, #83	; 0x53
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fa1b 	bl	800322c <RTC_EnterInitMode>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e0e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fa3f 	bl	8003294 <RTC_ExitInitMode>
 8002e16:	4603      	mov	r3, r0
 8002e18:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	22ff      	movs	r2, #255	; 0xff
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}

08002e42 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	0b5b      	lsrs	r3, r3, #13
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11a      	bne.n	8002ed2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	78db      	ldrb	r3, [r3, #3]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fa55 	bl	8003350 <RTC_Bcd2ToByte>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fa4c 	bl	8003350 <RTC_Bcd2ToByte>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	789b      	ldrb	r3, [r3, #2]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fa43 	bl	8003350 <RTC_Bcd2ToByte>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RTC_SetAlarm_IT+0x1a>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e127      	b.n	8003146 <HAL_RTC_SetAlarm_IT+0x26a>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d137      	bne.n	8002f7c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f9f3 	bl	8003310 <RTC_ByteToBcd2>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f9ec 	bl	8003310 <RTC_ByteToBcd2>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f3c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	789b      	ldrb	r3, [r3, #2]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f9e4 	bl	8003310 <RTC_ByteToBcd2>
 8002f48:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f4a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	78db      	ldrb	r3, [r3, #3]
 8002f52:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f54:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f9d6 	bl	8003310 <RTC_ByteToBcd2>
 8002f64:	4603      	mov	r3, r0
 8002f66:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002f68:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002f70:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e023      	b.n	8002fc4 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f9c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002fa2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002faa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002fb4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002fba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	22ca      	movs	r2, #202	; 0xca
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2253      	movs	r2, #83	; 0x53
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe8:	d14a      	bne.n	8003080 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800300a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800300c:	f7fd fe8c 	bl	8000d28 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003012:	e015      	b.n	8003040 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003014:	f7fd fe88 	bl	8000d28 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003022:	d90d      	bls.n	8003040 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2203      	movs	r2, #3
 8003030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e082      	b.n	8003146 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0e2      	beq.n	8003014 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800306c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	e049      	b.n	8003114 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800308e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f462 7220 	orn	r2, r2, #640	; 0x280
 80030a0:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80030a2:	f7fd fe41 	bl	8000d28 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80030a8:	e015      	b.n	80030d6 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030aa:	f7fd fe3d 	bl	8000d28 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b8:	d90d      	bls.n	80030d6 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e037      	b.n	8003146 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0e2      	beq.n	80030aa <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003112:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_RTC_SetAlarm_IT+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0d      	ldr	r2, [pc, #52]	; (8003150 <HAL_RTC_SetAlarm_IT+0x274>)
 800311a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RTC_SetAlarm_IT+0x274>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_RTC_SetAlarm_IT+0x274>)
 8003126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3724      	adds	r7, #36	; 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd90      	pop	{r4, r7, pc}
 800314e:	bf00      	nop
 8003150:	40010400 	.word	0x40010400

08003154 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <HAL_RTC_AlarmIRQHandler+0x88>)
 800315e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003162:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003190:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fbde 	bl	8000954 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f462 7220 	orn	r2, r2, #640	; 0x280
 80031c4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8dc 	bl	8003384 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031f6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80031f8:	f7fd fd96 	bl	8000d28 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031fe:	e009      	b.n	8003214 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003200:	f7fd fd92 	bl	8000d28 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320e:	d901      	bls.n	8003214 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e007      	b.n	8003224 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0ee      	beq.n	8003200 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d120      	bne.n	8003288 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800324e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003250:	f7fd fd6a 	bl	8000d28 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003256:	e00d      	b.n	8003274 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003258:	f7fd fd66 	bl	8000d28 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003266:	d905      	bls.n	8003274 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2203      	movs	r2, #3
 8003270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <RTC_EnterInitMode+0x5c>
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d1e7      	bne.n	8003258 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <RTC_ExitInitMode+0x78>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <RTC_ExitInitMode+0x78>)
 80032a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <RTC_ExitInitMode+0x78>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10c      	bne.n	80032d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff91 	bl	80031e0 <HAL_RTC_WaitForSynchro>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01e      	beq.n	8003302 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2203      	movs	r2, #3
 80032c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e017      	b.n	8003302 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <RTC_ExitInitMode+0x78>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4a0d      	ldr	r2, [pc, #52]	; (800330c <RTC_ExitInitMode+0x78>)
 80032d8:	f023 0320 	bic.w	r3, r3, #32
 80032dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff7e 	bl	80031e0 <HAL_RTC_WaitForSynchro>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <RTC_ExitInitMode+0x78>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <RTC_ExitInitMode+0x78>)
 80032fc:	f043 0320 	orr.w	r3, r3, #32
 8003300:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40002800 	.word	0x40002800

08003310 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003322:	e005      	b.n	8003330 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3301      	adds	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	3b0a      	subs	r3, #10
 800332e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	2b09      	cmp	r3, #9
 8003334:	d8f6      	bhi.n	8003324 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	b2da      	uxtb	r2, r3
 800333e:	7afb      	ldrb	r3, [r7, #11]
 8003340:	4313      	orrs	r3, r2
 8003342:	b2db      	uxtb	r3, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4413      	add	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	b2da      	uxtb	r2, r3
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	4413      	add	r3, r2
 8003376:	b2db      	uxtb	r3, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e040      	b.n	800342c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fb0c 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8c0 	bl	800355c <UART_SetConfig>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e022      	b.n	800342c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fb6c 	bl	8003acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fbf3 	bl	8003c10 <UART_CheckIdleState>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003448:	2b20      	cmp	r3, #32
 800344a:	f040 8082 	bne.w	8003552 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_Transmit+0x26>
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07a      	b.n	8003554 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_UART_Transmit+0x38>
 8003468:	2302      	movs	r3, #2
 800346a:	e073      	b.n	8003554 <HAL_UART_Transmit+0x120>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2221      	movs	r2, #33	; 0x21
 8003480:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003482:	f7fd fc51 	bl	8000d28 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a0:	d108      	bne.n	80034b4 <HAL_UART_Transmit+0x80>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e003      	b.n	80034bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034c4:	e02d      	b.n	8003522 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fbe6 	bl	8003ca2 <UART_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e039      	b.n	8003554 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f2:	b292      	uxth	r2, r2
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3302      	adds	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	e008      	b.n	8003510 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b292      	uxth	r2, r2
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3301      	adds	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1cb      	bne.n	80034c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2140      	movs	r1, #64	; 0x40
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fbb2 	bl	8003ca2 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e005      	b.n	8003554 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800355c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003560:	b08a      	sub	sp, #40	; 0x28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	431a      	orrs	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4313      	orrs	r3, r2
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4ba4      	ldr	r3, [pc, #656]	; (800381c <UART_SetConfig+0x2c0>)
 800358c:	4013      	ands	r3, r2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	430b      	orrs	r3, r1
 8003596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a99      	ldr	r2, [pc, #612]	; (8003820 <UART_SetConfig+0x2c4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	4313      	orrs	r3, r2
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a90      	ldr	r2, [pc, #576]	; (8003824 <UART_SetConfig+0x2c8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d126      	bne.n	8003634 <UART_SetConfig+0xd8>
 80035e6:	4b90      	ldr	r3, [pc, #576]	; (8003828 <UART_SetConfig+0x2cc>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d81b      	bhi.n	800362c <UART_SetConfig+0xd0>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0xa0>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	0800361d 	.word	0x0800361d
 8003604:	08003615 	.word	0x08003615
 8003608:	08003625 	.word	0x08003625
 800360c:	2301      	movs	r3, #1
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e116      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003614:	2302      	movs	r3, #2
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e112      	b.n	8003842 <UART_SetConfig+0x2e6>
 800361c:	2304      	movs	r3, #4
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e10e      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003624:	2308      	movs	r3, #8
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e10a      	b.n	8003842 <UART_SetConfig+0x2e6>
 800362c:	2310      	movs	r3, #16
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e106      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7c      	ldr	r2, [pc, #496]	; (800382c <UART_SetConfig+0x2d0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d138      	bne.n	80036b0 <UART_SetConfig+0x154>
 800363e:	4b7a      	ldr	r3, [pc, #488]	; (8003828 <UART_SetConfig+0x2cc>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b0c      	cmp	r3, #12
 800364a:	d82d      	bhi.n	80036a8 <UART_SetConfig+0x14c>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0xf8>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003689 	.word	0x08003689
 8003658:	080036a9 	.word	0x080036a9
 800365c:	080036a9 	.word	0x080036a9
 8003660:	080036a9 	.word	0x080036a9
 8003664:	08003699 	.word	0x08003699
 8003668:	080036a9 	.word	0x080036a9
 800366c:	080036a9 	.word	0x080036a9
 8003670:	080036a9 	.word	0x080036a9
 8003674:	08003691 	.word	0x08003691
 8003678:	080036a9 	.word	0x080036a9
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036a9 	.word	0x080036a9
 8003684:	080036a1 	.word	0x080036a1
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	e0d8      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003690:	2302      	movs	r3, #2
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003696:	e0d4      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003698:	2304      	movs	r3, #4
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e0d0      	b.n	8003842 <UART_SetConfig+0x2e6>
 80036a0:	2308      	movs	r3, #8
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e0cc      	b.n	8003842 <UART_SetConfig+0x2e6>
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ae:	e0c8      	b.n	8003842 <UART_SetConfig+0x2e6>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a5e      	ldr	r2, [pc, #376]	; (8003830 <UART_SetConfig+0x2d4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d125      	bne.n	8003706 <UART_SetConfig+0x1aa>
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <UART_SetConfig+0x2cc>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036c4:	2b30      	cmp	r3, #48	; 0x30
 80036c6:	d016      	beq.n	80036f6 <UART_SetConfig+0x19a>
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d818      	bhi.n	80036fe <UART_SetConfig+0x1a2>
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d00a      	beq.n	80036e6 <UART_SetConfig+0x18a>
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d814      	bhi.n	80036fe <UART_SetConfig+0x1a2>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <UART_SetConfig+0x182>
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d008      	beq.n	80036ee <UART_SetConfig+0x192>
 80036dc:	e00f      	b.n	80036fe <UART_SetConfig+0x1a2>
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e4:	e0ad      	b.n	8003842 <UART_SetConfig+0x2e6>
 80036e6:	2302      	movs	r3, #2
 80036e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ec:	e0a9      	b.n	8003842 <UART_SetConfig+0x2e6>
 80036ee:	2304      	movs	r3, #4
 80036f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f4:	e0a5      	b.n	8003842 <UART_SetConfig+0x2e6>
 80036f6:	2308      	movs	r3, #8
 80036f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fc:	e0a1      	b.n	8003842 <UART_SetConfig+0x2e6>
 80036fe:	2310      	movs	r3, #16
 8003700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003704:	e09d      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a4a      	ldr	r2, [pc, #296]	; (8003834 <UART_SetConfig+0x2d8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d125      	bne.n	800375c <UART_SetConfig+0x200>
 8003710:	4b45      	ldr	r3, [pc, #276]	; (8003828 <UART_SetConfig+0x2cc>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800371a:	2bc0      	cmp	r3, #192	; 0xc0
 800371c:	d016      	beq.n	800374c <UART_SetConfig+0x1f0>
 800371e:	2bc0      	cmp	r3, #192	; 0xc0
 8003720:	d818      	bhi.n	8003754 <UART_SetConfig+0x1f8>
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d00a      	beq.n	800373c <UART_SetConfig+0x1e0>
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d814      	bhi.n	8003754 <UART_SetConfig+0x1f8>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <UART_SetConfig+0x1d8>
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d008      	beq.n	8003744 <UART_SetConfig+0x1e8>
 8003732:	e00f      	b.n	8003754 <UART_SetConfig+0x1f8>
 8003734:	2300      	movs	r3, #0
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e082      	b.n	8003842 <UART_SetConfig+0x2e6>
 800373c:	2302      	movs	r3, #2
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e07e      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003744:	2304      	movs	r3, #4
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e07a      	b.n	8003842 <UART_SetConfig+0x2e6>
 800374c:	2308      	movs	r3, #8
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e076      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e072      	b.n	8003842 <UART_SetConfig+0x2e6>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a35      	ldr	r2, [pc, #212]	; (8003838 <UART_SetConfig+0x2dc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d12a      	bne.n	80037bc <UART_SetConfig+0x260>
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <UART_SetConfig+0x2cc>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003774:	d01a      	beq.n	80037ac <UART_SetConfig+0x250>
 8003776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377a:	d81b      	bhi.n	80037b4 <UART_SetConfig+0x258>
 800377c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003780:	d00c      	beq.n	800379c <UART_SetConfig+0x240>
 8003782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003786:	d815      	bhi.n	80037b4 <UART_SetConfig+0x258>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <UART_SetConfig+0x238>
 800378c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003790:	d008      	beq.n	80037a4 <UART_SetConfig+0x248>
 8003792:	e00f      	b.n	80037b4 <UART_SetConfig+0x258>
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e052      	b.n	8003842 <UART_SetConfig+0x2e6>
 800379c:	2302      	movs	r3, #2
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e04e      	b.n	8003842 <UART_SetConfig+0x2e6>
 80037a4:	2304      	movs	r3, #4
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037aa:	e04a      	b.n	8003842 <UART_SetConfig+0x2e6>
 80037ac:	2308      	movs	r3, #8
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e046      	b.n	8003842 <UART_SetConfig+0x2e6>
 80037b4:	2310      	movs	r3, #16
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e042      	b.n	8003842 <UART_SetConfig+0x2e6>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a17      	ldr	r2, [pc, #92]	; (8003820 <UART_SetConfig+0x2c4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d13a      	bne.n	800383c <UART_SetConfig+0x2e0>
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <UART_SetConfig+0x2cc>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d4:	d01a      	beq.n	800380c <UART_SetConfig+0x2b0>
 80037d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037da:	d81b      	bhi.n	8003814 <UART_SetConfig+0x2b8>
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e0:	d00c      	beq.n	80037fc <UART_SetConfig+0x2a0>
 80037e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e6:	d815      	bhi.n	8003814 <UART_SetConfig+0x2b8>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <UART_SetConfig+0x298>
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f0:	d008      	beq.n	8003804 <UART_SetConfig+0x2a8>
 80037f2:	e00f      	b.n	8003814 <UART_SetConfig+0x2b8>
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e022      	b.n	8003842 <UART_SetConfig+0x2e6>
 80037fc:	2302      	movs	r3, #2
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e01e      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003804:	2304      	movs	r3, #4
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e01a      	b.n	8003842 <UART_SetConfig+0x2e6>
 800380c:	2308      	movs	r3, #8
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e016      	b.n	8003842 <UART_SetConfig+0x2e6>
 8003814:	2310      	movs	r3, #16
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e012      	b.n	8003842 <UART_SetConfig+0x2e6>
 800381c:	efff69f3 	.word	0xefff69f3
 8003820:	40008000 	.word	0x40008000
 8003824:	40013800 	.word	0x40013800
 8003828:	40021000 	.word	0x40021000
 800382c:	40004400 	.word	0x40004400
 8003830:	40004800 	.word	0x40004800
 8003834:	40004c00 	.word	0x40004c00
 8003838:	40005000 	.word	0x40005000
 800383c:	2310      	movs	r3, #16
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a9f      	ldr	r2, [pc, #636]	; (8003ac4 <UART_SetConfig+0x568>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d17a      	bne.n	8003942 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800384c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003850:	2b08      	cmp	r3, #8
 8003852:	d824      	bhi.n	800389e <UART_SetConfig+0x342>
 8003854:	a201      	add	r2, pc, #4	; (adr r2, 800385c <UART_SetConfig+0x300>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003881 	.word	0x08003881
 8003860:	0800389f 	.word	0x0800389f
 8003864:	08003889 	.word	0x08003889
 8003868:	0800389f 	.word	0x0800389f
 800386c:	0800388f 	.word	0x0800388f
 8003870:	0800389f 	.word	0x0800389f
 8003874:	0800389f 	.word	0x0800389f
 8003878:	0800389f 	.word	0x0800389f
 800387c:	08003897 	.word	0x08003897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003880:	f7fe fb8e 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003884:	61f8      	str	r0, [r7, #28]
        break;
 8003886:	e010      	b.n	80038aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003888:	4b8f      	ldr	r3, [pc, #572]	; (8003ac8 <UART_SetConfig+0x56c>)
 800388a:	61fb      	str	r3, [r7, #28]
        break;
 800388c:	e00d      	b.n	80038aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388e:	f7fe faef 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8003892:	61f8      	str	r0, [r7, #28]
        break;
 8003894:	e009      	b.n	80038aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389a:	61fb      	str	r3, [r7, #28]
        break;
 800389c:	e005      	b.n	80038aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80fb 	beq.w	8003aa8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d305      	bcc.n	80038ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d903      	bls.n	80038d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038d4:	e0e8      	b.n	8003aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	2200      	movs	r2, #0
 80038da:	461c      	mov	r4, r3
 80038dc:	4615      	mov	r5, r2
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	022b      	lsls	r3, r5, #8
 80038e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038ec:	0222      	lsls	r2, r4, #8
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	6849      	ldr	r1, [r1, #4]
 80038f2:	0849      	lsrs	r1, r1, #1
 80038f4:	2000      	movs	r0, #0
 80038f6:	4688      	mov	r8, r1
 80038f8:	4681      	mov	r9, r0
 80038fa:	eb12 0a08 	adds.w	sl, r2, r8
 80038fe:	eb43 0b09 	adc.w	fp, r3, r9
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003910:	4650      	mov	r0, sl
 8003912:	4659      	mov	r1, fp
 8003914:	f7fc fcc4 	bl	80002a0 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003926:	d308      	bcc.n	800393a <UART_SetConfig+0x3de>
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392e:	d204      	bcs.n	800393a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	e0b6      	b.n	8003aa8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003940:	e0b2      	b.n	8003aa8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394a:	d15e      	bne.n	8003a0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800394c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003950:	2b08      	cmp	r3, #8
 8003952:	d828      	bhi.n	80039a6 <UART_SetConfig+0x44a>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <UART_SetConfig+0x400>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003981 	.word	0x08003981
 8003960:	08003989 	.word	0x08003989
 8003964:	08003991 	.word	0x08003991
 8003968:	080039a7 	.word	0x080039a7
 800396c:	08003997 	.word	0x08003997
 8003970:	080039a7 	.word	0x080039a7
 8003974:	080039a7 	.word	0x080039a7
 8003978:	080039a7 	.word	0x080039a7
 800397c:	0800399f 	.word	0x0800399f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003980:	f7fe fb0e 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003984:	61f8      	str	r0, [r7, #28]
        break;
 8003986:	e014      	b.n	80039b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7fe fb20 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 800398c:	61f8      	str	r0, [r7, #28]
        break;
 800398e:	e010      	b.n	80039b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003990:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <UART_SetConfig+0x56c>)
 8003992:	61fb      	str	r3, [r7, #28]
        break;
 8003994:	e00d      	b.n	80039b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003996:	f7fe fa6b 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 800399a:	61f8      	str	r0, [r7, #28]
        break;
 800399c:	e009      	b.n	80039b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a2:	61fb      	str	r3, [r7, #28]
        break;
 80039a4:	e005      	b.n	80039b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d077      	beq.n	8003aa8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005a      	lsls	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	441a      	add	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b0f      	cmp	r3, #15
 80039d2:	d916      	bls.n	8003a02 <UART_SetConfig+0x4a6>
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039da:	d212      	bcs.n	8003a02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f023 030f 	bic.w	r3, r3, #15
 80039e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	8afb      	ldrh	r3, [r7, #22]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	8afa      	ldrh	r2, [r7, #22]
 80039fe:	60da      	str	r2, [r3, #12]
 8003a00:	e052      	b.n	8003aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a08:	e04e      	b.n	8003aa8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d827      	bhi.n	8003a62 <UART_SetConfig+0x506>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <UART_SetConfig+0x4bc>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a4d 	.word	0x08003a4d
 8003a24:	08003a63 	.word	0x08003a63
 8003a28:	08003a53 	.word	0x08003a53
 8003a2c:	08003a63 	.word	0x08003a63
 8003a30:	08003a63 	.word	0x08003a63
 8003a34:	08003a63 	.word	0x08003a63
 8003a38:	08003a5b 	.word	0x08003a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7fe fab0 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003a40:	61f8      	str	r0, [r7, #28]
        break;
 8003a42:	e014      	b.n	8003a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7fe fac2 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8003a48:	61f8      	str	r0, [r7, #28]
        break;
 8003a4a:	e010      	b.n	8003a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <UART_SetConfig+0x56c>)
 8003a4e:	61fb      	str	r3, [r7, #28]
        break;
 8003a50:	e00d      	b.n	8003a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a52:	f7fe fa0d 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8003a56:	61f8      	str	r0, [r7, #28]
        break;
 8003a58:	e009      	b.n	8003a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5e:	61fb      	str	r3, [r7, #28]
        break;
 8003a60:	e005      	b.n	8003a6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d019      	beq.n	8003aa8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	085a      	lsrs	r2, r3, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	441a      	add	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	d909      	bls.n	8003aa2 <UART_SetConfig+0x546>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d205      	bcs.n	8003aa2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	e002      	b.n	8003aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3728      	adds	r7, #40	; 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40008000 	.word	0x40008000
 8003ac8:	00f42400 	.word	0x00f42400

08003acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01a      	beq.n	8003be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bca:	d10a      	bne.n	8003be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c20:	f7fd f882 	bl	8000d28 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d10e      	bne.n	8003c52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f82d 	bl	8003ca2 <UART_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e023      	b.n	8003c9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d10e      	bne.n	8003c7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f817 	bl	8003ca2 <UART_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e00d      	b.n	8003c9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b09c      	sub	sp, #112	; 0x70
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb2:	e0a5      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cba:	f000 80a1 	beq.w	8003e00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbe:	f7fd f833 	bl	8000d28 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d302      	bcc.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d13e      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e6      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3308      	adds	r3, #8
 8003d24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d26:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e5      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e067      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d04f      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6e:	d147      	bne.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e6      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dcc:	623a      	str	r2, [r7, #32]
 8003dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	6a3a      	ldr	r2, [r7, #32]
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e5      	bne.n	8003dac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e010      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69da      	ldr	r2, [r3, #28]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	bf0c      	ite	eq
 8003e10:	2301      	moveq	r3, #1
 8003e12:	2300      	movne	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	f43f af4a 	beq.w	8003cb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3770      	adds	r7, #112	; 0x70
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <__errno>:
 8003e2c:	4b01      	ldr	r3, [pc, #4]	; (8003e34 <__errno+0x8>)
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	2000000c 	.word	0x2000000c

08003e38 <__libc_init_array>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	4d0d      	ldr	r5, [pc, #52]	; (8003e70 <__libc_init_array+0x38>)
 8003e3c:	4c0d      	ldr	r4, [pc, #52]	; (8003e74 <__libc_init_array+0x3c>)
 8003e3e:	1b64      	subs	r4, r4, r5
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	2600      	movs	r6, #0
 8003e44:	42a6      	cmp	r6, r4
 8003e46:	d109      	bne.n	8003e5c <__libc_init_array+0x24>
 8003e48:	4d0b      	ldr	r5, [pc, #44]	; (8003e78 <__libc_init_array+0x40>)
 8003e4a:	4c0c      	ldr	r4, [pc, #48]	; (8003e7c <__libc_init_array+0x44>)
 8003e4c:	f000 fc8e 	bl	800476c <_init>
 8003e50:	1b64      	subs	r4, r4, r5
 8003e52:	10a4      	asrs	r4, r4, #2
 8003e54:	2600      	movs	r6, #0
 8003e56:	42a6      	cmp	r6, r4
 8003e58:	d105      	bne.n	8003e66 <__libc_init_array+0x2e>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e60:	4798      	blx	r3
 8003e62:	3601      	adds	r6, #1
 8003e64:	e7ee      	b.n	8003e44 <__libc_init_array+0xc>
 8003e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6a:	4798      	blx	r3
 8003e6c:	3601      	adds	r6, #1
 8003e6e:	e7f2      	b.n	8003e56 <__libc_init_array+0x1e>
 8003e70:	08004828 	.word	0x08004828
 8003e74:	08004828 	.word	0x08004828
 8003e78:	08004828 	.word	0x08004828
 8003e7c:	0800482c 	.word	0x0800482c

08003e80 <memset>:
 8003e80:	4402      	add	r2, r0
 8003e82:	4603      	mov	r3, r0
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d100      	bne.n	8003e8a <memset+0xa>
 8003e88:	4770      	bx	lr
 8003e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e8e:	e7f9      	b.n	8003e84 <memset+0x4>

08003e90 <siprintf>:
 8003e90:	b40e      	push	{r1, r2, r3}
 8003e92:	b500      	push	{lr}
 8003e94:	b09c      	sub	sp, #112	; 0x70
 8003e96:	ab1d      	add	r3, sp, #116	; 0x74
 8003e98:	9002      	str	r0, [sp, #8]
 8003e9a:	9006      	str	r0, [sp, #24]
 8003e9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ea0:	4809      	ldr	r0, [pc, #36]	; (8003ec8 <siprintf+0x38>)
 8003ea2:	9107      	str	r1, [sp, #28]
 8003ea4:	9104      	str	r1, [sp, #16]
 8003ea6:	4909      	ldr	r1, [pc, #36]	; (8003ecc <siprintf+0x3c>)
 8003ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eac:	9105      	str	r1, [sp, #20]
 8003eae:	6800      	ldr	r0, [r0, #0]
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	a902      	add	r1, sp, #8
 8003eb4:	f000 f868 	bl	8003f88 <_svfiprintf_r>
 8003eb8:	9b02      	ldr	r3, [sp, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	b01c      	add	sp, #112	; 0x70
 8003ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ec4:	b003      	add	sp, #12
 8003ec6:	4770      	bx	lr
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	ffff0208 	.word	0xffff0208

08003ed0 <__ssputs_r>:
 8003ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed4:	688e      	ldr	r6, [r1, #8]
 8003ed6:	429e      	cmp	r6, r3
 8003ed8:	4682      	mov	sl, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	4690      	mov	r8, r2
 8003ede:	461f      	mov	r7, r3
 8003ee0:	d838      	bhi.n	8003f54 <__ssputs_r+0x84>
 8003ee2:	898a      	ldrh	r2, [r1, #12]
 8003ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ee8:	d032      	beq.n	8003f50 <__ssputs_r+0x80>
 8003eea:	6825      	ldr	r5, [r4, #0]
 8003eec:	6909      	ldr	r1, [r1, #16]
 8003eee:	eba5 0901 	sub.w	r9, r5, r1
 8003ef2:	6965      	ldr	r5, [r4, #20]
 8003ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003efc:	3301      	adds	r3, #1
 8003efe:	444b      	add	r3, r9
 8003f00:	106d      	asrs	r5, r5, #1
 8003f02:	429d      	cmp	r5, r3
 8003f04:	bf38      	it	cc
 8003f06:	461d      	movcc	r5, r3
 8003f08:	0553      	lsls	r3, r2, #21
 8003f0a:	d531      	bpl.n	8003f70 <__ssputs_r+0xa0>
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f000 fb63 	bl	80045d8 <_malloc_r>
 8003f12:	4606      	mov	r6, r0
 8003f14:	b950      	cbnz	r0, 8003f2c <__ssputs_r+0x5c>
 8003f16:	230c      	movs	r3, #12
 8003f18:	f8ca 3000 	str.w	r3, [sl]
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2c:	6921      	ldr	r1, [r4, #16]
 8003f2e:	464a      	mov	r2, r9
 8003f30:	f000 fabe 	bl	80044b0 <memcpy>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	6126      	str	r6, [r4, #16]
 8003f42:	6165      	str	r5, [r4, #20]
 8003f44:	444e      	add	r6, r9
 8003f46:	eba5 0509 	sub.w	r5, r5, r9
 8003f4a:	6026      	str	r6, [r4, #0]
 8003f4c:	60a5      	str	r5, [r4, #8]
 8003f4e:	463e      	mov	r6, r7
 8003f50:	42be      	cmp	r6, r7
 8003f52:	d900      	bls.n	8003f56 <__ssputs_r+0x86>
 8003f54:	463e      	mov	r6, r7
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	4632      	mov	r2, r6
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	f000 fab6 	bl	80044cc <memmove>
 8003f60:	68a3      	ldr	r3, [r4, #8]
 8003f62:	1b9b      	subs	r3, r3, r6
 8003f64:	60a3      	str	r3, [r4, #8]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	4433      	add	r3, r6
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e7db      	b.n	8003f28 <__ssputs_r+0x58>
 8003f70:	462a      	mov	r2, r5
 8003f72:	f000 fba5 	bl	80046c0 <_realloc_r>
 8003f76:	4606      	mov	r6, r0
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d1e1      	bne.n	8003f40 <__ssputs_r+0x70>
 8003f7c:	6921      	ldr	r1, [r4, #16]
 8003f7e:	4650      	mov	r0, sl
 8003f80:	f000 fabe 	bl	8004500 <_free_r>
 8003f84:	e7c7      	b.n	8003f16 <__ssputs_r+0x46>
	...

08003f88 <_svfiprintf_r>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	4698      	mov	r8, r3
 8003f8e:	898b      	ldrh	r3, [r1, #12]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	b09d      	sub	sp, #116	; 0x74
 8003f94:	4607      	mov	r7, r0
 8003f96:	460d      	mov	r5, r1
 8003f98:	4614      	mov	r4, r2
 8003f9a:	d50e      	bpl.n	8003fba <_svfiprintf_r+0x32>
 8003f9c:	690b      	ldr	r3, [r1, #16]
 8003f9e:	b963      	cbnz	r3, 8003fba <_svfiprintf_r+0x32>
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	f000 fb19 	bl	80045d8 <_malloc_r>
 8003fa6:	6028      	str	r0, [r5, #0]
 8003fa8:	6128      	str	r0, [r5, #16]
 8003faa:	b920      	cbnz	r0, 8003fb6 <_svfiprintf_r+0x2e>
 8003fac:	230c      	movs	r3, #12
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb4:	e0d1      	b.n	800415a <_svfiprintf_r+0x1d2>
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	616b      	str	r3, [r5, #20]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fc8:	2330      	movs	r3, #48	; 0x30
 8003fca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004174 <_svfiprintf_r+0x1ec>
 8003fce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd2:	f04f 0901 	mov.w	r9, #1
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	469a      	mov	sl, r3
 8003fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fde:	b10a      	cbz	r2, 8003fe4 <_svfiprintf_r+0x5c>
 8003fe0:	2a25      	cmp	r2, #37	; 0x25
 8003fe2:	d1f9      	bne.n	8003fd8 <_svfiprintf_r+0x50>
 8003fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8003fe8:	d00b      	beq.n	8004002 <_svfiprintf_r+0x7a>
 8003fea:	465b      	mov	r3, fp
 8003fec:	4622      	mov	r2, r4
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	f7ff ff6d 	bl	8003ed0 <__ssputs_r>
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	f000 80aa 	beq.w	8004150 <_svfiprintf_r+0x1c8>
 8003ffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ffe:	445a      	add	r2, fp
 8004000:	9209      	str	r2, [sp, #36]	; 0x24
 8004002:	f89a 3000 	ldrb.w	r3, [sl]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80a2 	beq.w	8004150 <_svfiprintf_r+0x1c8>
 800400c:	2300      	movs	r3, #0
 800400e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004016:	f10a 0a01 	add.w	sl, sl, #1
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	9307      	str	r3, [sp, #28]
 800401e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004022:	931a      	str	r3, [sp, #104]	; 0x68
 8004024:	4654      	mov	r4, sl
 8004026:	2205      	movs	r2, #5
 8004028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402c:	4851      	ldr	r0, [pc, #324]	; (8004174 <_svfiprintf_r+0x1ec>)
 800402e:	f7fc f8e7 	bl	8000200 <memchr>
 8004032:	9a04      	ldr	r2, [sp, #16]
 8004034:	b9d8      	cbnz	r0, 800406e <_svfiprintf_r+0xe6>
 8004036:	06d0      	lsls	r0, r2, #27
 8004038:	bf44      	itt	mi
 800403a:	2320      	movmi	r3, #32
 800403c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004040:	0711      	lsls	r1, r2, #28
 8004042:	bf44      	itt	mi
 8004044:	232b      	movmi	r3, #43	; 0x2b
 8004046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404a:	f89a 3000 	ldrb.w	r3, [sl]
 800404e:	2b2a      	cmp	r3, #42	; 0x2a
 8004050:	d015      	beq.n	800407e <_svfiprintf_r+0xf6>
 8004052:	9a07      	ldr	r2, [sp, #28]
 8004054:	4654      	mov	r4, sl
 8004056:	2000      	movs	r0, #0
 8004058:	f04f 0c0a 	mov.w	ip, #10
 800405c:	4621      	mov	r1, r4
 800405e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004062:	3b30      	subs	r3, #48	; 0x30
 8004064:	2b09      	cmp	r3, #9
 8004066:	d94e      	bls.n	8004106 <_svfiprintf_r+0x17e>
 8004068:	b1b0      	cbz	r0, 8004098 <_svfiprintf_r+0x110>
 800406a:	9207      	str	r2, [sp, #28]
 800406c:	e014      	b.n	8004098 <_svfiprintf_r+0x110>
 800406e:	eba0 0308 	sub.w	r3, r0, r8
 8004072:	fa09 f303 	lsl.w	r3, r9, r3
 8004076:	4313      	orrs	r3, r2
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	46a2      	mov	sl, r4
 800407c:	e7d2      	b.n	8004024 <_svfiprintf_r+0x9c>
 800407e:	9b03      	ldr	r3, [sp, #12]
 8004080:	1d19      	adds	r1, r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	9103      	str	r1, [sp, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	bfbb      	ittet	lt
 800408a:	425b      	neglt	r3, r3
 800408c:	f042 0202 	orrlt.w	r2, r2, #2
 8004090:	9307      	strge	r3, [sp, #28]
 8004092:	9307      	strlt	r3, [sp, #28]
 8004094:	bfb8      	it	lt
 8004096:	9204      	strlt	r2, [sp, #16]
 8004098:	7823      	ldrb	r3, [r4, #0]
 800409a:	2b2e      	cmp	r3, #46	; 0x2e
 800409c:	d10c      	bne.n	80040b8 <_svfiprintf_r+0x130>
 800409e:	7863      	ldrb	r3, [r4, #1]
 80040a0:	2b2a      	cmp	r3, #42	; 0x2a
 80040a2:	d135      	bne.n	8004110 <_svfiprintf_r+0x188>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	1d1a      	adds	r2, r3, #4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	9203      	str	r2, [sp, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bfb8      	it	lt
 80040b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040b4:	3402      	adds	r4, #2
 80040b6:	9305      	str	r3, [sp, #20]
 80040b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004184 <_svfiprintf_r+0x1fc>
 80040bc:	7821      	ldrb	r1, [r4, #0]
 80040be:	2203      	movs	r2, #3
 80040c0:	4650      	mov	r0, sl
 80040c2:	f7fc f89d 	bl	8000200 <memchr>
 80040c6:	b140      	cbz	r0, 80040da <_svfiprintf_r+0x152>
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	eba0 000a 	sub.w	r0, r0, sl
 80040ce:	fa03 f000 	lsl.w	r0, r3, r0
 80040d2:	9b04      	ldr	r3, [sp, #16]
 80040d4:	4303      	orrs	r3, r0
 80040d6:	3401      	adds	r4, #1
 80040d8:	9304      	str	r3, [sp, #16]
 80040da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040de:	4826      	ldr	r0, [pc, #152]	; (8004178 <_svfiprintf_r+0x1f0>)
 80040e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040e4:	2206      	movs	r2, #6
 80040e6:	f7fc f88b 	bl	8000200 <memchr>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d038      	beq.n	8004160 <_svfiprintf_r+0x1d8>
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <_svfiprintf_r+0x1f4>)
 80040f0:	bb1b      	cbnz	r3, 800413a <_svfiprintf_r+0x1b2>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	3307      	adds	r3, #7
 80040f6:	f023 0307 	bic.w	r3, r3, #7
 80040fa:	3308      	adds	r3, #8
 80040fc:	9303      	str	r3, [sp, #12]
 80040fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004100:	4433      	add	r3, r6
 8004102:	9309      	str	r3, [sp, #36]	; 0x24
 8004104:	e767      	b.n	8003fd6 <_svfiprintf_r+0x4e>
 8004106:	fb0c 3202 	mla	r2, ip, r2, r3
 800410a:	460c      	mov	r4, r1
 800410c:	2001      	movs	r0, #1
 800410e:	e7a5      	b.n	800405c <_svfiprintf_r+0xd4>
 8004110:	2300      	movs	r3, #0
 8004112:	3401      	adds	r4, #1
 8004114:	9305      	str	r3, [sp, #20]
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 0c0a 	mov.w	ip, #10
 800411c:	4620      	mov	r0, r4
 800411e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004122:	3a30      	subs	r2, #48	; 0x30
 8004124:	2a09      	cmp	r2, #9
 8004126:	d903      	bls.n	8004130 <_svfiprintf_r+0x1a8>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0c5      	beq.n	80040b8 <_svfiprintf_r+0x130>
 800412c:	9105      	str	r1, [sp, #20]
 800412e:	e7c3      	b.n	80040b8 <_svfiprintf_r+0x130>
 8004130:	fb0c 2101 	mla	r1, ip, r1, r2
 8004134:	4604      	mov	r4, r0
 8004136:	2301      	movs	r3, #1
 8004138:	e7f0      	b.n	800411c <_svfiprintf_r+0x194>
 800413a:	ab03      	add	r3, sp, #12
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	462a      	mov	r2, r5
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <_svfiprintf_r+0x1f8>)
 8004142:	a904      	add	r1, sp, #16
 8004144:	4638      	mov	r0, r7
 8004146:	f3af 8000 	nop.w
 800414a:	1c42      	adds	r2, r0, #1
 800414c:	4606      	mov	r6, r0
 800414e:	d1d6      	bne.n	80040fe <_svfiprintf_r+0x176>
 8004150:	89ab      	ldrh	r3, [r5, #12]
 8004152:	065b      	lsls	r3, r3, #25
 8004154:	f53f af2c 	bmi.w	8003fb0 <_svfiprintf_r+0x28>
 8004158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800415a:	b01d      	add	sp, #116	; 0x74
 800415c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004160:	ab03      	add	r3, sp, #12
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	462a      	mov	r2, r5
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <_svfiprintf_r+0x1f8>)
 8004168:	a904      	add	r1, sp, #16
 800416a:	4638      	mov	r0, r7
 800416c:	f000 f87a 	bl	8004264 <_printf_i>
 8004170:	e7eb      	b.n	800414a <_svfiprintf_r+0x1c2>
 8004172:	bf00      	nop
 8004174:	080047ec 	.word	0x080047ec
 8004178:	080047f6 	.word	0x080047f6
 800417c:	00000000 	.word	0x00000000
 8004180:	08003ed1 	.word	0x08003ed1
 8004184:	080047f2 	.word	0x080047f2

08004188 <_printf_common>:
 8004188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	4616      	mov	r6, r2
 800418e:	4699      	mov	r9, r3
 8004190:	688a      	ldr	r2, [r1, #8]
 8004192:	690b      	ldr	r3, [r1, #16]
 8004194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004198:	4293      	cmp	r3, r2
 800419a:	bfb8      	it	lt
 800419c:	4613      	movlt	r3, r2
 800419e:	6033      	str	r3, [r6, #0]
 80041a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041a4:	4607      	mov	r7, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	b10a      	cbz	r2, 80041ae <_printf_common+0x26>
 80041aa:	3301      	adds	r3, #1
 80041ac:	6033      	str	r3, [r6, #0]
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	0699      	lsls	r1, r3, #26
 80041b2:	bf42      	ittt	mi
 80041b4:	6833      	ldrmi	r3, [r6, #0]
 80041b6:	3302      	addmi	r3, #2
 80041b8:	6033      	strmi	r3, [r6, #0]
 80041ba:	6825      	ldr	r5, [r4, #0]
 80041bc:	f015 0506 	ands.w	r5, r5, #6
 80041c0:	d106      	bne.n	80041d0 <_printf_common+0x48>
 80041c2:	f104 0a19 	add.w	sl, r4, #25
 80041c6:	68e3      	ldr	r3, [r4, #12]
 80041c8:	6832      	ldr	r2, [r6, #0]
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	42ab      	cmp	r3, r5
 80041ce:	dc26      	bgt.n	800421e <_printf_common+0x96>
 80041d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041d4:	1e13      	subs	r3, r2, #0
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	bf18      	it	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	0692      	lsls	r2, r2, #26
 80041de:	d42b      	bmi.n	8004238 <_printf_common+0xb0>
 80041e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041e4:	4649      	mov	r1, r9
 80041e6:	4638      	mov	r0, r7
 80041e8:	47c0      	blx	r8
 80041ea:	3001      	adds	r0, #1
 80041ec:	d01e      	beq.n	800422c <_printf_common+0xa4>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	68e5      	ldr	r5, [r4, #12]
 80041f2:	6832      	ldr	r2, [r6, #0]
 80041f4:	f003 0306 	and.w	r3, r3, #6
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	bf08      	it	eq
 80041fc:	1aad      	subeq	r5, r5, r2
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	6922      	ldr	r2, [r4, #16]
 8004202:	bf0c      	ite	eq
 8004204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004208:	2500      	movne	r5, #0
 800420a:	4293      	cmp	r3, r2
 800420c:	bfc4      	itt	gt
 800420e:	1a9b      	subgt	r3, r3, r2
 8004210:	18ed      	addgt	r5, r5, r3
 8004212:	2600      	movs	r6, #0
 8004214:	341a      	adds	r4, #26
 8004216:	42b5      	cmp	r5, r6
 8004218:	d11a      	bne.n	8004250 <_printf_common+0xc8>
 800421a:	2000      	movs	r0, #0
 800421c:	e008      	b.n	8004230 <_printf_common+0xa8>
 800421e:	2301      	movs	r3, #1
 8004220:	4652      	mov	r2, sl
 8004222:	4649      	mov	r1, r9
 8004224:	4638      	mov	r0, r7
 8004226:	47c0      	blx	r8
 8004228:	3001      	adds	r0, #1
 800422a:	d103      	bne.n	8004234 <_printf_common+0xac>
 800422c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004234:	3501      	adds	r5, #1
 8004236:	e7c6      	b.n	80041c6 <_printf_common+0x3e>
 8004238:	18e1      	adds	r1, r4, r3
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	2030      	movs	r0, #48	; 0x30
 800423e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004242:	4422      	add	r2, r4
 8004244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800424c:	3302      	adds	r3, #2
 800424e:	e7c7      	b.n	80041e0 <_printf_common+0x58>
 8004250:	2301      	movs	r3, #1
 8004252:	4622      	mov	r2, r4
 8004254:	4649      	mov	r1, r9
 8004256:	4638      	mov	r0, r7
 8004258:	47c0      	blx	r8
 800425a:	3001      	adds	r0, #1
 800425c:	d0e6      	beq.n	800422c <_printf_common+0xa4>
 800425e:	3601      	adds	r6, #1
 8004260:	e7d9      	b.n	8004216 <_printf_common+0x8e>
	...

08004264 <_printf_i>:
 8004264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	7e0f      	ldrb	r7, [r1, #24]
 800426a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800426c:	2f78      	cmp	r7, #120	; 0x78
 800426e:	4691      	mov	r9, r2
 8004270:	4680      	mov	r8, r0
 8004272:	460c      	mov	r4, r1
 8004274:	469a      	mov	sl, r3
 8004276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800427a:	d807      	bhi.n	800428c <_printf_i+0x28>
 800427c:	2f62      	cmp	r7, #98	; 0x62
 800427e:	d80a      	bhi.n	8004296 <_printf_i+0x32>
 8004280:	2f00      	cmp	r7, #0
 8004282:	f000 80d8 	beq.w	8004436 <_printf_i+0x1d2>
 8004286:	2f58      	cmp	r7, #88	; 0x58
 8004288:	f000 80a3 	beq.w	80043d2 <_printf_i+0x16e>
 800428c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004294:	e03a      	b.n	800430c <_printf_i+0xa8>
 8004296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800429a:	2b15      	cmp	r3, #21
 800429c:	d8f6      	bhi.n	800428c <_printf_i+0x28>
 800429e:	a101      	add	r1, pc, #4	; (adr r1, 80042a4 <_printf_i+0x40>)
 80042a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042a4:	080042fd 	.word	0x080042fd
 80042a8:	08004311 	.word	0x08004311
 80042ac:	0800428d 	.word	0x0800428d
 80042b0:	0800428d 	.word	0x0800428d
 80042b4:	0800428d 	.word	0x0800428d
 80042b8:	0800428d 	.word	0x0800428d
 80042bc:	08004311 	.word	0x08004311
 80042c0:	0800428d 	.word	0x0800428d
 80042c4:	0800428d 	.word	0x0800428d
 80042c8:	0800428d 	.word	0x0800428d
 80042cc:	0800428d 	.word	0x0800428d
 80042d0:	0800441d 	.word	0x0800441d
 80042d4:	08004341 	.word	0x08004341
 80042d8:	080043ff 	.word	0x080043ff
 80042dc:	0800428d 	.word	0x0800428d
 80042e0:	0800428d 	.word	0x0800428d
 80042e4:	0800443f 	.word	0x0800443f
 80042e8:	0800428d 	.word	0x0800428d
 80042ec:	08004341 	.word	0x08004341
 80042f0:	0800428d 	.word	0x0800428d
 80042f4:	0800428d 	.word	0x0800428d
 80042f8:	08004407 	.word	0x08004407
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	1d1a      	adds	r2, r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	602a      	str	r2, [r5, #0]
 8004304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800430c:	2301      	movs	r3, #1
 800430e:	e0a3      	b.n	8004458 <_printf_i+0x1f4>
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	6829      	ldr	r1, [r5, #0]
 8004314:	0606      	lsls	r6, r0, #24
 8004316:	f101 0304 	add.w	r3, r1, #4
 800431a:	d50a      	bpl.n	8004332 <_printf_i+0xce>
 800431c:	680e      	ldr	r6, [r1, #0]
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	2e00      	cmp	r6, #0
 8004322:	da03      	bge.n	800432c <_printf_i+0xc8>
 8004324:	232d      	movs	r3, #45	; 0x2d
 8004326:	4276      	negs	r6, r6
 8004328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800432c:	485e      	ldr	r0, [pc, #376]	; (80044a8 <_printf_i+0x244>)
 800432e:	230a      	movs	r3, #10
 8004330:	e019      	b.n	8004366 <_printf_i+0x102>
 8004332:	680e      	ldr	r6, [r1, #0]
 8004334:	602b      	str	r3, [r5, #0]
 8004336:	f010 0f40 	tst.w	r0, #64	; 0x40
 800433a:	bf18      	it	ne
 800433c:	b236      	sxthne	r6, r6
 800433e:	e7ef      	b.n	8004320 <_printf_i+0xbc>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	6820      	ldr	r0, [r4, #0]
 8004344:	1d19      	adds	r1, r3, #4
 8004346:	6029      	str	r1, [r5, #0]
 8004348:	0601      	lsls	r1, r0, #24
 800434a:	d501      	bpl.n	8004350 <_printf_i+0xec>
 800434c:	681e      	ldr	r6, [r3, #0]
 800434e:	e002      	b.n	8004356 <_printf_i+0xf2>
 8004350:	0646      	lsls	r6, r0, #25
 8004352:	d5fb      	bpl.n	800434c <_printf_i+0xe8>
 8004354:	881e      	ldrh	r6, [r3, #0]
 8004356:	4854      	ldr	r0, [pc, #336]	; (80044a8 <_printf_i+0x244>)
 8004358:	2f6f      	cmp	r7, #111	; 0x6f
 800435a:	bf0c      	ite	eq
 800435c:	2308      	moveq	r3, #8
 800435e:	230a      	movne	r3, #10
 8004360:	2100      	movs	r1, #0
 8004362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004366:	6865      	ldr	r5, [r4, #4]
 8004368:	60a5      	str	r5, [r4, #8]
 800436a:	2d00      	cmp	r5, #0
 800436c:	bfa2      	ittt	ge
 800436e:	6821      	ldrge	r1, [r4, #0]
 8004370:	f021 0104 	bicge.w	r1, r1, #4
 8004374:	6021      	strge	r1, [r4, #0]
 8004376:	b90e      	cbnz	r6, 800437c <_printf_i+0x118>
 8004378:	2d00      	cmp	r5, #0
 800437a:	d04d      	beq.n	8004418 <_printf_i+0x1b4>
 800437c:	4615      	mov	r5, r2
 800437e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004382:	fb03 6711 	mls	r7, r3, r1, r6
 8004386:	5dc7      	ldrb	r7, [r0, r7]
 8004388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800438c:	4637      	mov	r7, r6
 800438e:	42bb      	cmp	r3, r7
 8004390:	460e      	mov	r6, r1
 8004392:	d9f4      	bls.n	800437e <_printf_i+0x11a>
 8004394:	2b08      	cmp	r3, #8
 8004396:	d10b      	bne.n	80043b0 <_printf_i+0x14c>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	07de      	lsls	r6, r3, #31
 800439c:	d508      	bpl.n	80043b0 <_printf_i+0x14c>
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	6861      	ldr	r1, [r4, #4]
 80043a2:	4299      	cmp	r1, r3
 80043a4:	bfde      	ittt	le
 80043a6:	2330      	movle	r3, #48	; 0x30
 80043a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80043b0:	1b52      	subs	r2, r2, r5
 80043b2:	6122      	str	r2, [r4, #16]
 80043b4:	f8cd a000 	str.w	sl, [sp]
 80043b8:	464b      	mov	r3, r9
 80043ba:	aa03      	add	r2, sp, #12
 80043bc:	4621      	mov	r1, r4
 80043be:	4640      	mov	r0, r8
 80043c0:	f7ff fee2 	bl	8004188 <_printf_common>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d14c      	bne.n	8004462 <_printf_i+0x1fe>
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043cc:	b004      	add	sp, #16
 80043ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d2:	4835      	ldr	r0, [pc, #212]	; (80044a8 <_printf_i+0x244>)
 80043d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043d8:	6829      	ldr	r1, [r5, #0]
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80043e0:	6029      	str	r1, [r5, #0]
 80043e2:	061d      	lsls	r5, r3, #24
 80043e4:	d514      	bpl.n	8004410 <_printf_i+0x1ac>
 80043e6:	07df      	lsls	r7, r3, #31
 80043e8:	bf44      	itt	mi
 80043ea:	f043 0320 	orrmi.w	r3, r3, #32
 80043ee:	6023      	strmi	r3, [r4, #0]
 80043f0:	b91e      	cbnz	r6, 80043fa <_printf_i+0x196>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	f023 0320 	bic.w	r3, r3, #32
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	2310      	movs	r3, #16
 80043fc:	e7b0      	b.n	8004360 <_printf_i+0xfc>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	f043 0320 	orr.w	r3, r3, #32
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	2378      	movs	r3, #120	; 0x78
 8004408:	4828      	ldr	r0, [pc, #160]	; (80044ac <_printf_i+0x248>)
 800440a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800440e:	e7e3      	b.n	80043d8 <_printf_i+0x174>
 8004410:	0659      	lsls	r1, r3, #25
 8004412:	bf48      	it	mi
 8004414:	b2b6      	uxthmi	r6, r6
 8004416:	e7e6      	b.n	80043e6 <_printf_i+0x182>
 8004418:	4615      	mov	r5, r2
 800441a:	e7bb      	b.n	8004394 <_printf_i+0x130>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	6826      	ldr	r6, [r4, #0]
 8004420:	6961      	ldr	r1, [r4, #20]
 8004422:	1d18      	adds	r0, r3, #4
 8004424:	6028      	str	r0, [r5, #0]
 8004426:	0635      	lsls	r5, r6, #24
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	d501      	bpl.n	8004430 <_printf_i+0x1cc>
 800442c:	6019      	str	r1, [r3, #0]
 800442e:	e002      	b.n	8004436 <_printf_i+0x1d2>
 8004430:	0670      	lsls	r0, r6, #25
 8004432:	d5fb      	bpl.n	800442c <_printf_i+0x1c8>
 8004434:	8019      	strh	r1, [r3, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	4615      	mov	r5, r2
 800443c:	e7ba      	b.n	80043b4 <_printf_i+0x150>
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	1d1a      	adds	r2, r3, #4
 8004442:	602a      	str	r2, [r5, #0]
 8004444:	681d      	ldr	r5, [r3, #0]
 8004446:	6862      	ldr	r2, [r4, #4]
 8004448:	2100      	movs	r1, #0
 800444a:	4628      	mov	r0, r5
 800444c:	f7fb fed8 	bl	8000200 <memchr>
 8004450:	b108      	cbz	r0, 8004456 <_printf_i+0x1f2>
 8004452:	1b40      	subs	r0, r0, r5
 8004454:	6060      	str	r0, [r4, #4]
 8004456:	6863      	ldr	r3, [r4, #4]
 8004458:	6123      	str	r3, [r4, #16]
 800445a:	2300      	movs	r3, #0
 800445c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004460:	e7a8      	b.n	80043b4 <_printf_i+0x150>
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	462a      	mov	r2, r5
 8004466:	4649      	mov	r1, r9
 8004468:	4640      	mov	r0, r8
 800446a:	47d0      	blx	sl
 800446c:	3001      	adds	r0, #1
 800446e:	d0ab      	beq.n	80043c8 <_printf_i+0x164>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	079b      	lsls	r3, r3, #30
 8004474:	d413      	bmi.n	800449e <_printf_i+0x23a>
 8004476:	68e0      	ldr	r0, [r4, #12]
 8004478:	9b03      	ldr	r3, [sp, #12]
 800447a:	4298      	cmp	r0, r3
 800447c:	bfb8      	it	lt
 800447e:	4618      	movlt	r0, r3
 8004480:	e7a4      	b.n	80043cc <_printf_i+0x168>
 8004482:	2301      	movs	r3, #1
 8004484:	4632      	mov	r2, r6
 8004486:	4649      	mov	r1, r9
 8004488:	4640      	mov	r0, r8
 800448a:	47d0      	blx	sl
 800448c:	3001      	adds	r0, #1
 800448e:	d09b      	beq.n	80043c8 <_printf_i+0x164>
 8004490:	3501      	adds	r5, #1
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	9903      	ldr	r1, [sp, #12]
 8004496:	1a5b      	subs	r3, r3, r1
 8004498:	42ab      	cmp	r3, r5
 800449a:	dcf2      	bgt.n	8004482 <_printf_i+0x21e>
 800449c:	e7eb      	b.n	8004476 <_printf_i+0x212>
 800449e:	2500      	movs	r5, #0
 80044a0:	f104 0619 	add.w	r6, r4, #25
 80044a4:	e7f5      	b.n	8004492 <_printf_i+0x22e>
 80044a6:	bf00      	nop
 80044a8:	080047fd 	.word	0x080047fd
 80044ac:	0800480e 	.word	0x0800480e

080044b0 <memcpy>:
 80044b0:	440a      	add	r2, r1
 80044b2:	4291      	cmp	r1, r2
 80044b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80044b8:	d100      	bne.n	80044bc <memcpy+0xc>
 80044ba:	4770      	bx	lr
 80044bc:	b510      	push	{r4, lr}
 80044be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c6:	4291      	cmp	r1, r2
 80044c8:	d1f9      	bne.n	80044be <memcpy+0xe>
 80044ca:	bd10      	pop	{r4, pc}

080044cc <memmove>:
 80044cc:	4288      	cmp	r0, r1
 80044ce:	b510      	push	{r4, lr}
 80044d0:	eb01 0402 	add.w	r4, r1, r2
 80044d4:	d902      	bls.n	80044dc <memmove+0x10>
 80044d6:	4284      	cmp	r4, r0
 80044d8:	4623      	mov	r3, r4
 80044da:	d807      	bhi.n	80044ec <memmove+0x20>
 80044dc:	1e43      	subs	r3, r0, #1
 80044de:	42a1      	cmp	r1, r4
 80044e0:	d008      	beq.n	80044f4 <memmove+0x28>
 80044e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ea:	e7f8      	b.n	80044de <memmove+0x12>
 80044ec:	4402      	add	r2, r0
 80044ee:	4601      	mov	r1, r0
 80044f0:	428a      	cmp	r2, r1
 80044f2:	d100      	bne.n	80044f6 <memmove+0x2a>
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044fe:	e7f7      	b.n	80044f0 <memmove+0x24>

08004500 <_free_r>:
 8004500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004502:	2900      	cmp	r1, #0
 8004504:	d044      	beq.n	8004590 <_free_r+0x90>
 8004506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450a:	9001      	str	r0, [sp, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f1a1 0404 	sub.w	r4, r1, #4
 8004512:	bfb8      	it	lt
 8004514:	18e4      	addlt	r4, r4, r3
 8004516:	f000 f913 	bl	8004740 <__malloc_lock>
 800451a:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <_free_r+0x94>)
 800451c:	9801      	ldr	r0, [sp, #4]
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	b933      	cbnz	r3, 8004530 <_free_r+0x30>
 8004522:	6063      	str	r3, [r4, #4]
 8004524:	6014      	str	r4, [r2, #0]
 8004526:	b003      	add	sp, #12
 8004528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800452c:	f000 b90e 	b.w	800474c <__malloc_unlock>
 8004530:	42a3      	cmp	r3, r4
 8004532:	d908      	bls.n	8004546 <_free_r+0x46>
 8004534:	6825      	ldr	r5, [r4, #0]
 8004536:	1961      	adds	r1, r4, r5
 8004538:	428b      	cmp	r3, r1
 800453a:	bf01      	itttt	eq
 800453c:	6819      	ldreq	r1, [r3, #0]
 800453e:	685b      	ldreq	r3, [r3, #4]
 8004540:	1949      	addeq	r1, r1, r5
 8004542:	6021      	streq	r1, [r4, #0]
 8004544:	e7ed      	b.n	8004522 <_free_r+0x22>
 8004546:	461a      	mov	r2, r3
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b10b      	cbz	r3, 8004550 <_free_r+0x50>
 800454c:	42a3      	cmp	r3, r4
 800454e:	d9fa      	bls.n	8004546 <_free_r+0x46>
 8004550:	6811      	ldr	r1, [r2, #0]
 8004552:	1855      	adds	r5, r2, r1
 8004554:	42a5      	cmp	r5, r4
 8004556:	d10b      	bne.n	8004570 <_free_r+0x70>
 8004558:	6824      	ldr	r4, [r4, #0]
 800455a:	4421      	add	r1, r4
 800455c:	1854      	adds	r4, r2, r1
 800455e:	42a3      	cmp	r3, r4
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	d1e0      	bne.n	8004526 <_free_r+0x26>
 8004564:	681c      	ldr	r4, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	6053      	str	r3, [r2, #4]
 800456a:	4421      	add	r1, r4
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	e7da      	b.n	8004526 <_free_r+0x26>
 8004570:	d902      	bls.n	8004578 <_free_r+0x78>
 8004572:	230c      	movs	r3, #12
 8004574:	6003      	str	r3, [r0, #0]
 8004576:	e7d6      	b.n	8004526 <_free_r+0x26>
 8004578:	6825      	ldr	r5, [r4, #0]
 800457a:	1961      	adds	r1, r4, r5
 800457c:	428b      	cmp	r3, r1
 800457e:	bf04      	itt	eq
 8004580:	6819      	ldreq	r1, [r3, #0]
 8004582:	685b      	ldreq	r3, [r3, #4]
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	bf04      	itt	eq
 8004588:	1949      	addeq	r1, r1, r5
 800458a:	6021      	streq	r1, [r4, #0]
 800458c:	6054      	str	r4, [r2, #4]
 800458e:	e7ca      	b.n	8004526 <_free_r+0x26>
 8004590:	b003      	add	sp, #12
 8004592:	bd30      	pop	{r4, r5, pc}
 8004594:	20000154 	.word	0x20000154

08004598 <sbrk_aligned>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	4e0e      	ldr	r6, [pc, #56]	; (80045d4 <sbrk_aligned+0x3c>)
 800459c:	460c      	mov	r4, r1
 800459e:	6831      	ldr	r1, [r6, #0]
 80045a0:	4605      	mov	r5, r0
 80045a2:	b911      	cbnz	r1, 80045aa <sbrk_aligned+0x12>
 80045a4:	f000 f8bc 	bl	8004720 <_sbrk_r>
 80045a8:	6030      	str	r0, [r6, #0]
 80045aa:	4621      	mov	r1, r4
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f8b7 	bl	8004720 <_sbrk_r>
 80045b2:	1c43      	adds	r3, r0, #1
 80045b4:	d00a      	beq.n	80045cc <sbrk_aligned+0x34>
 80045b6:	1cc4      	adds	r4, r0, #3
 80045b8:	f024 0403 	bic.w	r4, r4, #3
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d007      	beq.n	80045d0 <sbrk_aligned+0x38>
 80045c0:	1a21      	subs	r1, r4, r0
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f8ac 	bl	8004720 <_sbrk_r>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d101      	bne.n	80045d0 <sbrk_aligned+0x38>
 80045cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045d0:	4620      	mov	r0, r4
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	20000158 	.word	0x20000158

080045d8 <_malloc_r>:
 80045d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	1ccd      	adds	r5, r1, #3
 80045de:	f025 0503 	bic.w	r5, r5, #3
 80045e2:	3508      	adds	r5, #8
 80045e4:	2d0c      	cmp	r5, #12
 80045e6:	bf38      	it	cc
 80045e8:	250c      	movcc	r5, #12
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	4607      	mov	r7, r0
 80045ee:	db01      	blt.n	80045f4 <_malloc_r+0x1c>
 80045f0:	42a9      	cmp	r1, r5
 80045f2:	d905      	bls.n	8004600 <_malloc_r+0x28>
 80045f4:	230c      	movs	r3, #12
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	2600      	movs	r6, #0
 80045fa:	4630      	mov	r0, r6
 80045fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004600:	4e2e      	ldr	r6, [pc, #184]	; (80046bc <_malloc_r+0xe4>)
 8004602:	f000 f89d 	bl	8004740 <__malloc_lock>
 8004606:	6833      	ldr	r3, [r6, #0]
 8004608:	461c      	mov	r4, r3
 800460a:	bb34      	cbnz	r4, 800465a <_malloc_r+0x82>
 800460c:	4629      	mov	r1, r5
 800460e:	4638      	mov	r0, r7
 8004610:	f7ff ffc2 	bl	8004598 <sbrk_aligned>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	4604      	mov	r4, r0
 8004618:	d14d      	bne.n	80046b6 <_malloc_r+0xde>
 800461a:	6834      	ldr	r4, [r6, #0]
 800461c:	4626      	mov	r6, r4
 800461e:	2e00      	cmp	r6, #0
 8004620:	d140      	bne.n	80046a4 <_malloc_r+0xcc>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	4631      	mov	r1, r6
 8004626:	4638      	mov	r0, r7
 8004628:	eb04 0803 	add.w	r8, r4, r3
 800462c:	f000 f878 	bl	8004720 <_sbrk_r>
 8004630:	4580      	cmp	r8, r0
 8004632:	d13a      	bne.n	80046aa <_malloc_r+0xd2>
 8004634:	6821      	ldr	r1, [r4, #0]
 8004636:	3503      	adds	r5, #3
 8004638:	1a6d      	subs	r5, r5, r1
 800463a:	f025 0503 	bic.w	r5, r5, #3
 800463e:	3508      	adds	r5, #8
 8004640:	2d0c      	cmp	r5, #12
 8004642:	bf38      	it	cc
 8004644:	250c      	movcc	r5, #12
 8004646:	4629      	mov	r1, r5
 8004648:	4638      	mov	r0, r7
 800464a:	f7ff ffa5 	bl	8004598 <sbrk_aligned>
 800464e:	3001      	adds	r0, #1
 8004650:	d02b      	beq.n	80046aa <_malloc_r+0xd2>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	442b      	add	r3, r5
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	e00e      	b.n	8004678 <_malloc_r+0xa0>
 800465a:	6822      	ldr	r2, [r4, #0]
 800465c:	1b52      	subs	r2, r2, r5
 800465e:	d41e      	bmi.n	800469e <_malloc_r+0xc6>
 8004660:	2a0b      	cmp	r2, #11
 8004662:	d916      	bls.n	8004692 <_malloc_r+0xba>
 8004664:	1961      	adds	r1, r4, r5
 8004666:	42a3      	cmp	r3, r4
 8004668:	6025      	str	r5, [r4, #0]
 800466a:	bf18      	it	ne
 800466c:	6059      	strne	r1, [r3, #4]
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	bf08      	it	eq
 8004672:	6031      	streq	r1, [r6, #0]
 8004674:	5162      	str	r2, [r4, r5]
 8004676:	604b      	str	r3, [r1, #4]
 8004678:	4638      	mov	r0, r7
 800467a:	f104 060b 	add.w	r6, r4, #11
 800467e:	f000 f865 	bl	800474c <__malloc_unlock>
 8004682:	f026 0607 	bic.w	r6, r6, #7
 8004686:	1d23      	adds	r3, r4, #4
 8004688:	1af2      	subs	r2, r6, r3
 800468a:	d0b6      	beq.n	80045fa <_malloc_r+0x22>
 800468c:	1b9b      	subs	r3, r3, r6
 800468e:	50a3      	str	r3, [r4, r2]
 8004690:	e7b3      	b.n	80045fa <_malloc_r+0x22>
 8004692:	6862      	ldr	r2, [r4, #4]
 8004694:	42a3      	cmp	r3, r4
 8004696:	bf0c      	ite	eq
 8004698:	6032      	streq	r2, [r6, #0]
 800469a:	605a      	strne	r2, [r3, #4]
 800469c:	e7ec      	b.n	8004678 <_malloc_r+0xa0>
 800469e:	4623      	mov	r3, r4
 80046a0:	6864      	ldr	r4, [r4, #4]
 80046a2:	e7b2      	b.n	800460a <_malloc_r+0x32>
 80046a4:	4634      	mov	r4, r6
 80046a6:	6876      	ldr	r6, [r6, #4]
 80046a8:	e7b9      	b.n	800461e <_malloc_r+0x46>
 80046aa:	230c      	movs	r3, #12
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4638      	mov	r0, r7
 80046b0:	f000 f84c 	bl	800474c <__malloc_unlock>
 80046b4:	e7a1      	b.n	80045fa <_malloc_r+0x22>
 80046b6:	6025      	str	r5, [r4, #0]
 80046b8:	e7de      	b.n	8004678 <_malloc_r+0xa0>
 80046ba:	bf00      	nop
 80046bc:	20000154 	.word	0x20000154

080046c0 <_realloc_r>:
 80046c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c4:	4680      	mov	r8, r0
 80046c6:	4614      	mov	r4, r2
 80046c8:	460e      	mov	r6, r1
 80046ca:	b921      	cbnz	r1, 80046d6 <_realloc_r+0x16>
 80046cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d0:	4611      	mov	r1, r2
 80046d2:	f7ff bf81 	b.w	80045d8 <_malloc_r>
 80046d6:	b92a      	cbnz	r2, 80046e4 <_realloc_r+0x24>
 80046d8:	f7ff ff12 	bl	8004500 <_free_r>
 80046dc:	4625      	mov	r5, r4
 80046de:	4628      	mov	r0, r5
 80046e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e4:	f000 f838 	bl	8004758 <_malloc_usable_size_r>
 80046e8:	4284      	cmp	r4, r0
 80046ea:	4607      	mov	r7, r0
 80046ec:	d802      	bhi.n	80046f4 <_realloc_r+0x34>
 80046ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046f2:	d812      	bhi.n	800471a <_realloc_r+0x5a>
 80046f4:	4621      	mov	r1, r4
 80046f6:	4640      	mov	r0, r8
 80046f8:	f7ff ff6e 	bl	80045d8 <_malloc_r>
 80046fc:	4605      	mov	r5, r0
 80046fe:	2800      	cmp	r0, #0
 8004700:	d0ed      	beq.n	80046de <_realloc_r+0x1e>
 8004702:	42bc      	cmp	r4, r7
 8004704:	4622      	mov	r2, r4
 8004706:	4631      	mov	r1, r6
 8004708:	bf28      	it	cs
 800470a:	463a      	movcs	r2, r7
 800470c:	f7ff fed0 	bl	80044b0 <memcpy>
 8004710:	4631      	mov	r1, r6
 8004712:	4640      	mov	r0, r8
 8004714:	f7ff fef4 	bl	8004500 <_free_r>
 8004718:	e7e1      	b.n	80046de <_realloc_r+0x1e>
 800471a:	4635      	mov	r5, r6
 800471c:	e7df      	b.n	80046de <_realloc_r+0x1e>
	...

08004720 <_sbrk_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d06      	ldr	r5, [pc, #24]	; (800473c <_sbrk_r+0x1c>)
 8004724:	2300      	movs	r3, #0
 8004726:	4604      	mov	r4, r0
 8004728:	4608      	mov	r0, r1
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	f7fc fa22 	bl	8000b74 <_sbrk>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_sbrk_r+0x1a>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_sbrk_r+0x1a>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	2000015c 	.word	0x2000015c

08004740 <__malloc_lock>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__malloc_lock+0x8>)
 8004742:	f000 b811 	b.w	8004768 <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	20000160 	.word	0x20000160

0800474c <__malloc_unlock>:
 800474c:	4801      	ldr	r0, [pc, #4]	; (8004754 <__malloc_unlock+0x8>)
 800474e:	f000 b80c 	b.w	800476a <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	20000160 	.word	0x20000160

08004758 <_malloc_usable_size_r>:
 8004758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475c:	1f18      	subs	r0, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfbc      	itt	lt
 8004762:	580b      	ldrlt	r3, [r1, r0]
 8004764:	18c0      	addlt	r0, r0, r3
 8004766:	4770      	bx	lr

08004768 <__retarget_lock_acquire_recursive>:
 8004768:	4770      	bx	lr

0800476a <__retarget_lock_release_recursive>:
 800476a:	4770      	bx	lr

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
