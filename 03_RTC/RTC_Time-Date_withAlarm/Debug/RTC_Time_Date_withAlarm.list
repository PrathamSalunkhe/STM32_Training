
RTC_Time_Date_withAlarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d60  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004f10  08004f10  00014f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  080050a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080050a8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f425  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020dc  00000000  00000000  0002f4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000315a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00032228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a526  00000000  00000000  00032dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3d6  00000000  00000000  0005d2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fffbb  00000000  00000000  0006b6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa8  00000000  00000000  0016b6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ef8 	.word	0x08004ef8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004ef8 	.word	0x08004ef8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fba6 	bl	8000cea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f83f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f94f 	bl	8000844 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005a6:	f000 f88f 	bl	80006c8 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005aa:	f000 f8b9 	bl	8000720 <MX_RTC_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  /* Get the current time and date from rtc */
	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK
 80005ae:	2200      	movs	r2, #0
 80005b0:	4917      	ldr	r1, [pc, #92]	; (8000610 <main+0x7c>)
 80005b2:	4818      	ldr	r0, [pc, #96]	; (8000614 <main+0x80>)
 80005b4:	f002 fb92 	bl	8002cdc <HAL_RTC_GetTime>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d123      	bne.n	8000606 <main+0x72>
				&& HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 80005be:	2200      	movs	r2, #0
 80005c0:	4915      	ldr	r1, [pc, #84]	; (8000618 <main+0x84>)
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <main+0x80>)
 80005c4:	f002 fc6d 	bl	8002ea2 <HAL_RTC_GetDate>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d11b      	bne.n	8000606 <main+0x72>
	{
		/*print the date and time on terminal */
		printf("Time: %02d:%02d:%02d Date: %02d/%02d/%02d\r\n", sTime.Hours,
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0x7c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
				sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <main+0x7c>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
		printf("Time: %02d:%02d:%02d Date: %02d/%02d/%02d\r\n", sTime.Hours,
 80005d8:	461c      	mov	r4, r3
				sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <main+0x7c>)
 80005dc:	789b      	ldrb	r3, [r3, #2]
		printf("Time: %02d:%02d:%02d Date: %02d/%02d/%02d\r\n", sTime.Hours,
 80005de:	461d      	mov	r5, r3
				sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <main+0x84>)
 80005e2:	789b      	ldrb	r3, [r3, #2]
		printf("Time: %02d:%02d:%02d Date: %02d/%02d/%02d\r\n", sTime.Hours,
 80005e4:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <main+0x84>)
 80005e8:	785b      	ldrb	r3, [r3, #1]
		printf("Time: %02d:%02d:%02d Date: %02d/%02d/%02d\r\n", sTime.Hours,
 80005ea:	4619      	mov	r1, r3
				2000 + sDate.Year);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x84>)
 80005ee:	78db      	ldrb	r3, [r3, #3]
		printf("Time: %02d:%02d:%02d Date: %02d/%02d/%02d\r\n", sTime.Hours,
 80005f0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	462b      	mov	r3, r5
 80005fc:	4622      	mov	r2, r4
 80005fe:	4601      	mov	r1, r0
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x88>)
 8000602:	f003 fc75 	bl	8003ef0 <iprintf>

	/* If you want to print using UART
	 * uncomment the below line */
	//HAL_UART_Transmit(&hlpuart1, (uint8_t *)timeString, strlen(timeString), HAL_MAX_DELAY);

	HAL_Delay(1000);		//delay for 1 sec
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 fbe3 	bl	8000dd4 <HAL_Delay>
	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK
 800060e:	e7ce      	b.n	80005ae <main+0x1a>
 8000610:	20000138 	.word	0x20000138
 8000614:	20000110 	.word	0x20000110
 8000618:	2000014c 	.word	0x2000014c
 800061c:	08004f10 	.word	0x08004f10

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	; 0x58
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2244      	movs	r2, #68	; 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fc56 	bl	8003ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000646:	f000 fec3 	bl	80013d0 <HAL_PWREx_ControlVoltageScaling>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000650:	f000 f97a 	bl	8000948 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000654:	f000 fe9e 	bl	8001394 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <SystemClock_Config+0xa4>)
 800065a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <SystemClock_Config+0xa4>)
 8000660:	f023 0318 	bic.w	r3, r3, #24
 8000664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000668:	2314      	movs	r3, #20
 800066a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000678:	23b0      	movs	r3, #176	; 0xb0
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4618      	mov	r0, r3
 8000686:	f000 ff09 	bl	800149c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000690:	f000 f95a 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fb0f 	bl	8001cd0 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b8:	f000 f946 	bl	8000948 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3758      	adds	r7, #88	; 0x58
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_LPUART1_UART_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_LPUART1_UART_Init+0x50>)
 8000706:	f002 fe77 	bl	80033f8 <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f91a 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000008c 	.word	0x2000008c
 800071c:	40008000 	.word	0x40008000

08000720 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b092      	sub	sp, #72	; 0x48
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000726:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000736:	2300      	movs	r3, #0
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	222c      	movs	r2, #44	; 0x2c
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fbcd 	bl	8003ee0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <MX_RTC_Init+0x118>)
 8000748:	4a3c      	ldr	r2, [pc, #240]	; (800083c <MX_RTC_Init+0x11c>)
 800074a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800074c:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <MX_RTC_Init+0x118>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <MX_RTC_Init+0x118>)
 8000754:	227f      	movs	r2, #127	; 0x7f
 8000756:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000758:	4b37      	ldr	r3, [pc, #220]	; (8000838 <MX_RTC_Init+0x118>)
 800075a:	22ff      	movs	r2, #255	; 0xff
 800075c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <MX_RTC_Init+0x118>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000764:	4b34      	ldr	r3, [pc, #208]	; (8000838 <MX_RTC_Init+0x118>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_RTC_Init+0x118>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000770:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_RTC_Init+0x118>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000776:	4830      	ldr	r0, [pc, #192]	; (8000838 <MX_RTC_Init+0x118>)
 8000778:	f002 f998 	bl	8002aac <HAL_RTC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000782:	f000 f8e1 	bl	8000948 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8000786:	2310      	movs	r3, #16
 8000788:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x20;
 800078c:	2320      	movs	r3, #32
 800078e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000798:	2300      	movs	r3, #0
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007a4:	2201      	movs	r2, #1
 80007a6:	4619      	mov	r1, r3
 80007a8:	4823      	ldr	r0, [pc, #140]	; (8000838 <MX_RTC_Init+0x118>)
 80007aa:	f002 f9fa 	bl	8002ba2 <HAL_RTC_SetTime>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80007b4:	f000 f8c8 	bl	8000948 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_MAY;
 80007be:	2305      	movs	r3, #5
 80007c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x14;
 80007c4:	2314      	movs	r3, #20
 80007c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x24;
 80007ca:	2324      	movs	r3, #36	; 0x24
 80007cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	4817      	ldr	r0, [pc, #92]	; (8000838 <MX_RTC_Init+0x118>)
 80007da:	f002 fadb 	bl	8002d94 <HAL_RTC_SetDate>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80007e4:	f000 f8b0 	bl	8000948 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x00;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x10;
 80007f4:	2310      	movs	r3, #16
 80007f6:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_RTC_Init+0x120>)
 8000802:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x14;
 800080c:	2314      	movs	r3, #20
 800080e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2201      	movs	r2, #1
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_RTC_Init+0x118>)
 8000820:	f002 fb8c 	bl	8002f3c <HAL_RTC_SetAlarm_IT>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800082a:	f000 f88d 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	3748      	adds	r7, #72	; 0x48
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000110 	.word	0x20000110
 800083c:	40002800 	.word	0x40002800
 8000840:	80808000 	.word	0x80808000

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <MX_GPIO_Init+0xa8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <MX_GPIO_Init+0xa8>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_GPIO_Init+0xa8>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_GPIO_Init+0xa8>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <MX_GPIO_Init+0xa8>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_GPIO_Init+0xa8>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_GPIO_Init+0xa8>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_GPIO_Init+0xa8>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_GPIO_Init+0xa8>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80008a2:	f000 fdeb 	bl	800147c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_GPIO_Init+0xa8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <MX_GPIO_Init+0xa8>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_GPIO_Init+0xa8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0xac>)
 80008c4:	f000 fd4e 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0xac>)
 80008e0:	f000 fbae 	bl	8001040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000400 	.word	0x48000400

080008f4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	/* Handle the callback funtion */

	count++;		//increment the count
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_RTC_AlarmAEventCallback+0x48>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_RTC_AlarmAEventCallback+0x48>)
 8000906:	701a      	strb	r2, [r3, #0]

	/* we need alarm event after every 2 minutes */
	if (count == 2)
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_RTC_AlarmAEventCallback+0x48>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b02      	cmp	r3, #2
 800090e:	d10b      	bne.n	8000928 <HAL_RTC_AlarmAEventCallback+0x34>
	{
		/* turn on led at alarm time */
		HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	480a      	ldr	r0, [pc, #40]	; (8000940 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8000916:	f000 fd25 	bl	8001364 <HAL_GPIO_WritePin>
		/* print the msg on terminal */
		printf("Alarm On\r\n");
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <HAL_RTC_AlarmAEventCallback+0x50>)
 800091c:	f003 fb6e 	bl	8003ffc <puts>

		/* Reset the count */
		count = 0;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_RTC_AlarmAEventCallback+0x48>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
	}
	else	//turn off led after alarm event
	{
		HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
	}
}
 8000926:	e004      	b.n	8000932 <HAL_RTC_AlarmAEventCallback+0x3e>
		HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <HAL_RTC_AlarmAEventCallback+0x4c>)
 800092e:	f000 fd19 	bl	8001364 <HAL_GPIO_WritePin>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000134 	.word	0x20000134
 8000940:	48000400 	.word	0x48000400
 8000944:	08004f3c 	.word	0x08004f3c

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_MspInit+0x44>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6613      	str	r3, [r2, #96]	; 0x60
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x44>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6593      	str	r3, [r2, #88]	; 0x58
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ac      	sub	sp, #176	; 0xb0
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	228c      	movs	r2, #140	; 0x8c
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fa8f 	bl	8003ee0 <memset>
  if(huart->Instance==LPUART1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <HAL_UART_MspInit+0xb4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d13d      	bne.n	8000a48 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009cc:	2320      	movs	r3, #32
 80009ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fb9d 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009e4:	f7ff ffb0 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 80009ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 80009f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 8000a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0xb8>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000a18:	f000 fd30 	bl	800147c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000a1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a36:	2308      	movs	r3, #8
 8000a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_UART_MspInit+0xbc>)
 8000a44:	f000 fafc 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	37b0      	adds	r7, #176	; 0xb0
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40008000 	.word	0x40008000
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48001800 	.word	0x48001800

08000a5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0a6      	sub	sp, #152	; 0x98
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	228c      	movs	r2, #140	; 0x8c
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 fa37 	bl	8003ee0 <memset>
  if(hrtc->Instance==RTC)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <HAL_RTC_MspInit+0x6c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d120      	bne.n	8000abe <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fb42 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a9a:	f7ff ff55 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_RTC_MspInit+0x70>)
 8000aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aa4:	4a09      	ldr	r2, [pc, #36]	; (8000acc <HAL_RTC_MspInit+0x70>)
 8000aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2029      	movs	r0, #41	; 0x29
 8000ab4:	f000 fa8d 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000ab8:	2029      	movs	r0, #41	; 0x29
 8000aba:	f000 faa6 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3798      	adds	r7, #152	; 0x98
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40002800 	.word	0x40002800
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f93a 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <RTC_Alarm_IRQHandler+0x10>)
 8000b2a:	f002 fb43 	bl	80031b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000110 	.word	0x20000110

08000b38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00a      	b.n	8000b60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4a:	f3af 8000 	nop.w
 8000b4e:	4601      	mov	r1, r0
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf0      	blt.n	8000b4a <_read+0x12>
  }

  return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	4804      	ldr	r0, [pc, #16]	; (8000b9c <_write+0x28>)
 8000b8c:	f002 fc82 	bl	8003494 <HAL_UART_Transmit>
  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000008c 	.word	0x2000008c

08000ba0 <_close>:

int _close(int file)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_isatty>:

int _isatty(int file)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be0:	2301      	movs	r3, #1
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f003 f928 	bl	8003e8c <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20050000 	.word	0x20050000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	20000150 	.word	0x20000150
 8000c70:	20000168 	.word	0x20000168

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 f8e7 	bl	8003e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cca:	f7ff fc63 	bl	8000594 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cdc:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8000ce0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ce4:	20000168 	.word	0x20000168

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>

08000cea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f961 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f80e 	bl	8000d1c <HAL_InitTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e001      	b.n	8000d10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0c:	f7ff fe22 	bl	8000954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_InitTick+0x6c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d023      	beq.n	8000d78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_InitTick+0x70>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_InitTick+0x6c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f96d 	bl	8001026 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10f      	bne.n	8000d72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d809      	bhi.n	8000d6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d60:	f000 f937 	bl	8000fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_InitTick+0x74>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e004      	b.n	8000d7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	e001      	b.n	8000d7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000154 	.word	0x20000154

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000154 	.word	0x20000154

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	e166      	b.n	800131e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8158 	beq.w	8001318 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x40>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d017      	beq.n	800111e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	6939      	ldr	r1, [r7, #16]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80b2 	beq.w	8001318 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <HAL_GPIO_Init+0x2fc>)
 80011b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b8:	4a60      	ldr	r2, [pc, #384]	; (800133c <HAL_GPIO_Init+0x2fc>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6613      	str	r3, [r2, #96]	; 0x60
 80011c0:	4b5e      	ldr	r3, [pc, #376]	; (800133c <HAL_GPIO_Init+0x2fc>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011cc:	4a5c      	ldr	r2, [pc, #368]	; (8001340 <HAL_GPIO_Init+0x300>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f6:	d02b      	beq.n	8001250 <HAL_GPIO_Init+0x210>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_GPIO_Init+0x304>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d025      	beq.n	800124c <HAL_GPIO_Init+0x20c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x308>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d01f      	beq.n	8001248 <HAL_GPIO_Init+0x208>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_GPIO_Init+0x30c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d019      	beq.n	8001244 <HAL_GPIO_Init+0x204>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x310>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d013      	beq.n	8001240 <HAL_GPIO_Init+0x200>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x314>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00d      	beq.n	800123c <HAL_GPIO_Init+0x1fc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x318>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d007      	beq.n	8001238 <HAL_GPIO_Init+0x1f8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x31c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d101      	bne.n	8001234 <HAL_GPIO_Init+0x1f4>
 8001230:	2307      	movs	r3, #7
 8001232:	e00e      	b.n	8001252 <HAL_GPIO_Init+0x212>
 8001234:	2308      	movs	r3, #8
 8001236:	e00c      	b.n	8001252 <HAL_GPIO_Init+0x212>
 8001238:	2306      	movs	r3, #6
 800123a:	e00a      	b.n	8001252 <HAL_GPIO_Init+0x212>
 800123c:	2305      	movs	r3, #5
 800123e:	e008      	b.n	8001252 <HAL_GPIO_Init+0x212>
 8001240:	2304      	movs	r3, #4
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x212>
 8001244:	2303      	movs	r3, #3
 8001246:	e004      	b.n	8001252 <HAL_GPIO_Init+0x212>
 8001248:	2302      	movs	r3, #2
 800124a:	e002      	b.n	8001252 <HAL_GPIO_Init+0x212>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_GPIO_Init+0x212>
 8001250:	2300      	movs	r3, #0
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	f002 0203 	and.w	r2, r2, #3
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	4093      	lsls	r3, r2
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001262:	4937      	ldr	r1, [pc, #220]	; (8001340 <HAL_GPIO_Init+0x300>)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001270:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_GPIO_Init+0x320>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001294:	4a32      	ldr	r2, [pc, #200]	; (8001360 <HAL_GPIO_Init+0x320>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_GPIO_Init+0x320>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012be:	4a28      	ldr	r2, [pc, #160]	; (8001360 <HAL_GPIO_Init+0x320>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x320>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_GPIO_Init+0x320>)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_GPIO_Init+0x320>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_GPIO_Init+0x320>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	f47f ae91 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	48000400 	.word	0x48000400
 8001348:	48000800 	.word	0x48000800
 800134c:	48000c00 	.word	0x48000c00
 8001350:	48001000 	.word	0x48001000
 8001354:	48001400 	.word	0x48001400
 8001358:	48001800 	.word	0x48001800
 800135c:	48001c00 	.word	0x48001c00
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001380:	e002      	b.n	8001388 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800139e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40007000 	.word	0x40007000

080013b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_PWREx_GetVoltageRange+0x18>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40007000 	.word	0x40007000

080013d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013de:	d130      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ec:	d038      	beq.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2232      	movs	r2, #50	; 0x32
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	3301      	adds	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001414:	e002      	b.n	800141c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3b01      	subs	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001428:	d102      	bne.n	8001430 <HAL_PWREx_ControlVoltageScaling+0x60>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f2      	bne.n	8001416 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143c:	d110      	bne.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e00f      	b.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d007      	beq.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40007000 	.word	0x40007000
 8001474:	20000000 	.word	0x20000000
 8001478:	431bde83 	.word	0x431bde83

0800147c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	6053      	str	r3, [r2, #4]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40007000 	.word	0x40007000

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f000 bc08 	b.w	8001cc0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b0:	4b96      	ldr	r3, [pc, #600]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ba:	4b94      	ldr	r3, [pc, #592]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80e4 	beq.w	800169a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4c>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	f040 808b 	bne.w	80015f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	f040 8087 	bne.w	80015f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e8:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x64>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e3df      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_RCC_OscConfig+0x7e>
 8001510:	4b7e      	ldr	r3, [pc, #504]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001518:	e005      	b.n	8001526 <HAL_RCC_OscConfig+0x8a>
 800151a:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800151c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001526:	4293      	cmp	r3, r2
 8001528:	d223      	bcs.n	8001572 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fd92 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e3c0      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a72      	ldr	r2, [pc, #456]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b70      	ldr	r3, [pc, #448]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	496d      	ldr	r1, [pc, #436]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	4968      	ldr	r1, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e025      	b.n	80015be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001572:	4b66      	ldr	r3, [pc, #408]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a65      	ldr	r2, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4960      	ldr	r1, [pc, #384]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001590:	4b5e      	ldr	r3, [pc, #376]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	495b      	ldr	r1, [pc, #364]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fd52 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e380      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015be:	f000 fc87 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	4950      	ldr	r1, [pc, #320]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80015d0:	5ccb      	ldrb	r3, [r1, r3]
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	4a4e      	ldr	r2, [pc, #312]	; (8001714 <HAL_RCC_OscConfig+0x278>)
 80015dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb9a 	bl	8000d1c <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d052      	beq.n	8001698 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	e364      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d032      	beq.n	8001664 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a42      	ldr	r2, [pc, #264]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160a:	f7ff fbd7 	bl	8000dbc <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001612:	f7ff fbd3 	bl	8000dbc <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e34d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a35      	ldr	r2, [pc, #212]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4930      	ldr	r1, [pc, #192]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	492b      	ldr	r1, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
 8001662:	e01a      	b.n	800169a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001670:	f7ff fba4 	bl	8000dbc <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001678:	f7ff fba0 	bl	8000dbc <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e31a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1dc>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d073      	beq.n	800178e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x21c>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	d10e      	bne.n	80016d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d10b      	bne.n	80016d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d063      	beq.n	800178c <HAL_RCC_OscConfig+0x2f0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d15f      	bne.n	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e2f7      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x24c>
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e025      	b.n	8001734 <HAL_RCC_OscConfig+0x298>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f0:	d114      	bne.n	800171c <HAL_RCC_OscConfig+0x280>
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_RCC_OscConfig+0x270>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a02      	ldr	r2, [pc, #8]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e013      	b.n	8001734 <HAL_RCC_OscConfig+0x298>
 800170c:	40021000 	.word	0x40021000
 8001710:	08004f48 	.word	0x08004f48
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004
 800171c:	4ba0      	ldr	r3, [pc, #640]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a9f      	ldr	r2, [pc, #636]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b9d      	ldr	r3, [pc, #628]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a9c      	ldr	r2, [pc, #624]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fb3e 	bl	8000dbc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fb3a 	bl	8000dbc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e2b4      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x2a8>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fb2a 	bl	8000dbc <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fb26 	bl	8000dbc <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e2a0      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177e:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x2d0>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d060      	beq.n	800185c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d005      	beq.n	80017ac <HAL_RCC_OscConfig+0x310>
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d119      	bne.n	80017da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d116      	bne.n	80017da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x328>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e27d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	4973      	ldr	r1, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d8:	e040      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d023      	beq.n	800182a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e2:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6e      	ldr	r2, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fae5 	bl	8000dbc <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fae1 	bl	8000dbc <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e25b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001808:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	495f      	ldr	r1, [pc, #380]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
 8001828:	e018      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a5c      	ldr	r2, [pc, #368]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fac1 	bl	8000dbc <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff fabd 	bl	8000dbc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e237      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d03c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01c      	beq.n	80018aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001876:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001880:	f7ff fa9c 	bl	8000dbc <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff fa98 	bl	8000dbc <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e212      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ef      	beq.n	8001888 <HAL_RCC_OscConfig+0x3ec>
 80018a8:	e01b      	b.n	80018e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b0:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff fa7f 	bl	8000dbc <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff fa7b 	bl	8000dbc <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1f5      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ef      	bne.n	80018c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a6 	beq.w	8001a3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10d      	bne.n	800191c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190a:	6593      	str	r3, [r2, #88]	; 0x58
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001918:	2301      	movs	r3, #1
 800191a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d118      	bne.n	800195a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001934:	f7ff fa42 	bl	8000dbc <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193c:	f7ff fa3e 	bl	8000dbc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1b8      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_RCC_OscConfig+0x508>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <HAL_RCC_OscConfig+0x4d8>
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001972:	e029      	b.n	80019c8 <HAL_RCC_OscConfig+0x52c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d115      	bne.n	80019a8 <HAL_RCC_OscConfig+0x50c>
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001992:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_RCC_OscConfig+0x504>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x52c>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
 80019a8:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a9c      	ldr	r2, [pc, #624]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b8:	4b99      	ldr	r3, [pc, #612]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d016      	beq.n	80019fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f9f4 	bl	8000dbc <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff f9f0 	bl	8000dbc <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e168      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ed      	beq.n	80019d8 <HAL_RCC_OscConfig+0x53c>
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff f9dd 	bl	8000dbc <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff f9d9 	bl	8000dbc <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e151      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1c:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ed      	bne.n	8001a06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	4a7a      	ldr	r2, [pc, #488]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a56:	4a72      	ldr	r2, [pc, #456]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff f9ac 	bl	8000dbc <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a68:	f7ff f9a8 	bl	8000dbc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e122      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7a:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ef      	beq.n	8001a68 <HAL_RCC_OscConfig+0x5cc>
 8001a88:	e01b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a90:	4a63      	ldr	r2, [pc, #396]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f98f 	bl	8000dbc <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa2:	f7ff f98b 	bl	8000dbc <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e105      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ef      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80f9 	beq.w	8001cbe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 80cf 	bne.w	8001c74 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0203 	and.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d12c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	3b01      	subs	r3, #1
 8001af6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d123      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d11b      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d113      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	085b      	lsrs	r3, r3, #1
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d109      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d071      	beq.n	8001c28 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d068      	beq.n	8001c1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0ac      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b72:	f7ff f923 	bl	8000dbc <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f91f 	bl	8000dbc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e099      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x788>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ba8:	3a01      	subs	r2, #1
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	4311      	orrs	r1, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bb2:	0212      	lsls	r2, r2, #8
 8001bb4:	4311      	orrs	r1, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bba:	0852      	lsrs	r2, r2, #1
 8001bbc:	3a01      	subs	r2, #1
 8001bbe:	0552      	lsls	r2, r2, #21
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bc6:	0852      	lsrs	r2, r2, #1
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0652      	lsls	r2, r2, #25
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bd2:	06d2      	lsls	r2, r2, #27
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	4912      	ldr	r1, [pc, #72]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf4:	f7ff f8e2 	bl	8000dbc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f8de 	bl	8000dbc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x784>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c1a:	e050      	b.n	8001cbe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e04f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
 8001c20:	40021000 	.word	0x40021000
 8001c24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d144      	bne.n	8001cbe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c4c:	f7ff f8b6 	bl	8000dbc <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff f8b2 	bl	8000dbc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e02c      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x7b8>
 8001c72:	e024      	b.n	8001cbe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d01f      	beq.n	8001cba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff f899 	bl	8000dbc <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7ff f895 	bl	8000dbc <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e00f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <HAL_RCC_OscConfig+0x82c>)
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_OscConfig+0x830>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e001      	b.n	8001cbe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	feeefffc 	.word	0xfeeefffc

08001cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0e7      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d910      	bls.n	8001d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b72      	ldr	r3, [pc, #456]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	4970      	ldr	r1, [pc, #448]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b6e      	ldr	r3, [pc, #440]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0cf      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d908      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4960      	ldr	r1, [pc, #384]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d04c      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d121      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0a6      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b54      	ldr	r3, [pc, #336]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e09a      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e08e      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e086      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b46      	ldr	r3, [pc, #280]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4943      	ldr	r1, [pc, #268]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db8:	f7ff f800 	bl	8000dbc <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7fe fffc 	bl	8000dbc <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e06e      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d208      	bcs.n	8001e16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	492b      	ldr	r1, [pc, #172]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d210      	bcs.n	8001e46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 0207 	bic.w	r2, r3, #7
 8001e2c:	4923      	ldr	r1, [pc, #140]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_ClockConfig+0x1ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e036      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e84:	f000 f824 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	490b      	ldr	r1, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1fc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe ff37 	bl	8000d1c <HAL_InitTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08004f48 	.word	0x08004f48
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x34>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d121      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d11e      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e005      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e004      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d134      	bne.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d003      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0xac>
 8001f74:	e005      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f78:	617b      	str	r3, [r7, #20]
      break;
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f7e:	617b      	str	r3, [r7, #20]
      break;
 8001f80:	e002      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	617b      	str	r3, [r7, #20]
      break;
 8001f86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	fb03 f202 	mul.w	r2, r3, r2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	0e5b      	lsrs	r3, r3, #25
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08004f60 	.word	0x08004f60
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4904      	ldr	r1, [pc, #16]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	08004f58 	.word	0x08004f58

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002030:	f7ff ffda 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08004f58 	.word	0x08004f58

08002058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002070:	f7ff f9a0 	bl	80013b4 <HAL_PWREx_GetVoltageRange>
 8002074:	6178      	str	r0, [r7, #20]
 8002076:	e014      	b.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	4a24      	ldr	r2, [pc, #144]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	6593      	str	r3, [r2, #88]	; 0x58
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002090:	f7ff f990 	bl	80013b4 <HAL_PWREx_GetVoltageRange>
 8002094:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a8:	d10b      	bne.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d919      	bls.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2ba0      	cmp	r3, #160	; 0xa0
 80020b4:	d902      	bls.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b6:	2302      	movs	r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e013      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e010      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b80      	cmp	r3, #128	; 0x80
 80020c6:	d902      	bls.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020c8:	2303      	movs	r3, #3
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e00a      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d102      	bne.n	80020da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020d4:	2302      	movs	r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e004      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b70      	cmp	r3, #112	; 0x70
 80020de:	d101      	bne.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 0207 	bic.w	r2, r3, #7
 80020ec:	4909      	ldr	r1, [pc, #36]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	40022000 	.word	0x40022000

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002120:	2300      	movs	r3, #0
 8002122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002124:	2300      	movs	r3, #0
 8002126:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002130:	2b00      	cmp	r3, #0
 8002132:	d041      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002138:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800213c:	d02a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800213e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002142:	d824      	bhi.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002148:	d008      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800214a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800214e:	d81e      	bhi.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002158:	d010      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800215a:	e018      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800215c:	4b86      	ldr	r3, [pc, #536]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a85      	ldr	r2, [pc, #532]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002168:	e015      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f000 facd 	bl	8002710 <RCCEx_PLLSAI1_Config>
 8002176:	4603      	mov	r3, r0
 8002178:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800217a:	e00c      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3320      	adds	r3, #32
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fbb6 	bl	80028f4 <RCCEx_PLLSAI2_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800218c:	e003      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	74fb      	strb	r3, [r7, #19]
      break;
 8002192:	e000      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800219c:	4b76      	ldr	r3, [pc, #472]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021aa:	4973      	ldr	r1, [pc, #460]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021b2:	e001      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d041      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021cc:	d02a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021d2:	d824      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d8:	d008      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021de:	d81e      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d010      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ea:	e018      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021ec:	4b62      	ldr	r3, [pc, #392]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a61      	ldr	r2, [pc, #388]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021f8:	e015      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fa85 	bl	8002710 <RCCEx_PLLSAI1_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800220a:	e00c      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3320      	adds	r3, #32
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fb6e 	bl	80028f4 <RCCEx_PLLSAI2_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800221c:	e003      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	74fb      	strb	r3, [r7, #19]
      break;
 8002222:	e000      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800222c:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223a:	494f      	ldr	r1, [pc, #316]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002242:	e001      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a0 	beq.w	8002396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a40      	ldr	r2, [pc, #256]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3a      	ldr	r2, [pc, #232]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002298:	f7fe fd90 	bl	8000dbc <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800229e:	e009      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fd8c 	bl	8000dbc <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d902      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	74fb      	strb	r3, [r7, #19]
        break;
 80022b2:	e005      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ef      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d15c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d019      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fd4b 	bl	8000dbc <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002328:	e00b      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fd47 	bl	8000dbc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d902      	bls.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	74fb      	strb	r3, [r7, #19]
            break;
 8002340:	e006      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ec      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800236e:	e009      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
 8002374:	e006      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002384:	7c7b      	ldrb	r3, [r7, #17]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4ba6      	ldr	r3, [pc, #664]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4aa5      	ldr	r2, [pc, #660]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a2:	4ba0      	ldr	r3, [pc, #640]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f023 0203 	bic.w	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	499c      	ldr	r1, [pc, #624]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c4:	4b97      	ldr	r3, [pc, #604]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 020c 	bic.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	4994      	ldr	r1, [pc, #592]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e6:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	498b      	ldr	r1, [pc, #556]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002408:	4b86      	ldr	r3, [pc, #536]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4983      	ldr	r1, [pc, #524]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800242a:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	497a      	ldr	r1, [pc, #488]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244c:	4b75      	ldr	r3, [pc, #468]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4972      	ldr	r1, [pc, #456]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247c:	4969      	ldr	r1, [pc, #420]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002490:	4b64      	ldr	r3, [pc, #400]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249e:	4961      	ldr	r1, [pc, #388]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	4958      	ldr	r1, [pc, #352]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d4:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	4950      	ldr	r1, [pc, #320]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f6:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	4947      	ldr	r1, [pc, #284]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002518:	4b42      	ldr	r3, [pc, #264]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	493f      	ldr	r1, [pc, #252]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4936      	ldr	r1, [pc, #216]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002558:	d106      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255a:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002564:	60d3      	str	r3, [r2, #12]
 8002566:	e011      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f8c9 	bl	8002710 <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d028      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a6:	491f      	ldr	r1, [pc, #124]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d106      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
 80025c4:	e011      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ce:	d10c      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f89a 	bl	8002710 <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d02a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002614:	d108      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002616:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a02      	ldr	r2, [pc, #8]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800261c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002620:	60d3      	str	r3, [r2, #12]
 8002622:	e013      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002624:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800262c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002630:	d10c      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	2101      	movs	r1, #1
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f869 	bl	8002710 <RCCEx_PLLSAI1_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02f      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002666:	4929      	ldr	r1, [pc, #164]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002676:	d10d      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2102      	movs	r1, #2
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f846 	bl	8002710 <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d014      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
 8002692:	e011      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3320      	adds	r3, #32
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f925 	bl	80028f4 <RCCEx_PLLSAI2_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d4:	490d      	ldr	r1, [pc, #52]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f8:	4904      	ldr	r1, [pc, #16]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002700:	7cbb      	ldrb	r3, [r7, #18]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800271e:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d018      	beq.n	800275c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800272a:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0203 	and.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d10d      	bne.n	8002756 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
       ||
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002742:	4b6b      	ldr	r3, [pc, #428]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
       ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d047      	beq.n	80027e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e044      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d018      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0x86>
 8002764:	2b03      	cmp	r3, #3
 8002766:	d825      	bhi.n	80027b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002768:	2b01      	cmp	r3, #1
 800276a:	d002      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x62>
 800276c:	2b02      	cmp	r3, #2
 800276e:	d009      	beq.n	8002784 <RCCEx_PLLSAI1_Config+0x74>
 8002770:	e020      	b.n	80027b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11d      	bne.n	80027ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002782:	e01a      	b.n	80027ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002784:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278c:	2b00      	cmp	r3, #0
 800278e:	d116      	bne.n	80027be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e013      	b.n	80027be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002796:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027b2:	e006      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e004      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ba:	bf00      	nop
 80027bc:	e002      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	430b      	orrs	r3, r1
 80027e0:	4943      	ldr	r1, [pc, #268]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d17c      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027ec:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3f      	ldr	r2, [pc, #252]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fae0 	bl	8000dbc <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027fe:	e009      	b.n	8002814 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002800:	f7fe fadc 	bl	8000dbc <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	73fb      	strb	r3, [r7, #15]
        break;
 8002812:	e005      	b.n	8002820 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ef      	bne.n	8002800 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d15f      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d110      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6892      	ldr	r2, [r2, #8]
 800283c:	0211      	lsls	r1, r2, #8
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	06d2      	lsls	r2, r2, #27
 8002844:	430a      	orrs	r2, r1
 8002846:	492a      	ldr	r1, [pc, #168]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002848:	4313      	orrs	r3, r2
 800284a:	610b      	str	r3, [r1, #16]
 800284c:	e027      	b.n	800289e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d112      	bne.n	800287a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800285c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6892      	ldr	r2, [r2, #8]
 8002864:	0211      	lsls	r1, r2, #8
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6912      	ldr	r2, [r2, #16]
 800286a:	0852      	lsrs	r2, r2, #1
 800286c:	3a01      	subs	r2, #1
 800286e:	0552      	lsls	r2, r2, #21
 8002870:	430a      	orrs	r2, r1
 8002872:	491f      	ldr	r1, [pc, #124]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	610b      	str	r3, [r1, #16]
 8002878:	e011      	b.n	800289e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	0211      	lsls	r1, r2, #8
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6952      	ldr	r2, [r2, #20]
 8002890:	0852      	lsrs	r2, r2, #1
 8002892:	3a01      	subs	r2, #1
 8002894:	0652      	lsls	r2, r2, #25
 8002896:	430a      	orrs	r2, r1
 8002898:	4915      	ldr	r1, [pc, #84]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fa87 	bl	8000dbc <HAL_GetTick>
 80028ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028b0:	e009      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028b2:	f7fe fa83 	bl	8000dbc <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d902      	bls.n	80028c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	73fb      	strb	r3, [r7, #15]
          break;
 80028c4:	e005      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0ef      	beq.n	80028b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000

080028f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002902:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d018      	beq.n	8002940 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800290e:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
       ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002926:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
       ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d047      	beq.n	80029ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e044      	b.n	80029ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d018      	beq.n	800297a <RCCEx_PLLSAI2_Config+0x86>
 8002948:	2b03      	cmp	r3, #3
 800294a:	d825      	bhi.n	8002998 <RCCEx_PLLSAI2_Config+0xa4>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d002      	beq.n	8002956 <RCCEx_PLLSAI2_Config+0x62>
 8002950:	2b02      	cmp	r3, #2
 8002952:	d009      	beq.n	8002968 <RCCEx_PLLSAI2_Config+0x74>
 8002954:	e020      	b.n	8002998 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002956:	4b54      	ldr	r3, [pc, #336]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002966:	e01a      	b.n	800299e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002978:	e013      	b.n	80029a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800297a:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002986:	4b48      	ldr	r3, [pc, #288]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002996:	e006      	b.n	80029a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e004      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	430b      	orrs	r3, r1
 80029c4:	4938      	ldr	r1, [pc, #224]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d166      	bne.n	8002a9e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029d0:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe f9ee 	bl	8000dbc <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029e2:	e009      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029e4:	f7fe f9ea 	bl	8000dbc <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	73fb      	strb	r3, [r7, #15]
        break;
 80029f6:	e005      	b.n	8002a04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ef      	bne.n	80029e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d149      	bne.n	8002a9e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d110      	bne.n	8002a32 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6892      	ldr	r2, [r2, #8]
 8002a20:	0211      	lsls	r1, r2, #8
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	06d2      	lsls	r2, r2, #27
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	491f      	ldr	r1, [pc, #124]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	614b      	str	r3, [r1, #20]
 8002a30:	e011      	b.n	8002a56 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6892      	ldr	r2, [r2, #8]
 8002a42:	0211      	lsls	r1, r2, #8
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6912      	ldr	r2, [r2, #16]
 8002a48:	0852      	lsrs	r2, r2, #1
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	0652      	lsls	r2, r2, #25
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	4915      	ldr	r1, [pc, #84]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe f9ab 	bl	8000dbc <HAL_GetTick>
 8002a66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a68:	e009      	b.n	8002a7e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a6a:	f7fe f9a7 	bl	8000dbc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d902      	bls.n	8002a7e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	73fb      	strb	r3, [r7, #15]
          break;
 8002a7c:	e005      	b.n	8002a8a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ef      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	4903      	ldr	r1, [pc, #12]	; (8002aa8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d06c      	beq.n	8002b98 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd ffc2 	bl	8000a5c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	22ca      	movs	r2, #202	; 0xca
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2253      	movs	r2, #83	; 0x53
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fbcb 	bl	800328c <RTC_EnterInitMode>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d14b      	bne.n	8002b98 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b12:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fbcf 	bl	80032f4 <RTC_ExitInitMode>
 8002b56:	4603      	mov	r3, r0
 8002b58:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11b      	bne.n	8002b98 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0203 	bic.w	r2, r2, #3
 8002b6e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ba2:	b590      	push	{r4, r7, lr}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_RTC_SetTime+0x1a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e08b      	b.n	8002cd4 <HAL_RTC_SetTime+0x132>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	22ca      	movs	r2, #202	; 0xca
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2253      	movs	r2, #83	; 0x53
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fb55 	bl	800328c <RTC_EnterInitMode>
 8002be2:	4603      	mov	r3, r0
 8002be4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d163      	bne.n	8002cb4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d126      	bne.n	8002c40 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2200      	movs	r2, #0
 8002c04:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fbb0 	bl	8003370 <RTC_ByteToBcd2>
 8002c10:	4603      	mov	r3, r0
 8002c12:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fba9 	bl	8003370 <RTC_ByteToBcd2>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c22:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	789b      	ldrb	r3, [r3, #2]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fba1 	bl	8003370 <RTC_ByteToBcd2>
 8002c2e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c30:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	78db      	ldrb	r3, [r3, #3]
 8002c38:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e018      	b.n	8002c72 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2200      	movs	r2, #0
 8002c52:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c60:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c66:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	78db      	ldrb	r3, [r3, #3]
 8002c6c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002c7c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c80:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6899      	ldr	r1, [r3, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fb22 	bl	80032f4 <RTC_ExitInitMode>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd90      	pop	{r4, r7, pc}

08002cdc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	0d9b      	lsrs	r3, r3, #22
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11a      	bne.n	8002d8a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fb29 	bl	80033b0 <RTC_Bcd2ToByte>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fb20 	bl	80033b0 <RTC_Bcd2ToByte>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	789b      	ldrb	r3, [r3, #2]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fb17 	bl	80033b0 <RTC_Bcd2ToByte>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_RTC_SetDate+0x1a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e075      	b.n	8002e9a <HAL_RTC_SetDate+0x106>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10e      	bne.n	8002de2 <HAL_RTC_SetDate+0x4e>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	f023 0310 	bic.w	r3, r3, #16
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	330a      	adds	r3, #10
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11c      	bne.n	8002e22 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	78db      	ldrb	r3, [r3, #3]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fabf 	bl	8003370 <RTC_ByteToBcd2>
 8002df2:	4603      	mov	r3, r0
 8002df4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fab8 	bl	8003370 <RTC_ByteToBcd2>
 8002e00:	4603      	mov	r3, r0
 8002e02:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e04:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	789b      	ldrb	r3, [r3, #2]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fab0 	bl	8003370 <RTC_ByteToBcd2>
 8002e10:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e12:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e00e      	b.n	8002e40 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	78db      	ldrb	r3, [r3, #3]
 8002e26:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e2e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e34:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	22ca      	movs	r2, #202	; 0xca
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2253      	movs	r2, #83	; 0x53
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fa1b 	bl	800328c <RTC_EnterInitMode>
 8002e56:	4603      	mov	r3, r0
 8002e58:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e6e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa3f 	bl	80032f4 <RTC_ExitInitMode>
 8002e76:	4603      	mov	r3, r0
 8002e78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	22ff      	movs	r2, #255	; 0xff
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd90      	pop	{r4, r7, pc}

08002ea2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002eb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	0b5b      	lsrs	r3, r3, #13
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11a      	bne.n	8002f32 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	78db      	ldrb	r3, [r3, #3]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fa55 	bl	80033b0 <RTC_Bcd2ToByte>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa4c 	bl	80033b0 <RTC_Bcd2ToByte>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	789b      	ldrb	r3, [r3, #2]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fa43 	bl	80033b0 <RTC_Bcd2ToByte>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_RTC_SetAlarm_IT+0x1a>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e127      	b.n	80031a6 <HAL_RTC_SetAlarm_IT+0x26a>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d137      	bne.n	8002fdc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 f9f3 	bl	8003370 <RTC_ByteToBcd2>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f9ec 	bl	8003370 <RTC_ByteToBcd2>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002f9c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	789b      	ldrb	r3, [r3, #2]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f9e4 	bl	8003370 <RTC_ByteToBcd2>
 8002fa8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002faa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	78db      	ldrb	r3, [r3, #3]
 8002fb2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002fb4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f9d6 	bl	8003370 <RTC_ByteToBcd2>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002fc8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002fd0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e023      	b.n	8003024 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ffc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003002:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800300a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003012:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003014:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800301a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003020:	4313      	orrs	r3, r2
 8003022:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	22ca      	movs	r2, #202	; 0xca
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2253      	movs	r2, #83	; 0x53
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003048:	d14a      	bne.n	80030e0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003058:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800306a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800306c:	f7fd fea6 	bl	8000dbc <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003072:	e015      	b.n	80030a0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003074:	f7fd fea2 	bl	8000dbc <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003082:	d90d      	bls.n	80030a0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2203      	movs	r2, #3
 8003090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e082      	b.n	80031a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0e2      	beq.n	8003074 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030cc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	e049      	b.n	8003174 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030ee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003100:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003102:	f7fd fe5b 	bl	8000dbc <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003108:	e015      	b.n	8003136 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800310a:	f7fd fe57 	bl	8000dbc <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003118:	d90d      	bls.n	8003136 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	22ff      	movs	r2, #255	; 0xff
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2203      	movs	r2, #3
 8003126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e037      	b.n	80031a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0e2      	beq.n	800310a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003162:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003172:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <HAL_RTC_SetAlarm_IT+0x274>)
 800317a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8003186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <HAL_RTC_AlarmIRQHandler+0x88>)
 80031be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80031c2:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80031f0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd fb7e 	bl	80008f4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003224:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8dc 	bl	80033e4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40010400 	.word	0x40010400

08003240 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003256:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003258:	f7fd fdb0 	bl	8000dbc <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800325e:	e009      	b.n	8003274 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003260:	f7fd fdac 	bl	8000dbc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800326e:	d901      	bls.n	8003274 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e007      	b.n	8003284 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0ee      	beq.n	8003260 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d120      	bne.n	80032e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032b0:	f7fd fd84 	bl	8000dbc <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032b6:	e00d      	b.n	80032d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80032b8:	f7fd fd80 	bl	8000dbc <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032c6:	d905      	bls.n	80032d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2203      	movs	r2, #3
 80032d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <RTC_EnterInitMode+0x5c>
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d1e7      	bne.n	80032b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <RTC_ExitInitMode+0x78>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <RTC_ExitInitMode+0x78>)
 8003306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <RTC_ExitInitMode+0x78>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10c      	bne.n	8003332 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff91 	bl	8003240 <HAL_RTC_WaitForSynchro>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01e      	beq.n	8003362 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2203      	movs	r2, #3
 8003328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e017      	b.n	8003362 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <RTC_ExitInitMode+0x78>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	4a0d      	ldr	r2, [pc, #52]	; (800336c <RTC_ExitInitMode+0x78>)
 8003338:	f023 0320 	bic.w	r3, r3, #32
 800333c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff7e 	bl	8003240 <HAL_RTC_WaitForSynchro>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <RTC_ExitInitMode+0x78>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <RTC_ExitInitMode+0x78>)
 800335c:	f043 0320 	orr.w	r3, r3, #32
 8003360:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40002800 	.word	0x40002800

08003370 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003382:	e005      	b.n	8003390 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800338a:	7afb      	ldrb	r3, [r7, #11]
 800338c:	3b0a      	subs	r3, #10
 800338e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	2b09      	cmp	r3, #9
 8003394:	d8f6      	bhi.n	8003384 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	b2da      	uxtb	r2, r3
 800339e:	7afb      	ldrb	r3, [r7, #11]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	0092      	lsls	r2, r2, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	4413      	add	r3, r2
 80033d6:	b2db      	uxtb	r3, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e040      	b.n	800348c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd fabe 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8c0 	bl	80035bc <UART_SetConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e022      	b.n	800348c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fb6c 	bl	8003b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fbf3 	bl	8003c70 <UART_CheckIdleState>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	f040 8082 	bne.w	80035b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_UART_Transmit+0x26>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07a      	b.n	80035b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_UART_Transmit+0x38>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e073      	b.n	80035b4 <HAL_UART_Transmit+0x120>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2221      	movs	r2, #33	; 0x21
 80034e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e2:	f7fd fc6b 	bl	8000dbc <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	d108      	bne.n	8003514 <HAL_UART_Transmit+0x80>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	e003      	b.n	800351c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003524:	e02d      	b.n	8003582 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fbe6 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e039      	b.n	80035b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	881a      	ldrh	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003552:	b292      	uxth	r2, r2
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	3302      	adds	r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e008      	b.n	8003570 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b292      	uxth	r2, r2
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1cb      	bne.n	8003526 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2140      	movs	r1, #64	; 0x40
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fbb2 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e005      	b.n	80035b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b08a      	sub	sp, #40	; 0x28
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4ba4      	ldr	r3, [pc, #656]	; (800387c <UART_SetConfig+0x2c0>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a99      	ldr	r2, [pc, #612]	; (8003880 <UART_SetConfig+0x2c4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4313      	orrs	r3, r2
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a90      	ldr	r2, [pc, #576]	; (8003884 <UART_SetConfig+0x2c8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d126      	bne.n	8003694 <UART_SetConfig+0xd8>
 8003646:	4b90      	ldr	r3, [pc, #576]	; (8003888 <UART_SetConfig+0x2cc>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d81b      	bhi.n	800368c <UART_SetConfig+0xd0>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <UART_SetConfig+0xa0>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800366d 	.word	0x0800366d
 8003660:	0800367d 	.word	0x0800367d
 8003664:	08003675 	.word	0x08003675
 8003668:	08003685 	.word	0x08003685
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e116      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003674:	2302      	movs	r3, #2
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e112      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800367c:	2304      	movs	r3, #4
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e10e      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003684:	2308      	movs	r3, #8
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368a:	e10a      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800368c:	2310      	movs	r3, #16
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e106      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a7c      	ldr	r2, [pc, #496]	; (800388c <UART_SetConfig+0x2d0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d138      	bne.n	8003710 <UART_SetConfig+0x154>
 800369e:	4b7a      	ldr	r3, [pc, #488]	; (8003888 <UART_SetConfig+0x2cc>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d82d      	bhi.n	8003708 <UART_SetConfig+0x14c>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0xf8>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	08003709 	.word	0x08003709
 80036bc:	08003709 	.word	0x08003709
 80036c0:	08003709 	.word	0x08003709
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	08003709 	.word	0x08003709
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
 80036d4:	080036f1 	.word	0x080036f1
 80036d8:	08003709 	.word	0x08003709
 80036dc:	08003709 	.word	0x08003709
 80036e0:	08003709 	.word	0x08003709
 80036e4:	08003701 	.word	0x08003701
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e0d8      	b.n	80038a2 <UART_SetConfig+0x2e6>
 80036f0:	2302      	movs	r3, #2
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e0d4      	b.n	80038a2 <UART_SetConfig+0x2e6>
 80036f8:	2304      	movs	r3, #4
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e0d0      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003700:	2308      	movs	r3, #8
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e0cc      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003708:	2310      	movs	r3, #16
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e0c8      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5e      	ldr	r2, [pc, #376]	; (8003890 <UART_SetConfig+0x2d4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d125      	bne.n	8003766 <UART_SetConfig+0x1aa>
 800371a:	4b5b      	ldr	r3, [pc, #364]	; (8003888 <UART_SetConfig+0x2cc>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003724:	2b30      	cmp	r3, #48	; 0x30
 8003726:	d016      	beq.n	8003756 <UART_SetConfig+0x19a>
 8003728:	2b30      	cmp	r3, #48	; 0x30
 800372a:	d818      	bhi.n	800375e <UART_SetConfig+0x1a2>
 800372c:	2b20      	cmp	r3, #32
 800372e:	d00a      	beq.n	8003746 <UART_SetConfig+0x18a>
 8003730:	2b20      	cmp	r3, #32
 8003732:	d814      	bhi.n	800375e <UART_SetConfig+0x1a2>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <UART_SetConfig+0x182>
 8003738:	2b10      	cmp	r3, #16
 800373a:	d008      	beq.n	800374e <UART_SetConfig+0x192>
 800373c:	e00f      	b.n	800375e <UART_SetConfig+0x1a2>
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003744:	e0ad      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003746:	2302      	movs	r3, #2
 8003748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374c:	e0a9      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800374e:	2304      	movs	r3, #4
 8003750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003754:	e0a5      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003756:	2308      	movs	r3, #8
 8003758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375c:	e0a1      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800375e:	2310      	movs	r3, #16
 8003760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003764:	e09d      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <UART_SetConfig+0x2d8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d125      	bne.n	80037bc <UART_SetConfig+0x200>
 8003770:	4b45      	ldr	r3, [pc, #276]	; (8003888 <UART_SetConfig+0x2cc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800377a:	2bc0      	cmp	r3, #192	; 0xc0
 800377c:	d016      	beq.n	80037ac <UART_SetConfig+0x1f0>
 800377e:	2bc0      	cmp	r3, #192	; 0xc0
 8003780:	d818      	bhi.n	80037b4 <UART_SetConfig+0x1f8>
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d00a      	beq.n	800379c <UART_SetConfig+0x1e0>
 8003786:	2b80      	cmp	r3, #128	; 0x80
 8003788:	d814      	bhi.n	80037b4 <UART_SetConfig+0x1f8>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <UART_SetConfig+0x1d8>
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d008      	beq.n	80037a4 <UART_SetConfig+0x1e8>
 8003792:	e00f      	b.n	80037b4 <UART_SetConfig+0x1f8>
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e082      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800379c:	2302      	movs	r3, #2
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e07e      	b.n	80038a2 <UART_SetConfig+0x2e6>
 80037a4:	2304      	movs	r3, #4
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037aa:	e07a      	b.n	80038a2 <UART_SetConfig+0x2e6>
 80037ac:	2308      	movs	r3, #8
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e076      	b.n	80038a2 <UART_SetConfig+0x2e6>
 80037b4:	2310      	movs	r3, #16
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e072      	b.n	80038a2 <UART_SetConfig+0x2e6>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a35      	ldr	r2, [pc, #212]	; (8003898 <UART_SetConfig+0x2dc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d12a      	bne.n	800381c <UART_SetConfig+0x260>
 80037c6:	4b30      	ldr	r3, [pc, #192]	; (8003888 <UART_SetConfig+0x2cc>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d4:	d01a      	beq.n	800380c <UART_SetConfig+0x250>
 80037d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037da:	d81b      	bhi.n	8003814 <UART_SetConfig+0x258>
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e0:	d00c      	beq.n	80037fc <UART_SetConfig+0x240>
 80037e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e6:	d815      	bhi.n	8003814 <UART_SetConfig+0x258>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <UART_SetConfig+0x238>
 80037ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f0:	d008      	beq.n	8003804 <UART_SetConfig+0x248>
 80037f2:	e00f      	b.n	8003814 <UART_SetConfig+0x258>
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e052      	b.n	80038a2 <UART_SetConfig+0x2e6>
 80037fc:	2302      	movs	r3, #2
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e04e      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003804:	2304      	movs	r3, #4
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e04a      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800380c:	2308      	movs	r3, #8
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e046      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003814:	2310      	movs	r3, #16
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e042      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a17      	ldr	r2, [pc, #92]	; (8003880 <UART_SetConfig+0x2c4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d13a      	bne.n	800389c <UART_SetConfig+0x2e0>
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <UART_SetConfig+0x2cc>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003830:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003834:	d01a      	beq.n	800386c <UART_SetConfig+0x2b0>
 8003836:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800383a:	d81b      	bhi.n	8003874 <UART_SetConfig+0x2b8>
 800383c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003840:	d00c      	beq.n	800385c <UART_SetConfig+0x2a0>
 8003842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003846:	d815      	bhi.n	8003874 <UART_SetConfig+0x2b8>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <UART_SetConfig+0x298>
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d008      	beq.n	8003864 <UART_SetConfig+0x2a8>
 8003852:	e00f      	b.n	8003874 <UART_SetConfig+0x2b8>
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385a:	e022      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800385c:	2302      	movs	r3, #2
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e01e      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003864:	2304      	movs	r3, #4
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e01a      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800386c:	2308      	movs	r3, #8
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e016      	b.n	80038a2 <UART_SetConfig+0x2e6>
 8003874:	2310      	movs	r3, #16
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e012      	b.n	80038a2 <UART_SetConfig+0x2e6>
 800387c:	efff69f3 	.word	0xefff69f3
 8003880:	40008000 	.word	0x40008000
 8003884:	40013800 	.word	0x40013800
 8003888:	40021000 	.word	0x40021000
 800388c:	40004400 	.word	0x40004400
 8003890:	40004800 	.word	0x40004800
 8003894:	40004c00 	.word	0x40004c00
 8003898:	40005000 	.word	0x40005000
 800389c:	2310      	movs	r3, #16
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a9f      	ldr	r2, [pc, #636]	; (8003b24 <UART_SetConfig+0x568>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d17a      	bne.n	80039a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d824      	bhi.n	80038fe <UART_SetConfig+0x342>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x300>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038ff 	.word	0x080038ff
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038ff 	.word	0x080038ff
 80038cc:	080038ef 	.word	0x080038ef
 80038d0:	080038ff 	.word	0x080038ff
 80038d4:	080038ff 	.word	0x080038ff
 80038d8:	080038ff 	.word	0x080038ff
 80038dc:	080038f7 	.word	0x080038f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe fb8e 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 80038e4:	61f8      	str	r0, [r7, #28]
        break;
 80038e6:	e010      	b.n	800390a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b8f      	ldr	r3, [pc, #572]	; (8003b28 <UART_SetConfig+0x56c>)
 80038ea:	61fb      	str	r3, [r7, #28]
        break;
 80038ec:	e00d      	b.n	800390a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7fe faef 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80038f2:	61f8      	str	r0, [r7, #28]
        break;
 80038f4:	e009      	b.n	800390a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fa:	61fb      	str	r3, [r7, #28]
        break;
 80038fc:	e005      	b.n	800390a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80fb 	beq.w	8003b08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	429a      	cmp	r2, r3
 8003920:	d305      	bcc.n	800392e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003934:	e0e8      	b.n	8003b08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2200      	movs	r2, #0
 800393a:	461c      	mov	r4, r3
 800393c:	4615      	mov	r5, r2
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	022b      	lsls	r3, r5, #8
 8003948:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800394c:	0222      	lsls	r2, r4, #8
 800394e:	68f9      	ldr	r1, [r7, #12]
 8003950:	6849      	ldr	r1, [r1, #4]
 8003952:	0849      	lsrs	r1, r1, #1
 8003954:	2000      	movs	r0, #0
 8003956:	4688      	mov	r8, r1
 8003958:	4681      	mov	r9, r0
 800395a:	eb12 0a08 	adds.w	sl, r2, r8
 800395e:	eb43 0b09 	adc.w	fp, r3, r9
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003970:	4650      	mov	r0, sl
 8003972:	4659      	mov	r1, fp
 8003974:	f7fc fc8c 	bl	8000290 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003986:	d308      	bcc.n	800399a <UART_SetConfig+0x3de>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398e:	d204      	bcs.n	800399a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e0b6      	b.n	8003b08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039a0:	e0b2      	b.n	8003b08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039aa:	d15e      	bne.n	8003a6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d828      	bhi.n	8003a06 <UART_SetConfig+0x44a>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x400>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	080039e9 	.word	0x080039e9
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	08003a07 	.word	0x08003a07
 80039cc:	080039f7 	.word	0x080039f7
 80039d0:	08003a07 	.word	0x08003a07
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a07 	.word	0x08003a07
 80039dc:	080039ff 	.word	0x080039ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7fe fb0e 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 80039e4:	61f8      	str	r0, [r7, #28]
        break;
 80039e6:	e014      	b.n	8003a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7fe fb20 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 80039ec:	61f8      	str	r0, [r7, #28]
        break;
 80039ee:	e010      	b.n	8003a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f0:	4b4d      	ldr	r3, [pc, #308]	; (8003b28 <UART_SetConfig+0x56c>)
 80039f2:	61fb      	str	r3, [r7, #28]
        break;
 80039f4:	e00d      	b.n	8003a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f6:	f7fe fa6b 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80039fa:	61f8      	str	r0, [r7, #28]
        break;
 80039fc:	e009      	b.n	8003a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a02:	61fb      	str	r3, [r7, #28]
        break;
 8003a04:	e005      	b.n	8003a12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d077      	beq.n	8003b08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005a      	lsls	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	441a      	add	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b0f      	cmp	r3, #15
 8003a32:	d916      	bls.n	8003a62 <UART_SetConfig+0x4a6>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3a:	d212      	bcs.n	8003a62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f023 030f 	bic.w	r3, r3, #15
 8003a44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	8afb      	ldrh	r3, [r7, #22]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	8afa      	ldrh	r2, [r7, #22]
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	e052      	b.n	8003b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a68:	e04e      	b.n	8003b08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d827      	bhi.n	8003ac2 <UART_SetConfig+0x506>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <UART_SetConfig+0x4bc>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	08003aad 	.word	0x08003aad
 8003a84:	08003ac3 	.word	0x08003ac3
 8003a88:	08003ab3 	.word	0x08003ab3
 8003a8c:	08003ac3 	.word	0x08003ac3
 8003a90:	08003ac3 	.word	0x08003ac3
 8003a94:	08003ac3 	.word	0x08003ac3
 8003a98:	08003abb 	.word	0x08003abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7fe fab0 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8003aa0:	61f8      	str	r0, [r7, #28]
        break;
 8003aa2:	e014      	b.n	8003ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa4:	f7fe fac2 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8003aa8:	61f8      	str	r0, [r7, #28]
        break;
 8003aaa:	e010      	b.n	8003ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aac:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <UART_SetConfig+0x56c>)
 8003aae:	61fb      	str	r3, [r7, #28]
        break;
 8003ab0:	e00d      	b.n	8003ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab2:	f7fe fa0d 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8003ab6:	61f8      	str	r0, [r7, #28]
        break;
 8003ab8:	e009      	b.n	8003ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003abe:	61fb      	str	r3, [r7, #28]
        break;
 8003ac0:	e005      	b.n	8003ace <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003acc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d019      	beq.n	8003b08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	085a      	lsrs	r2, r3, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	441a      	add	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b0f      	cmp	r3, #15
 8003aec:	d909      	bls.n	8003b02 <UART_SetConfig+0x546>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af4:	d205      	bcs.n	8003b02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60da      	str	r2, [r3, #12]
 8003b00:	e002      	b.n	8003b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3728      	adds	r7, #40	; 0x28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b22:	bf00      	nop
 8003b24:	40008000 	.word	0x40008000
 8003b28:	00f42400 	.word	0x00f42400

08003b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01a      	beq.n	8003c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2a:	d10a      	bne.n	8003c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c80:	f7fd f89c 	bl	8000dbc <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d10e      	bne.n	8003cb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f82d 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e023      	b.n	8003cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d10e      	bne.n	8003cde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f817 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e00d      	b.n	8003cfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b09c      	sub	sp, #112	; 0x70
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	e0a5      	b.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1a:	f000 80a1 	beq.w	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fd f84d 	bl	8000dbc <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d13e      	bne.n	8003db2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d48:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d86:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e067      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04f      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dce:	d147      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e2c:	623a      	str	r2, [r7, #32]
 8003e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69f9      	ldr	r1, [r7, #28]
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e010      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	f43f af4a 	beq.w	8003d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3770      	adds	r7, #112	; 0x70
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <__errno>:
 8003e8c:	4b01      	ldr	r3, [pc, #4]	; (8003e94 <__errno+0x8>)
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000000c 	.word	0x2000000c

08003e98 <__libc_init_array>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4d0d      	ldr	r5, [pc, #52]	; (8003ed0 <__libc_init_array+0x38>)
 8003e9c:	4c0d      	ldr	r4, [pc, #52]	; (8003ed4 <__libc_init_array+0x3c>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	42a6      	cmp	r6, r4
 8003ea6:	d109      	bne.n	8003ebc <__libc_init_array+0x24>
 8003ea8:	4d0b      	ldr	r5, [pc, #44]	; (8003ed8 <__libc_init_array+0x40>)
 8003eaa:	4c0c      	ldr	r4, [pc, #48]	; (8003edc <__libc_init_array+0x44>)
 8003eac:	f001 f824 	bl	8004ef8 <_init>
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	42a6      	cmp	r6, r4
 8003eb8:	d105      	bne.n	8003ec6 <__libc_init_array+0x2e>
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec0:	4798      	blx	r3
 8003ec2:	3601      	adds	r6, #1
 8003ec4:	e7ee      	b.n	8003ea4 <__libc_init_array+0xc>
 8003ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eca:	4798      	blx	r3
 8003ecc:	3601      	adds	r6, #1
 8003ece:	e7f2      	b.n	8003eb6 <__libc_init_array+0x1e>
 8003ed0:	08005030 	.word	0x08005030
 8003ed4:	08005030 	.word	0x08005030
 8003ed8:	08005030 	.word	0x08005030
 8003edc:	08005034 	.word	0x08005034

08003ee0 <memset>:
 8003ee0:	4402      	add	r2, r0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d100      	bne.n	8003eea <memset+0xa>
 8003ee8:	4770      	bx	lr
 8003eea:	f803 1b01 	strb.w	r1, [r3], #1
 8003eee:	e7f9      	b.n	8003ee4 <memset+0x4>

08003ef0 <iprintf>:
 8003ef0:	b40f      	push	{r0, r1, r2, r3}
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <iprintf+0x2c>)
 8003ef4:	b513      	push	{r0, r1, r4, lr}
 8003ef6:	681c      	ldr	r4, [r3, #0]
 8003ef8:	b124      	cbz	r4, 8003f04 <iprintf+0x14>
 8003efa:	69a3      	ldr	r3, [r4, #24]
 8003efc:	b913      	cbnz	r3, 8003f04 <iprintf+0x14>
 8003efe:	4620      	mov	r0, r4
 8003f00:	f000 fa5e 	bl	80043c0 <__sinit>
 8003f04:	ab05      	add	r3, sp, #20
 8003f06:	9a04      	ldr	r2, [sp, #16]
 8003f08:	68a1      	ldr	r1, [r4, #8]
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 fc67 	bl	80047e0 <_vfiprintf_r>
 8003f12:	b002      	add	sp, #8
 8003f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f18:	b004      	add	sp, #16
 8003f1a:	4770      	bx	lr
 8003f1c:	2000000c 	.word	0x2000000c

08003f20 <_puts_r>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	460e      	mov	r6, r1
 8003f24:	4605      	mov	r5, r0
 8003f26:	b118      	cbz	r0, 8003f30 <_puts_r+0x10>
 8003f28:	6983      	ldr	r3, [r0, #24]
 8003f2a:	b90b      	cbnz	r3, 8003f30 <_puts_r+0x10>
 8003f2c:	f000 fa48 	bl	80043c0 <__sinit>
 8003f30:	69ab      	ldr	r3, [r5, #24]
 8003f32:	68ac      	ldr	r4, [r5, #8]
 8003f34:	b913      	cbnz	r3, 8003f3c <_puts_r+0x1c>
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 fa42 	bl	80043c0 <__sinit>
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <_puts_r+0xd0>)
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	d120      	bne.n	8003f84 <_puts_r+0x64>
 8003f42:	686c      	ldr	r4, [r5, #4]
 8003f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f46:	07db      	lsls	r3, r3, #31
 8003f48:	d405      	bmi.n	8003f56 <_puts_r+0x36>
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	0598      	lsls	r0, r3, #22
 8003f4e:	d402      	bmi.n	8003f56 <_puts_r+0x36>
 8003f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f52:	f000 fad3 	bl	80044fc <__retarget_lock_acquire_recursive>
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	0719      	lsls	r1, r3, #28
 8003f5a:	d51d      	bpl.n	8003f98 <_puts_r+0x78>
 8003f5c:	6923      	ldr	r3, [r4, #16]
 8003f5e:	b1db      	cbz	r3, 8003f98 <_puts_r+0x78>
 8003f60:	3e01      	subs	r6, #1
 8003f62:	68a3      	ldr	r3, [r4, #8]
 8003f64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	bb39      	cbnz	r1, 8003fbe <_puts_r+0x9e>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da38      	bge.n	8003fe4 <_puts_r+0xc4>
 8003f72:	4622      	mov	r2, r4
 8003f74:	210a      	movs	r1, #10
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 f848 	bl	800400c <__swbuf_r>
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d011      	beq.n	8003fa4 <_puts_r+0x84>
 8003f80:	250a      	movs	r5, #10
 8003f82:	e011      	b.n	8003fa8 <_puts_r+0x88>
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <_puts_r+0xd4>)
 8003f86:	429c      	cmp	r4, r3
 8003f88:	d101      	bne.n	8003f8e <_puts_r+0x6e>
 8003f8a:	68ac      	ldr	r4, [r5, #8]
 8003f8c:	e7da      	b.n	8003f44 <_puts_r+0x24>
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <_puts_r+0xd8>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	bf08      	it	eq
 8003f94:	68ec      	ldreq	r4, [r5, #12]
 8003f96:	e7d5      	b.n	8003f44 <_puts_r+0x24>
 8003f98:	4621      	mov	r1, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 f888 	bl	80040b0 <__swsetup_r>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d0dd      	beq.n	8003f60 <_puts_r+0x40>
 8003fa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003faa:	07da      	lsls	r2, r3, #31
 8003fac:	d405      	bmi.n	8003fba <_puts_r+0x9a>
 8003fae:	89a3      	ldrh	r3, [r4, #12]
 8003fb0:	059b      	lsls	r3, r3, #22
 8003fb2:	d402      	bmi.n	8003fba <_puts_r+0x9a>
 8003fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fb6:	f000 faa2 	bl	80044fe <__retarget_lock_release_recursive>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da04      	bge.n	8003fcc <_puts_r+0xac>
 8003fc2:	69a2      	ldr	r2, [r4, #24]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	dc06      	bgt.n	8003fd6 <_puts_r+0xb6>
 8003fc8:	290a      	cmp	r1, #10
 8003fca:	d004      	beq.n	8003fd6 <_puts_r+0xb6>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	7019      	strb	r1, [r3, #0]
 8003fd4:	e7c5      	b.n	8003f62 <_puts_r+0x42>
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f000 f817 	bl	800400c <__swbuf_r>
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d1bf      	bne.n	8003f62 <_puts_r+0x42>
 8003fe2:	e7df      	b.n	8003fa4 <_puts_r+0x84>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	250a      	movs	r5, #10
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	6022      	str	r2, [r4, #0]
 8003fec:	701d      	strb	r5, [r3, #0]
 8003fee:	e7db      	b.n	8003fa8 <_puts_r+0x88>
 8003ff0:	08004fb4 	.word	0x08004fb4
 8003ff4:	08004fd4 	.word	0x08004fd4
 8003ff8:	08004f94 	.word	0x08004f94

08003ffc <puts>:
 8003ffc:	4b02      	ldr	r3, [pc, #8]	; (8004008 <puts+0xc>)
 8003ffe:	4601      	mov	r1, r0
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	f7ff bf8d 	b.w	8003f20 <_puts_r>
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c

0800400c <__swbuf_r>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	460e      	mov	r6, r1
 8004010:	4614      	mov	r4, r2
 8004012:	4605      	mov	r5, r0
 8004014:	b118      	cbz	r0, 800401e <__swbuf_r+0x12>
 8004016:	6983      	ldr	r3, [r0, #24]
 8004018:	b90b      	cbnz	r3, 800401e <__swbuf_r+0x12>
 800401a:	f000 f9d1 	bl	80043c0 <__sinit>
 800401e:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <__swbuf_r+0x98>)
 8004020:	429c      	cmp	r4, r3
 8004022:	d12b      	bne.n	800407c <__swbuf_r+0x70>
 8004024:	686c      	ldr	r4, [r5, #4]
 8004026:	69a3      	ldr	r3, [r4, #24]
 8004028:	60a3      	str	r3, [r4, #8]
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	071a      	lsls	r2, r3, #28
 800402e:	d52f      	bpl.n	8004090 <__swbuf_r+0x84>
 8004030:	6923      	ldr	r3, [r4, #16]
 8004032:	b36b      	cbz	r3, 8004090 <__swbuf_r+0x84>
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	1ac0      	subs	r0, r0, r3
 800403a:	6963      	ldr	r3, [r4, #20]
 800403c:	b2f6      	uxtb	r6, r6
 800403e:	4283      	cmp	r3, r0
 8004040:	4637      	mov	r7, r6
 8004042:	dc04      	bgt.n	800404e <__swbuf_r+0x42>
 8004044:	4621      	mov	r1, r4
 8004046:	4628      	mov	r0, r5
 8004048:	f000 f926 	bl	8004298 <_fflush_r>
 800404c:	bb30      	cbnz	r0, 800409c <__swbuf_r+0x90>
 800404e:	68a3      	ldr	r3, [r4, #8]
 8004050:	3b01      	subs	r3, #1
 8004052:	60a3      	str	r3, [r4, #8]
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	6022      	str	r2, [r4, #0]
 800405a:	701e      	strb	r6, [r3, #0]
 800405c:	6963      	ldr	r3, [r4, #20]
 800405e:	3001      	adds	r0, #1
 8004060:	4283      	cmp	r3, r0
 8004062:	d004      	beq.n	800406e <__swbuf_r+0x62>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	07db      	lsls	r3, r3, #31
 8004068:	d506      	bpl.n	8004078 <__swbuf_r+0x6c>
 800406a:	2e0a      	cmp	r6, #10
 800406c:	d104      	bne.n	8004078 <__swbuf_r+0x6c>
 800406e:	4621      	mov	r1, r4
 8004070:	4628      	mov	r0, r5
 8004072:	f000 f911 	bl	8004298 <_fflush_r>
 8004076:	b988      	cbnz	r0, 800409c <__swbuf_r+0x90>
 8004078:	4638      	mov	r0, r7
 800407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <__swbuf_r+0x9c>)
 800407e:	429c      	cmp	r4, r3
 8004080:	d101      	bne.n	8004086 <__swbuf_r+0x7a>
 8004082:	68ac      	ldr	r4, [r5, #8]
 8004084:	e7cf      	b.n	8004026 <__swbuf_r+0x1a>
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <__swbuf_r+0xa0>)
 8004088:	429c      	cmp	r4, r3
 800408a:	bf08      	it	eq
 800408c:	68ec      	ldreq	r4, [r5, #12]
 800408e:	e7ca      	b.n	8004026 <__swbuf_r+0x1a>
 8004090:	4621      	mov	r1, r4
 8004092:	4628      	mov	r0, r5
 8004094:	f000 f80c 	bl	80040b0 <__swsetup_r>
 8004098:	2800      	cmp	r0, #0
 800409a:	d0cb      	beq.n	8004034 <__swbuf_r+0x28>
 800409c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80040a0:	e7ea      	b.n	8004078 <__swbuf_r+0x6c>
 80040a2:	bf00      	nop
 80040a4:	08004fb4 	.word	0x08004fb4
 80040a8:	08004fd4 	.word	0x08004fd4
 80040ac:	08004f94 	.word	0x08004f94

080040b0 <__swsetup_r>:
 80040b0:	4b32      	ldr	r3, [pc, #200]	; (800417c <__swsetup_r+0xcc>)
 80040b2:	b570      	push	{r4, r5, r6, lr}
 80040b4:	681d      	ldr	r5, [r3, #0]
 80040b6:	4606      	mov	r6, r0
 80040b8:	460c      	mov	r4, r1
 80040ba:	b125      	cbz	r5, 80040c6 <__swsetup_r+0x16>
 80040bc:	69ab      	ldr	r3, [r5, #24]
 80040be:	b913      	cbnz	r3, 80040c6 <__swsetup_r+0x16>
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 f97d 	bl	80043c0 <__sinit>
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <__swsetup_r+0xd0>)
 80040c8:	429c      	cmp	r4, r3
 80040ca:	d10f      	bne.n	80040ec <__swsetup_r+0x3c>
 80040cc:	686c      	ldr	r4, [r5, #4]
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040d4:	0719      	lsls	r1, r3, #28
 80040d6:	d42c      	bmi.n	8004132 <__swsetup_r+0x82>
 80040d8:	06dd      	lsls	r5, r3, #27
 80040da:	d411      	bmi.n	8004100 <__swsetup_r+0x50>
 80040dc:	2309      	movs	r3, #9
 80040de:	6033      	str	r3, [r6, #0]
 80040e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ea:	e03e      	b.n	800416a <__swsetup_r+0xba>
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <__swsetup_r+0xd4>)
 80040ee:	429c      	cmp	r4, r3
 80040f0:	d101      	bne.n	80040f6 <__swsetup_r+0x46>
 80040f2:	68ac      	ldr	r4, [r5, #8]
 80040f4:	e7eb      	b.n	80040ce <__swsetup_r+0x1e>
 80040f6:	4b24      	ldr	r3, [pc, #144]	; (8004188 <__swsetup_r+0xd8>)
 80040f8:	429c      	cmp	r4, r3
 80040fa:	bf08      	it	eq
 80040fc:	68ec      	ldreq	r4, [r5, #12]
 80040fe:	e7e6      	b.n	80040ce <__swsetup_r+0x1e>
 8004100:	0758      	lsls	r0, r3, #29
 8004102:	d512      	bpl.n	800412a <__swsetup_r+0x7a>
 8004104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004106:	b141      	cbz	r1, 800411a <__swsetup_r+0x6a>
 8004108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800410c:	4299      	cmp	r1, r3
 800410e:	d002      	beq.n	8004116 <__swsetup_r+0x66>
 8004110:	4630      	mov	r0, r6
 8004112:	f000 fa5b 	bl	80045cc <_free_r>
 8004116:	2300      	movs	r3, #0
 8004118:	6363      	str	r3, [r4, #52]	; 0x34
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	2300      	movs	r3, #0
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	6923      	ldr	r3, [r4, #16]
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	f043 0308 	orr.w	r3, r3, #8
 8004130:	81a3      	strh	r3, [r4, #12]
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	b94b      	cbnz	r3, 800414a <__swsetup_r+0x9a>
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d003      	beq.n	800414a <__swsetup_r+0x9a>
 8004142:	4621      	mov	r1, r4
 8004144:	4630      	mov	r0, r6
 8004146:	f000 fa01 	bl	800454c <__smakebuf_r>
 800414a:	89a0      	ldrh	r0, [r4, #12]
 800414c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004150:	f010 0301 	ands.w	r3, r0, #1
 8004154:	d00a      	beq.n	800416c <__swsetup_r+0xbc>
 8004156:	2300      	movs	r3, #0
 8004158:	60a3      	str	r3, [r4, #8]
 800415a:	6963      	ldr	r3, [r4, #20]
 800415c:	425b      	negs	r3, r3
 800415e:	61a3      	str	r3, [r4, #24]
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	b943      	cbnz	r3, 8004176 <__swsetup_r+0xc6>
 8004164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004168:	d1ba      	bne.n	80040e0 <__swsetup_r+0x30>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	0781      	lsls	r1, r0, #30
 800416e:	bf58      	it	pl
 8004170:	6963      	ldrpl	r3, [r4, #20]
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	e7f4      	b.n	8004160 <__swsetup_r+0xb0>
 8004176:	2000      	movs	r0, #0
 8004178:	e7f7      	b.n	800416a <__swsetup_r+0xba>
 800417a:	bf00      	nop
 800417c:	2000000c 	.word	0x2000000c
 8004180:	08004fb4 	.word	0x08004fb4
 8004184:	08004fd4 	.word	0x08004fd4
 8004188:	08004f94 	.word	0x08004f94

0800418c <__sflush_r>:
 800418c:	898a      	ldrh	r2, [r1, #12]
 800418e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	4605      	mov	r5, r0
 8004194:	0710      	lsls	r0, r2, #28
 8004196:	460c      	mov	r4, r1
 8004198:	d458      	bmi.n	800424c <__sflush_r+0xc0>
 800419a:	684b      	ldr	r3, [r1, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	dc05      	bgt.n	80041ac <__sflush_r+0x20>
 80041a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	dc02      	bgt.n	80041ac <__sflush_r+0x20>
 80041a6:	2000      	movs	r0, #0
 80041a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	d0f9      	beq.n	80041a6 <__sflush_r+0x1a>
 80041b2:	2300      	movs	r3, #0
 80041b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041b8:	682f      	ldr	r7, [r5, #0]
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	d032      	beq.n	8004224 <__sflush_r+0x98>
 80041be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	075a      	lsls	r2, r3, #29
 80041c4:	d505      	bpl.n	80041d2 <__sflush_r+0x46>
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	1ac0      	subs	r0, r0, r3
 80041ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041cc:	b10b      	cbz	r3, 80041d2 <__sflush_r+0x46>
 80041ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d0:	1ac0      	subs	r0, r0, r3
 80041d2:	2300      	movs	r3, #0
 80041d4:	4602      	mov	r2, r0
 80041d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041d8:	6a21      	ldr	r1, [r4, #32]
 80041da:	4628      	mov	r0, r5
 80041dc:	47b0      	blx	r6
 80041de:	1c43      	adds	r3, r0, #1
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	d106      	bne.n	80041f2 <__sflush_r+0x66>
 80041e4:	6829      	ldr	r1, [r5, #0]
 80041e6:	291d      	cmp	r1, #29
 80041e8:	d82c      	bhi.n	8004244 <__sflush_r+0xb8>
 80041ea:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <__sflush_r+0x108>)
 80041ec:	40ca      	lsrs	r2, r1
 80041ee:	07d6      	lsls	r6, r2, #31
 80041f0:	d528      	bpl.n	8004244 <__sflush_r+0xb8>
 80041f2:	2200      	movs	r2, #0
 80041f4:	6062      	str	r2, [r4, #4]
 80041f6:	04d9      	lsls	r1, r3, #19
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	6022      	str	r2, [r4, #0]
 80041fc:	d504      	bpl.n	8004208 <__sflush_r+0x7c>
 80041fe:	1c42      	adds	r2, r0, #1
 8004200:	d101      	bne.n	8004206 <__sflush_r+0x7a>
 8004202:	682b      	ldr	r3, [r5, #0]
 8004204:	b903      	cbnz	r3, 8004208 <__sflush_r+0x7c>
 8004206:	6560      	str	r0, [r4, #84]	; 0x54
 8004208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420a:	602f      	str	r7, [r5, #0]
 800420c:	2900      	cmp	r1, #0
 800420e:	d0ca      	beq.n	80041a6 <__sflush_r+0x1a>
 8004210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004214:	4299      	cmp	r1, r3
 8004216:	d002      	beq.n	800421e <__sflush_r+0x92>
 8004218:	4628      	mov	r0, r5
 800421a:	f000 f9d7 	bl	80045cc <_free_r>
 800421e:	2000      	movs	r0, #0
 8004220:	6360      	str	r0, [r4, #52]	; 0x34
 8004222:	e7c1      	b.n	80041a8 <__sflush_r+0x1c>
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	2301      	movs	r3, #1
 8004228:	4628      	mov	r0, r5
 800422a:	47b0      	blx	r6
 800422c:	1c41      	adds	r1, r0, #1
 800422e:	d1c7      	bne.n	80041c0 <__sflush_r+0x34>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0c4      	beq.n	80041c0 <__sflush_r+0x34>
 8004236:	2b1d      	cmp	r3, #29
 8004238:	d001      	beq.n	800423e <__sflush_r+0xb2>
 800423a:	2b16      	cmp	r3, #22
 800423c:	d101      	bne.n	8004242 <__sflush_r+0xb6>
 800423e:	602f      	str	r7, [r5, #0]
 8004240:	e7b1      	b.n	80041a6 <__sflush_r+0x1a>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	e7ad      	b.n	80041a8 <__sflush_r+0x1c>
 800424c:	690f      	ldr	r7, [r1, #16]
 800424e:	2f00      	cmp	r7, #0
 8004250:	d0a9      	beq.n	80041a6 <__sflush_r+0x1a>
 8004252:	0793      	lsls	r3, r2, #30
 8004254:	680e      	ldr	r6, [r1, #0]
 8004256:	bf08      	it	eq
 8004258:	694b      	ldreq	r3, [r1, #20]
 800425a:	600f      	str	r7, [r1, #0]
 800425c:	bf18      	it	ne
 800425e:	2300      	movne	r3, #0
 8004260:	eba6 0807 	sub.w	r8, r6, r7
 8004264:	608b      	str	r3, [r1, #8]
 8004266:	f1b8 0f00 	cmp.w	r8, #0
 800426a:	dd9c      	ble.n	80041a6 <__sflush_r+0x1a>
 800426c:	6a21      	ldr	r1, [r4, #32]
 800426e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004270:	4643      	mov	r3, r8
 8004272:	463a      	mov	r2, r7
 8004274:	4628      	mov	r0, r5
 8004276:	47b0      	blx	r6
 8004278:	2800      	cmp	r0, #0
 800427a:	dc06      	bgt.n	800428a <__sflush_r+0xfe>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004288:	e78e      	b.n	80041a8 <__sflush_r+0x1c>
 800428a:	4407      	add	r7, r0
 800428c:	eba8 0800 	sub.w	r8, r8, r0
 8004290:	e7e9      	b.n	8004266 <__sflush_r+0xda>
 8004292:	bf00      	nop
 8004294:	20400001 	.word	0x20400001

08004298 <_fflush_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	690b      	ldr	r3, [r1, #16]
 800429c:	4605      	mov	r5, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	b913      	cbnz	r3, 80042a8 <_fflush_r+0x10>
 80042a2:	2500      	movs	r5, #0
 80042a4:	4628      	mov	r0, r5
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	b118      	cbz	r0, 80042b2 <_fflush_r+0x1a>
 80042aa:	6983      	ldr	r3, [r0, #24]
 80042ac:	b90b      	cbnz	r3, 80042b2 <_fflush_r+0x1a>
 80042ae:	f000 f887 	bl	80043c0 <__sinit>
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <_fflush_r+0x6c>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	d11b      	bne.n	80042f0 <_fflush_r+0x58>
 80042b8:	686c      	ldr	r4, [r5, #4]
 80042ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ef      	beq.n	80042a2 <_fflush_r+0xa>
 80042c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042c4:	07d0      	lsls	r0, r2, #31
 80042c6:	d404      	bmi.n	80042d2 <_fflush_r+0x3a>
 80042c8:	0599      	lsls	r1, r3, #22
 80042ca:	d402      	bmi.n	80042d2 <_fflush_r+0x3a>
 80042cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ce:	f000 f915 	bl	80044fc <__retarget_lock_acquire_recursive>
 80042d2:	4628      	mov	r0, r5
 80042d4:	4621      	mov	r1, r4
 80042d6:	f7ff ff59 	bl	800418c <__sflush_r>
 80042da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042dc:	07da      	lsls	r2, r3, #31
 80042de:	4605      	mov	r5, r0
 80042e0:	d4e0      	bmi.n	80042a4 <_fflush_r+0xc>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	059b      	lsls	r3, r3, #22
 80042e6:	d4dd      	bmi.n	80042a4 <_fflush_r+0xc>
 80042e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ea:	f000 f908 	bl	80044fe <__retarget_lock_release_recursive>
 80042ee:	e7d9      	b.n	80042a4 <_fflush_r+0xc>
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <_fflush_r+0x70>)
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d101      	bne.n	80042fa <_fflush_r+0x62>
 80042f6:	68ac      	ldr	r4, [r5, #8]
 80042f8:	e7df      	b.n	80042ba <_fflush_r+0x22>
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <_fflush_r+0x74>)
 80042fc:	429c      	cmp	r4, r3
 80042fe:	bf08      	it	eq
 8004300:	68ec      	ldreq	r4, [r5, #12]
 8004302:	e7da      	b.n	80042ba <_fflush_r+0x22>
 8004304:	08004fb4 	.word	0x08004fb4
 8004308:	08004fd4 	.word	0x08004fd4
 800430c:	08004f94 	.word	0x08004f94

08004310 <std>:
 8004310:	2300      	movs	r3, #0
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
 8004316:	e9c0 3300 	strd	r3, r3, [r0]
 800431a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800431e:	6083      	str	r3, [r0, #8]
 8004320:	8181      	strh	r1, [r0, #12]
 8004322:	6643      	str	r3, [r0, #100]	; 0x64
 8004324:	81c2      	strh	r2, [r0, #14]
 8004326:	6183      	str	r3, [r0, #24]
 8004328:	4619      	mov	r1, r3
 800432a:	2208      	movs	r2, #8
 800432c:	305c      	adds	r0, #92	; 0x5c
 800432e:	f7ff fdd7 	bl	8003ee0 <memset>
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <std+0x38>)
 8004334:	6263      	str	r3, [r4, #36]	; 0x24
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <std+0x3c>)
 8004338:	62a3      	str	r3, [r4, #40]	; 0x28
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <std+0x40>)
 800433c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <std+0x44>)
 8004340:	6224      	str	r4, [r4, #32]
 8004342:	6323      	str	r3, [r4, #48]	; 0x30
 8004344:	bd10      	pop	{r4, pc}
 8004346:	bf00      	nop
 8004348:	08004d89 	.word	0x08004d89
 800434c:	08004dab 	.word	0x08004dab
 8004350:	08004de3 	.word	0x08004de3
 8004354:	08004e07 	.word	0x08004e07

08004358 <_cleanup_r>:
 8004358:	4901      	ldr	r1, [pc, #4]	; (8004360 <_cleanup_r+0x8>)
 800435a:	f000 b8af 	b.w	80044bc <_fwalk_reent>
 800435e:	bf00      	nop
 8004360:	08004299 	.word	0x08004299

08004364 <__sfmoreglue>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	2268      	movs	r2, #104	; 0x68
 8004368:	1e4d      	subs	r5, r1, #1
 800436a:	4355      	muls	r5, r2
 800436c:	460e      	mov	r6, r1
 800436e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004372:	f000 f997 	bl	80046a4 <_malloc_r>
 8004376:	4604      	mov	r4, r0
 8004378:	b140      	cbz	r0, 800438c <__sfmoreglue+0x28>
 800437a:	2100      	movs	r1, #0
 800437c:	e9c0 1600 	strd	r1, r6, [r0]
 8004380:	300c      	adds	r0, #12
 8004382:	60a0      	str	r0, [r4, #8]
 8004384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004388:	f7ff fdaa 	bl	8003ee0 <memset>
 800438c:	4620      	mov	r0, r4
 800438e:	bd70      	pop	{r4, r5, r6, pc}

08004390 <__sfp_lock_acquire>:
 8004390:	4801      	ldr	r0, [pc, #4]	; (8004398 <__sfp_lock_acquire+0x8>)
 8004392:	f000 b8b3 	b.w	80044fc <__retarget_lock_acquire_recursive>
 8004396:	bf00      	nop
 8004398:	20000159 	.word	0x20000159

0800439c <__sfp_lock_release>:
 800439c:	4801      	ldr	r0, [pc, #4]	; (80043a4 <__sfp_lock_release+0x8>)
 800439e:	f000 b8ae 	b.w	80044fe <__retarget_lock_release_recursive>
 80043a2:	bf00      	nop
 80043a4:	20000159 	.word	0x20000159

080043a8 <__sinit_lock_acquire>:
 80043a8:	4801      	ldr	r0, [pc, #4]	; (80043b0 <__sinit_lock_acquire+0x8>)
 80043aa:	f000 b8a7 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80043ae:	bf00      	nop
 80043b0:	2000015a 	.word	0x2000015a

080043b4 <__sinit_lock_release>:
 80043b4:	4801      	ldr	r0, [pc, #4]	; (80043bc <__sinit_lock_release+0x8>)
 80043b6:	f000 b8a2 	b.w	80044fe <__retarget_lock_release_recursive>
 80043ba:	bf00      	nop
 80043bc:	2000015a 	.word	0x2000015a

080043c0 <__sinit>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4604      	mov	r4, r0
 80043c4:	f7ff fff0 	bl	80043a8 <__sinit_lock_acquire>
 80043c8:	69a3      	ldr	r3, [r4, #24]
 80043ca:	b11b      	cbz	r3, 80043d4 <__sinit+0x14>
 80043cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d0:	f7ff bff0 	b.w	80043b4 <__sinit_lock_release>
 80043d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043d8:	6523      	str	r3, [r4, #80]	; 0x50
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <__sinit+0x68>)
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <__sinit+0x6c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	bf04      	itt	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	61a3      	streq	r3, [r4, #24]
 80043ea:	4620      	mov	r0, r4
 80043ec:	f000 f820 	bl	8004430 <__sfp>
 80043f0:	6060      	str	r0, [r4, #4]
 80043f2:	4620      	mov	r0, r4
 80043f4:	f000 f81c 	bl	8004430 <__sfp>
 80043f8:	60a0      	str	r0, [r4, #8]
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f818 	bl	8004430 <__sfp>
 8004400:	2200      	movs	r2, #0
 8004402:	60e0      	str	r0, [r4, #12]
 8004404:	2104      	movs	r1, #4
 8004406:	6860      	ldr	r0, [r4, #4]
 8004408:	f7ff ff82 	bl	8004310 <std>
 800440c:	68a0      	ldr	r0, [r4, #8]
 800440e:	2201      	movs	r2, #1
 8004410:	2109      	movs	r1, #9
 8004412:	f7ff ff7d 	bl	8004310 <std>
 8004416:	68e0      	ldr	r0, [r4, #12]
 8004418:	2202      	movs	r2, #2
 800441a:	2112      	movs	r1, #18
 800441c:	f7ff ff78 	bl	8004310 <std>
 8004420:	2301      	movs	r3, #1
 8004422:	61a3      	str	r3, [r4, #24]
 8004424:	e7d2      	b.n	80043cc <__sinit+0xc>
 8004426:	bf00      	nop
 8004428:	08004f90 	.word	0x08004f90
 800442c:	08004359 	.word	0x08004359

08004430 <__sfp>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	4607      	mov	r7, r0
 8004434:	f7ff ffac 	bl	8004390 <__sfp_lock_acquire>
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <__sfp+0x84>)
 800443a:	681e      	ldr	r6, [r3, #0]
 800443c:	69b3      	ldr	r3, [r6, #24]
 800443e:	b913      	cbnz	r3, 8004446 <__sfp+0x16>
 8004440:	4630      	mov	r0, r6
 8004442:	f7ff ffbd 	bl	80043c0 <__sinit>
 8004446:	3648      	adds	r6, #72	; 0x48
 8004448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800444c:	3b01      	subs	r3, #1
 800444e:	d503      	bpl.n	8004458 <__sfp+0x28>
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	b30b      	cbz	r3, 8004498 <__sfp+0x68>
 8004454:	6836      	ldr	r6, [r6, #0]
 8004456:	e7f7      	b.n	8004448 <__sfp+0x18>
 8004458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800445c:	b9d5      	cbnz	r5, 8004494 <__sfp+0x64>
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <__sfp+0x88>)
 8004460:	60e3      	str	r3, [r4, #12]
 8004462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004466:	6665      	str	r5, [r4, #100]	; 0x64
 8004468:	f000 f847 	bl	80044fa <__retarget_lock_init_recursive>
 800446c:	f7ff ff96 	bl	800439c <__sfp_lock_release>
 8004470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004478:	6025      	str	r5, [r4, #0]
 800447a:	61a5      	str	r5, [r4, #24]
 800447c:	2208      	movs	r2, #8
 800447e:	4629      	mov	r1, r5
 8004480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004484:	f7ff fd2c 	bl	8003ee0 <memset>
 8004488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800448c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004490:	4620      	mov	r0, r4
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004494:	3468      	adds	r4, #104	; 0x68
 8004496:	e7d9      	b.n	800444c <__sfp+0x1c>
 8004498:	2104      	movs	r1, #4
 800449a:	4638      	mov	r0, r7
 800449c:	f7ff ff62 	bl	8004364 <__sfmoreglue>
 80044a0:	4604      	mov	r4, r0
 80044a2:	6030      	str	r0, [r6, #0]
 80044a4:	2800      	cmp	r0, #0
 80044a6:	d1d5      	bne.n	8004454 <__sfp+0x24>
 80044a8:	f7ff ff78 	bl	800439c <__sfp_lock_release>
 80044ac:	230c      	movs	r3, #12
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	e7ee      	b.n	8004490 <__sfp+0x60>
 80044b2:	bf00      	nop
 80044b4:	08004f90 	.word	0x08004f90
 80044b8:	ffff0001 	.word	0xffff0001

080044bc <_fwalk_reent>:
 80044bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c0:	4606      	mov	r6, r0
 80044c2:	4688      	mov	r8, r1
 80044c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044c8:	2700      	movs	r7, #0
 80044ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ce:	f1b9 0901 	subs.w	r9, r9, #1
 80044d2:	d505      	bpl.n	80044e0 <_fwalk_reent+0x24>
 80044d4:	6824      	ldr	r4, [r4, #0]
 80044d6:	2c00      	cmp	r4, #0
 80044d8:	d1f7      	bne.n	80044ca <_fwalk_reent+0xe>
 80044da:	4638      	mov	r0, r7
 80044dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e0:	89ab      	ldrh	r3, [r5, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d907      	bls.n	80044f6 <_fwalk_reent+0x3a>
 80044e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ea:	3301      	adds	r3, #1
 80044ec:	d003      	beq.n	80044f6 <_fwalk_reent+0x3a>
 80044ee:	4629      	mov	r1, r5
 80044f0:	4630      	mov	r0, r6
 80044f2:	47c0      	blx	r8
 80044f4:	4307      	orrs	r7, r0
 80044f6:	3568      	adds	r5, #104	; 0x68
 80044f8:	e7e9      	b.n	80044ce <_fwalk_reent+0x12>

080044fa <__retarget_lock_init_recursive>:
 80044fa:	4770      	bx	lr

080044fc <__retarget_lock_acquire_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_release_recursive>:
 80044fe:	4770      	bx	lr

08004500 <__swhatbuf_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	460e      	mov	r6, r1
 8004504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004508:	2900      	cmp	r1, #0
 800450a:	b096      	sub	sp, #88	; 0x58
 800450c:	4614      	mov	r4, r2
 800450e:	461d      	mov	r5, r3
 8004510:	da08      	bge.n	8004524 <__swhatbuf_r+0x24>
 8004512:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	602a      	str	r2, [r5, #0]
 800451a:	061a      	lsls	r2, r3, #24
 800451c:	d410      	bmi.n	8004540 <__swhatbuf_r+0x40>
 800451e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004522:	e00e      	b.n	8004542 <__swhatbuf_r+0x42>
 8004524:	466a      	mov	r2, sp
 8004526:	f000 fc95 	bl	8004e54 <_fstat_r>
 800452a:	2800      	cmp	r0, #0
 800452c:	dbf1      	blt.n	8004512 <__swhatbuf_r+0x12>
 800452e:	9a01      	ldr	r2, [sp, #4]
 8004530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004538:	425a      	negs	r2, r3
 800453a:	415a      	adcs	r2, r3
 800453c:	602a      	str	r2, [r5, #0]
 800453e:	e7ee      	b.n	800451e <__swhatbuf_r+0x1e>
 8004540:	2340      	movs	r3, #64	; 0x40
 8004542:	2000      	movs	r0, #0
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	b016      	add	sp, #88	; 0x58
 8004548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800454c <__smakebuf_r>:
 800454c:	898b      	ldrh	r3, [r1, #12]
 800454e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004550:	079d      	lsls	r5, r3, #30
 8004552:	4606      	mov	r6, r0
 8004554:	460c      	mov	r4, r1
 8004556:	d507      	bpl.n	8004568 <__smakebuf_r+0x1c>
 8004558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	2301      	movs	r3, #1
 8004562:	6163      	str	r3, [r4, #20]
 8004564:	b002      	add	sp, #8
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	ab01      	add	r3, sp, #4
 800456a:	466a      	mov	r2, sp
 800456c:	f7ff ffc8 	bl	8004500 <__swhatbuf_r>
 8004570:	9900      	ldr	r1, [sp, #0]
 8004572:	4605      	mov	r5, r0
 8004574:	4630      	mov	r0, r6
 8004576:	f000 f895 	bl	80046a4 <_malloc_r>
 800457a:	b948      	cbnz	r0, 8004590 <__smakebuf_r+0x44>
 800457c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004580:	059a      	lsls	r2, r3, #22
 8004582:	d4ef      	bmi.n	8004564 <__smakebuf_r+0x18>
 8004584:	f023 0303 	bic.w	r3, r3, #3
 8004588:	f043 0302 	orr.w	r3, r3, #2
 800458c:	81a3      	strh	r3, [r4, #12]
 800458e:	e7e3      	b.n	8004558 <__smakebuf_r+0xc>
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <__smakebuf_r+0x7c>)
 8004592:	62b3      	str	r3, [r6, #40]	; 0x28
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	9b00      	ldr	r3, [sp, #0]
 80045a0:	6163      	str	r3, [r4, #20]
 80045a2:	9b01      	ldr	r3, [sp, #4]
 80045a4:	6120      	str	r0, [r4, #16]
 80045a6:	b15b      	cbz	r3, 80045c0 <__smakebuf_r+0x74>
 80045a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ac:	4630      	mov	r0, r6
 80045ae:	f000 fc63 	bl	8004e78 <_isatty_r>
 80045b2:	b128      	cbz	r0, 80045c0 <__smakebuf_r+0x74>
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	89a0      	ldrh	r0, [r4, #12]
 80045c2:	4305      	orrs	r5, r0
 80045c4:	81a5      	strh	r5, [r4, #12]
 80045c6:	e7cd      	b.n	8004564 <__smakebuf_r+0x18>
 80045c8:	08004359 	.word	0x08004359

080045cc <_free_r>:
 80045cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ce:	2900      	cmp	r1, #0
 80045d0:	d044      	beq.n	800465c <_free_r+0x90>
 80045d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d6:	9001      	str	r0, [sp, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f1a1 0404 	sub.w	r4, r1, #4
 80045de:	bfb8      	it	lt
 80045e0:	18e4      	addlt	r4, r4, r3
 80045e2:	f000 fc6b 	bl	8004ebc <__malloc_lock>
 80045e6:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <_free_r+0x94>)
 80045e8:	9801      	ldr	r0, [sp, #4]
 80045ea:	6813      	ldr	r3, [r2, #0]
 80045ec:	b933      	cbnz	r3, 80045fc <_free_r+0x30>
 80045ee:	6063      	str	r3, [r4, #4]
 80045f0:	6014      	str	r4, [r2, #0]
 80045f2:	b003      	add	sp, #12
 80045f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f8:	f000 bc66 	b.w	8004ec8 <__malloc_unlock>
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d908      	bls.n	8004612 <_free_r+0x46>
 8004600:	6825      	ldr	r5, [r4, #0]
 8004602:	1961      	adds	r1, r4, r5
 8004604:	428b      	cmp	r3, r1
 8004606:	bf01      	itttt	eq
 8004608:	6819      	ldreq	r1, [r3, #0]
 800460a:	685b      	ldreq	r3, [r3, #4]
 800460c:	1949      	addeq	r1, r1, r5
 800460e:	6021      	streq	r1, [r4, #0]
 8004610:	e7ed      	b.n	80045ee <_free_r+0x22>
 8004612:	461a      	mov	r2, r3
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	b10b      	cbz	r3, 800461c <_free_r+0x50>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d9fa      	bls.n	8004612 <_free_r+0x46>
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	1855      	adds	r5, r2, r1
 8004620:	42a5      	cmp	r5, r4
 8004622:	d10b      	bne.n	800463c <_free_r+0x70>
 8004624:	6824      	ldr	r4, [r4, #0]
 8004626:	4421      	add	r1, r4
 8004628:	1854      	adds	r4, r2, r1
 800462a:	42a3      	cmp	r3, r4
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	d1e0      	bne.n	80045f2 <_free_r+0x26>
 8004630:	681c      	ldr	r4, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	4421      	add	r1, r4
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	e7da      	b.n	80045f2 <_free_r+0x26>
 800463c:	d902      	bls.n	8004644 <_free_r+0x78>
 800463e:	230c      	movs	r3, #12
 8004640:	6003      	str	r3, [r0, #0]
 8004642:	e7d6      	b.n	80045f2 <_free_r+0x26>
 8004644:	6825      	ldr	r5, [r4, #0]
 8004646:	1961      	adds	r1, r4, r5
 8004648:	428b      	cmp	r3, r1
 800464a:	bf04      	itt	eq
 800464c:	6819      	ldreq	r1, [r3, #0]
 800464e:	685b      	ldreq	r3, [r3, #4]
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	bf04      	itt	eq
 8004654:	1949      	addeq	r1, r1, r5
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	6054      	str	r4, [r2, #4]
 800465a:	e7ca      	b.n	80045f2 <_free_r+0x26>
 800465c:	b003      	add	sp, #12
 800465e:	bd30      	pop	{r4, r5, pc}
 8004660:	2000015c 	.word	0x2000015c

08004664 <sbrk_aligned>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4e0e      	ldr	r6, [pc, #56]	; (80046a0 <sbrk_aligned+0x3c>)
 8004668:	460c      	mov	r4, r1
 800466a:	6831      	ldr	r1, [r6, #0]
 800466c:	4605      	mov	r5, r0
 800466e:	b911      	cbnz	r1, 8004676 <sbrk_aligned+0x12>
 8004670:	f000 fb7a 	bl	8004d68 <_sbrk_r>
 8004674:	6030      	str	r0, [r6, #0]
 8004676:	4621      	mov	r1, r4
 8004678:	4628      	mov	r0, r5
 800467a:	f000 fb75 	bl	8004d68 <_sbrk_r>
 800467e:	1c43      	adds	r3, r0, #1
 8004680:	d00a      	beq.n	8004698 <sbrk_aligned+0x34>
 8004682:	1cc4      	adds	r4, r0, #3
 8004684:	f024 0403 	bic.w	r4, r4, #3
 8004688:	42a0      	cmp	r0, r4
 800468a:	d007      	beq.n	800469c <sbrk_aligned+0x38>
 800468c:	1a21      	subs	r1, r4, r0
 800468e:	4628      	mov	r0, r5
 8004690:	f000 fb6a 	bl	8004d68 <_sbrk_r>
 8004694:	3001      	adds	r0, #1
 8004696:	d101      	bne.n	800469c <sbrk_aligned+0x38>
 8004698:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800469c:	4620      	mov	r0, r4
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	20000160 	.word	0x20000160

080046a4 <_malloc_r>:
 80046a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a8:	1ccd      	adds	r5, r1, #3
 80046aa:	f025 0503 	bic.w	r5, r5, #3
 80046ae:	3508      	adds	r5, #8
 80046b0:	2d0c      	cmp	r5, #12
 80046b2:	bf38      	it	cc
 80046b4:	250c      	movcc	r5, #12
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	4607      	mov	r7, r0
 80046ba:	db01      	blt.n	80046c0 <_malloc_r+0x1c>
 80046bc:	42a9      	cmp	r1, r5
 80046be:	d905      	bls.n	80046cc <_malloc_r+0x28>
 80046c0:	230c      	movs	r3, #12
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	2600      	movs	r6, #0
 80046c6:	4630      	mov	r0, r6
 80046c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046cc:	4e2e      	ldr	r6, [pc, #184]	; (8004788 <_malloc_r+0xe4>)
 80046ce:	f000 fbf5 	bl	8004ebc <__malloc_lock>
 80046d2:	6833      	ldr	r3, [r6, #0]
 80046d4:	461c      	mov	r4, r3
 80046d6:	bb34      	cbnz	r4, 8004726 <_malloc_r+0x82>
 80046d8:	4629      	mov	r1, r5
 80046da:	4638      	mov	r0, r7
 80046dc:	f7ff ffc2 	bl	8004664 <sbrk_aligned>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	4604      	mov	r4, r0
 80046e4:	d14d      	bne.n	8004782 <_malloc_r+0xde>
 80046e6:	6834      	ldr	r4, [r6, #0]
 80046e8:	4626      	mov	r6, r4
 80046ea:	2e00      	cmp	r6, #0
 80046ec:	d140      	bne.n	8004770 <_malloc_r+0xcc>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	4631      	mov	r1, r6
 80046f2:	4638      	mov	r0, r7
 80046f4:	eb04 0803 	add.w	r8, r4, r3
 80046f8:	f000 fb36 	bl	8004d68 <_sbrk_r>
 80046fc:	4580      	cmp	r8, r0
 80046fe:	d13a      	bne.n	8004776 <_malloc_r+0xd2>
 8004700:	6821      	ldr	r1, [r4, #0]
 8004702:	3503      	adds	r5, #3
 8004704:	1a6d      	subs	r5, r5, r1
 8004706:	f025 0503 	bic.w	r5, r5, #3
 800470a:	3508      	adds	r5, #8
 800470c:	2d0c      	cmp	r5, #12
 800470e:	bf38      	it	cc
 8004710:	250c      	movcc	r5, #12
 8004712:	4629      	mov	r1, r5
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff ffa5 	bl	8004664 <sbrk_aligned>
 800471a:	3001      	adds	r0, #1
 800471c:	d02b      	beq.n	8004776 <_malloc_r+0xd2>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	442b      	add	r3, r5
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	e00e      	b.n	8004744 <_malloc_r+0xa0>
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	1b52      	subs	r2, r2, r5
 800472a:	d41e      	bmi.n	800476a <_malloc_r+0xc6>
 800472c:	2a0b      	cmp	r2, #11
 800472e:	d916      	bls.n	800475e <_malloc_r+0xba>
 8004730:	1961      	adds	r1, r4, r5
 8004732:	42a3      	cmp	r3, r4
 8004734:	6025      	str	r5, [r4, #0]
 8004736:	bf18      	it	ne
 8004738:	6059      	strne	r1, [r3, #4]
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	bf08      	it	eq
 800473e:	6031      	streq	r1, [r6, #0]
 8004740:	5162      	str	r2, [r4, r5]
 8004742:	604b      	str	r3, [r1, #4]
 8004744:	4638      	mov	r0, r7
 8004746:	f104 060b 	add.w	r6, r4, #11
 800474a:	f000 fbbd 	bl	8004ec8 <__malloc_unlock>
 800474e:	f026 0607 	bic.w	r6, r6, #7
 8004752:	1d23      	adds	r3, r4, #4
 8004754:	1af2      	subs	r2, r6, r3
 8004756:	d0b6      	beq.n	80046c6 <_malloc_r+0x22>
 8004758:	1b9b      	subs	r3, r3, r6
 800475a:	50a3      	str	r3, [r4, r2]
 800475c:	e7b3      	b.n	80046c6 <_malloc_r+0x22>
 800475e:	6862      	ldr	r2, [r4, #4]
 8004760:	42a3      	cmp	r3, r4
 8004762:	bf0c      	ite	eq
 8004764:	6032      	streq	r2, [r6, #0]
 8004766:	605a      	strne	r2, [r3, #4]
 8004768:	e7ec      	b.n	8004744 <_malloc_r+0xa0>
 800476a:	4623      	mov	r3, r4
 800476c:	6864      	ldr	r4, [r4, #4]
 800476e:	e7b2      	b.n	80046d6 <_malloc_r+0x32>
 8004770:	4634      	mov	r4, r6
 8004772:	6876      	ldr	r6, [r6, #4]
 8004774:	e7b9      	b.n	80046ea <_malloc_r+0x46>
 8004776:	230c      	movs	r3, #12
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	4638      	mov	r0, r7
 800477c:	f000 fba4 	bl	8004ec8 <__malloc_unlock>
 8004780:	e7a1      	b.n	80046c6 <_malloc_r+0x22>
 8004782:	6025      	str	r5, [r4, #0]
 8004784:	e7de      	b.n	8004744 <_malloc_r+0xa0>
 8004786:	bf00      	nop
 8004788:	2000015c 	.word	0x2000015c

0800478c <__sfputc_r>:
 800478c:	6893      	ldr	r3, [r2, #8]
 800478e:	3b01      	subs	r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	b410      	push	{r4}
 8004794:	6093      	str	r3, [r2, #8]
 8004796:	da08      	bge.n	80047aa <__sfputc_r+0x1e>
 8004798:	6994      	ldr	r4, [r2, #24]
 800479a:	42a3      	cmp	r3, r4
 800479c:	db01      	blt.n	80047a2 <__sfputc_r+0x16>
 800479e:	290a      	cmp	r1, #10
 80047a0:	d103      	bne.n	80047aa <__sfputc_r+0x1e>
 80047a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047a6:	f7ff bc31 	b.w	800400c <__swbuf_r>
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	1c58      	adds	r0, r3, #1
 80047ae:	6010      	str	r0, [r2, #0]
 80047b0:	7019      	strb	r1, [r3, #0]
 80047b2:	4608      	mov	r0, r1
 80047b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <__sfputs_r>:
 80047ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047bc:	4606      	mov	r6, r0
 80047be:	460f      	mov	r7, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	18d5      	adds	r5, r2, r3
 80047c4:	42ac      	cmp	r4, r5
 80047c6:	d101      	bne.n	80047cc <__sfputs_r+0x12>
 80047c8:	2000      	movs	r0, #0
 80047ca:	e007      	b.n	80047dc <__sfputs_r+0x22>
 80047cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d0:	463a      	mov	r2, r7
 80047d2:	4630      	mov	r0, r6
 80047d4:	f7ff ffda 	bl	800478c <__sfputc_r>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d1f3      	bne.n	80047c4 <__sfputs_r+0xa>
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047e0 <_vfiprintf_r>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	460d      	mov	r5, r1
 80047e6:	b09d      	sub	sp, #116	; 0x74
 80047e8:	4614      	mov	r4, r2
 80047ea:	4698      	mov	r8, r3
 80047ec:	4606      	mov	r6, r0
 80047ee:	b118      	cbz	r0, 80047f8 <_vfiprintf_r+0x18>
 80047f0:	6983      	ldr	r3, [r0, #24]
 80047f2:	b90b      	cbnz	r3, 80047f8 <_vfiprintf_r+0x18>
 80047f4:	f7ff fde4 	bl	80043c0 <__sinit>
 80047f8:	4b89      	ldr	r3, [pc, #548]	; (8004a20 <_vfiprintf_r+0x240>)
 80047fa:	429d      	cmp	r5, r3
 80047fc:	d11b      	bne.n	8004836 <_vfiprintf_r+0x56>
 80047fe:	6875      	ldr	r5, [r6, #4]
 8004800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004802:	07d9      	lsls	r1, r3, #31
 8004804:	d405      	bmi.n	8004812 <_vfiprintf_r+0x32>
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	059a      	lsls	r2, r3, #22
 800480a:	d402      	bmi.n	8004812 <_vfiprintf_r+0x32>
 800480c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800480e:	f7ff fe75 	bl	80044fc <__retarget_lock_acquire_recursive>
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	071b      	lsls	r3, r3, #28
 8004816:	d501      	bpl.n	800481c <_vfiprintf_r+0x3c>
 8004818:	692b      	ldr	r3, [r5, #16]
 800481a:	b9eb      	cbnz	r3, 8004858 <_vfiprintf_r+0x78>
 800481c:	4629      	mov	r1, r5
 800481e:	4630      	mov	r0, r6
 8004820:	f7ff fc46 	bl	80040b0 <__swsetup_r>
 8004824:	b1c0      	cbz	r0, 8004858 <_vfiprintf_r+0x78>
 8004826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004828:	07dc      	lsls	r4, r3, #31
 800482a:	d50e      	bpl.n	800484a <_vfiprintf_r+0x6a>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004830:	b01d      	add	sp, #116	; 0x74
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <_vfiprintf_r+0x244>)
 8004838:	429d      	cmp	r5, r3
 800483a:	d101      	bne.n	8004840 <_vfiprintf_r+0x60>
 800483c:	68b5      	ldr	r5, [r6, #8]
 800483e:	e7df      	b.n	8004800 <_vfiprintf_r+0x20>
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <_vfiprintf_r+0x248>)
 8004842:	429d      	cmp	r5, r3
 8004844:	bf08      	it	eq
 8004846:	68f5      	ldreq	r5, [r6, #12]
 8004848:	e7da      	b.n	8004800 <_vfiprintf_r+0x20>
 800484a:	89ab      	ldrh	r3, [r5, #12]
 800484c:	0598      	lsls	r0, r3, #22
 800484e:	d4ed      	bmi.n	800482c <_vfiprintf_r+0x4c>
 8004850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004852:	f7ff fe54 	bl	80044fe <__retarget_lock_release_recursive>
 8004856:	e7e9      	b.n	800482c <_vfiprintf_r+0x4c>
 8004858:	2300      	movs	r3, #0
 800485a:	9309      	str	r3, [sp, #36]	; 0x24
 800485c:	2320      	movs	r3, #32
 800485e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004862:	f8cd 800c 	str.w	r8, [sp, #12]
 8004866:	2330      	movs	r3, #48	; 0x30
 8004868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a2c <_vfiprintf_r+0x24c>
 800486c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004870:	f04f 0901 	mov.w	r9, #1
 8004874:	4623      	mov	r3, r4
 8004876:	469a      	mov	sl, r3
 8004878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800487c:	b10a      	cbz	r2, 8004882 <_vfiprintf_r+0xa2>
 800487e:	2a25      	cmp	r2, #37	; 0x25
 8004880:	d1f9      	bne.n	8004876 <_vfiprintf_r+0x96>
 8004882:	ebba 0b04 	subs.w	fp, sl, r4
 8004886:	d00b      	beq.n	80048a0 <_vfiprintf_r+0xc0>
 8004888:	465b      	mov	r3, fp
 800488a:	4622      	mov	r2, r4
 800488c:	4629      	mov	r1, r5
 800488e:	4630      	mov	r0, r6
 8004890:	f7ff ff93 	bl	80047ba <__sfputs_r>
 8004894:	3001      	adds	r0, #1
 8004896:	f000 80aa 	beq.w	80049ee <_vfiprintf_r+0x20e>
 800489a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800489c:	445a      	add	r2, fp
 800489e:	9209      	str	r2, [sp, #36]	; 0x24
 80048a0:	f89a 3000 	ldrb.w	r3, [sl]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a2 	beq.w	80049ee <_vfiprintf_r+0x20e>
 80048aa:	2300      	movs	r3, #0
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048b4:	f10a 0a01 	add.w	sl, sl, #1
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	9307      	str	r3, [sp, #28]
 80048bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048c0:	931a      	str	r3, [sp, #104]	; 0x68
 80048c2:	4654      	mov	r4, sl
 80048c4:	2205      	movs	r2, #5
 80048c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ca:	4858      	ldr	r0, [pc, #352]	; (8004a2c <_vfiprintf_r+0x24c>)
 80048cc:	f7fb fc90 	bl	80001f0 <memchr>
 80048d0:	9a04      	ldr	r2, [sp, #16]
 80048d2:	b9d8      	cbnz	r0, 800490c <_vfiprintf_r+0x12c>
 80048d4:	06d1      	lsls	r1, r2, #27
 80048d6:	bf44      	itt	mi
 80048d8:	2320      	movmi	r3, #32
 80048da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048de:	0713      	lsls	r3, r2, #28
 80048e0:	bf44      	itt	mi
 80048e2:	232b      	movmi	r3, #43	; 0x2b
 80048e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e8:	f89a 3000 	ldrb.w	r3, [sl]
 80048ec:	2b2a      	cmp	r3, #42	; 0x2a
 80048ee:	d015      	beq.n	800491c <_vfiprintf_r+0x13c>
 80048f0:	9a07      	ldr	r2, [sp, #28]
 80048f2:	4654      	mov	r4, sl
 80048f4:	2000      	movs	r0, #0
 80048f6:	f04f 0c0a 	mov.w	ip, #10
 80048fa:	4621      	mov	r1, r4
 80048fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004900:	3b30      	subs	r3, #48	; 0x30
 8004902:	2b09      	cmp	r3, #9
 8004904:	d94e      	bls.n	80049a4 <_vfiprintf_r+0x1c4>
 8004906:	b1b0      	cbz	r0, 8004936 <_vfiprintf_r+0x156>
 8004908:	9207      	str	r2, [sp, #28]
 800490a:	e014      	b.n	8004936 <_vfiprintf_r+0x156>
 800490c:	eba0 0308 	sub.w	r3, r0, r8
 8004910:	fa09 f303 	lsl.w	r3, r9, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	9304      	str	r3, [sp, #16]
 8004918:	46a2      	mov	sl, r4
 800491a:	e7d2      	b.n	80048c2 <_vfiprintf_r+0xe2>
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	1d19      	adds	r1, r3, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	9103      	str	r1, [sp, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	bfbb      	ittet	lt
 8004928:	425b      	neglt	r3, r3
 800492a:	f042 0202 	orrlt.w	r2, r2, #2
 800492e:	9307      	strge	r3, [sp, #28]
 8004930:	9307      	strlt	r3, [sp, #28]
 8004932:	bfb8      	it	lt
 8004934:	9204      	strlt	r2, [sp, #16]
 8004936:	7823      	ldrb	r3, [r4, #0]
 8004938:	2b2e      	cmp	r3, #46	; 0x2e
 800493a:	d10c      	bne.n	8004956 <_vfiprintf_r+0x176>
 800493c:	7863      	ldrb	r3, [r4, #1]
 800493e:	2b2a      	cmp	r3, #42	; 0x2a
 8004940:	d135      	bne.n	80049ae <_vfiprintf_r+0x1ce>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	1d1a      	adds	r2, r3, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	9203      	str	r2, [sp, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfb8      	it	lt
 800494e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004952:	3402      	adds	r4, #2
 8004954:	9305      	str	r3, [sp, #20]
 8004956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a3c <_vfiprintf_r+0x25c>
 800495a:	7821      	ldrb	r1, [r4, #0]
 800495c:	2203      	movs	r2, #3
 800495e:	4650      	mov	r0, sl
 8004960:	f7fb fc46 	bl	80001f0 <memchr>
 8004964:	b140      	cbz	r0, 8004978 <_vfiprintf_r+0x198>
 8004966:	2340      	movs	r3, #64	; 0x40
 8004968:	eba0 000a 	sub.w	r0, r0, sl
 800496c:	fa03 f000 	lsl.w	r0, r3, r0
 8004970:	9b04      	ldr	r3, [sp, #16]
 8004972:	4303      	orrs	r3, r0
 8004974:	3401      	adds	r4, #1
 8004976:	9304      	str	r3, [sp, #16]
 8004978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497c:	482c      	ldr	r0, [pc, #176]	; (8004a30 <_vfiprintf_r+0x250>)
 800497e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004982:	2206      	movs	r2, #6
 8004984:	f7fb fc34 	bl	80001f0 <memchr>
 8004988:	2800      	cmp	r0, #0
 800498a:	d03f      	beq.n	8004a0c <_vfiprintf_r+0x22c>
 800498c:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <_vfiprintf_r+0x254>)
 800498e:	bb1b      	cbnz	r3, 80049d8 <_vfiprintf_r+0x1f8>
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	3307      	adds	r3, #7
 8004994:	f023 0307 	bic.w	r3, r3, #7
 8004998:	3308      	adds	r3, #8
 800499a:	9303      	str	r3, [sp, #12]
 800499c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800499e:	443b      	add	r3, r7
 80049a0:	9309      	str	r3, [sp, #36]	; 0x24
 80049a2:	e767      	b.n	8004874 <_vfiprintf_r+0x94>
 80049a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80049a8:	460c      	mov	r4, r1
 80049aa:	2001      	movs	r0, #1
 80049ac:	e7a5      	b.n	80048fa <_vfiprintf_r+0x11a>
 80049ae:	2300      	movs	r3, #0
 80049b0:	3401      	adds	r4, #1
 80049b2:	9305      	str	r3, [sp, #20]
 80049b4:	4619      	mov	r1, r3
 80049b6:	f04f 0c0a 	mov.w	ip, #10
 80049ba:	4620      	mov	r0, r4
 80049bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c0:	3a30      	subs	r2, #48	; 0x30
 80049c2:	2a09      	cmp	r2, #9
 80049c4:	d903      	bls.n	80049ce <_vfiprintf_r+0x1ee>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0c5      	beq.n	8004956 <_vfiprintf_r+0x176>
 80049ca:	9105      	str	r1, [sp, #20]
 80049cc:	e7c3      	b.n	8004956 <_vfiprintf_r+0x176>
 80049ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80049d2:	4604      	mov	r4, r0
 80049d4:	2301      	movs	r3, #1
 80049d6:	e7f0      	b.n	80049ba <_vfiprintf_r+0x1da>
 80049d8:	ab03      	add	r3, sp, #12
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	462a      	mov	r2, r5
 80049de:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <_vfiprintf_r+0x258>)
 80049e0:	a904      	add	r1, sp, #16
 80049e2:	4630      	mov	r0, r6
 80049e4:	f3af 8000 	nop.w
 80049e8:	4607      	mov	r7, r0
 80049ea:	1c78      	adds	r0, r7, #1
 80049ec:	d1d6      	bne.n	800499c <_vfiprintf_r+0x1bc>
 80049ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049f0:	07d9      	lsls	r1, r3, #31
 80049f2:	d405      	bmi.n	8004a00 <_vfiprintf_r+0x220>
 80049f4:	89ab      	ldrh	r3, [r5, #12]
 80049f6:	059a      	lsls	r2, r3, #22
 80049f8:	d402      	bmi.n	8004a00 <_vfiprintf_r+0x220>
 80049fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049fc:	f7ff fd7f 	bl	80044fe <__retarget_lock_release_recursive>
 8004a00:	89ab      	ldrh	r3, [r5, #12]
 8004a02:	065b      	lsls	r3, r3, #25
 8004a04:	f53f af12 	bmi.w	800482c <_vfiprintf_r+0x4c>
 8004a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a0a:	e711      	b.n	8004830 <_vfiprintf_r+0x50>
 8004a0c:	ab03      	add	r3, sp, #12
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	462a      	mov	r2, r5
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <_vfiprintf_r+0x258>)
 8004a14:	a904      	add	r1, sp, #16
 8004a16:	4630      	mov	r0, r6
 8004a18:	f000 f880 	bl	8004b1c <_printf_i>
 8004a1c:	e7e4      	b.n	80049e8 <_vfiprintf_r+0x208>
 8004a1e:	bf00      	nop
 8004a20:	08004fb4 	.word	0x08004fb4
 8004a24:	08004fd4 	.word	0x08004fd4
 8004a28:	08004f94 	.word	0x08004f94
 8004a2c:	08004ff4 	.word	0x08004ff4
 8004a30:	08004ffe 	.word	0x08004ffe
 8004a34:	00000000 	.word	0x00000000
 8004a38:	080047bb 	.word	0x080047bb
 8004a3c:	08004ffa 	.word	0x08004ffa

08004a40 <_printf_common>:
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	4616      	mov	r6, r2
 8004a46:	4699      	mov	r9, r3
 8004a48:	688a      	ldr	r2, [r1, #8]
 8004a4a:	690b      	ldr	r3, [r1, #16]
 8004a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bfb8      	it	lt
 8004a54:	4613      	movlt	r3, r2
 8004a56:	6033      	str	r3, [r6, #0]
 8004a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	b10a      	cbz	r2, 8004a66 <_printf_common+0x26>
 8004a62:	3301      	adds	r3, #1
 8004a64:	6033      	str	r3, [r6, #0]
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	0699      	lsls	r1, r3, #26
 8004a6a:	bf42      	ittt	mi
 8004a6c:	6833      	ldrmi	r3, [r6, #0]
 8004a6e:	3302      	addmi	r3, #2
 8004a70:	6033      	strmi	r3, [r6, #0]
 8004a72:	6825      	ldr	r5, [r4, #0]
 8004a74:	f015 0506 	ands.w	r5, r5, #6
 8004a78:	d106      	bne.n	8004a88 <_printf_common+0x48>
 8004a7a:	f104 0a19 	add.w	sl, r4, #25
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	6832      	ldr	r2, [r6, #0]
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	dc26      	bgt.n	8004ad6 <_printf_common+0x96>
 8004a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a8c:	1e13      	subs	r3, r2, #0
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	bf18      	it	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	0692      	lsls	r2, r2, #26
 8004a96:	d42b      	bmi.n	8004af0 <_printf_common+0xb0>
 8004a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	47c0      	blx	r8
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d01e      	beq.n	8004ae4 <_printf_common+0xa4>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	68e5      	ldr	r5, [r4, #12]
 8004aaa:	6832      	ldr	r2, [r6, #0]
 8004aac:	f003 0306 	and.w	r3, r3, #6
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	bf08      	it	eq
 8004ab4:	1aad      	subeq	r5, r5, r2
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	6922      	ldr	r2, [r4, #16]
 8004aba:	bf0c      	ite	eq
 8004abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac0:	2500      	movne	r5, #0
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bfc4      	itt	gt
 8004ac6:	1a9b      	subgt	r3, r3, r2
 8004ac8:	18ed      	addgt	r5, r5, r3
 8004aca:	2600      	movs	r6, #0
 8004acc:	341a      	adds	r4, #26
 8004ace:	42b5      	cmp	r5, r6
 8004ad0:	d11a      	bne.n	8004b08 <_printf_common+0xc8>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e008      	b.n	8004ae8 <_printf_common+0xa8>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4649      	mov	r1, r9
 8004adc:	4638      	mov	r0, r7
 8004ade:	47c0      	blx	r8
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d103      	bne.n	8004aec <_printf_common+0xac>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	3501      	adds	r5, #1
 8004aee:	e7c6      	b.n	8004a7e <_printf_common+0x3e>
 8004af0:	18e1      	adds	r1, r4, r3
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	2030      	movs	r0, #48	; 0x30
 8004af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004afa:	4422      	add	r2, r4
 8004afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b04:	3302      	adds	r3, #2
 8004b06:	e7c7      	b.n	8004a98 <_printf_common+0x58>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d0e6      	beq.n	8004ae4 <_printf_common+0xa4>
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7d9      	b.n	8004ace <_printf_common+0x8e>
	...

08004b1c <_printf_i>:
 8004b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	7e0f      	ldrb	r7, [r1, #24]
 8004b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b24:	2f78      	cmp	r7, #120	; 0x78
 8004b26:	4691      	mov	r9, r2
 8004b28:	4680      	mov	r8, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	469a      	mov	sl, r3
 8004b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b32:	d807      	bhi.n	8004b44 <_printf_i+0x28>
 8004b34:	2f62      	cmp	r7, #98	; 0x62
 8004b36:	d80a      	bhi.n	8004b4e <_printf_i+0x32>
 8004b38:	2f00      	cmp	r7, #0
 8004b3a:	f000 80d8 	beq.w	8004cee <_printf_i+0x1d2>
 8004b3e:	2f58      	cmp	r7, #88	; 0x58
 8004b40:	f000 80a3 	beq.w	8004c8a <_printf_i+0x16e>
 8004b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b4c:	e03a      	b.n	8004bc4 <_printf_i+0xa8>
 8004b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b52:	2b15      	cmp	r3, #21
 8004b54:	d8f6      	bhi.n	8004b44 <_printf_i+0x28>
 8004b56:	a101      	add	r1, pc, #4	; (adr r1, 8004b5c <_printf_i+0x40>)
 8004b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004b45 	.word	0x08004b45
 8004b68:	08004b45 	.word	0x08004b45
 8004b6c:	08004b45 	.word	0x08004b45
 8004b70:	08004b45 	.word	0x08004b45
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004b45 	.word	0x08004b45
 8004b7c:	08004b45 	.word	0x08004b45
 8004b80:	08004b45 	.word	0x08004b45
 8004b84:	08004b45 	.word	0x08004b45
 8004b88:	08004cd5 	.word	0x08004cd5
 8004b8c:	08004bf9 	.word	0x08004bf9
 8004b90:	08004cb7 	.word	0x08004cb7
 8004b94:	08004b45 	.word	0x08004b45
 8004b98:	08004b45 	.word	0x08004b45
 8004b9c:	08004cf7 	.word	0x08004cf7
 8004ba0:	08004b45 	.word	0x08004b45
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004b45 	.word	0x08004b45
 8004bac:	08004b45 	.word	0x08004b45
 8004bb0:	08004cbf 	.word	0x08004cbf
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	1d1a      	adds	r2, r3, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	602a      	str	r2, [r5, #0]
 8004bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0a3      	b.n	8004d10 <_printf_i+0x1f4>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	6829      	ldr	r1, [r5, #0]
 8004bcc:	0606      	lsls	r6, r0, #24
 8004bce:	f101 0304 	add.w	r3, r1, #4
 8004bd2:	d50a      	bpl.n	8004bea <_printf_i+0xce>
 8004bd4:	680e      	ldr	r6, [r1, #0]
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	2e00      	cmp	r6, #0
 8004bda:	da03      	bge.n	8004be4 <_printf_i+0xc8>
 8004bdc:	232d      	movs	r3, #45	; 0x2d
 8004bde:	4276      	negs	r6, r6
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be4:	485e      	ldr	r0, [pc, #376]	; (8004d60 <_printf_i+0x244>)
 8004be6:	230a      	movs	r3, #10
 8004be8:	e019      	b.n	8004c1e <_printf_i+0x102>
 8004bea:	680e      	ldr	r6, [r1, #0]
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf2:	bf18      	it	ne
 8004bf4:	b236      	sxthne	r6, r6
 8004bf6:	e7ef      	b.n	8004bd8 <_printf_i+0xbc>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	6029      	str	r1, [r5, #0]
 8004c00:	0601      	lsls	r1, r0, #24
 8004c02:	d501      	bpl.n	8004c08 <_printf_i+0xec>
 8004c04:	681e      	ldr	r6, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <_printf_i+0xf2>
 8004c08:	0646      	lsls	r6, r0, #25
 8004c0a:	d5fb      	bpl.n	8004c04 <_printf_i+0xe8>
 8004c0c:	881e      	ldrh	r6, [r3, #0]
 8004c0e:	4854      	ldr	r0, [pc, #336]	; (8004d60 <_printf_i+0x244>)
 8004c10:	2f6f      	cmp	r7, #111	; 0x6f
 8004c12:	bf0c      	ite	eq
 8004c14:	2308      	moveq	r3, #8
 8004c16:	230a      	movne	r3, #10
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c1e:	6865      	ldr	r5, [r4, #4]
 8004c20:	60a5      	str	r5, [r4, #8]
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	bfa2      	ittt	ge
 8004c26:	6821      	ldrge	r1, [r4, #0]
 8004c28:	f021 0104 	bicge.w	r1, r1, #4
 8004c2c:	6021      	strge	r1, [r4, #0]
 8004c2e:	b90e      	cbnz	r6, 8004c34 <_printf_i+0x118>
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	d04d      	beq.n	8004cd0 <_printf_i+0x1b4>
 8004c34:	4615      	mov	r5, r2
 8004c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c3e:	5dc7      	ldrb	r7, [r0, r7]
 8004c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c44:	4637      	mov	r7, r6
 8004c46:	42bb      	cmp	r3, r7
 8004c48:	460e      	mov	r6, r1
 8004c4a:	d9f4      	bls.n	8004c36 <_printf_i+0x11a>
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d10b      	bne.n	8004c68 <_printf_i+0x14c>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	07de      	lsls	r6, r3, #31
 8004c54:	d508      	bpl.n	8004c68 <_printf_i+0x14c>
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	6861      	ldr	r1, [r4, #4]
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	bfde      	ittt	le
 8004c5e:	2330      	movle	r3, #48	; 0x30
 8004c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c68:	1b52      	subs	r2, r2, r5
 8004c6a:	6122      	str	r2, [r4, #16]
 8004c6c:	f8cd a000 	str.w	sl, [sp]
 8004c70:	464b      	mov	r3, r9
 8004c72:	aa03      	add	r2, sp, #12
 8004c74:	4621      	mov	r1, r4
 8004c76:	4640      	mov	r0, r8
 8004c78:	f7ff fee2 	bl	8004a40 <_printf_common>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d14c      	bne.n	8004d1a <_printf_i+0x1fe>
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c84:	b004      	add	sp, #16
 8004c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8a:	4835      	ldr	r0, [pc, #212]	; (8004d60 <_printf_i+0x244>)
 8004c8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c90:	6829      	ldr	r1, [r5, #0]
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c98:	6029      	str	r1, [r5, #0]
 8004c9a:	061d      	lsls	r5, r3, #24
 8004c9c:	d514      	bpl.n	8004cc8 <_printf_i+0x1ac>
 8004c9e:	07df      	lsls	r7, r3, #31
 8004ca0:	bf44      	itt	mi
 8004ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca6:	6023      	strmi	r3, [r4, #0]
 8004ca8:	b91e      	cbnz	r6, 8004cb2 <_printf_i+0x196>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	f023 0320 	bic.w	r3, r3, #32
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	e7b0      	b.n	8004c18 <_printf_i+0xfc>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f043 0320 	orr.w	r3, r3, #32
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	2378      	movs	r3, #120	; 0x78
 8004cc0:	4828      	ldr	r0, [pc, #160]	; (8004d64 <_printf_i+0x248>)
 8004cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cc6:	e7e3      	b.n	8004c90 <_printf_i+0x174>
 8004cc8:	0659      	lsls	r1, r3, #25
 8004cca:	bf48      	it	mi
 8004ccc:	b2b6      	uxthmi	r6, r6
 8004cce:	e7e6      	b.n	8004c9e <_printf_i+0x182>
 8004cd0:	4615      	mov	r5, r2
 8004cd2:	e7bb      	b.n	8004c4c <_printf_i+0x130>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	6826      	ldr	r6, [r4, #0]
 8004cd8:	6961      	ldr	r1, [r4, #20]
 8004cda:	1d18      	adds	r0, r3, #4
 8004cdc:	6028      	str	r0, [r5, #0]
 8004cde:	0635      	lsls	r5, r6, #24
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	d501      	bpl.n	8004ce8 <_printf_i+0x1cc>
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	e002      	b.n	8004cee <_printf_i+0x1d2>
 8004ce8:	0670      	lsls	r0, r6, #25
 8004cea:	d5fb      	bpl.n	8004ce4 <_printf_i+0x1c8>
 8004cec:	8019      	strh	r1, [r3, #0]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	4615      	mov	r5, r2
 8004cf4:	e7ba      	b.n	8004c6c <_printf_i+0x150>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	602a      	str	r2, [r5, #0]
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	6862      	ldr	r2, [r4, #4]
 8004d00:	2100      	movs	r1, #0
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7fb fa74 	bl	80001f0 <memchr>
 8004d08:	b108      	cbz	r0, 8004d0e <_printf_i+0x1f2>
 8004d0a:	1b40      	subs	r0, r0, r5
 8004d0c:	6060      	str	r0, [r4, #4]
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	2300      	movs	r3, #0
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d18:	e7a8      	b.n	8004c6c <_printf_i+0x150>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4640      	mov	r0, r8
 8004d22:	47d0      	blx	sl
 8004d24:	3001      	adds	r0, #1
 8004d26:	d0ab      	beq.n	8004c80 <_printf_i+0x164>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	079b      	lsls	r3, r3, #30
 8004d2c:	d413      	bmi.n	8004d56 <_printf_i+0x23a>
 8004d2e:	68e0      	ldr	r0, [r4, #12]
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	4298      	cmp	r0, r3
 8004d34:	bfb8      	it	lt
 8004d36:	4618      	movlt	r0, r3
 8004d38:	e7a4      	b.n	8004c84 <_printf_i+0x168>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	47d0      	blx	sl
 8004d44:	3001      	adds	r0, #1
 8004d46:	d09b      	beq.n	8004c80 <_printf_i+0x164>
 8004d48:	3501      	adds	r5, #1
 8004d4a:	68e3      	ldr	r3, [r4, #12]
 8004d4c:	9903      	ldr	r1, [sp, #12]
 8004d4e:	1a5b      	subs	r3, r3, r1
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	dcf2      	bgt.n	8004d3a <_printf_i+0x21e>
 8004d54:	e7eb      	b.n	8004d2e <_printf_i+0x212>
 8004d56:	2500      	movs	r5, #0
 8004d58:	f104 0619 	add.w	r6, r4, #25
 8004d5c:	e7f5      	b.n	8004d4a <_printf_i+0x22e>
 8004d5e:	bf00      	nop
 8004d60:	08005005 	.word	0x08005005
 8004d64:	08005016 	.word	0x08005016

08004d68 <_sbrk_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4d06      	ldr	r5, [pc, #24]	; (8004d84 <_sbrk_r+0x1c>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fb ff48 	bl	8000c08 <_sbrk>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_sbrk_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_sbrk_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20000164 	.word	0x20000164

08004d88 <__sread>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	f000 f8a0 	bl	8004ed4 <_read_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	bfab      	itete	ge
 8004d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d9c:	181b      	addge	r3, r3, r0
 8004d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004da2:	bfac      	ite	ge
 8004da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004da6:	81a3      	strhlt	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__swrite>:
 8004daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dae:	461f      	mov	r7, r3
 8004db0:	898b      	ldrh	r3, [r1, #12]
 8004db2:	05db      	lsls	r3, r3, #23
 8004db4:	4605      	mov	r5, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4616      	mov	r6, r2
 8004dba:	d505      	bpl.n	8004dc8 <__swrite+0x1e>
 8004dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f000 f868 	bl	8004e98 <_lseek_r>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	4628      	mov	r0, r5
 8004dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dde:	f000 b817 	b.w	8004e10 <_write_r>

08004de2 <__sseek>:
 8004de2:	b510      	push	{r4, lr}
 8004de4:	460c      	mov	r4, r1
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	f000 f855 	bl	8004e98 <_lseek_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	bf15      	itete	ne
 8004df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dfe:	81a3      	strheq	r3, [r4, #12]
 8004e00:	bf18      	it	ne
 8004e02:	81a3      	strhne	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__sclose>:
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f000 b813 	b.w	8004e34 <_close_r>
	...

08004e10 <_write_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d07      	ldr	r5, [pc, #28]	; (8004e30 <_write_r+0x20>)
 8004e14:	4604      	mov	r4, r0
 8004e16:	4608      	mov	r0, r1
 8004e18:	4611      	mov	r1, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	602a      	str	r2, [r5, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f7fb fea8 	bl	8000b74 <_write>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <_write_r+0x1e>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	b103      	cbz	r3, 8004e2e <_write_r+0x1e>
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
 8004e30:	20000164 	.word	0x20000164

08004e34 <_close_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d06      	ldr	r5, [pc, #24]	; (8004e50 <_close_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fb feae 	bl	8000ba0 <_close>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_close_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_close_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	20000164 	.word	0x20000164

08004e54 <_fstat_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d07      	ldr	r5, [pc, #28]	; (8004e74 <_fstat_r+0x20>)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	f7fb fea9 	bl	8000bb8 <_fstat>
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d102      	bne.n	8004e70 <_fstat_r+0x1c>
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	b103      	cbz	r3, 8004e70 <_fstat_r+0x1c>
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	20000164 	.word	0x20000164

08004e78 <_isatty_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_isatty_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb fea8 	bl	8000bd8 <_isatty>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_isatty_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_isatty_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	20000164 	.word	0x20000164

08004e98 <_lseek_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d07      	ldr	r5, [pc, #28]	; (8004eb8 <_lseek_r+0x20>)
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	602a      	str	r2, [r5, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f7fb fea1 	bl	8000bee <_lseek>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_lseek_r+0x1e>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_lseek_r+0x1e>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	20000164 	.word	0x20000164

08004ebc <__malloc_lock>:
 8004ebc:	4801      	ldr	r0, [pc, #4]	; (8004ec4 <__malloc_lock+0x8>)
 8004ebe:	f7ff bb1d 	b.w	80044fc <__retarget_lock_acquire_recursive>
 8004ec2:	bf00      	nop
 8004ec4:	20000158 	.word	0x20000158

08004ec8 <__malloc_unlock>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <__malloc_unlock+0x8>)
 8004eca:	f7ff bb18 	b.w	80044fe <__retarget_lock_release_recursive>
 8004ece:	bf00      	nop
 8004ed0:	20000158 	.word	0x20000158

08004ed4 <_read_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	; (8004ef4 <_read_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fb fe28 	bl	8000b38 <_read>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_read_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_read_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000164 	.word	0x20000164

08004ef8 <_init>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	bf00      	nop
 8004efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efe:	bc08      	pop	{r3}
 8004f00:	469e      	mov	lr, r3
 8004f02:	4770      	bx	lr

08004f04 <_fini>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	bf00      	nop
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr
