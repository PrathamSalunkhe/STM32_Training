
BME680_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800bfa0  0800bfa0  0001bfa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5cc  0800c5cc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d4  0800c5d4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d4  0800c5d4  0001c5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001f4  0800c7d0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  0800c7d0  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011374  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002325  00000000  00000000  00031598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  000338c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  000346e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a862  00000000  00000000  00035428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119fa  00000000  00000000  0005fc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe2e6  00000000  00000000  00071684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f96a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  0016f9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bf84 	.word	0x0800bf84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0800bf84 	.word	0x0800bf84

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800101c:	b0b0      	sub	sp, #192	; 0xc0
 800101e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001020:	f002 ff4a 	bl	8003eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001024:	f000 f87e 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001028:	f000 f92e 	bl	8001288 <MX_GPIO_Init>
  MX_I2C1_Init();
 800102c:	f000 f8c0 	bl	80011b0 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001030:	f000 f8fe 	bl	8001230 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  I2C_Scanner();
 8001034:	f000 f94c 	bl	80012d0 <I2C_Scanner>

  /* BME680 API forced mode test */
  	struct bme68x_data data;
  	bme68x_start(&data, &hi2c1);
 8001038:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800103c:	4936      	ldr	r1, [pc, #216]	; (8001118 <main+0x100>)
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fc24 	bl	800388c <bme68x_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (bme68x_single_measure(&data) == 0) {
 8001044:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001048:	4618      	mov	r0, r3
 800104a:	f002 fc6f 	bl	800392c <bme68x_single_measure>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d15b      	bne.n	800110c <main+0xf4>

			// Measurement is successful, so continue with IAQ
			data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8001054:	f002 feea 	bl	8003e2c <bme68x_iaq>
 8001058:	eef0 7a40 	vmov.f32	s15, s0
 800105c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

			// Create a message buffer and clear it.
			char msgBuffer[120];
			for (uint16_t i = 0; i < 120; i++) {
 8001060:	2300      	movs	r3, #0
 8001062:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001066:	e00d      	b.n	8001084 <main+0x6c>
				msgBuffer[i] = ' ';
 8001068:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800106c:	3398      	adds	r3, #152	; 0x98
 800106e:	f107 0208 	add.w	r2, r7, #8
 8001072:	4413      	add	r3, r2
 8001074:	2220      	movs	r2, #32
 8001076:	f803 2c98 	strb.w	r2, [r3, #-152]
			for (uint16_t i = 0; i < 120; i++) {
 800107a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800107e:	3301      	adds	r3, #1
 8001080:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001084:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001088:	2b77      	cmp	r3, #119	; 0x77
 800108a:	d9ed      	bls.n	8001068 <main+0x50>
			}

			// Send the data through UART.
			sprintf(msgBuffer,
					"Temperature(deg C): %.2f, Pressure(Pa): %.2f, Humidity(%%): %.2f, IAQ: %.1f ,Gas resistance(ohm): %.2f\r\n",
					data.temperature, data.pressure, data.humidity,
 800108c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
			sprintf(msgBuffer,
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa69 	bl	8000568 <__aeabi_f2d>
 8001096:	e9c7 0100 	strd	r0, r1, [r7]
					data.temperature, data.pressure, data.humidity,
 800109a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
			sprintf(msgBuffer,
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa62 	bl	8000568 <__aeabi_f2d>
 80010a4:	4604      	mov	r4, r0
 80010a6:	460d      	mov	r5, r1
					data.temperature, data.pressure, data.humidity,
 80010a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
			sprintf(msgBuffer,
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa5b 	bl	8000568 <__aeabi_f2d>
 80010b2:	4680      	mov	r8, r0
 80010b4:	4689      	mov	r9, r1
					data.iaq_score, data.gas_resistance);
 80010b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
			sprintf(msgBuffer,
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa54 	bl	8000568 <__aeabi_f2d>
 80010c0:	4682      	mov	sl, r0
 80010c2:	468b      	mov	fp, r1
					data.iaq_score, data.gas_resistance);
 80010c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
			sprintf(msgBuffer,
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa4d 	bl	8000568 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	f107 0008 	add.w	r0, r7, #8
 80010d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80010da:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80010de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010e2:	e9cd 4500 	strd	r4, r5, [sp]
 80010e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ea:	490c      	ldr	r1, [pc, #48]	; (800111c <main+0x104>)
 80010ec:	f007 f922 	bl	8008334 <siprintf>

			HAL_UART_Transmit(&hlpuart1, (uint8_t*) msgBuffer, strlen(msgBuffer),
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f87b 	bl	80001f0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f107 0108 	add.w	r1, r7, #8
 8001102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <main+0x108>)
 8001108:	f005 fcb4 	bl	8006a74 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

		}

		HAL_Delay(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001110:	f002 ff46 	bl	8003fa0 <HAL_Delay>
		if (bme68x_single_measure(&data) == 0) {
 8001114:	e796      	b.n	8001044 <main+0x2c>
 8001116:	bf00      	nop
 8001118:	20000210 	.word	0x20000210
 800111c:	0800bfa0 	.word	0x0800bfa0
 8001120:	20000264 	.word	0x20000264

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b096      	sub	sp, #88	; 0x58
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2244      	movs	r2, #68	; 0x44
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f006 f9d2 	bl	80074dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001146:	f44f 7000 	mov.w	r0, #512	; 0x200
 800114a:	f004 f8d7 	bl	80052fc <HAL_PWREx_ControlVoltageScaling>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001154:	f000 f8f8 	bl	8001348 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001158:	2310      	movs	r3, #16
 800115a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001164:	23b0      	movs	r3, #176	; 0xb0
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4618      	mov	r0, r3
 8001172:	f004 f929 	bl	80053c8 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800117c:	f000 f8e4 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	2102      	movs	r1, #2
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fd2f 	bl	8005bfc <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011a4:	f000 f8d0 	bl	8001348 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3758      	adds	r7, #88	; 0x58
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_I2C1_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <MX_I2C1_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_I2C1_Init+0x74>)
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <MX_I2C1_Init+0x7c>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_I2C1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_I2C1_Init+0x74>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_I2C1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <MX_I2C1_Init+0x74>)
 80011ec:	f003 f974 	bl	80044d8 <HAL_I2C_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011f6:	f000 f8a7 	bl	8001348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <MX_I2C1_Init+0x74>)
 80011fe:	f003 ffd7 	bl	80051b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 f89e 	bl	8001348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_I2C1_Init+0x74>)
 8001210:	f004 f819 	bl	8005246 <HAL_I2CEx_ConfigDigitalFilter>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 f895 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000210 	.word	0x20000210
 8001228:	40005400 	.word	0x40005400
 800122c:	20303e5d 	.word	0x20303e5d

08001230 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_LPUART1_UART_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_LPUART1_UART_Init+0x50>)
 800126e:	f005 fbb3 	bl	80069d8 <HAL_UART_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 f866 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000264 	.word	0x20000264
 8001284:	40008000 	.word	0x40008000

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_GPIO_Init+0x44>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <MX_GPIO_Init+0x44>)
 8001294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_GPIO_Init+0x44>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012a6:	f004 f87f 	bl	80053a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_GPIO_Init+0x44>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <MX_GPIO_Init+0x44>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <MX_GPIO_Init+0x44>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <I2C_Scanner>:

/* USER CODE BEGIN 4 */

void I2C_Scanner(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	printf("\r\n");
 80012d6:	4818      	ldr	r0, [pc, #96]	; (8001338 <I2C_Scanner+0x68>)
 80012d8:	f007 f81e 	bl	8008318 <puts>

	 	printf("Scanning I2C bus:\r\n");
 80012dc:	4817      	ldr	r0, [pc, #92]	; (800133c <I2C_Scanner+0x6c>)
 80012de:	f007 f81b 	bl	8008318 <puts>
		HAL_StatusTypeDef result;
	 	uint8_t i;
	 	for (i=1; i<128; i++)
 80012e2:	2301      	movs	r3, #1
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	e01b      	b.n	8001320 <I2C_Scanner+0x50>
	 	   * &hi2c1 is the handle
	 	   * (uint16_t)(i<<1) is the i2c address left aligned
	 	   * retries 2
	 	   * timeout 2
	 	   */
	 	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b299      	uxth	r1, r3
 80012f0:	2302      	movs	r3, #2
 80012f2:	2202      	movs	r2, #2
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <I2C_Scanner+0x70>)
 80012f6:	f003 fbad 	bl	8004a54 <HAL_I2C_IsDeviceReady>
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
	 	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <I2C_Scanner+0x3a>
	 	  {
	 		  printf("."); // No ACK received at that address
 8001304:	202e      	movs	r0, #46	; 0x2e
 8001306:	f006 ff83 	bl	8008210 <putchar>
	 	  }
	 	  if (result == HAL_OK)
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d104      	bne.n	800131a <I2C_Scanner+0x4a>
	 	  {
	 		  printf("\r\nSlave Address: 0x%X\r\n", i); // Received an ACK at that address
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4619      	mov	r1, r3
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <I2C_Scanner+0x74>)
 8001316:	f006 ff63 	bl	80081e0 <iprintf>
	 	for (i=1; i<128; i++)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	3301      	adds	r3, #1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dadf      	bge.n	80012e8 <I2C_Scanner+0x18>
	 	  }
	 	}
	 	printf("\r\n");
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <I2C_Scanner+0x68>)
 800132a:	f006 fff5 	bl	8008318 <puts>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	0800c00c 	.word	0x0800c00c
 800133c:	0800c010 	.word	0x0800c010
 8001340:	20000210 	.word	0x20000210
 8001344:	0800c024 	.word	0x0800c024

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_MspInit+0x44>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_MspInit+0x44>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6613      	str	r3, [r2, #96]	; 0x60
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_MspInit+0x44>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x44>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x44>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6593      	str	r3, [r2, #88]	; 0x58
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x44>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ac      	sub	sp, #176	; 0xb0
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	228c      	movs	r2, #140	; 0x8c
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 f88d 	bl	80074dc <memset>
  if(hi2c->Instance==I2C1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a21      	ldr	r2, [pc, #132]	; (800144c <HAL_I2C_MspInit+0xb0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d13b      	bne.n	8001444 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013cc:	2340      	movs	r3, #64	; 0x40
 80013ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 fe33 	bl	8006044 <HAL_RCCEx_PeriphCLKConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013e4:	f7ff ffb0 	bl	8001348 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_I2C_MspInit+0xb4>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_I2C_MspInit+0xb4>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_I2C_MspInit+0xb4>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001400:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001408:	2312      	movs	r3, #18
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141a:	2304      	movs	r3, #4
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001424:	4619      	mov	r1, r3
 8001426:	480b      	ldr	r0, [pc, #44]	; (8001454 <HAL_I2C_MspInit+0xb8>)
 8001428:	f002 fec4 	bl	80041b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_I2C_MspInit+0xb4>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_I2C_MspInit+0xb4>)
 8001432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001436:	6593      	str	r3, [r2, #88]	; 0x58
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_I2C_MspInit+0xb4>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	37b0      	adds	r7, #176	; 0xb0
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40005400 	.word	0x40005400
 8001450:	40021000 	.word	0x40021000
 8001454:	48000400 	.word	0x48000400

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0ac      	sub	sp, #176	; 0xb0
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	228c      	movs	r2, #140	; 0x8c
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f006 f82f 	bl	80074dc <memset>
  if(huart->Instance==LPUART1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a22      	ldr	r2, [pc, #136]	; (800150c <HAL_UART_MspInit+0xb4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d13d      	bne.n	8001504 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001488:	2320      	movs	r3, #32
 800148a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800148c:	2300      	movs	r3, #0
 800148e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4618      	mov	r0, r3
 8001496:	f004 fdd5 	bl	8006044 <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a0:	f7ff ff52 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	4a13      	ldr	r2, [pc, #76]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80014d4:	f003 ff68 	bl	80053a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80014d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014f2:	2308      	movs	r3, #8
 80014f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_UART_MspInit+0xbc>)
 8001500:	f002 fe58 	bl	80041b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	37b0      	adds	r7, #176	; 0xb0
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40008000 	.word	0x40008000
 8001510:	40021000 	.word	0x40021000
 8001514:	48001800 	.word	0x48001800

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f002 fcfc 	bl	8003f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return 1;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_kill>:

int _kill(int pid, int sig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001586:	f005 ff71 	bl	800746c <__errno>
 800158a:	4603      	mov	r3, r0
 800158c:	2216      	movs	r2, #22
 800158e:	601a      	str	r2, [r3, #0]
  return -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_exit>:

void _exit (int status)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ffe7 	bl	800157c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ae:	e7fe      	b.n	80015ae <_exit+0x12>

080015b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e00a      	b.n	80015d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c2:	f3af 8000 	nop.w
 80015c6:	4601      	mov	r1, r0
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf0      	blt.n	80015c2 <_read+0x12>
  }

  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	4804      	ldr	r0, [pc, #16]	; (8001614 <_write+0x28>)
 8001604:	f005 fa36 	bl	8006a74 <HAL_UART_Transmit>
  return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000264 	.word	0x20000264

08001618 <_close>:

int _close(int file)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	605a      	str	r2, [r3, #4]
  return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_isatty>:

int _isatty(int file)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f005 fedc 	bl	800746c <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20050000 	.word	0x20050000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	200002e8 	.word	0x200002e8
 80016e8:	200003e0 	.word	0x200003e0

080016ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <SystemInit+0x20>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <SystemInit+0x20>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001714:	f7ff ffea 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <LoopForever+0x6>)
  ldr r1, =_edata
 800171a:	490d      	ldr	r1, [pc, #52]	; (8001750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <LoopForever+0xe>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001730:	4c0a      	ldr	r4, [pc, #40]	; (800175c <LoopForever+0x16>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173e:	f005 fe9b 	bl	8007478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001742:	f7ff fc69 	bl	8001018 <main>

08001746 <LoopForever>:

LoopForever:
    b LoopForever
 8001746:	e7fe      	b.n	8001746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001748:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001754:	0800c5dc 	.word	0x0800c5dc
  ldr r2, =_sbss
 8001758:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800175c:	200003dc 	.word	0x200003dc

08001760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>

08001762 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bme68x_soft_reset(dev);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f901 	bl	8001972 <bme68x_soft_reset>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8001774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d120      	bne.n	80017be <bme68x_init+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	20d0      	movs	r0, #208	; 0xd0
 8001784:	f000 f8b1 	bl	80018ea <bme68x_get_regs>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 800178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d114      	bne.n	80017be <bme68x_init+0x5c>
        {
            if (dev->chip_id == BME68X_CHIP_ID)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b61      	cmp	r3, #97	; 0x61
 800179a:	d10e      	bne.n	80017ba <bme68x_init+0x58>
            {
                /* Read Variant ID */
                rslt = read_variant_id(dev);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f002 f857 	bl	8003850 <read_variant_id>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME68X_OK)
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <bme68x_init+0x5c>
                {
                    /* Get the Calibration data */
                    rslt = get_calib_data(dev);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 ff4a 	bl	8003648 <get_calib_data>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e001      	b.n	80017be <bme68x_init+0x5c>
                }
            }
            else
            {
                rslt = BME68X_E_DEV_NOT_FOUND;
 80017ba:	23fd      	movs	r3, #253	; 0xfd
 80017bc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80017ca:	b5b0      	push	{r4, r5, r7, lr}
 80017cc:	b08a      	sub	sp, #40	; 0x28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f001 fd06 	bl	80031fc <null_ptr_check>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 80017f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d16c      	bne.n	80018d8 <bme68x_set_regs+0x10e>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d069      	beq.n	80018d8 <bme68x_set_regs+0x10e>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d066      	beq.n	80018d8 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05d      	beq.n	80018cc <bme68x_set_regs+0x102>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d85a      	bhi.n	80018cc <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8001816:	2300      	movs	r3, #0
 8001818:	84bb      	strh	r3, [r7, #36]	; 0x24
 800181a:	e034      	b.n	8001886 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	7b1b      	ldrb	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8001824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4413      	add	r3, r2
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fc23 	bl	800307a <set_mem_page>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800183a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	3328      	adds	r3, #40	; 0x28
 800184e:	443b      	add	r3, r7
 8001850:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001854:	e009      	b.n	800186a <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8001856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	441a      	add	r2, r3
 800185c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	3328      	adds	r3, #40	; 0x28
 8001864:	443b      	add	r3, r7
 8001866:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 800186a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	441a      	add	r2, r3
 8001870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	3301      	adds	r3, #1
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	3328      	adds	r3, #40	; 0x28
 800187a:	443b      	add	r3, r7
 800187c:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8001880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001882:	3301      	adds	r3, #1
 8001884:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d8c6      	bhi.n	800181c <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 800188e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001892:	2b00      	cmp	r3, #0
 8001894:	d11e      	bne.n	80018d4 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800189a:	7c38      	ldrb	r0, [r7, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685d      	ldr	r5, [r3, #4]
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	1c59      	adds	r1, r3, #1
 80018ac:	462b      	mov	r3, r5
 80018ae:	47a0      	blx	r4
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 80018c4:	23fe      	movs	r3, #254	; 0xfe
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 80018ca:	e003      	b.n	80018d4 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 80018cc:	23fc      	movs	r3, #252	; 0xfc
 80018ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80018d2:	e004      	b.n	80018de <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 80018d4:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80018d6:	e002      	b.n	80018de <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80018d8:	23ff      	movs	r3, #255	; 0xff
 80018da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80018de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdb0      	pop	{r4, r5, r7, pc}

080018ea <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80018ea:	b590      	push	{r4, r7, lr}
 80018ec:	b087      	sub	sp, #28
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80018fa:	6838      	ldr	r0, [r7, #0]
 80018fc:	f001 fc7e 	bl	80031fc <null_ptr_check>
 8001900:	4603      	mov	r3, r0
 8001902:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8001904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d12a      	bne.n	8001962 <bme68x_get_regs+0x78>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d027      	beq.n	8001962 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	7b1b      	ldrb	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fbab 	bl	800307a <set_mem_page>
 8001924:	4603      	mov	r3, r0
 8001926:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8001928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001936:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	7bf8      	ldrb	r0, [r7, #15]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	47a0      	blx	r4
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 800195c:	23fe      	movs	r3, #254	; 0xfe
 800195e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8001960:	e001      	b.n	8001966 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001962:	23ff      	movs	r3, #255	; 0xff
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}

08001972 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 800197a:	23e0      	movs	r3, #224	; 0xe0
 800197c:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 800197e:	23b6      	movs	r3, #182	; 0xb6
 8001980:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f001 fc3a 	bl	80031fc <null_ptr_check>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800198c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d12b      	bne.n	80019ec <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d104      	bne.n	80019a6 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f001 fbd1 	bl	8003144 <get_mem_page>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11e      	bne.n	80019ec <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80019ae:	f107 010d 	add.w	r1, r7, #13
 80019b2:	f107 000e 	add.w	r0, r7, #14
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f7ff ff06 	bl	80017ca <bme68x_set_regs>
 80019be:	4603      	mov	r3, r0
 80019c0:	73fb      	strb	r3, [r7, #15]

            /* Wait for 5ms */
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6852      	ldr	r2, [r2, #4]
 80019ca:	4611      	mov	r1, r2
 80019cc:	f242 7010 	movw	r0, #10000	; 0x2710
 80019d0:	4798      	blx	r3
            if (rslt == BME68X_OK)
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d108      	bne.n	80019ec <bme68x_soft_reset+0x7a>
            {
                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7b1b      	ldrb	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d104      	bne.n	80019ec <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f001 fbae 	bl	8003144 <get_mem_page>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80019ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	77bb      	strb	r3, [r7, #30]
 8001a06:	2301      	movs	r3, #1
 8001a08:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001a0a:	4a7c      	ldr	r2, [pc, #496]	; (8001bfc <bme68x_set_conf+0x204>)
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a14:	6018      	str	r0, [r3, #0]
 8001a16:	3304      	adds	r3, #4
 8001a18:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f94a 	bl	8001cc2 <bme68x_get_op_mode>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8001a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 f8df 	bl	8001c00 <bme68x_set_op_mode>
 8001a42:	4603      	mov	r3, r0
 8001a44:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8001a4c:	23ff      	movs	r3, #255	; 0xff
 8001a4e:	77fb      	strb	r3, [r7, #31]
 8001a50:	e0b2      	b.n	8001bb8 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8001a52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 80ae 	bne.w	8001bb8 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001a5c:	7d38      	ldrb	r0, [r7, #20]
 8001a5e:	f107 010c 	add.w	r1, r7, #12
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2205      	movs	r2, #5
 8001a66:	f7ff ff40 	bl	80018ea <bme68x_get_regs>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 8001a76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3303      	adds	r3, #3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	2107      	movs	r1, #7
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 fb8b 	bl	80031a2 <boundary_check>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001a90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d108      	bne.n	8001aaa <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	2105      	movs	r1, #5
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 fb7e 	bl	80031a2 <boundary_check>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001aaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	2105      	movs	r1, #5
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 fb71 	bl	80031a2 <boundary_check>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 fb65 	bl	80031a2 <boundary_check>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001adc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d108      	bne.n	8001af6 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	2108      	movs	r1, #8
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fb58 	bl	80031a2 <boundary_check>
 8001af2:	4603      	mov	r3, r0
 8001af4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d15c      	bne.n	8001bb8 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8001afe:	7c3b      	ldrb	r3, [r7, #16]
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	f023 031c 	bic.w	r3, r3, #28
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	78db      	ldrb	r3, [r3, #3]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	f003 031c 	and.w	r3, r3, #28
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	f023 031c 	bic.w	r3, r3, #28
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	789b      	ldrb	r3, [r3, #2]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	f003 031c 	and.w	r3, r3, #28
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	f023 0307 	bic.w	r3, r3, #7
 8001b60:	b25a      	sxtb	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	791b      	ldrb	r3, [r3, #4]
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d004      	beq.n	8001b88 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	791b      	ldrb	r3, [r3, #4]
 8001b82:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001b88:	7c3b      	ldrb	r3, [r7, #16]
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	b25a      	sxtb	r2, r3
 8001b92:	7fbb      	ldrb	r3, [r7, #30]
 8001b94:	015b      	lsls	r3, r3, #5
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001ba0:	7b3b      	ldrb	r3, [r7, #12]
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	7f7b      	ldrb	r3, [r7, #29]
 8001bac:	01db      	lsls	r3, r3, #7
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001bb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001bc0:	f107 010c 	add.w	r1, r7, #12
 8001bc4:	f107 0014 	add.w	r0, r7, #20
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2205      	movs	r2, #5
 8001bcc:	f7ff fdfd 	bl	80017ca <bme68x_set_regs>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001bd4:	7f3b      	ldrb	r3, [r7, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00a      	beq.n	8001bf0 <bme68x_set_conf+0x1f8>
 8001bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001be2:	7f3b      	ldrb	r3, [r7, #28]
 8001be4:	6839      	ldr	r1, [r7, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f80a 	bl	8001c00 <bme68x_set_op_mode>
 8001bec:	4603      	mov	r3, r0
 8001bee:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	0800c03c 	.word	0x0800c03c

08001c00 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001c10:	2374      	movs	r3, #116	; 0x74
 8001c12:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001c14:	f107 010d 	add.w	r1, r7, #13
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2074      	movs	r0, #116	; 0x74
 8001c1e:	f7ff fe64 	bl	80018ea <bme68x_get_regs>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11d      	bne.n	8001c6a <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8001c2e:	7b7b      	ldrb	r3, [r7, #13]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d016      	beq.n	8001c6a <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001c3c:	7b7b      	ldrb	r3, [r7, #13]
 8001c3e:	f023 0303 	bic.w	r3, r3, #3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001c46:	f107 010d 	add.w	r1, r7, #13
 8001c4a:	f107 000c 	add.w	r0, r7, #12
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f7ff fdba 	bl	80017ca <bme68x_set_regs>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	6852      	ldr	r2, [r2, #4]
 8001c62:	4611      	mov	r1, r2
 8001c64:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c68:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <bme68x_set_op_mode+0x78>
 8001c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0cd      	beq.n	8001c14 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01b      	beq.n	8001cb6 <bme68x_set_op_mode+0xb6>
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d117      	bne.n	8001cb6 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001c86:	7b7b      	ldrb	r3, [r7, #13]
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	f023 0303 	bic.w	r3, r3, #3
 8001c8e:	b25a      	sxtb	r2, r3
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001ca2:	f107 010d 	add.w	r1, r7, #13
 8001ca6:	f107 000c 	add.w	r0, r7, #12
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f7ff fd8c 	bl	80017ca <bme68x_set_regs>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00f      	beq.n	8001cf2 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001cd2:	f107 010e 	add.w	r1, r7, #14
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2074      	movs	r0, #116	; 0x74
 8001cdc:	f7ff fe05 	bl	80018ea <bme68x_get_regs>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e001      	b.n	8001cf6 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001cf2:	23ff      	movs	r3, #255	; 0xff
 8001cf4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8001d16:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <bme68x_get_meas_dur+0xe4>)
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d20:	6018      	str	r0, [r3, #0]
 8001d22:	3304      	adds	r3, #4
 8001d24:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d058      	beq.n	8001dde <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	2105      	movs	r1, #5
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 fa34 	bl	80031a2 <boundary_check>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME68X_OK)
 8001d40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	2105      	movs	r1, #5
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fa26 	bl	80031a2 <boundary_check>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 8001d5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d108      	bne.n	8001d76 <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 fa19 	bl	80031a2 <boundary_check>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 8001d76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d12f      	bne.n	8001dde <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	3328      	adds	r3, #40	; 0x28
 8001d84:	443b      	add	r3, r7
 8001d86:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001d8a:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	3328      	adds	r3, #40	; 0x28
 8001d92:	443b      	add	r3, r7
 8001d94:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3328      	adds	r3, #40	; 0x28
 8001da6:	443b      	add	r3, r7
 8001da8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001dac:	461a      	mov	r2, r3
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001dc6:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8001dce:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d003      	beq.n	8001dde <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ddc:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8001dde:	6a3b      	ldr	r3, [r7, #32]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	0800c044 	.word	0x0800c044

08001dec <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b09e      	sub	sp, #120	; 0x78
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
    struct bme68x_data *field_ptr[3] = { 0 };
 8001e0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	2254      	movs	r2, #84	; 0x54
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 fb5a 	bl	80074dc <memset>

    field_ptr[0] = &field_data[0];
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	66bb      	str	r3, [r7, #104]	; 0x68
    field_ptr[1] = &field_data[1];
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	331c      	adds	r3, #28
 8001e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    field_ptr[2] = &field_data[2];
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	3338      	adds	r3, #56	; 0x38
 8001e3c:	673b      	str	r3, [r7, #112]	; 0x70

    rslt = null_ptr_check(dev);
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f001 f9dc 	bl	80031fc <null_ptr_check>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    if ((rslt == BME68X_OK) && (data != NULL))
 8001e4a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 80c1 	bne.w	8001fd6 <bme68x_get_data+0x1ea>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80bd 	beq.w	8001fd6 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d11c      	bne.n	8001e9c <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 fd8b 	bl	8002982 <read_field_data>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            if (rslt == BME68X_OK)
 8001e72:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 80a1 	bne.w	8001fbe <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da03      	bge.n	8001e8e <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8001e8c:	e097      	b.n	8001fbe <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    rslt = BME68X_W_NO_NEW_DATA;
 8001e94:	2302      	movs	r3, #2
 8001e96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e9a:	e090      	b.n	8001fbe <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d003      	beq.n	8001eaa <bme68x_get_data+0xbe>
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	f040 8087 	bne.w	8001fb8 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001eaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 feb0 	bl	8002c16 <read_all_field_data>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

            new_fields = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001ec8:	e014      	b.n	8001ef4 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001eca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3378      	adds	r3, #120	; 0x78
 8001ed2:	443b      	add	r3, r7
 8001ed4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da04      	bge.n	8001eea <bme68x_get_data+0xfe>
                {
                    new_fields++;
 8001ee0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001eea:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001ef4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d803      	bhi.n	8001f04 <bme68x_get_data+0x118>
 8001efc:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0e2      	beq.n	8001eca <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001f0a:	e01c      	b.n	8001f46 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8001f0c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f10:	3301      	adds	r3, #1
 8001f12:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8001f16:	e00d      	b.n	8001f34 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8001f18:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f1c:	f897 1075 	ldrb.w	r1, [r7, #117]	; 0x75
 8001f20:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 fb15 	bl	8003554 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8001f2a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8001f34:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d9ed      	bls.n	8001f18 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001f3c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f40:	3301      	adds	r3, #1
 8001f42:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001f46:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d803      	bhi.n	8001f56 <bme68x_get_data+0x16a>
 8001f4e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0da      	beq.n	8001f0c <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001f5c:	e01c      	b.n	8001f98 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8001f5e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	3378      	adds	r3, #120	; 0x78
 8001f66:	443b      	add	r3, r7
 8001f68:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001f6c:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	461c      	mov	r4, r3
 8001f80:	460d      	mov	r5, r1
 8001f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001f8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f92:	3301      	adds	r3, #1
 8001f94:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001f98:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d803      	bhi.n	8001fa8 <bme68x_get_data+0x1bc>
 8001fa0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0da      	beq.n	8001f5e <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8001fa8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            if (new_fields == 0)
 8001fb6:	e002      	b.n	8001fbe <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }

        if (n_data == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8001fc4:	23ff      	movs	r3, #255	; 0xff
 8001fc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        if (n_data == NULL)
 8001fca:	e007      	b.n	8001fdc <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8001fd2:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8001fd4:	e002      	b.n	8001fdc <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001fd6:	23ff      	movs	r3, #255	; 0xff
 8001fd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    }

    return rslt;
 8001fdc:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3778      	adds	r7, #120	; 0x78
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8001ffe:	f247 1370 	movw	r3, #29040	; 0x7170
 8002002:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d06e      	beq.n	80020e8 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fdf7 	bl	8001c00 <bme68x_set_op_mode>
 8002012:	4603      	mov	r3, r0
 8002014:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 8002016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d108      	bne.n	8002030 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800201e:	f107 021c 	add.w	r2, r7, #28
 8002022:	7bf9      	ldrb	r1, [r7, #15]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68b8      	ldr	r0, [r7, #8]
 8002028:	f001 f908 	bl	800323c <set_conf>
 800202c:	4603      	mov	r3, r0
 800202e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8002030:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d159      	bne.n	80020ec <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8002038:	f107 0118 	add.w	r1, r7, #24
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	2070      	movs	r0, #112	; 0x70
 8002042:	f7ff fc52 	bl	80018ea <bme68x_get_regs>
 8002046:	4603      	mov	r3, r0
 8002048:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 800204a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d14c      	bne.n	80020ec <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10b      	bne.n	8002072 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 800205a:	2300      	movs	r3, #0
 800205c:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8002066:	2302      	movs	r3, #2
 8002068:	777b      	strb	r3, [r7, #29]
 800206a:	e006      	b.n	800207a <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800206c:	2301      	movs	r3, #1
 800206e:	777b      	strb	r3, [r7, #29]
 8002070:	e003      	b.n	800207a <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8002072:	2301      	movs	r3, #1
 8002074:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8002076:	2300      	movs	r3, #0
 8002078:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800207a:	7e3b      	ldrb	r3, [r7, #24]
 800207c:	b25b      	sxtb	r3, r3
 800207e:	f023 0308 	bic.w	r3, r3, #8
 8002082:	b25a      	sxtb	r2, r3
 8002084:	7fbb      	ldrb	r3, [r7, #30]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	b25b      	sxtb	r3, r3
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	b25b      	sxtb	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b25b      	sxtb	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8002098:	7e7b      	ldrb	r3, [r7, #25]
 800209a:	b25b      	sxtb	r3, r3
 800209c:	f023 030f 	bic.w	r3, r3, #15
 80020a0:	b25a      	sxtb	r2, r3
 80020a2:	7f3b      	ldrb	r3, [r7, #28]
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 80020b4:	7e7b      	ldrb	r3, [r7, #25]
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020bc:	b25a      	sxtb	r2, r3
 80020be:	7f7b      	ldrb	r3, [r7, #29]
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80020d2:	f107 0118 	add.w	r1, r7, #24
 80020d6:	f107 0014 	add.w	r0, r7, #20
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f7ff fb74 	bl	80017ca <bme68x_set_regs>
 80020e2:	4603      	mov	r3, r0
 80020e4:	77fb      	strb	r3, [r7, #31]
 80020e6:	e001      	b.n	80020ec <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80020e8:	23ff      	movs	r3, #255	; 0xff
 80020ea:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80020ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210c:	eddf 6a38 	vldr	s13, [pc, #224]	; 80021f0 <calc_temperature+0xf8>
 8002110:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	8bdb      	ldrh	r3, [r3, #30]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002120:	ed9f 6a34 	vldr	s12, [pc, #208]	; 80021f4 <calc_temperature+0xfc>
 8002124:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002128:	ee37 7a67 	vsub.f32	s14, s14, s15
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80021f8 <calc_temperature+0x100>
 8002150:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	8bdb      	ldrh	r3, [r3, #30]
 8002158:	ee07 3a90 	vmov	s15, r3
 800215c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002160:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80021fc <calc_temperature+0x104>
 8002164:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002168:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002176:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80021f8 <calc_temperature+0x100>
 800217a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	8bdb      	ldrh	r3, [r3, #30]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800218a:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80021fc <calc_temperature+0x104>
 800218e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002192:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8002196:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80021ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80021b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80021d0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002200 <calc_temperature+0x108>
 80021d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d8:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	ee07 3a90 	vmov	s15, r3
}
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	46800000 	.word	0x46800000
 80021f4:	44800000 	.word	0x44800000
 80021f8:	48000000 	.word	0x48000000
 80021fc:	46000000 	.word	0x46000000
 8002200:	45a00000 	.word	0x45a00000

08002204 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002214:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002458 <calc_pressure+0x254>
 8002220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002224:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8002228:	edd7 7a04 	vldr	s15, [r7, #16]
 800222c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800223e:	ed9f 6a87 	vldr	s12, [pc, #540]	; 800245c <calc_pressure+0x258>
 8002242:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002264:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002268:	ed97 7a03 	vldr	s14, [r7, #12]
 800226c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002270:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8002274:	edd7 7a03 	vldr	s15, [r7, #12]
 8002278:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800227c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228e:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002460 <calc_pressure+0x25c>
 8002292:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022bc:	eddf 6a69 	vldr	s13, [pc, #420]	; 8002464 <calc_pressure+0x260>
 80022c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022de:	eddf 6a62 	vldr	s13, [pc, #392]	; 8002468 <calc_pressure+0x264>
 80022e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022e6:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80022ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800246c <calc_pressure+0x268>
 80022f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002470 <calc_pressure+0x26c>
 8002320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002324:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8002328:	edd7 7a04 	vldr	s15, [r7, #16]
 800232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002330:	ee17 3a90 	vmov	r3, s15
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8081 	beq.w	800243c <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 800233a:	ed97 7a03 	vldr	s14, [r7, #12]
 800233e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002474 <calc_pressure+0x270>
 8002342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002346:	ed97 7a05 	vldr	s14, [r7, #20]
 800234a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002478 <calc_pressure+0x274>
 8002352:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002356:	ed97 7a04 	vldr	s14, [r7, #16]
 800235a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235e:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002370:	edd7 7a05 	vldr	s15, [r7, #20]
 8002374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002378:	edd7 7a05 	vldr	s15, [r7, #20]
 800237c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002380:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800247c <calc_pressure+0x278>
 8002384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002388:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800239a:	eddf 6a34 	vldr	s13, [pc, #208]	; 800246c <calc_pressure+0x268>
 800239e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80023ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b2:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002480 <calc_pressure+0x27c>
 80023b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80023be:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8002480 <calc_pressure+0x27c>
 80023c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80023ce:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8002480 <calc_pressure+0x27c>
 80023d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023e8:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800245c <calc_pressure+0x258>
 80023ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f4:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 80023f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80023fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	edd7 7a02 	vldr	s15, [r7, #8]
 8002408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800241a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002484 <calc_pressure+0x280>
 800241e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002426:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800242a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800242e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	edc7 7a05 	vstr	s15, [r7, #20]
 800243a:	e002      	b.n	8002442 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	ee07 3a90 	vmov	s15, r3
}
 8002448:	eeb0 0a67 	vmov.f32	s0, s15
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	477a0000 	.word	0x477a0000
 800245c:	48000000 	.word	0x48000000
 8002460:	47800000 	.word	0x47800000
 8002464:	46800000 	.word	0x46800000
 8002468:	49000000 	.word	0x49000000
 800246c:	47000000 	.word	0x47000000
 8002470:	49800000 	.word	0x49800000
 8002474:	45800000 	.word	0x45800000
 8002478:	45c35000 	.word	0x45c35000
 800247c:	4f000000 	.word	0x4f000000
 8002480:	43800000 	.word	0x43800000
 8002484:	43000000 	.word	0x43000000

08002488 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800249a:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8002604 <calc_humidity+0x17c>
 800249e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a2:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	8a1b      	ldrh	r3, [r3, #16]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024bc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80024c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80024d6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80024da:	edd7 7a06 	vldr	s15, [r7, #24]
 80024de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 80024e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ea:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	8a5b      	ldrh	r3, [r3, #18]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002608 <calc_humidity+0x180>
 80024fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002510:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800260c <calc_humidity+0x184>
 8002514:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002518:	edd7 7a06 	vldr	s15, [r7, #24]
 800251c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002520:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002524:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	eddf 5a36 	vldr	s11, [pc, #216]	; 8002610 <calc_humidity+0x188>
 800253a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800253e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002542:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002546:	edd7 7a06 	vldr	s15, [r7, #24]
 800254a:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 800254e:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8002556:	ed97 7a05 	vldr	s14, [r7, #20]
 800255a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255e:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	7ddb      	ldrb	r3, [r3, #23]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256e:	eddf 6a27 	vldr	s13, [pc, #156]	; 800260c <calc_humidity+0x184>
 8002572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002576:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002588:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002614 <calc_humidity+0x18c>
 800258c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002590:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8002594:	ed97 7a02 	vldr	s14, [r7, #8]
 8002598:	edd7 7a06 	vldr	s15, [r7, #24]
 800259c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 80025c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002618 <calc_humidity+0x190>
 80025cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	dd02      	ble.n	80025dc <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <calc_humidity+0x194>)
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e009      	b.n	80025f0 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 80025dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	d502      	bpl.n	80025f0 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	ee07 3a90 	vmov	s15, r3
}
 80025f6:	eeb0 0a67 	vmov.f32	s0, s15
 80025fa:	3724      	adds	r7, #36	; 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	45a00000 	.word	0x45a00000
 8002608:	48800000 	.word	0x48800000
 800260c:	46800000 	.word	0x46800000
 8002610:	49800000 	.word	0x49800000
 8002614:	4a000000 	.word	0x4a000000
 8002618:	42c80000 	.word	0x42c80000
 800261c:	42c80000 	.word	0x42c80000

08002620 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8002620:	b4b0      	push	{r4, r5, r7}
 8002622:	b0a9      	sub	sp, #164	; 0xa4
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	603a      	str	r2, [r7, #0]
 800262a:	80fb      	strh	r3, [r7, #6]
 800262c:	460b      	mov	r3, r1
 800262e:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 800263e:	797b      	ldrb	r3, [r7, #5]
 8002640:	2201      	movs	r2, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <calc_gas_resistance_low+0x12c>)
 8002654:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002658:	461d      	mov	r5, r3
 800265a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002666:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800266a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <calc_gas_resistance_low+0x130>)
 8002670:	f107 0408 	add.w	r4, r7, #8
 8002674:	461d      	mov	r5, r3
 8002676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002682:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002698:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800269c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002754 <calc_gas_resistance_low+0x134>
 80026a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026a8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 80026ac:	797b      	ldrb	r3, [r7, #5]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	33a0      	adds	r3, #160	; 0xa0
 80026b2:	443b      	add	r3, r7
 80026b4:	3b58      	subs	r3, #88	; 0x58
 80026b6:	ed93 7a00 	vldr	s14, [r3]
 80026ba:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002758 <calc_gas_resistance_low+0x138>
 80026be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026ca:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80026d6:	797b      	ldrb	r3, [r7, #5]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	33a0      	adds	r3, #160	; 0xa0
 80026dc:	443b      	add	r3, r7
 80026de:	3b98      	subs	r3, #152	; 0x98
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002758 <calc_gas_resistance_low+0x138>
 80026e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80026f8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026fc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800275c <calc_gas_resistance_low+0x13c>
 8002700:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002704:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800270c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002710:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002760 <calc_gas_resistance_low+0x140>
 8002714:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8002718:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800271c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002734:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8002738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800273c:	ee07 3a90 	vmov	s15, r3
}
 8002740:	eeb0 0a67 	vmov.f32	s0, s15
 8002744:	37a4      	adds	r7, #164	; 0xa4
 8002746:	46bd      	mov	sp, r7
 8002748:	bcb0      	pop	{r4, r5, r7}
 800274a:	4770      	bx	lr
 800274c:	0800c04c 	.word	0x0800c04c
 8002750:	0800c08c 	.word	0x0800c08c
 8002754:	44a78000 	.word	0x44a78000
 8002758:	42c80000 	.word	0x42c80000
 800275c:	340637bd 	.word	0x340637bd
 8002760:	44000000 	.word	0x44000000

08002764 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	460a      	mov	r2, r1
 800276e:	80fb      	strh	r3, [r7, #6]
 8002770:	4613      	mov	r3, r2
 8002772:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8002774:	797b      	ldrb	r3, [r7, #5]
 8002776:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002786:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002798:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80027d4 <calc_gas_resistance_high+0x70>
 80027a8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ba:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	ee07 3a90 	vmov	s15, r3
}
 80027c4:	eeb0 0a67 	vmov.f32	s0, s15
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	49742400 	.word	0x49742400

080027d8 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 80027d8:	b480      	push	{r7}
 80027da:	b08b      	sub	sp, #44	; 0x2c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80027ea:	d902      	bls.n	80027f2 <calc_res_heat+0x1a>
    {
        temp = 400;
 80027ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80027f0:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002800:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002808:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800291c <calc_res_heat+0x144>
 800280c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002810:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002822:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002920 <calc_res_heat+0x148>
 8002826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800282a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002924 <calc_res_heat+0x14c>
 800282e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002832:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002928 <calc_res_heat+0x150>
 8002836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800283a:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800292c <calc_res_heat+0x154>
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8002858:	89fb      	ldrh	r3, [r7, #14]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002862:	edd7 7a08 	vldr	s15, [r7, #32]
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800286e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002872:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287a:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002894:	ed97 7a06 	vldr	s14, [r7, #24]
 8002898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289c:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028be:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c2:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002930 <calc_res_heat+0x158>
 80028d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028e0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80028e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80028e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80028ec:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80028f0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80028f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80028f8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002934 <calc_res_heat+0x15c>
 80028fc:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8002900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002904:	edc7 7a01 	vstr	s15, [r7, #4]
 8002908:	793b      	ldrb	r3, [r7, #4]
 800290a:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
}
 800290e:	4618      	mov	r0, r3
 8002910:	372c      	adds	r7, #44	; 0x2c
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	42440000 	.word	0x42440000
 8002920:	47000000 	.word	0x47000000
 8002924:	3a03126f 	.word	0x3a03126f
 8002928:	3b1a0275 	.word	0x3b1a0275
 800292c:	44800000 	.word	0x44800000
 8002930:	3b03126f 	.word	0x3b03126f
 8002934:	4059999a 	.word	0x4059999a

08002938 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 800294c:	d308      	bcc.n	8002960 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 800294e:	23ff      	movs	r3, #255	; 0xff
 8002950:	73bb      	strb	r3, [r7, #14]
 8002952:	e00f      	b.n	8002974 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	3301      	adds	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	2b3f      	cmp	r3, #63	; 0x3f
 8002964:	d8f6      	bhi.n	8002954 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4413      	add	r3, r2
 8002972:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8002974:	7bbb      	ldrb	r3, [r7, #14]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b08e      	sub	sp, #56	; 0x38
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 80029a8:	2305      	movs	r3, #5
 80029aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 80029ae:	e123      	b.n	8002bf8 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	461a      	mov	r2, r3
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	4413      	add	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	331d      	adds	r3, #29
 80029bc:	b2d8      	uxtb	r0, r3
 80029be:	f107 0110 	add.w	r1, r7, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2211      	movs	r2, #17
 80029c6:	f7fe ff90 	bl	80018ea <bme68x_get_regs>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 80029d6:	23ff      	movs	r3, #255	; 0xff
 80029d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 80029dc:	e115      	b.n	8002c0a <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 80029de:	7c3b      	ldrb	r3, [r7, #16]
 80029e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 80029ea:	7c3b      	ldrb	r3, [r7, #16]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80029f6:	7c7a      	ldrb	r2, [r7, #17]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 80029fc:	7cbb      	ldrb	r3, [r7, #18]
 80029fe:	031a      	lsls	r2, r3, #12
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	4313      	orrs	r3, r2
 8002a06:	7d3a      	ldrb	r2, [r7, #20]
 8002a08:	0912      	lsrs	r2, r2, #4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8002a10:	7d7b      	ldrb	r3, [r7, #21]
 8002a12:	031a      	lsls	r2, r3, #12
 8002a14:	7dbb      	ldrb	r3, [r7, #22]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	7dfa      	ldrb	r2, [r7, #23]
 8002a1c:	0912      	lsrs	r2, r2, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	4313      	orrs	r3, r2
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8002a24:	7e3b      	ldrb	r3, [r7, #24]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	7e7b      	ldrb	r3, [r7, #25]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	4313      	orrs	r3, r2
 8002a32:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8002a34:	7f7b      	ldrb	r3, [r7, #29]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	7fbb      	ldrb	r3, [r7, #30]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	4313      	orrs	r3, r2
 8002a46:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8002a48:	7ffb      	ldrb	r3, [r7, #31]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002a5e:	7fbb      	ldrb	r3, [r7, #30]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002a68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d11c      	bne.n	8002ab6 <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b25a      	sxtb	r2, r3
 8002a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b25a      	sxtb	r2, r3
 8002a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e019      	b.n	8002aea <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	b25a      	sxtb	r2, r3
 8002abc:	7fbb      	ldrb	r3, [r7, #30]
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	b25a      	sxtb	r2, r3
 8002ad6:	7fbb      	ldrb	r3, [r7, #30]
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da70      	bge.n	8002bd6 <read_field_data+0x254>
 8002af4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d16c      	bne.n	8002bd6 <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	785b      	ldrb	r3, [r3, #1]
 8002b00:	335a      	adds	r3, #90	; 0x5a
 8002b02:	b2d8      	uxtb	r0, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1cd9      	adds	r1, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f7fe feed 	bl	80018ea <bme68x_get_regs>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 8002b16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	3350      	adds	r3, #80	; 0x50
 8002b24:	b2d8      	uxtb	r0, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1d19      	adds	r1, r3, #4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f7fe fedc 	bl	80018ea <bme68x_get_regs>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002b38:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10c      	bne.n	8002b5a <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	3364      	adds	r3, #100	; 0x64
 8002b46:	b2d8      	uxtb	r0, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1d59      	adds	r1, r3, #5
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f7fe fecb 	bl	80018ea <bme68x_get_regs>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 8002b5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d139      	bne.n	8002bd6 <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b66:	f7ff fac7 	bl	80020f8 <calc_temperature>
 8002b6a:	eef0 7a40 	vmov.f32	s15, s0
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	edc3 7a03 	vstr	s15, [r3, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b78:	f7ff fb44 	bl	8002204 <calc_pressure>
 8002b7c:	eef0 7a40 	vmov.f32	s15, s0
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	edc3 7a04 	vstr	s15, [r3, #16]
                data->humidity = calc_humidity(adc_hum, dev);
 8002b86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fc7c 	bl	8002488 <calc_humidity>
 8002b90:	eef0 7a40 	vmov.f32	s15, s0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	edc3 7a05 	vstr	s15, [r3, #20]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10c      	bne.n	8002bbc <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002ba2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ba6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fdda 	bl	8002764 <calc_gas_resistance_high>
 8002bb0:	eef0 7a40 	vmov.f32	s15, s0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	edc3 7a06 	vstr	s15, [r3, #24]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8002bba:	e026      	b.n	8002c0a <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8002bbc:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002bc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fd2b 	bl	8002620 <calc_gas_resistance_low>
 8002bca:	eef0 7a40 	vmov.f32	s15, s0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	edc3 7a06 	vstr	s15, [r3, #24]
                break;
 8002bd4:	e019      	b.n	8002c0a <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 8002bd6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6852      	ldr	r2, [r2, #4]
 8002be6:	4611      	mov	r1, r2
 8002be8:	f242 7010 	movw	r0, #10000	; 0x2710
 8002bec:	4798      	blx	r3
        }

        tries--;
 8002bee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 8002bf8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <read_field_data+0x288>
 8002c00:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f43f aed3 	beq.w	80029b0 <read_field_data+0x2e>
    }

    return rslt;
 8002c0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3738      	adds	r7, #56	; 0x38
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8002c16:	b590      	push	{r4, r7, lr}
 8002c18:	b09d      	sub	sp, #116	; 0x74
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002c26:	2300      	movs	r3, #0
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2e:	222f      	movs	r2, #47	; 0x2f
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fc52 	bl	80074dc <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
 8002c4c:	615a      	str	r2, [r3, #20]
 8002c4e:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10c      	bne.n	8002c72 <read_all_field_data+0x5c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <read_all_field_data+0x5c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3308      	adds	r3, #8
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8002c6c:	23ff      	movs	r3, #255	; 0xff
 8002c6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002c72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8002c7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2233      	movs	r2, #51	; 0x33
 8002c82:	201d      	movs	r0, #29
 8002c84:	f7fe fe31 	bl	80018ea <bme68x_get_regs>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002c8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002c96:	f107 0108 	add.w	r1, r7, #8
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	221e      	movs	r2, #30
 8002c9e:	2050      	movs	r0, #80	; 0x50
 8002ca0:	f7fe fe23 	bl	80018ea <bme68x_get_regs>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002cb0:	e1d4      	b.n	800305c <read_all_field_data+0x446>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8002cb2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002cc0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002cc4:	3370      	adds	r3, #112	; 0x70
 8002cc6:	443b      	add	r3, r7
 8002cc8:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002ccc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	440b      	add	r3, r1
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002ce0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002ce4:	3370      	adds	r3, #112	; 0x70
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002cec:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	440b      	add	r3, r1
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f002 020f 	and.w	r2, r2, #15
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002d00:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	440b      	add	r3, r1
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3270      	adds	r2, #112	; 0x70
 8002d14:	443a      	add	r2, r7
 8002d16:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002d1a:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8002d1c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002d20:	3302      	adds	r3, #2
 8002d22:	3370      	adds	r3, #112	; 0x70
 8002d24:	443b      	add	r3, r7
 8002d26:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d2a:	031a      	lsls	r2, r3, #12
 8002d2c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002d30:	3303      	adds	r3, #3
 8002d32:	3370      	adds	r3, #112	; 0x70
 8002d34:	443b      	add	r3, r7
 8002d36:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8002d3e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8002d42:	3204      	adds	r2, #4
 8002d44:	3270      	adds	r2, #112	; 0x70
 8002d46:	443a      	add	r2, r7
 8002d48:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002d4c:	0912      	lsrs	r2, r2, #4
 8002d4e:	b2d2      	uxtb	r2, r2
        adc_pres =
 8002d50:	4313      	orrs	r3, r2
 8002d52:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8002d54:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002d58:	3305      	adds	r3, #5
 8002d5a:	3370      	adds	r3, #112	; 0x70
 8002d5c:	443b      	add	r3, r7
 8002d5e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d62:	031a      	lsls	r2, r3, #12
 8002d64:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002d68:	3306      	adds	r3, #6
 8002d6a:	3370      	adds	r3, #112	; 0x70
 8002d6c:	443b      	add	r3, r7
 8002d6e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8002d76:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8002d7a:	3207      	adds	r2, #7
 8002d7c:	3270      	adds	r2, #112	; 0x70
 8002d7e:	443a      	add	r2, r7
 8002d80:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002d84:	0912      	lsrs	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
        adc_temp =
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002d8c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002d90:	3308      	adds	r3, #8
 8002d92:	3370      	adds	r3, #112	; 0x70
 8002d94:	443b      	add	r3, r7
 8002d96:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002da4:	3309      	adds	r3, #9
 8002da6:	3370      	adds	r3, #112	; 0x70
 8002da8:	443b      	add	r3, r7
 8002daa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8002db6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002dba:	330d      	adds	r3, #13
 8002dbc:	3370      	adds	r3, #112	; 0x70
 8002dbe:	443b      	add	r3, r7
 8002dc0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002dce:	330e      	adds	r3, #14
 8002dd0:	3370      	adds	r3, #112	; 0x70
 8002dd2:	443b      	add	r3, r7
 8002dd4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8002de4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002de8:	330f      	adds	r3, #15
 8002dea:	3370      	adds	r3, #112	; 0x70
 8002dec:	443b      	add	r3, r7
 8002dee:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002dfc:	3310      	adds	r3, #16
 8002dfe:	3370      	adds	r3, #112	; 0x70
 8002e00:	443b      	add	r3, r7
 8002e02:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8002e12:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002e16:	330e      	adds	r3, #14
 8002e18:	3370      	adds	r3, #112	; 0x70
 8002e1a:	443b      	add	r3, r7
 8002e1c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8002e28:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	3370      	adds	r3, #112	; 0x70
 8002e30:	443b      	add	r3, r7
 8002e32:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d13a      	bne.n	8002ebc <read_all_field_data+0x2a6>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8002e46:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b25a      	sxtb	r2, r3
 8002e56:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	3370      	adds	r3, #112	; 0x70
 8002e5e:	443b      	add	r3, r7
 8002e60:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b259      	sxtb	r1, r3
 8002e70:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b2ca      	uxtb	r2, r1
 8002e7e:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002e80:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b25a      	sxtb	r2, r3
 8002e90:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002e94:	3310      	adds	r3, #16
 8002e96:	3370      	adds	r3, #112	; 0x70
 8002e98:	443b      	add	r3, r7
 8002e9a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b259      	sxtb	r1, r3
 8002eaa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b2ca      	uxtb	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e039      	b.n	8002f30 <read_all_field_data+0x31a>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002ebc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b25a      	sxtb	r2, r3
 8002ecc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002ed0:	330e      	adds	r3, #14
 8002ed2:	3370      	adds	r3, #112	; 0x70
 8002ed4:	443b      	add	r3, r7
 8002ed6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	b259      	sxtb	r1, r3
 8002ee6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b2ca      	uxtb	r2, r1
 8002ef4:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8002ef6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b25a      	sxtb	r2, r3
 8002f06:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002f0a:	330e      	adds	r3, #14
 8002f0c:	3370      	adds	r3, #112	; 0x70
 8002f0e:	443b      	add	r3, r7
 8002f10:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b259      	sxtb	r1, r3
 8002f20:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b2ca      	uxtb	r2, r1
 8002f2e:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8002f30:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f101 0270 	add.w	r2, r1, #112	; 0x70
 8002f50:	443a      	add	r2, r7
 8002f52:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002f56:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002f58:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	785b      	ldrb	r3, [r3, #1]
 8002f66:	f103 020a 	add.w	r2, r3, #10
 8002f6a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	440b      	add	r3, r1
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3270      	adds	r2, #112	; 0x70
 8002f78:	443a      	add	r2, r7
 8002f7a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002f7e:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002f80:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	f103 0214 	add.w	r2, r3, #20
 8002f92:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	440b      	add	r3, r1
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3270      	adds	r2, #112	; 0x70
 8002fa0:	443a      	add	r2, r7
 8002fa2:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002fa6:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002fa8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	681c      	ldr	r4, [r3, #0]
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002fb8:	f7ff f89e 	bl	80020f8 <calc_temperature>
 8002fbc:	eef0 7a40 	vmov.f32	s15, s0
 8002fc0:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8002fc4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	681c      	ldr	r4, [r3, #0]
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002fd4:	f7ff f916 	bl	8002204 <calc_pressure>
 8002fd8:	eef0 7a40 	vmov.f32	s15, s0
 8002fdc:	edc4 7a04 	vstr	s15, [r4, #16]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8002fe0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	681c      	ldr	r4, [r3, #0]
 8002fec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fa48 	bl	8002488 <calc_humidity>
 8002ff8:	eef0 7a40 	vmov.f32	s15, s0
 8002ffc:	edc4 7a05 	vstr	s15, [r4, #20]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d112      	bne.n	800302e <read_all_field_data+0x418>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8003008:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	681c      	ldr	r4, [r3, #0]
 8003014:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8003018:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fba0 	bl	8002764 <calc_gas_resistance_high>
 8003024:	eef0 7a40 	vmov.f32	s15, s0
 8003028:	edc4 7a06 	vstr	s15, [r4, #24]
 800302c:	e011      	b.n	8003052 <read_all_field_data+0x43c>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800302e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	681c      	ldr	r4, [r3, #0]
 800303a:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 800303e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff faeb 	bl	8002620 <calc_gas_resistance_low>
 800304a:	eef0 7a40 	vmov.f32	s15, s0
 800304e:	edc4 7a06 	vstr	s15, [r4, #24]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8003052:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003056:	3301      	adds	r3, #1
 8003058:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800305c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003060:	2b02      	cmp	r3, #2
 8003062:	d804      	bhi.n	800306e <read_all_field_data+0x458>
 8003064:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003068:	2b00      	cmp	r3, #0
 800306a:	f43f ae22 	beq.w	8002cb2 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 800306e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003072:	4618      	mov	r0, r3
 8003074:	3774      	adds	r7, #116	; 0x74
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}

0800307a <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	6039      	str	r1, [r7, #0]
 8003084:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8003086:	6838      	ldr	r0, [r7, #0]
 8003088:	f000 f8b8 	bl	80031fc <null_ptr_check>
 800308c:	4603      	mov	r3, r0
 800308e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8003090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d14f      	bne.n	8003138 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8003098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da02      	bge.n	80030a6 <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73bb      	strb	r3, [r7, #14]
 80030a4:	e001      	b.n	80030aa <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80030a6:	2310      	movs	r3, #16
 80030a8:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7b5b      	ldrb	r3, [r3, #13]
 80030ae:	7bba      	ldrb	r2, [r7, #14]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d041      	beq.n	8003138 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	7bba      	ldrb	r2, [r7, #14]
 80030b8:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f107 010d 	add.w	r1, r7, #13
 80030c6:	2201      	movs	r2, #1
 80030c8:	20f3      	movs	r0, #243	; 0xf3
 80030ca:	47a0      	blx	r4
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80030e0:	23fe      	movs	r3, #254	; 0xfe
 80030e2:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80030e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d125      	bne.n	8003138 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80030ec:	7b7b      	ldrb	r3, [r7, #13]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	7b5b      	ldrb	r3, [r3, #13]
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	b25a      	sxtb	r2, r3
 8003102:	7b7b      	ldrb	r3, [r7, #13]
 8003104:	b25b      	sxtb	r3, r3
 8003106:	4313      	orrs	r3, r2
 8003108:	b25b      	sxtb	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f107 010d 	add.w	r1, r7, #13
 800311a:	2201      	movs	r2, #1
 800311c:	2073      	movs	r0, #115	; 0x73
 800311e:	47a0      	blx	r4
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8003134:	23fe      	movs	r3, #254	; 0xfe
 8003136:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}

08003144 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f855 	bl	80031fc <null_ptr_check>
 8003152:	4603      	mov	r3, r0
 8003154:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11b      	bne.n	8003196 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f107 010e 	add.w	r1, r7, #14
 800316a:	2201      	movs	r2, #1
 800316c:	20f3      	movs	r0, #243	; 0xf3
 800316e:	47a0      	blx	r4
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8003184:	23fe      	movs	r3, #254	; 0xfe
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	e005      	b.n	8003196 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 800318a:	7bbb      	ldrb	r3, [r7, #14]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	b2da      	uxtb	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd90      	pop	{r4, r7, pc}

080031a2 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	460b      	mov	r3, r1
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f823 	bl	80031fc <null_ptr_check>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <boundary_check+0x4a>
 80031c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	7afa      	ldrb	r2, [r7, #11]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d20e      	bcs.n	80031f0 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	7afa      	ldrb	r2, [r7, #11]
 80031d6:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 80031ea:	e001      	b.n	80031f0 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80031ec:	23ff      	movs	r3, #255	; 0xff
 80031ee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80031f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <null_ptr_check+0x2a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <null_ptr_check+0x2a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <null_ptr_check+0x2a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8003226:	23ff      	movs	r3, #255	; 0xff
 8003228:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b093      	sub	sp, #76	; 0x4c
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	460b      	mov	r3, r1
 800324a:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8003258:	236e      	movs	r3, #110	; 0x6e
 800325a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800325e:	4aa1      	ldr	r2, [pc, #644]	; (80034e4 <set_conf+0x2a8>)
 8003260:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003264:	ca07      	ldmia	r2, {r0, r1, r2}
 8003266:	c303      	stmia	r3!, {r0, r1}
 8003268:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800326a:	4a9e      	ldr	r2, [pc, #632]	; (80034e4 <set_conf+0x2a8>)
 800326c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003270:	ca07      	ldmia	r2, {r0, r1, r2}
 8003272:	c303      	stmia	r3!, {r0, r1}
 8003274:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003276:	4a9b      	ldr	r2, [pc, #620]	; (80034e4 <set_conf+0x2a8>)
 8003278:	f107 0320 	add.w	r3, r7, #32
 800327c:	ca07      	ldmia	r2, {r0, r1, r2}
 800327e:	c303      	stmia	r3!, {r0, r1}
 8003280:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003282:	4a98      	ldr	r2, [pc, #608]	; (80034e4 <set_conf+0x2a8>)
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	ca07      	ldmia	r2, {r0, r1, r2}
 800328a:	c303      	stmia	r3!, {r0, r1}
 800328c:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d024      	beq.n	80032de <set_conf+0xa2>
 8003294:	2b03      	cmp	r3, #3
 8003296:	f300 80f9 	bgt.w	800348c <set_conf+0x250>
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <set_conf+0x68>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d07c      	beq.n	800339c <set_conf+0x160>
 80032a2:	e0f3      	b.n	800348c <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80032a4:	235a      	movs	r3, #90	; 0x5a
 80032a6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	885b      	ldrh	r3, [r3, #2]
 80032ae:	6839      	ldr	r1, [r7, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fa91 	bl	80027d8 <calc_res_heat>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80032bc:	2364      	movs	r3, #100	; 0x64
 80032be:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	889b      	ldrh	r3, [r3, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fb36 	bl	8002938 <calc_gas_wait>
 80032cc:	4603      	mov	r3, r0
 80032ce:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80032dc:	e0db      	b.n	8003496 <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <set_conf+0xb2>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 80032ee:	23ff      	movs	r3, #255	; 0xff
 80032f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 80032f4:	e0cf      	b.n	8003496 <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80032fc:	e03f      	b.n	800337e <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80032fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003302:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003306:	325a      	adds	r2, #90	; 0x5a
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	3348      	adds	r3, #72	; 0x48
 800330c:	443b      	add	r3, r7
 800330e:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8003324:	6839      	ldr	r1, [r7, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fa56 	bl	80027d8 <calc_res_heat>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8003334:	443b      	add	r3, r7
 8003336:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800333a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800333e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003342:	3264      	adds	r2, #100	; 0x64
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	3348      	adds	r3, #72	; 0x48
 8003348:	443b      	add	r3, r7
 800334a:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fae9 	bl	8002938 <calc_gas_wait>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800336e:	443b      	add	r3, r7
 8003370:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8003374:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003378:	3301      	adds	r3, #1
 800337a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	7c1b      	ldrb	r3, [r3, #16]
 8003382:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003386:	429a      	cmp	r2, r3
 8003388:	d3b9      	bcc.n	80032fe <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	7c1a      	ldrb	r2, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	7c1b      	ldrb	r3, [r3, #16]
 8003396:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 800339a:	e07c      	b.n	8003496 <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <set_conf+0x170>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 80033ac:	23ff      	movs	r3, #255	; 0xff
 80033ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 80033b2:	e070      	b.n	8003496 <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8a5b      	ldrh	r3, [r3, #18]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 80033bc:	2303      	movs	r3, #3
 80033be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80033c8:	e03a      	b.n	8003440 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80033ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80033ce:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80033d2:	325a      	adds	r2, #90	; 0x5a
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	3348      	adds	r3, #72	; 0x48
 80033d8:	443b      	add	r3, r7
 80033da:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 80033f0:	6839      	ldr	r1, [r7, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f9f0 	bl	80027d8 <calc_res_heat>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8003400:	443b      	add	r3, r7
 8003402:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003406:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800340a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800340e:	3264      	adds	r2, #100	; 0x64
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	3348      	adds	r3, #72	; 0x48
 8003414:	443b      	add	r3, r7
 8003416:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	3348      	adds	r3, #72	; 0x48
 8003430:	443b      	add	r3, r7
 8003432:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8003436:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800343a:	3301      	adds	r3, #1
 800343c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	7c1b      	ldrb	r3, [r3, #16]
 8003444:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003448:	429a      	cmp	r2, r3
 800344a:	d3be      	bcc.n	80033ca <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	7c1a      	ldrb	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	7c1b      	ldrb	r3, [r3, #16]
 8003458:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8a5b      	ldrh	r3, [r3, #18]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f841 	bl	80034e8 <calc_heatr_dur_shared>
 8003466:	4603      	mov	r3, r0
 8003468:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 800346c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10f      	bne.n	8003494 <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8003474:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003478:	f107 0043 	add.w	r0, r7, #67	; 0x43
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2201      	movs	r2, #1
 8003480:	f7fe f9a3 	bl	80017ca <bme68x_set_regs>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 800348a:	e003      	b.n	8003494 <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003492:	e000      	b.n	8003496 <set_conf+0x25a>
            break;
 8003494:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8003496:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 800349e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034a2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80034a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f7fe f98d 	bl	80017ca <bme68x_set_regs>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 80034b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 80034be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034c2:	f107 0114 	add.w	r1, r7, #20
 80034c6:	f107 0020 	add.w	r0, r7, #32
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f7fe f97d 	bl	80017ca <bme68x_set_regs>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 80034d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80034da:	4618      	mov	r0, r3
 80034dc:	374c      	adds	r7, #76	; 0x4c
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}
 80034e2:	bf00      	nop
 80034e4:	0800c0cc 	.word	0x0800c0cc

080034e8 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	f240 7282 	movw	r2, #1922	; 0x782
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d902      	bls.n	8003506 <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8003500:	23ff      	movs	r3, #255	; 0xff
 8003502:	73bb      	strb	r3, [r7, #14]
 8003504:	e01d      	b.n	8003542 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800350c:	fb03 f202 	mul.w	r2, r3, r2
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <calc_heatr_dur_shared+0x68>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	0852      	lsrs	r2, r2, #1
 800351a:	4413      	add	r3, r2
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8003520:	e005      	b.n	800352e <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	3301      	adds	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	2b3f      	cmp	r3, #63	; 0x3f
 8003532:	d8f6      	bhi.n	8003522 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	019b      	lsls	r3, r3, #6
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4413      	add	r3, r2
 8003540:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8003542:	7bbb      	ldrb	r3, [r7, #14]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	12c8b89f 	.word	0x12c8b89f

08003554 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	603a      	str	r2, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
 8003560:	460b      	mov	r3, r1
 8003562:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4413      	add	r3, r2
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	789b      	ldrb	r3, [r3, #2]
 8003570:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8003572:	79bb      	ldrb	r3, [r7, #6]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	789b      	ldrb	r3, [r3, #2]
 800357e:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	4413      	add	r3, r2
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b25b      	sxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	da21      	bge.n	80035d6 <sort_sensor_data+0x82>
 8003592:	79bb      	ldrb	r3, [r7, #6]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	4413      	add	r3, r2
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	da18      	bge.n	80035d6 <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 80035a4:	89ba      	ldrh	r2, [r7, #12]
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 80035ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035b2:	f113 0f02 	cmn.w	r3, #2
 80035b6:	db03      	blt.n	80035c0 <sort_sensor_data+0x6c>
 80035b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	db03      	blt.n	80035c8 <sort_sensor_data+0x74>
 80035c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	dd16      	ble.n	80035f6 <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 80035c8:	79b9      	ldrb	r1, [r7, #6]
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f816 	bl	8003600 <swap_fields>
    {
 80035d4:	e00f      	b.n	80035f6 <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 80035d6:	79bb      	ldrb	r3, [r7, #6]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	4413      	add	r3, r2
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	da07      	bge.n	80035f8 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 80035e8:	79b9      	ldrb	r1, [r7, #6]
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f806 	bl	8003600 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 80035f4:	e000      	b.n	80035f8 <sort_sensor_data+0xa4>
    {
 80035f6:	bf00      	nop
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	603a      	str	r2, [r7, #0]
 800360a:	71fb      	strb	r3, [r7, #7]
 800360c:	460b      	mov	r3, r1
 800360e:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4413      	add	r3, r2
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 800361c:	79bb      	ldrb	r3, [r7, #6]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	441a      	add	r2, r3
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	440b      	add	r3, r1
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8003630:	79bb      	ldrb	r3, [r7, #6]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	4413      	add	r3, r2
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08e      	sub	sp, #56	; 0x38
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8003650:	f107 010c 	add.w	r1, r7, #12
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2217      	movs	r2, #23
 8003658:	208a      	movs	r0, #138	; 0x8a
 800365a:	f7fe f946 	bl	80018ea <bme68x_get_regs>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8003664:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 800366c:	f107 030c 	add.w	r3, r7, #12
 8003670:	f103 0117 	add.w	r1, r3, #23
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	220e      	movs	r2, #14
 8003678:	20e1      	movs	r0, #225	; 0xe1
 800367a:	f7fe f936 	bl	80018ea <bme68x_get_regs>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8003684:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2205      	movs	r2, #5
 8003698:	2000      	movs	r0, #0
 800369a:	f7fe f926 	bl	80018ea <bme68x_get_regs>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 80036a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 80cb 	bne.w	8003844 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 80036ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	b21a      	sxth	r2, r3
 80036b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ba:	b21b      	sxth	r3, r3
 80036bc:	4313      	orrs	r3, r2
 80036be:	b21b      	sxth	r3, r3
 80036c0:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 80036c6:	7b7b      	ldrb	r3, [r7, #13]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	b21a      	sxth	r2, r3
 80036cc:	7b3b      	ldrb	r3, [r7, #12]
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	4313      	orrs	r3, r2
 80036d2:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	b25a      	sxtb	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 80036e2:	7c7b      	ldrb	r3, [r7, #17]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	b21a      	sxth	r2, r3
 80036e8:	7c3b      	ldrb	r3, [r7, #16]
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	4313      	orrs	r3, r2
 80036ee:	b21b      	sxth	r3, r3
 80036f0:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	b21a      	sxth	r2, r3
 80036fc:	7cbb      	ldrb	r3, [r7, #18]
 80036fe:	b21b      	sxth	r3, r3
 8003700:	4313      	orrs	r3, r2
 8003702:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8003708:	7d3b      	ldrb	r3, [r7, #20]
 800370a:	b25a      	sxtb	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	b21a      	sxth	r2, r3
 8003718:	7dbb      	ldrb	r3, [r7, #22]
 800371a:	b21b      	sxth	r3, r3
 800371c:	4313      	orrs	r3, r2
 800371e:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8003724:	7e7b      	ldrb	r3, [r7, #25]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	b21a      	sxth	r2, r3
 800372a:	7e3b      	ldrb	r3, [r7, #24]
 800372c:	b21b      	sxth	r3, r3
 800372e:	4313      	orrs	r3, r2
 8003730:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8003736:	7efb      	ldrb	r3, [r7, #27]
 8003738:	b25a      	sxtb	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8003740:	7ebb      	ldrb	r3, [r7, #26]
 8003742:	b25a      	sxtb	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	b21a      	sxth	r2, r3
 8003750:	7fbb      	ldrb	r3, [r7, #30]
 8003752:	b21b      	sxth	r3, r3
 8003754:	4313      	orrs	r3, r2
 8003756:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 800375c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	b21a      	sxth	r2, r3
 8003764:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003768:	b21b      	sxth	r3, r3
 800376a:	4313      	orrs	r3, r2
 800376c:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8003772:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800377c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8003784:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003788:	b21b      	sxth	r3, r3
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8003790:	4313      	orrs	r3, r2
 8003792:	b21b      	sxth	r3, r3
 8003794:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 800379a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b21b      	sxth	r3, r3
 80037b0:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 80037b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037ba:	b25a      	sxtb	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 80037c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037c4:	b25a      	sxtb	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 80037ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037ce:	b25a      	sxtb	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 80037d4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 80037dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80037e0:	b25a      	sxtb	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 80037e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ea:	b25a      	sxtb	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 80037f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	b21a      	sxth	r2, r3
 80037f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	4313      	orrs	r3, r2
 8003800:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8003806:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800380a:	b25a      	sxtb	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8003810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003814:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003818:	2b00      	cmp	r3, #0
 800381a:	da00      	bge.n	800381e <get_calib_data+0x1d6>
 800381c:	330f      	adds	r3, #15
 800381e:	111b      	asrs	r3, r3, #4
 8003820:	b2da      	uxtb	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003828:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800382c:	b25a      	sxtb	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8003834:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003838:	b25b      	sxtb	r3, r3
 800383a:	111b      	asrs	r3, r3, #4
 800383c:	b25a      	sxtb	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 8003844:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8003848:	4618      	mov	r0, r3
 800384a:	3738      	adds	r7, #56	; 0x38
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 800385c:	f107 010e 	add.w	r1, r7, #14
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	20f0      	movs	r0, #240	; 0xf0
 8003866:	f7fe f840 	bl	80018ea <bme68x_get_regs>
 800386a:	4603      	mov	r3, r0
 800386c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 800386e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8003876:	7bbb      	ldrb	r3, [r7, #14]
 8003878:	461a      	mov	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 800387e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <bme68x_start>:
int8_t getgasreference_count = 0;
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 8003896:	2254      	movs	r2, #84	; 0x54
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	481e      	ldr	r0, [pc, #120]	; (8003914 <bme68x_start+0x88>)
 800389c:	f003 fe10 	bl	80074c0 <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 80038a0:	2101      	movs	r1, #1
 80038a2:	481d      	ldr	r0, [pc, #116]	; (8003918 <bme68x_start+0x8c>)
 80038a4:	f000 f8e8 	bl	8003a78 <bme68x_interface_init>
	bme68x_init(&bme);
 80038a8:	481b      	ldr	r0, [pc, #108]	; (8003918 <bme68x_start+0x8c>)
 80038aa:	f7fd ff5a 	bl	8001762 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 80038ae:	4a1b      	ldr	r2, [pc, #108]	; (800391c <bme68x_start+0x90>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <bme68x_start+0x94>)
 80038b6:	2202      	movs	r2, #2
 80038b8:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <bme68x_start+0x94>)
 80038bc:	2208      	movs	r2, #8
 80038be:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 80038c0:	4b17      	ldr	r3, [pc, #92]	; (8003920 <bme68x_start+0x94>)
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <bme68x_start+0x94>)
 80038c8:	2203      	movs	r2, #3
 80038ca:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <bme68x_start+0x94>)
 80038ce:	2204      	movs	r2, #4
 80038d0:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 80038d2:	4911      	ldr	r1, [pc, #68]	; (8003918 <bme68x_start+0x8c>)
 80038d4:	4812      	ldr	r0, [pc, #72]	; (8003920 <bme68x_start+0x94>)
 80038d6:	f7fe f88f 	bl	80019f8 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <bme68x_start+0x98>)
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <bme68x_start+0x98>)
 80038e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038e6:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <bme68x_start+0x98>)
 80038ea:	2296      	movs	r2, #150	; 0x96
 80038ec:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <bme68x_start+0x8c>)
 80038f0:	490c      	ldr	r1, [pc, #48]	; (8003924 <bme68x_start+0x98>)
 80038f2:	2001      	movs	r0, #1
 80038f4:	f7fe fb78 	bl	8001fe8 <bme68x_set_heatr_conf>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <bme68x_start+0x9c>)
 80038fe:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8003900:	f000 f906 	bl	8003b10 <bme68x_GetGasReference>

	return rslt;
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <bme68x_start+0x9c>)
 8003906:	f993 3000 	ldrsb.w	r3, [r3]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200002ec 	.word	0x200002ec
 8003918:	20000340 	.word	0x20000340
 800391c:	20000390 	.word	0x20000390
 8003920:	20000398 	.word	0x20000398
 8003924:	200003a0 	.word	0x200003a0
 8003928:	20000394 	.word	0x20000394

0800392c <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <bme68x_single_measure+0x64>)
 8003936:	2001      	movs	r0, #1
 8003938:	f7fe f962 	bl	8001c00 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <bme68x_single_measure+0x64>)
 800393e:	4915      	ldr	r1, [pc, #84]	; (8003994 <bme68x_single_measure+0x68>)
 8003940:	2001      	movs	r0, #1
 8003942:	f7fe f9df 	bl	8001d04 <bme68x_get_meas_dur>
 8003946:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8003948:	4a13      	ldr	r2, [pc, #76]	; (8003998 <bme68x_single_measure+0x6c>)
 800394a:	8892      	ldrh	r2, [r2, #4]
 800394c:	4611      	mov	r1, r2
 800394e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003952:	fb01 f202 	mul.w	r2, r1, r2
 8003956:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003958:	4a10      	ldr	r2, [pc, #64]	; (800399c <bme68x_single_measure+0x70>)
 800395a:	6013      	str	r3, [r2, #0]
	bme.delay_us(del_period, bme.intf_ptr);
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <bme68x_single_measure+0x64>)
 800395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <bme68x_single_measure+0x70>)
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	490a      	ldr	r1, [pc, #40]	; (8003990 <bme68x_single_measure+0x64>)
 8003966:	6849      	ldr	r1, [r1, #4]
 8003968:	4610      	mov	r0, r2
 800396a:	4798      	blx	r3

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <bme68x_single_measure+0x64>)
 800396e:	4a0c      	ldr	r2, [pc, #48]	; (80039a0 <bme68x_single_measure+0x74>)
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	2001      	movs	r0, #1
 8003974:	f7fe fa3a 	bl	8001dec <bme68x_get_data>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <bme68x_single_measure+0x78>)
 800397e:	701a      	strb	r2, [r3, #0]

	return rslt;
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <bme68x_single_measure+0x78>)
 8003982:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000340 	.word	0x20000340
 8003994:	20000398 	.word	0x20000398
 8003998:	200003a0 	.word	0x200003a0
 800399c:	200003b4 	.word	0x200003b4
 80039a0:	200003b8 	.word	0x200003b8
 80039a4:	20000394 	.word	0x20000394

080039a8 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af04      	add	r7, sp, #16
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), reg_addr, 1,
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	b299      	uxth	r1, r3
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	200f      	movs	r0, #15
 80039d0:	9002      	str	r0, [sp, #8]
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2301      	movs	r3, #1
 80039da:	4806      	ldr	r0, [pc, #24]	; (80039f4 <bme68x_i2c_write+0x4c>)
 80039dc:	f000 fe0c 	bl	80045f8 <HAL_I2C_Mem_Write>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <bme68x_i2c_write+0x42>
			(uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <bme68x_i2c_write+0x44>

	return 1;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200002ec 	.word	0x200002ec

080039f8 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af04      	add	r7, sp, #16
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4603      	mov	r3, r0
 8003a06:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler, (uint16_t) ((dev_addr << 1) | 0x1), reg_addr,
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	b299      	uxth	r1, r3
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	200f      	movs	r0, #15
 8003a26:	9002      	str	r0, [sp, #8]
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4806      	ldr	r0, [pc, #24]	; (8003a4c <bme68x_i2c_read+0x54>)
 8003a32:	f000 fef5 	bl	8004820 <HAL_I2C_Mem_Read>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <bme68x_i2c_read+0x48>
			1, reg_data, len, 15) == HAL_OK)
		return 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <bme68x_i2c_read+0x4a>

	return 1;
 8003a40:	2301      	movs	r3, #1
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200002ec 	.word	0x200002ec

08003a50 <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <bme68x_delay_us+0x24>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	099b      	lsrs	r3, r3, #6
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fa9b 	bl	8003fa0 <HAL_Delay>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	10624dd3 	.word	0x10624dd3

08003a78 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02d      	beq.n	8003aea <bme68x_interface_init+0x72>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), 5, 5)
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <bme68x_interface_init+0x84>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	b299      	uxth	r1, r3
 8003a98:	2305      	movs	r3, #5
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	4818      	ldr	r0, [pc, #96]	; (8003b00 <bme68x_interface_init+0x88>)
 8003a9e:	f000 ffd9 	bl	8004a54 <HAL_I2C_IsDeviceReady>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <bme68x_interface_init+0x3c>
				== HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d118      	bne.n	8003ae4 <bme68x_interface_init+0x6c>
 8003ab2:	e004      	b.n	8003abe <bme68x_interface_init+0x46>
			rslt = -2; // Communication error.
 8003ab4:	23fe      	movs	r3, #254	; 0xfe
 8003ab6:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8003ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abc:	e019      	b.n	8003af2 <bme68x_interface_init+0x7a>
			bme->read = bme68x_i2c_read;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <bme68x_interface_init+0x8c>)
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
			bme->write = bme68x_i2c_write;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <bme68x_interface_init+0x90>)
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
			bme->intf = BME68X_I2C_INTF;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <bme68x_interface_init+0x94>)
 8003ad4:	649a      	str	r2, [r3, #72]	; 0x48
		bme->intf_ptr = &dev_addr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a08      	ldr	r2, [pc, #32]	; (8003afc <bme68x_interface_init+0x84>)
 8003ada:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	221e      	movs	r2, #30
 8003ae0:	739a      	strb	r2, [r3, #14]
 8003ae2:	e004      	b.n	8003aee <bme68x_interface_init+0x76>
			return -2;
 8003ae4:	f06f 0301 	mvn.w	r3, #1
 8003ae8:	e003      	b.n	8003af2 <bme68x_interface_init+0x7a>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003aea:	23ff      	movs	r3, #255	; 0xff
 8003aec:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000004 	.word	0x20000004
 8003b00:	200002ec 	.word	0x200002ec
 8003b04:	080039f9 	.word	0x080039f9
 8003b08:	080039a9 	.word	0x080039a9
 8003b0c:	08003a51 	.word	0x08003a51

08003b10 <bme68x_GetGasReference>:
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 See more at http://www.dsbird.org.uk
*/

/* IAQ functions */
void bme68x_GetGasReference() {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8003b16:	230a      	movs	r3, #10
 8003b18:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	e013      	b.n	8003b48 <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <bme68x_GetGasReference+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff01 	bl	800392c <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <bme68x_GetGasReference+0x64>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <bme68x_GetGasReference+0x68>)
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <bme68x_GetGasReference+0x68>)
 8003b3e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3301      	adds	r3, #1
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dde7      	ble.n	8003b20 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <bme68x_GetGasReference+0x68>)
 8003b52:	edd3 6a00 	vldr	s13, [r3]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	ee07 3a90 	vmov	s15, r3
 8003b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <bme68x_GetGasReference+0x68>)
 8003b66:	edc3 7a00 	vstr	s15, [r3]

}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000390 	.word	0x20000390
 8003b78:	20000008 	.word	0x20000008
 8003b7c:	00000000 	.word	0x00000000

08003b80 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore() {
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8003b86:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <bme68x_GetHumidityScore+0x150>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b8e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003cd4 <bme68x_GetHumidityScore+0x154>
 8003b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9a:	db0e      	blt.n	8003bba <bme68x_GetHumidityScore+0x3a>
 8003b9c:	4b4c      	ldr	r3, [pc, #304]	; (8003cd0 <bme68x_GetHumidityScore+0x150>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ba4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003cd8 <bme68x_GetHumidityScore+0x158>
 8003ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	d803      	bhi.n	8003bba <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8003bb2:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <bme68x_GetHumidityScore+0x15c>)
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <bme68x_GetHumidityScore+0x160>)
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e076      	b.n	8003ca8 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8003bba:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <bme68x_GetHumidityScore+0x150>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bc2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003cd4 <bme68x_GetHumidityScore+0x154>
 8003bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bce:	d52e      	bpl.n	8003c2e <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8003bd0:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <bme68x_GetHumidityScore+0x164>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fcc7 	bl	8000568 <__aeabi_f2d>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	4941      	ldr	r1, [pc, #260]	; (8003ce8 <bme68x_GetHumidityScore+0x168>)
 8003be4:	f7fc fe42 	bl	800086c <__aeabi_ddiv>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <bme68x_GetHumidityScore+0x150>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fcb6 	bl	8000568 <__aeabi_f2d>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4620      	mov	r0, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7fc fd08 	bl	8000618 <__aeabi_dmul>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	4b35      	ldr	r3, [pc, #212]	; (8003cec <bme68x_GetHumidityScore+0x16c>)
 8003c16:	f7fc fcff 	bl	8000618 <__aeabi_dmul>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc fff1 	bl	8000c08 <__aeabi_d2f>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <bme68x_GetHumidityScore+0x15c>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e03c      	b.n	8003ca8 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003c2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <bme68x_GetHumidityScore+0x164>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003cf0 <bme68x_GetHumidityScore+0x170>
 8003c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c3c:	ee17 0a90 	vmov	r0, s15
 8003c40:	f7fc fc92 	bl	8000568 <__aeabi_f2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	4929      	ldr	r1, [pc, #164]	; (8003cf4 <bme68x_GetHumidityScore+0x174>)
 8003c4e:	f7fc fe0d 	bl	800086c <__aeabi_ddiv>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4614      	mov	r4, r2
 8003c58:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <bme68x_GetHumidityScore+0x150>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fc81 	bl	8000568 <__aeabi_f2d>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	f7fc fcd3 	bl	8000618 <__aeabi_dmul>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	a313      	add	r3, pc, #76	; (adr r3, 8003cc8 <bme68x_GetHumidityScore+0x148>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f7fc fb14 	bl	80002ac <__adddf3>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <bme68x_GetHumidityScore+0x16c>)
 8003c92:	f7fc fcc1 	bl	8000618 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f7fc ffb3 	bl	8000c08 <__aeabi_d2f>
 8003ca2:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003ca4:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <bme68x_GetHumidityScore+0x15c>)
 8003ca6:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <bme68x_GetHumidityScore+0x15c>)
 8003caa:	edd3 7a00 	vldr	s15, [r3]
 8003cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cb2:	edc7 7a01 	vstr	s15, [r7, #4]
 8003cb6:	793b      	ldrb	r3, [r7, #4]
 8003cb8:	b25b      	sxtb	r3, r3
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	ded6ba8c 	.word	0xded6ba8c
 8003ccc:	3fdaaaa7 	.word	0x3fdaaaa7
 8003cd0:	20000390 	.word	0x20000390
 8003cd4:	42180000 	.word	0x42180000
 8003cd8:	42280000 	.word	0x42280000
 8003cdc:	200003bc 	.word	0x200003bc
 8003ce0:	41c80000 	.word	0x41c80000
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	3fd00000 	.word	0x3fd00000
 8003cec:	40590000 	.word	0x40590000
 8003cf0:	42c80000 	.word	0x42c80000
 8003cf4:	bfd00000 	.word	0xbfd00000

08003cf8 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore() {
 8003cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8003d00:	4b42      	ldr	r3, [pc, #264]	; (8003e0c <bme68x_GetGasScore+0x114>)
 8003d02:	ed93 7a00 	vldr	s14, [r3]
 8003d06:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <bme68x_GetGasScore+0x118>)
 8003d08:	edd3 7a00 	vldr	s15, [r3]
 8003d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d10:	ee17 0a90 	vmov	r0, s15
 8003d14:	f7fc fc28 	bl	8000568 <__aeabi_f2d>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	f04f 0000 	mov.w	r0, #0
 8003d20:	493c      	ldr	r1, [pc, #240]	; (8003e14 <bme68x_GetGasScore+0x11c>)
 8003d22:	f7fc fda3 	bl	800086c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <bme68x_GetGasScore+0x120>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fc18 	bl	8000568 <__aeabi_f2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	4629      	mov	r1, r5
 8003d40:	f7fc fc6a 	bl	8000618 <__aeabi_dmul>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4690      	mov	r8, r2
 8003d4a:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 8003d4c:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <bme68x_GetGasScore+0x118>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc fc09 	bl	8000568 <__aeabi_f2d>
 8003d56:	4604      	mov	r4, r0
 8003d58:	460d      	mov	r5, r1
 8003d5a:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <bme68x_GetGasScore+0x114>)
 8003d5c:	ed93 7a00 	vldr	s14, [r3]
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <bme68x_GetGasScore+0x118>)
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d6a:	ee17 0a90 	vmov	r0, s15
 8003d6e:	f7fc fbfb 	bl	8000568 <__aeabi_f2d>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	4926      	ldr	r1, [pc, #152]	; (8003e14 <bme68x_GetGasScore+0x11c>)
 8003d7c:	f7fc fd76 	bl	800086c <__aeabi_ddiv>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4620      	mov	r0, r4
 8003d86:	4629      	mov	r1, r5
 8003d88:	f7fc fc46 	bl	8000618 <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4640      	mov	r0, r8
 8003d92:	4649      	mov	r1, r9
 8003d94:	f7fc fa88 	bl	80002a8 <__aeabi_dsub>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
			* 100.00;
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <bme68x_GetGasScore+0x124>)
 8003da6:	f7fc fc37 	bl	8000618 <__aeabi_dmul>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	f7fc ff29 	bl	8000c08 <__aeabi_d2f>
 8003db6:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <bme68x_GetGasScore+0x128>)
 8003dba:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <bme68x_GetGasScore+0x128>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003e24 <bme68x_GetGasScore+0x12c>
 8003dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	dd02      	ble.n	8003dd6 <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <bme68x_GetGasScore+0x128>)
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <bme68x_GetGasScore+0x130>)
 8003dd4:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <bme68x_GetGasScore+0x128>)
 8003dd8:	edd3 7a00 	vldr	s15, [r3]
 8003ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de4:	d503      	bpl.n	8003dee <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <bme68x_GetGasScore+0x128>)
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

	return gas_score;
 8003dee:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <bme68x_GetGasScore+0x128>)
 8003df0:	edd3 7a00 	vldr	s15, [r3]
 8003df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003df8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003dfc:	793b      	ldrb	r3, [r7, #4]
 8003dfe:	b25b      	sxtb	r3, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000014 	.word	0x20000014
 8003e10:	20000010 	.word	0x20000010
 8003e14:	3fe80000 	.word	0x3fe80000
 8003e18:	20000008 	.word	0x20000008
 8003e1c:	40590000 	.word	0x40590000
 8003e20:	200003c0 	.word	0x200003c0
 8003e24:	42960000 	.word	0x42960000
 8003e28:	42960000 	.word	0x42960000

08003e2c <bme68x_iaq>:

float bme68x_iaq() {
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <bme68x_iaq+0x80>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fea2 	bl	8003b80 <bme68x_GetHumidityScore>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <bme68x_iaq+0x80>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff57 	bl	8003cf8 <bme68x_GetGasScore>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8003e4e:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
	float air_quality_score = (100
 8003e58:	ee07 3a90 	vmov	s15, r3
 8003e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e60:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 8003e64:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <bme68x_iaq+0x84>)
 8003e66:	f993 2000 	ldrsb.w	r2, [r3]
 8003e6a:	b2d3      	uxtb	r3, r2
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	b259      	sxtb	r1, r3
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <bme68x_iaq+0x84>)
 8003e74:	7019      	strb	r1, [r3, #0]
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <bme68x_iaq+0x88>)
 8003e78:	fb83 1302 	smull	r1, r3, r3, r2
 8003e7c:	1059      	asrs	r1, r3, #1
 8003e7e:	17d3      	asrs	r3, r2, #31
 8003e80:	1ac9      	subs	r1, r1, r3
 8003e82:	460b      	mov	r3, r1
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d104      	bne.n	8003e9a <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <bme68x_iaq+0x80>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fe3b 	bl	8003b10 <bme68x_GetGasReference>

	return air_quality_score;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	ee07 3a90 	vmov	s15, r3

}
 8003ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000390 	.word	0x20000390
 8003eb0:	200003c4 	.word	0x200003c4
 8003eb4:	66666667 	.word	0x66666667

08003eb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ec2:	2003      	movs	r0, #3
 8003ec4:	f000 f942 	bl	800414c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f000 f80d 	bl	8003ee8 <HAL_InitTick>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	71fb      	strb	r3, [r7, #7]
 8003ed8:	e001      	b.n	8003ede <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003eda:	f7fd fa3b 	bl	8001354 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ede:	79fb      	ldrb	r3, [r7, #7]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HAL_InitTick+0x6c>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d023      	beq.n	8003f44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003efc:	4b16      	ldr	r3, [pc, #88]	; (8003f58 <HAL_InitTick+0x70>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_InitTick+0x6c>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	4619      	mov	r1, r3
 8003f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f941 	bl	800419a <HAL_SYSTICK_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b0f      	cmp	r3, #15
 8003f22:	d809      	bhi.n	8003f38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f24:	2200      	movs	r2, #0
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2c:	f000 f919 	bl	8004162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f30:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <HAL_InitTick+0x74>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e007      	b.n	8003f48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	e004      	b.n	8003f48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	e001      	b.n	8003f48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000001c 	.word	0x2000001c
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	20000018 	.word	0x20000018

08003f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_IncTick+0x20>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_IncTick+0x24>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <HAL_IncTick+0x24>)
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	2000001c 	.word	0x2000001c
 8003f84:	200003c8 	.word	0x200003c8

08003f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_GetTick+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	200003c8 	.word	0x200003c8

08003fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff ffee 	bl	8003f88 <HAL_GetTick>
 8003fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb8:	d005      	beq.n	8003fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_Delay+0x44>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fc6:	bf00      	nop
 8003fc8:	f7ff ffde 	bl	8003f88 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d8f7      	bhi.n	8003fc8 <HAL_Delay+0x28>
  {
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	2000001c 	.word	0x2000001c

08003fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60d3      	str	r3, [r2, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <__NVIC_GetPriorityGrouping+0x18>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 0307 	and.w	r3, r3, #7
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405c:	2b00      	cmp	r3, #0
 800405e:	db0a      	blt.n	8004076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	490c      	ldr	r1, [pc, #48]	; (8004098 <__NVIC_SetPriority+0x4c>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	0112      	lsls	r2, r2, #4
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	440b      	add	r3, r1
 8004070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004074:	e00a      	b.n	800408c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4908      	ldr	r1, [pc, #32]	; (800409c <__NVIC_SetPriority+0x50>)
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	3b04      	subs	r3, #4
 8004084:	0112      	lsls	r2, r2, #4
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	440b      	add	r3, r1
 800408a:	761a      	strb	r2, [r3, #24]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000e100 	.word	0xe000e100
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f1c3 0307 	rsb	r3, r3, #7
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	bf28      	it	cs
 80040be:	2304      	movcs	r3, #4
 80040c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d902      	bls.n	80040d0 <NVIC_EncodePriority+0x30>
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3b03      	subs	r3, #3
 80040ce:	e000      	b.n	80040d2 <NVIC_EncodePriority+0x32>
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	401a      	ands	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	4313      	orrs	r3, r2
         );
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004118:	d301      	bcc.n	800411e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411a:	2301      	movs	r3, #1
 800411c:	e00f      	b.n	800413e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <SysTick_Config+0x40>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004126:	210f      	movs	r1, #15
 8004128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800412c:	f7ff ff8e 	bl	800404c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <SysTick_Config+0x40>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <SysTick_Config+0x40>)
 8004138:	2207      	movs	r2, #7
 800413a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	e000e010 	.word	0xe000e010

0800414c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff47 	bl	8003fe8 <__NVIC_SetPriorityGrouping>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004174:	f7ff ff5c 	bl	8004030 <__NVIC_GetPriorityGrouping>
 8004178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff8e 	bl	80040a0 <NVIC_EncodePriority>
 8004184:	4602      	mov	r2, r0
 8004186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff5d 	bl	800404c <__NVIC_SetPriority>
}
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ffb0 	bl	8004108 <SysTick_Config>
 80041a8:	4603      	mov	r3, r0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c2:	e166      	b.n	8004492 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2101      	movs	r1, #1
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	4013      	ands	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8158 	beq.w	800448c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d005      	beq.n	80041f4 <HAL_GPIO_Init+0x40>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d130      	bne.n	8004256 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	2203      	movs	r2, #3
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800422a:	2201      	movs	r2, #1
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 0201 	and.w	r2, r3, #1
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b03      	cmp	r3, #3
 8004260:	d017      	beq.n	8004292 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	2203      	movs	r2, #3
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d123      	bne.n	80042e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	08da      	lsrs	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3208      	adds	r2, #8
 80042a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	220f      	movs	r2, #15
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3208      	adds	r2, #8
 80042e0:	6939      	ldr	r1, [r7, #16]
 80042e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	2203      	movs	r2, #3
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80b2 	beq.w	800448c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_GPIO_Init+0x2fc>)
 800432a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432c:	4a60      	ldr	r2, [pc, #384]	; (80044b0 <HAL_GPIO_Init+0x2fc>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6613      	str	r3, [r2, #96]	; 0x60
 8004334:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <HAL_GPIO_Init+0x2fc>)
 8004336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004340:	4a5c      	ldr	r2, [pc, #368]	; (80044b4 <HAL_GPIO_Init+0x300>)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	220f      	movs	r2, #15
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800436a:	d02b      	beq.n	80043c4 <HAL_GPIO_Init+0x210>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_GPIO_Init+0x304>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d025      	beq.n	80043c0 <HAL_GPIO_Init+0x20c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a51      	ldr	r2, [pc, #324]	; (80044bc <HAL_GPIO_Init+0x308>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01f      	beq.n	80043bc <HAL_GPIO_Init+0x208>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a50      	ldr	r2, [pc, #320]	; (80044c0 <HAL_GPIO_Init+0x30c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d019      	beq.n	80043b8 <HAL_GPIO_Init+0x204>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a4f      	ldr	r2, [pc, #316]	; (80044c4 <HAL_GPIO_Init+0x310>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_GPIO_Init+0x200>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a4e      	ldr	r2, [pc, #312]	; (80044c8 <HAL_GPIO_Init+0x314>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00d      	beq.n	80043b0 <HAL_GPIO_Init+0x1fc>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a4d      	ldr	r2, [pc, #308]	; (80044cc <HAL_GPIO_Init+0x318>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <HAL_GPIO_Init+0x1f8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a4c      	ldr	r2, [pc, #304]	; (80044d0 <HAL_GPIO_Init+0x31c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_GPIO_Init+0x1f4>
 80043a4:	2307      	movs	r3, #7
 80043a6:	e00e      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043a8:	2308      	movs	r3, #8
 80043aa:	e00c      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043ac:	2306      	movs	r3, #6
 80043ae:	e00a      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043b0:	2305      	movs	r3, #5
 80043b2:	e008      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043b4:	2304      	movs	r3, #4
 80043b6:	e006      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043b8:	2303      	movs	r3, #3
 80043ba:	e004      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043bc:	2302      	movs	r3, #2
 80043be:	e002      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_GPIO_Init+0x212>
 80043c4:	2300      	movs	r3, #0
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	f002 0203 	and.w	r2, r2, #3
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	4093      	lsls	r3, r2
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043d6:	4937      	ldr	r1, [pc, #220]	; (80044b4 <HAL_GPIO_Init+0x300>)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	3302      	adds	r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043e4:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_GPIO_Init+0x320>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4013      	ands	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004408:	4a32      	ldr	r2, [pc, #200]	; (80044d4 <HAL_GPIO_Init+0x320>)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_GPIO_Init+0x320>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	43db      	mvns	r3, r3
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004432:	4a28      	ldr	r2, [pc, #160]	; (80044d4 <HAL_GPIO_Init+0x320>)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004438:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_GPIO_Init+0x320>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	43db      	mvns	r3, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_GPIO_Init+0x320>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <HAL_GPIO_Init+0x320>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	43db      	mvns	r3, r3
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4013      	ands	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <HAL_GPIO_Init+0x320>)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3301      	adds	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	f47f ae91 	bne.w	80041c4 <HAL_GPIO_Init+0x10>
  }
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40010000 	.word	0x40010000
 80044b8:	48000400 	.word	0x48000400
 80044bc:	48000800 	.word	0x48000800
 80044c0:	48000c00 	.word	0x48000c00
 80044c4:	48001000 	.word	0x48001000
 80044c8:	48001400 	.word	0x48001400
 80044cc:	48001800 	.word	0x48001800
 80044d0:	48001c00 	.word	0x48001c00
 80044d4:	40010400 	.word	0x40010400

080044d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e081      	b.n	80045ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc ff4c 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d107      	bne.n	8004552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	e006      	b.n	8004560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800455e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d104      	bne.n	8004572 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004570:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004584:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004594:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69d9      	ldr	r1, [r3, #28]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 80f9 	bne.w	8004812 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_I2C_Mem_Write+0x34>
 8004626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0ed      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_I2C_Mem_Write+0x4e>
 8004642:	2302      	movs	r3, #2
 8004644:	e0e6      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800464e:	f7ff fc9b 	bl	8003f88 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2319      	movs	r3, #25
 800465a:	2201      	movs	r2, #1
 800465c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fbcb 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0d1      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2221      	movs	r2, #33	; 0x21
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2240      	movs	r2, #64	; 0x40
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a3a      	ldr	r2, [r7, #32]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004698:	88f8      	ldrh	r0, [r7, #6]
 800469a:	893a      	ldrh	r2, [r7, #8]
 800469c:	8979      	ldrh	r1, [r7, #10]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4603      	mov	r3, r0
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fadb 	bl	8004c64 <I2C_RequestMemoryWrite>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0a9      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2bff      	cmp	r3, #255	; 0xff
 80046c8:	d90e      	bls.n	80046e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	22ff      	movs	r2, #255	; 0xff
 80046ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	8979      	ldrh	r1, [r7, #10]
 80046d8:	2300      	movs	r3, #0
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fd33 	bl	800514c <I2C_TransferConfig>
 80046e6:	e00f      	b.n	8004708 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	8979      	ldrh	r1, [r7, #10]
 80046fa:	2300      	movs	r3, #0
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fd22 	bl	800514c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fbb5 	bl	8004e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e07b      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	781a      	ldrb	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d034      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x1c8>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	d130      	bne.n	80047c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	2200      	movs	r2, #0
 8004766:	2180      	movs	r1, #128	; 0x80
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fb47 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e04d      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2bff      	cmp	r3, #255	; 0xff
 8004780:	d90e      	bls.n	80047a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	22ff      	movs	r2, #255	; 0xff
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	b2da      	uxtb	r2, r3
 800478e:	8979      	ldrh	r1, [r7, #10]
 8004790:	2300      	movs	r3, #0
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fcd7 	bl	800514c <I2C_TransferConfig>
 800479e:	e00f      	b.n	80047c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	8979      	ldrh	r1, [r7, #10]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fcc6 	bl	800514c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d19e      	bne.n	8004708 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fb94 	bl	8004efc <I2C_WaitOnSTOPFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e01a      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2220      	movs	r2, #32
 80047e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_I2C_Mem_Write+0x224>)
 80047f2:	400b      	ands	r3, r1
 80047f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	fe00e800 	.word	0xfe00e800

08004820 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	817b      	strh	r3, [r7, #10]
 8004832:	460b      	mov	r3, r1
 8004834:	813b      	strh	r3, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b20      	cmp	r3, #32
 8004844:	f040 80fd 	bne.w	8004a42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_I2C_Mem_Read+0x34>
 800484e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0f1      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_I2C_Mem_Read+0x4e>
 800486a:	2302      	movs	r3, #2
 800486c:	e0ea      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004876:	f7ff fb87 	bl	8003f88 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2319      	movs	r3, #25
 8004882:	2201      	movs	r2, #1
 8004884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fab7 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0d5      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2222      	movs	r2, #34	; 0x22
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048c0:	88f8      	ldrh	r0, [r7, #6]
 80048c2:	893a      	ldrh	r2, [r7, #8]
 80048c4:	8979      	ldrh	r1, [r7, #10]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	4603      	mov	r3, r0
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fa1b 	bl	8004d0c <I2C_RequestMemoryRead>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0ad      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2bff      	cmp	r3, #255	; 0xff
 80048f0:	d90e      	bls.n	8004910 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	22ff      	movs	r2, #255	; 0xff
 80048f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	8979      	ldrh	r1, [r7, #10]
 8004900:	4b52      	ldr	r3, [pc, #328]	; (8004a4c <HAL_I2C_Mem_Read+0x22c>)
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fc1f 	bl	800514c <I2C_TransferConfig>
 800490e:	e00f      	b.n	8004930 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	b2da      	uxtb	r2, r3
 8004920:	8979      	ldrh	r1, [r7, #10]
 8004922:	4b4a      	ldr	r3, [pc, #296]	; (8004a4c <HAL_I2C_Mem_Read+0x22c>)
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fc0e 	bl	800514c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2200      	movs	r2, #0
 8004938:	2104      	movs	r1, #4
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fa5e 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e07c      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d034      	beq.n	80049f0 <HAL_I2C_Mem_Read+0x1d0>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d130      	bne.n	80049f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2200      	movs	r2, #0
 8004996:	2180      	movs	r1, #128	; 0x80
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fa2f 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e04d      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2bff      	cmp	r3, #255	; 0xff
 80049b0:	d90e      	bls.n	80049d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	8979      	ldrh	r1, [r7, #10]
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fbbf 	bl	800514c <I2C_TransferConfig>
 80049ce:	e00f      	b.n	80049f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	8979      	ldrh	r1, [r7, #10]
 80049e2:	2300      	movs	r3, #0
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fbae 	bl	800514c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d19a      	bne.n	8004930 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fa7c 	bl	8004efc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e01a      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2220      	movs	r2, #32
 8004a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_I2C_Mem_Read+0x230>)
 8004a22:	400b      	ands	r3, r1
 8004a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	80002400 	.word	0x80002400
 8004a50:	fe00e800 	.word	0xfe00e800

08004a54 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	460b      	mov	r3, r1
 8004a62:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	f040 80f1 	bne.w	8004c58 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a84:	d101      	bne.n	8004a8a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0e7      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_I2C_IsDeviceReady+0x44>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e0e0      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_I2C_IsDeviceReady+0x72>
 8004ab6:	897b      	ldrh	r3, [r7, #10]
 8004ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ac4:	e004      	b.n	8004ad0 <HAL_I2C_IsDeviceReady+0x7c>
 8004ac6:	897b      	ldrh	r3, [r7, #10]
 8004ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004acc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004ad6:	f7ff fa57 	bl	8003f88 <HAL_GetTick>
 8004ada:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b08:	e034      	b.n	8004b74 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b10:	d01a      	beq.n	8004b48 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7ff fa39 	bl	8003f88 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <HAL_I2C_IsDeviceReady+0xd4>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	f043 0220 	orr.w	r2, r3, #32
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e088      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <HAL_I2C_IsDeviceReady+0x12c>
 8004b7a:	7fbb      	ldrb	r3, [r7, #30]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0c4      	beq.n	8004b0a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d01a      	beq.n	8004bc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2120      	movs	r1, #32
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f92f 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e058      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2220      	movs	r2, #32
 8004bae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e04a      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2120      	movs	r1, #32
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f914 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e03d      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2210      	movs	r2, #16
 8004be4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2220      	movs	r2, #32
 8004bec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d118      	bne.n	8004c28 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c04:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2120      	movs	r1, #32
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f8f3 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e01c      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2220      	movs	r2, #32
 8004c26:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	f63f af3b 	bhi.w	8004aae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
  }
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	8979      	ldrh	r1, [r7, #10]
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <I2C_RequestMemoryWrite+0xa4>)
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fa5d 	bl	800514c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f8f0 	bl	8004e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e02c      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb6:	e015      	b.n	8004ce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cb8:	893b      	ldrh	r3, [r7, #8]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f8d6 	bl	8004e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e012      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cda:	893b      	ldrh	r3, [r7, #8]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f884 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	80002000 	.word	0x80002000

08004d0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	4608      	mov	r0, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	817b      	strh	r3, [r7, #10]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	813b      	strh	r3, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	8979      	ldrh	r1, [r7, #10]
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <I2C_RequestMemoryRead+0xa4>)
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 fa0a 	bl	800514c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	69b9      	ldr	r1, [r7, #24]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f89d 	bl	8004e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e02c      	b.n	8004da6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d52:	893b      	ldrh	r3, [r7, #8]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5c:	e015      	b.n	8004d8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d5e:	893b      	ldrh	r3, [r7, #8]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	69b9      	ldr	r1, [r7, #24]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f883 	bl	8004e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e012      	b.n	8004da6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d80:	893b      	ldrh	r3, [r7, #8]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2140      	movs	r1, #64	; 0x40
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f831 	bl	8004dfc <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	80002000 	.word	0x80002000

08004db4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d103      	bne.n	8004dd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d007      	beq.n	8004df0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	619a      	str	r2, [r3, #24]
  }
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e0c:	e022      	b.n	8004e54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e14:	d01e      	beq.n	8004e54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7ff f8b7 	bl	8003f88 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d113      	bne.n	8004e54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e00f      	b.n	8004e74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d0cd      	beq.n	8004e0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e88:	e02c      	b.n	8004ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f870 	bl	8004f74 <I2C_IsErrorOccurred>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e02a      	b.n	8004ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea4:	d01e      	beq.n	8004ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7ff f86f 	bl	8003f88 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e007      	b.n	8004ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d1cb      	bne.n	8004e8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f08:	e028      	b.n	8004f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f830 	bl	8004f74 <I2C_IsErrorOccurred>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e026      	b.n	8004f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1e:	f7ff f833 	bl	8003f88 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d113      	bne.n	8004f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e007      	b.n	8004f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d1cf      	bne.n	8004f0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d075      	beq.n	800508c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fa8:	e056      	b.n	8005058 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb0:	d052      	beq.n	8005058 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7fe ffe9 	bl	8003f88 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <I2C_IsErrorOccurred+0x54>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d147      	bne.n	8005058 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fea:	d12e      	bne.n	800504a <I2C_IsErrorOccurred+0xd6>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff2:	d02a      	beq.n	800504a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d027      	beq.n	800504a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005008:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800500a:	f7fe ffbd 	bl	8003f88 <HAL_GetTick>
 800500e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005010:	e01b      	b.n	800504a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005012:	f7fe ffb9 	bl	8003f88 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b19      	cmp	r3, #25
 800501e:	d914      	bls.n	800504a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005024:	f043 0220 	orr.w	r2, r3, #32
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b20      	cmp	r3, #32
 8005056:	d1dc      	bne.n	8005012 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b20      	cmp	r3, #32
 8005064:	d003      	beq.n	800506e <I2C_IsErrorOccurred+0xfa>
 8005066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800506a:	2b00      	cmp	r3, #0
 800506c:	d09d      	beq.n	8004faa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800506e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2220      	movs	r2, #32
 800507c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f043 0308 	orr.w	r3, r3, #8
 80050c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80050fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d01c      	beq.n	800513c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff fe56 	bl	8004db4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <I2C_IsErrorOccurred+0x1d4>)
 8005114:	400b      	ands	r3, r1
 8005116:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	431a      	orrs	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800513c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	fe00e800 	.word	0xfe00e800

0800514c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	817b      	strh	r3, [r7, #10]
 800515a:	4613      	mov	r3, r2
 800515c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800515e:	897b      	ldrh	r3, [r7, #10]
 8005160:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005164:	7a7b      	ldrb	r3, [r7, #9]
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800516c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	4313      	orrs	r3, r2
 8005176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800517a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	0d5b      	lsrs	r3, r3, #21
 8005186:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <I2C_TransferConfig+0x60>)
 800518c:	430b      	orrs	r3, r1
 800518e:	43db      	mvns	r3, r3
 8005190:	ea02 0103 	and.w	r1, r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	03ff63ff 	.word	0x03ff63ff

080051b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d138      	bne.n	8005238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e032      	b.n	800523a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	; 0x24
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	e000      	b.n	800523a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005238:	2302      	movs	r3, #2
  }
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b20      	cmp	r3, #32
 800525a:	d139      	bne.n	80052d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005266:	2302      	movs	r3, #2
 8005268:	e033      	b.n	80052d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2224      	movs	r2, #36	; 0x24
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052e4:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40007000 	.word	0x40007000

080052fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530a:	d130      	bne.n	800536e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800530c:	4b23      	ldr	r3, [pc, #140]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005318:	d038      	beq.n	800538c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800531a:	4b20      	ldr	r3, [pc, #128]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005322:	4a1e      	ldr	r2, [pc, #120]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2232      	movs	r2, #50	; 0x32
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	0c9b      	lsrs	r3, r3, #18
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005340:	e002      	b.n	8005348 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b01      	subs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005348:	4b14      	ldr	r3, [pc, #80]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d102      	bne.n	800535c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f2      	bne.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d110      	bne.n	800538c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e00f      	b.n	800538e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800536e:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537a:	d007      	beq.n	800538c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800537c:	4b07      	ldr	r3, [pc, #28]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005384:	4a05      	ldr	r2, [pc, #20]	; (800539c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800538a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40007000 	.word	0x40007000
 80053a0:	20000000 	.word	0x20000000
 80053a4:	431bde83 	.word	0x431bde83

080053a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80053b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053b6:	6053      	str	r3, [r2, #4]
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40007000 	.word	0x40007000

080053c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f000 bc08 	b.w	8005bec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053dc:	4b96      	ldr	r3, [pc, #600]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e6:	4b94      	ldr	r3, [pc, #592]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80e4 	beq.w	80055c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_RCC_OscConfig+0x4c>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b0c      	cmp	r3, #12
 8005408:	f040 808b 	bne.w	8005522 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b01      	cmp	r3, #1
 8005410:	f040 8087 	bne.w	8005522 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005414:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_RCC_OscConfig+0x64>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e3df      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	4b81      	ldr	r3, [pc, #516]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <HAL_RCC_OscConfig+0x7e>
 800543c:	4b7e      	ldr	r3, [pc, #504]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005444:	e005      	b.n	8005452 <HAL_RCC_OscConfig+0x8a>
 8005446:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005452:	4293      	cmp	r3, r2
 8005454:	d223      	bcs.n	800549e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fd92 	bl	8005f84 <RCC_SetFlashLatencyFromMSIRange>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e3c0      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800546a:	4b73      	ldr	r3, [pc, #460]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a72      	ldr	r2, [pc, #456]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005470:	f043 0308 	orr.w	r3, r3, #8
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b70      	ldr	r3, [pc, #448]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	496d      	ldr	r1, [pc, #436]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005488:	4b6b      	ldr	r3, [pc, #428]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	4968      	ldr	r1, [pc, #416]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
 800549c:	e025      	b.n	80054ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800549e:	4b66      	ldr	r3, [pc, #408]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a65      	ldr	r2, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	4b63      	ldr	r3, [pc, #396]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	4960      	ldr	r1, [pc, #384]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054bc:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	495b      	ldr	r1, [pc, #364]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd52 	bl	8005f84 <RCC_SetFlashLatencyFromMSIRange>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e380      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ea:	f000 fc87 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 80054ee:	4602      	mov	r2, r0
 80054f0:	4b51      	ldr	r3, [pc, #324]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4950      	ldr	r1, [pc, #320]	; (800563c <HAL_RCC_OscConfig+0x274>)
 80054fc:	5ccb      	ldrb	r3, [r1, r3]
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	fa22 f303 	lsr.w	r3, r2, r3
 8005506:	4a4e      	ldr	r2, [pc, #312]	; (8005640 <HAL_RCC_OscConfig+0x278>)
 8005508:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800550a:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <HAL_RCC_OscConfig+0x27c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fcea 	bl	8003ee8 <HAL_InitTick>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d052      	beq.n	80055c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	e364      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d032      	beq.n	8005590 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800552a:	4b43      	ldr	r3, [pc, #268]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a42      	ldr	r2, [pc, #264]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005536:	f7fe fd27 	bl	8003f88 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800553e:	f7fe fd23 	bl	8003f88 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e34d      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005550:	4b39      	ldr	r3, [pc, #228]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800555c:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a35      	ldr	r2, [pc, #212]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005562:	f043 0308 	orr.w	r3, r3, #8
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b33      	ldr	r3, [pc, #204]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	4930      	ldr	r1, [pc, #192]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800557a:	4b2f      	ldr	r3, [pc, #188]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	492b      	ldr	r1, [pc, #172]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800558a:	4313      	orrs	r3, r2
 800558c:	604b      	str	r3, [r1, #4]
 800558e:	e01a      	b.n	80055c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005590:	4b29      	ldr	r3, [pc, #164]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a28      	ldr	r2, [pc, #160]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800559c:	f7fe fcf4 	bl	8003f88 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055a4:	f7fe fcf0 	bl	8003f88 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e31a      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055b6:	4b20      	ldr	r3, [pc, #128]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x1dc>
 80055c2:	e000      	b.n	80055c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d073      	beq.n	80056ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_OscConfig+0x21c>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d10e      	bne.n	80055fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d10b      	bne.n	80055fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d063      	beq.n	80056b8 <HAL_RCC_OscConfig+0x2f0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d15f      	bne.n	80056b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e2f7      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d106      	bne.n	8005614 <HAL_RCC_OscConfig+0x24c>
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a0b      	ldr	r2, [pc, #44]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e025      	b.n	8005660 <HAL_RCC_OscConfig+0x298>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800561c:	d114      	bne.n	8005648 <HAL_RCC_OscConfig+0x280>
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a05      	ldr	r2, [pc, #20]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b03      	ldr	r3, [pc, #12]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a02      	ldr	r2, [pc, #8]	; (8005638 <HAL_RCC_OscConfig+0x270>)
 8005630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e013      	b.n	8005660 <HAL_RCC_OscConfig+0x298>
 8005638:	40021000 	.word	0x40021000
 800563c:	0800c0d8 	.word	0x0800c0d8
 8005640:	20000000 	.word	0x20000000
 8005644:	20000018 	.word	0x20000018
 8005648:	4ba0      	ldr	r3, [pc, #640]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a9f      	ldr	r2, [pc, #636]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800564e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	4b9d      	ldr	r3, [pc, #628]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a9c      	ldr	r2, [pc, #624]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800565a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fe fc8e 	bl	8003f88 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005670:	f7fe fc8a 	bl	8003f88 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	; 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e2b4      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005682:	4b92      	ldr	r3, [pc, #584]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x2a8>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe fc7a 	bl	8003f88 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005698:	f7fe fc76 	bl	8003f88 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b64      	cmp	r3, #100	; 0x64
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e2a0      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056aa:	4b88      	ldr	r3, [pc, #544]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x2d0>
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d060      	beq.n	8005788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_OscConfig+0x310>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2b0c      	cmp	r3, #12
 80056d0:	d119      	bne.n	8005706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d116      	bne.n	8005706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d8:	4b7c      	ldr	r3, [pc, #496]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_OscConfig+0x328>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e27d      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f0:	4b76      	ldr	r3, [pc, #472]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	061b      	lsls	r3, r3, #24
 80056fe:	4973      	ldr	r1, [pc, #460]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005700:	4313      	orrs	r3, r2
 8005702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005704:	e040      	b.n	8005788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d023      	beq.n	8005756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570e:	4b6f      	ldr	r3, [pc, #444]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6e      	ldr	r2, [pc, #440]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571a:	f7fe fc35 	bl	8003f88 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005722:	f7fe fc31 	bl	8003f88 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e25b      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005734:	4b65      	ldr	r3, [pc, #404]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005740:	4b62      	ldr	r3, [pc, #392]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	495f      	ldr	r1, [pc, #380]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	e018      	b.n	8005788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005756:	4b5d      	ldr	r3, [pc, #372]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a5c      	ldr	r2, [pc, #368]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800575c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fe fc11 	bl	8003f88 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576a:	f7fe fc0d 	bl	8003f88 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e237      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800577c:	4b53      	ldr	r3, [pc, #332]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d03c      	beq.n	800580e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01c      	beq.n	80057d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579c:	4b4b      	ldr	r3, [pc, #300]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a2:	4a4a      	ldr	r2, [pc, #296]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fe fbec 	bl	8003f88 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fe fbe8 	bl	8003f88 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e212      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057c6:	4b41      	ldr	r3, [pc, #260]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80057c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <HAL_RCC_OscConfig+0x3ec>
 80057d4:	e01b      	b.n	800580e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d6:	4b3d      	ldr	r3, [pc, #244]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80057d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057dc:	4a3b      	ldr	r2, [pc, #236]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fe fbcf 	bl	8003f88 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fe fbcb 	bl	8003f88 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e1f5      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005800:	4b32      	ldr	r3, [pc, #200]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ef      	bne.n	80057ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80a6 	beq.w	8005968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005820:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582c:	4b27      	ldr	r3, [pc, #156]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	6593      	str	r3, [r2, #88]	; 0x58
 8005838:	4b24      	ldr	r3, [pc, #144]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005848:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <HAL_RCC_OscConfig+0x508>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d118      	bne.n	8005886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_RCC_OscConfig+0x508>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <HAL_RCC_OscConfig+0x508>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005860:	f7fe fb92 	bl	8003f88 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005868:	f7fe fb8e 	bl	8003f88 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1b8      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_RCC_OscConfig+0x508>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d108      	bne.n	80058a0 <HAL_RCC_OscConfig+0x4d8>
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800589e:	e029      	b.n	80058f4 <HAL_RCC_OscConfig+0x52c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d115      	bne.n	80058d4 <HAL_RCC_OscConfig+0x50c>
 80058a8:	4b08      	ldr	r3, [pc, #32]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	4a03      	ldr	r2, [pc, #12]	; (80058cc <HAL_RCC_OscConfig+0x504>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c8:	e014      	b.n	80058f4 <HAL_RCC_OscConfig+0x52c>
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000
 80058d0:	40007000 	.word	0x40007000
 80058d4:	4b9d      	ldr	r3, [pc, #628]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	4a9c      	ldr	r2, [pc, #624]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058e4:	4b99      	ldr	r3, [pc, #612]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	4a98      	ldr	r2, [pc, #608]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d016      	beq.n	800592a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fe fb44 	bl	8003f88 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fe fb40 	bl	8003f88 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e168      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591a:	4b8c      	ldr	r3, [pc, #560]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ed      	beq.n	8005904 <HAL_RCC_OscConfig+0x53c>
 8005928:	e015      	b.n	8005956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fe fb2d 	bl	8003f88 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005930:	e00a      	b.n	8005948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005932:	f7fe fb29 	bl	8003f88 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e151      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005948:	4b80      	ldr	r3, [pc, #512]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ed      	bne.n	8005932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005956:	7ffb      	ldrb	r3, [r7, #31]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d105      	bne.n	8005968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800595c:	4b7b      	ldr	r3, [pc, #492]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	4a7a      	ldr	r2, [pc, #488]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005966:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d03c      	beq.n	80059ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01c      	beq.n	80059b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800597c:	4b73      	ldr	r3, [pc, #460]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 800597e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005982:	4a72      	ldr	r2, [pc, #456]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fe fafc 	bl	8003f88 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005994:	f7fe faf8 	bl	8003f88 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e122      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059a6:	4b69      	ldr	r3, [pc, #420]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80059a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0ef      	beq.n	8005994 <HAL_RCC_OscConfig+0x5cc>
 80059b4:	e01b      	b.n	80059ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059b6:	4b65      	ldr	r3, [pc, #404]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80059b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059bc:	4a63      	ldr	r2, [pc, #396]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c6:	f7fe fadf 	bl	8003f88 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ce:	f7fe fadb 	bl	8003f88 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e105      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059e0:	4b5a      	ldr	r3, [pc, #360]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 80059e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1ef      	bne.n	80059ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80f9 	beq.w	8005bea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	f040 80cf 	bne.w	8005ba0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a02:	4b52      	ldr	r3, [pc, #328]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f003 0203 	and.w	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d12c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	3b01      	subs	r3, #1
 8005a22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d123      	bne.n	8005a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d11b      	bne.n	8005a70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d113      	bne.n	8005a70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	3b01      	subs	r3, #1
 8005a56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d109      	bne.n	8005a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d071      	beq.n	8005b54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d068      	beq.n	8005b48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a76:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d105      	bne.n	8005a8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a82:	4b32      	ldr	r3, [pc, #200]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0ac      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a92:	4b2e      	ldr	r3, [pc, #184]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2d      	ldr	r2, [pc, #180]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a9e:	f7fe fa73 	bl	8003f88 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7fe fa6f 	bl	8003f88 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e099      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ac4:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <HAL_RCC_OscConfig+0x788>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	0112      	lsls	r2, r2, #4
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ade:	0212      	lsls	r2, r2, #8
 8005ae0:	4311      	orrs	r1, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ae6:	0852      	lsrs	r2, r2, #1
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	0552      	lsls	r2, r2, #21
 8005aec:	4311      	orrs	r1, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005af2:	0852      	lsrs	r2, r2, #1
 8005af4:	3a01      	subs	r2, #1
 8005af6:	0652      	lsls	r2, r2, #25
 8005af8:	4311      	orrs	r1, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005afe:	06d2      	lsls	r2, r2, #27
 8005b00:	430a      	orrs	r2, r1
 8005b02:	4912      	ldr	r1, [pc, #72]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b08:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a0f      	ldr	r2, [pc, #60]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a0c      	ldr	r2, [pc, #48]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b20:	f7fe fa32 	bl	8003f88 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fe fa2e 	bl	8003f88 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e058      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3a:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b46:	e050      	b.n	8005bea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e04f      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d144      	bne.n	8005bea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b78:	f7fe fa06 	bl	8003f88 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fe fa02 	bl	8003f88 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e02c      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b92:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x7b8>
 8005b9e:	e024      	b.n	8005bea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b0c      	cmp	r3, #12
 8005ba4:	d01f      	beq.n	8005be6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb2:	f7fe f9e9 	bl	8003f88 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bba:	f7fe f9e5 	bl	8003f88 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e00f      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005bd8:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	4905      	ldr	r1, [pc, #20]	; (8005bf4 <HAL_RCC_OscConfig+0x82c>)
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <HAL_RCC_OscConfig+0x830>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	60cb      	str	r3, [r1, #12]
 8005be4:	e001      	b.n	8005bea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	feeefffc 	.word	0xfeeefffc

08005bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0e7      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c10:	4b75      	ldr	r3, [pc, #468]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d910      	bls.n	8005c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b72      	ldr	r3, [pc, #456]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 0207 	bic.w	r2, r3, #7
 8005c26:	4970      	ldr	r1, [pc, #448]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b6e      	ldr	r3, [pc, #440]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0cf      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	4b66      	ldr	r3, [pc, #408]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d908      	bls.n	8005c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5c:	4b63      	ldr	r3, [pc, #396]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4960      	ldr	r1, [pc, #384]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d04c      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c82:	4b5a      	ldr	r3, [pc, #360]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d121      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e0a6      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c9a:	4b54      	ldr	r3, [pc, #336]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d115      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e09a      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cb2:	4b4e      	ldr	r3, [pc, #312]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e08e      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cc2:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e086      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cd2:	4b46      	ldr	r3, [pc, #280]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f023 0203 	bic.w	r2, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4943      	ldr	r1, [pc, #268]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce4:	f7fe f950 	bl	8003f88 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cec:	f7fe f94c 	bl	8003f88 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e06e      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d02:	4b3a      	ldr	r3, [pc, #232]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 020c 	and.w	r2, r3, #12
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d1eb      	bne.n	8005cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	4b31      	ldr	r3, [pc, #196]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d208      	bcs.n	8005d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d30:	4b2e      	ldr	r3, [pc, #184]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	492b      	ldr	r1, [pc, #172]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d42:	4b29      	ldr	r3, [pc, #164]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d210      	bcs.n	8005d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d50:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f023 0207 	bic.w	r2, r3, #7
 8005d58:	4923      	ldr	r1, [pc, #140]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d60:	4b21      	ldr	r3, [pc, #132]	; (8005de8 <HAL_RCC_ClockConfig+0x1ec>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e036      	b.n	8005de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	4918      	ldr	r1, [pc, #96]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d9c:	4b13      	ldr	r3, [pc, #76]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	4910      	ldr	r1, [pc, #64]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005db0:	f000 f824 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b0d      	ldr	r3, [pc, #52]	; (8005dec <HAL_RCC_ClockConfig+0x1f0>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	091b      	lsrs	r3, r3, #4
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	490b      	ldr	r1, [pc, #44]	; (8005df0 <HAL_RCC_ClockConfig+0x1f4>)
 8005dc2:	5ccb      	ldrb	r3, [r1, r3]
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <HAL_RCC_ClockConfig+0x1f8>)
 8005dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dd0:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <HAL_RCC_ClockConfig+0x1fc>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe f887 	bl	8003ee8 <HAL_InitTick>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8005dde:	7afb      	ldrb	r3, [r7, #11]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40022000 	.word	0x40022000
 8005dec:	40021000 	.word	0x40021000
 8005df0:	0800c0d8 	.word	0x0800c0d8
 8005df4:	20000000 	.word	0x20000000
 8005df8:	20000018 	.word	0x20000018

08005dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b089      	sub	sp, #36	; 0x24
 8005e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e0a:	4b3e      	ldr	r3, [pc, #248]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e14:	4b3b      	ldr	r3, [pc, #236]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_GetSysClockFreq+0x34>
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d121      	bne.n	8005e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d11e      	bne.n	8005e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e30:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e3c:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e42:	0a1b      	lsrs	r3, r3, #8
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	e005      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e4c:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e58:	4a2b      	ldr	r2, [pc, #172]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10d      	bne.n	8005e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e6c:	e00a      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d102      	bne.n	8005e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	e004      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e80:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b0c      	cmp	r3, #12
 8005e88:	d134      	bne.n	8005ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e8a:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8005ea0:	e005      	b.n	8005eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ea2:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ea4:	617b      	str	r3, [r7, #20]
      break;
 8005ea6:	e005      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ea8:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8005eaa:	617b      	str	r3, [r7, #20]
      break;
 8005eac:	e002      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	617b      	str	r3, [r7, #20]
      break;
 8005eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005eb4:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	fb03 f202 	mul.w	r2, r3, r2
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	0e5b      	lsrs	r3, r3, #25
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3724      	adds	r7, #36	; 0x24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
 8005f08:	0800c0f0 	.word	0x0800c0f0
 8005f0c:	00f42400 	.word	0x00f42400
 8005f10:	007a1200 	.word	0x007a1200

08005f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	20000000 	.word	0x20000000

08005f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f30:	f7ff fff0 	bl	8005f14 <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4904      	ldr	r1, [pc, #16]	; (8005f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	f003 031f 	and.w	r3, r3, #31
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40021000 	.word	0x40021000
 8005f54:	0800c0e8 	.word	0x0800c0e8

08005f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f5c:	f7ff ffda 	bl	8005f14 <HAL_RCC_GetHCLKFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	0adb      	lsrs	r3, r3, #11
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	4904      	ldr	r1, [pc, #16]	; (8005f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f6e:	5ccb      	ldrb	r3, [r1, r3]
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	0800c0e8 	.word	0x0800c0e8

08005f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f90:	4b2a      	ldr	r3, [pc, #168]	; (800603c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f9c:	f7ff f9a0 	bl	80052e0 <HAL_PWREx_GetVoltageRange>
 8005fa0:	6178      	str	r0, [r7, #20]
 8005fa2:	e014      	b.n	8005fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fa4:	4b25      	ldr	r3, [pc, #148]	; (800603c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa8:	4a24      	ldr	r2, [pc, #144]	; (800603c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fae:	6593      	str	r3, [r2, #88]	; 0x58
 8005fb0:	4b22      	ldr	r3, [pc, #136]	; (800603c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005fbc:	f7ff f990 	bl	80052e0 <HAL_PWREx_GetVoltageRange>
 8005fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005fc2:	4b1e      	ldr	r3, [pc, #120]	; (800603c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	4a1d      	ldr	r2, [pc, #116]	; (800603c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd4:	d10b      	bne.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b80      	cmp	r3, #128	; 0x80
 8005fda:	d919      	bls.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2ba0      	cmp	r3, #160	; 0xa0
 8005fe0:	d902      	bls.n	8005fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	e013      	b.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fe8:	2301      	movs	r3, #1
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	e010      	b.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d902      	bls.n	8005ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	e00a      	b.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d102      	bne.n	8006006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006000:	2302      	movs	r3, #2
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	e004      	b.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b70      	cmp	r3, #112	; 0x70
 800600a:	d101      	bne.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800600c:	2301      	movs	r3, #1
 800600e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f023 0207 	bic.w	r2, r3, #7
 8006018:	4909      	ldr	r1, [pc, #36]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	d001      	beq.n	8006032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40021000 	.word	0x40021000
 8006040:	40022000 	.word	0x40022000

08006044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800604c:	2300      	movs	r3, #0
 800604e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006050:	2300      	movs	r3, #0
 8006052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605c:	2b00      	cmp	r3, #0
 800605e:	d041      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006068:	d02a      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800606a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800606e:	d824      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006074:	d008      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800607a:	d81e      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006084:	d010      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006086:	e018      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006088:	4b86      	ldr	r3, [pc, #536]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4a85      	ldr	r2, [pc, #532]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800608e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006092:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006094:	e015      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f000 facd 	bl	800663c <RCCEx_PLLSAI1_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060a6:	e00c      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3320      	adds	r3, #32
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fbb6 	bl	8006820 <RCCEx_PLLSAI2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	74fb      	strb	r3, [r7, #19]
      break;
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80060c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c2:	7cfb      	ldrb	r3, [r7, #19]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10b      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060c8:	4b76      	ldr	r3, [pc, #472]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d6:	4973      	ldr	r1, [pc, #460]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060de:	e001      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	7cfb      	ldrb	r3, [r7, #19]
 80060e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d041      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060f8:	d02a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80060fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060fe:	d824      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800610a:	d81e      	bhi.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006114:	d010      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006116:	e018      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006118:	4b62      	ldr	r3, [pc, #392]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a61      	ldr	r2, [pc, #388]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006122:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006124:	e015      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3304      	adds	r3, #4
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fa85 	bl	800663c <RCCEx_PLLSAI1_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006136:	e00c      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3320      	adds	r3, #32
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fb6e 	bl	8006820 <RCCEx_PLLSAI2_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006148:	e003      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	74fb      	strb	r3, [r7, #19]
      break;
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006158:	4b52      	ldr	r3, [pc, #328]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006166:	494f      	ldr	r1, [pc, #316]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800616e:	e001      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006170:	7cfb      	ldrb	r3, [r7, #19]
 8006172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80a0 	beq.w	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006182:	2300      	movs	r3, #0
 8006184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006186:	4b47      	ldr	r3, [pc, #284]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006196:	2300      	movs	r3, #0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00d      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619c:	4b41      	ldr	r3, [pc, #260]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	4a40      	ldr	r2, [pc, #256]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a6:	6593      	str	r3, [r2, #88]	; 0x58
 80061a8:	4b3e      	ldr	r3, [pc, #248]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b4:	2301      	movs	r3, #1
 80061b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b8:	4b3b      	ldr	r3, [pc, #236]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a3a      	ldr	r2, [pc, #232]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061c4:	f7fd fee0 	bl	8003f88 <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061ca:	e009      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061cc:	f7fd fedc 	bl	8003f88 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d902      	bls.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	74fb      	strb	r3, [r7, #19]
        break;
 80061de:	e005      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061e0:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0ef      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d15c      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01f      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	d019      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006210:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800621c:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006222:	4a20      	ldr	r2, [pc, #128]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800622c:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d016      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624e:	f7fd fe9b 	bl	8003f88 <HAL_GetTick>
 8006252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006254:	e00b      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006256:	f7fd fe97 	bl	8003f88 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f241 3288 	movw	r2, #5000	; 0x1388
 8006264:	4293      	cmp	r3, r2
 8006266:	d902      	bls.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	74fb      	strb	r3, [r7, #19]
            break;
 800626c:	e006      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ec      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800627c:	7cfb      	ldrb	r3, [r7, #19]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10c      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006292:	4904      	ldr	r1, [pc, #16]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800629a:	e009      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	74bb      	strb	r3, [r7, #18]
 80062a0:	e006      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80062a2:	bf00      	nop
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7cfb      	ldrb	r3, [r7, #19]
 80062ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062b0:	7c7b      	ldrb	r3, [r7, #17]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d105      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b6:	4ba6      	ldr	r3, [pc, #664]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ba:	4aa5      	ldr	r2, [pc, #660]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062ce:	4ba0      	ldr	r3, [pc, #640]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d4:	f023 0203 	bic.w	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	499c      	ldr	r1, [pc, #624]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062f0:	4b97      	ldr	r3, [pc, #604]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f023 020c 	bic.w	r2, r3, #12
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	4994      	ldr	r1, [pc, #592]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006312:	4b8f      	ldr	r3, [pc, #572]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	498b      	ldr	r1, [pc, #556]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006334:	4b86      	ldr	r3, [pc, #536]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	4983      	ldr	r1, [pc, #524]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006356:	4b7e      	ldr	r3, [pc, #504]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006364:	497a      	ldr	r1, [pc, #488]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006378:	4b75      	ldr	r3, [pc, #468]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006386:	4972      	ldr	r1, [pc, #456]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800639a:	4b6d      	ldr	r3, [pc, #436]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a8:	4969      	ldr	r1, [pc, #420]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063bc:	4b64      	ldr	r3, [pc, #400]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ca:	4961      	ldr	r1, [pc, #388]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063de:	4b5c      	ldr	r3, [pc, #368]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ec:	4958      	ldr	r1, [pc, #352]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006400:	4b53      	ldr	r3, [pc, #332]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006406:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	4950      	ldr	r1, [pc, #320]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006422:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006430:	4947      	ldr	r1, [pc, #284]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006444:	4b42      	ldr	r3, [pc, #264]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800644a:	f023 0203 	bic.w	r2, r3, #3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006452:	493f      	ldr	r1, [pc, #252]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d028      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006466:	4b3a      	ldr	r3, [pc, #232]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	4936      	ldr	r1, [pc, #216]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006484:	d106      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006486:	4b32      	ldr	r3, [pc, #200]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	4a31      	ldr	r2, [pc, #196]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800648c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006490:	60d3      	str	r3, [r2, #12]
 8006492:	e011      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800649c:	d10c      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2101      	movs	r1, #1
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f8c9 	bl	800663c <RCCEx_PLLSAI1_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80064b4:	7cfb      	ldrb	r3, [r7, #19]
 80064b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d028      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d2:	491f      	ldr	r1, [pc, #124]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e2:	d106      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e4:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064ee:	60d3      	str	r3, [r2, #12]
 80064f0:	e011      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064fa:	d10c      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	2101      	movs	r1, #1
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f89a 	bl	800663c <RCCEx_PLLSAI1_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800650c:	7cfb      	ldrb	r3, [r7, #19]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006512:	7cfb      	ldrb	r3, [r7, #19]
 8006514:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d02a      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006528:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006530:	4907      	ldr	r1, [pc, #28]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800653c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006540:	d108      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	4a02      	ldr	r2, [pc, #8]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800654c:	60d3      	str	r3, [r2, #12]
 800654e:	e013      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006550:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f869 	bl	800663c <RCCEx_PLLSAI1_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02f      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006584:	4b2c      	ldr	r3, [pc, #176]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006592:	4929      	ldr	r1, [pc, #164]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800659e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065a2:	d10d      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	2102      	movs	r1, #2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f846 	bl	800663c <RCCEx_PLLSAI1_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065b4:	7cfb      	ldrb	r3, [r7, #19]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d014      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
 80065bc:	74bb      	strb	r3, [r7, #18]
 80065be:	e011      	b.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c8:	d10c      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3320      	adds	r3, #32
 80065ce:	2102      	movs	r1, #2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 f925 	bl	8006820 <RCCEx_PLLSAI2_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065da:	7cfb      	ldrb	r3, [r7, #19]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80065e0:	7cfb      	ldrb	r3, [r7, #19]
 80065e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006600:	490d      	ldr	r1, [pc, #52]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006614:	4b08      	ldr	r3, [pc, #32]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006624:	4904      	ldr	r1, [pc, #16]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800662c:	7cbb      	ldrb	r3, [r7, #18]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40021000 	.word	0x40021000

0800663c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800664a:	4b74      	ldr	r3, [pc, #464]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d018      	beq.n	8006688 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006656:	4b71      	ldr	r3, [pc, #452]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0203 	and.w	r2, r3, #3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d10d      	bne.n	8006682 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
       ||
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800666e:	4b6b      	ldr	r3, [pc, #428]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	091b      	lsrs	r3, r3, #4
 8006674:	f003 0307 	and.w	r3, r3, #7
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
       ||
 800667e:	429a      	cmp	r2, r3
 8006680:	d047      	beq.n	8006712 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
 8006686:	e044      	b.n	8006712 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d018      	beq.n	80066c2 <RCCEx_PLLSAI1_Config+0x86>
 8006690:	2b03      	cmp	r3, #3
 8006692:	d825      	bhi.n	80066e0 <RCCEx_PLLSAI1_Config+0xa4>
 8006694:	2b01      	cmp	r3, #1
 8006696:	d002      	beq.n	800669e <RCCEx_PLLSAI1_Config+0x62>
 8006698:	2b02      	cmp	r3, #2
 800669a:	d009      	beq.n	80066b0 <RCCEx_PLLSAI1_Config+0x74>
 800669c:	e020      	b.n	80066e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800669e:	4b5f      	ldr	r3, [pc, #380]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11d      	bne.n	80066e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066ae:	e01a      	b.n	80066e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066b0:	4b5a      	ldr	r3, [pc, #360]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d116      	bne.n	80066ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066c0:	e013      	b.n	80066ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066c2:	4b56      	ldr	r3, [pc, #344]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066ce:	4b53      	ldr	r3, [pc, #332]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066de:	e006      	b.n	80066ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e004      	b.n	80066f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066e6:	bf00      	nop
 80066e8:	e002      	b.n	80066f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066ea:	bf00      	nop
 80066ec:	e000      	b.n	80066f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10d      	bne.n	8006712 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066f6:	4b49      	ldr	r3, [pc, #292]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6819      	ldr	r1, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	3b01      	subs	r3, #1
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	430b      	orrs	r3, r1
 800670c:	4943      	ldr	r1, [pc, #268]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 800670e:	4313      	orrs	r3, r2
 8006710:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d17c      	bne.n	8006812 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006718:	4b40      	ldr	r3, [pc, #256]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a3f      	ldr	r2, [pc, #252]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 800671e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006724:	f7fd fc30 	bl	8003f88 <HAL_GetTick>
 8006728:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800672a:	e009      	b.n	8006740 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800672c:	f7fd fc2c 	bl	8003f88 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d902      	bls.n	8006740 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	73fb      	strb	r3, [r7, #15]
        break;
 800673e:	e005      	b.n	800674c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006740:	4b36      	ldr	r3, [pc, #216]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ef      	bne.n	800672c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d15f      	bne.n	8006812 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d110      	bne.n	800677a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006758:	4b30      	ldr	r3, [pc, #192]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6892      	ldr	r2, [r2, #8]
 8006768:	0211      	lsls	r1, r2, #8
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68d2      	ldr	r2, [r2, #12]
 800676e:	06d2      	lsls	r2, r2, #27
 8006770:	430a      	orrs	r2, r1
 8006772:	492a      	ldr	r1, [pc, #168]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006774:	4313      	orrs	r3, r2
 8006776:	610b      	str	r3, [r1, #16]
 8006778:	e027      	b.n	80067ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d112      	bne.n	80067a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006780:	4b26      	ldr	r3, [pc, #152]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006788:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6892      	ldr	r2, [r2, #8]
 8006790:	0211      	lsls	r1, r2, #8
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6912      	ldr	r2, [r2, #16]
 8006796:	0852      	lsrs	r2, r2, #1
 8006798:	3a01      	subs	r2, #1
 800679a:	0552      	lsls	r2, r2, #21
 800679c:	430a      	orrs	r2, r1
 800679e:	491f      	ldr	r1, [pc, #124]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	610b      	str	r3, [r1, #16]
 80067a4:	e011      	b.n	80067ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067a6:	4b1d      	ldr	r3, [pc, #116]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6892      	ldr	r2, [r2, #8]
 80067b6:	0211      	lsls	r1, r2, #8
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6952      	ldr	r2, [r2, #20]
 80067bc:	0852      	lsrs	r2, r2, #1
 80067be:	3a01      	subs	r2, #1
 80067c0:	0652      	lsls	r2, r2, #25
 80067c2:	430a      	orrs	r2, r1
 80067c4:	4915      	ldr	r1, [pc, #84]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d6:	f7fd fbd7 	bl	8003f88 <HAL_GetTick>
 80067da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067dc:	e009      	b.n	80067f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067de:	f7fd fbd3 	bl	8003f88 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d902      	bls.n	80067f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	73fb      	strb	r3, [r7, #15]
          break;
 80067f0:	e005      	b.n	80067fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0ef      	beq.n	80067de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d106      	bne.n	8006812 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4903      	ldr	r1, [pc, #12]	; (800681c <RCCEx_PLLSAI1_Config+0x1e0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40021000 	.word	0x40021000

08006820 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800682e:	4b69      	ldr	r3, [pc, #420]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d018      	beq.n	800686c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800683a:	4b66      	ldr	r3, [pc, #408]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0203 	and.w	r2, r3, #3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d10d      	bne.n	8006866 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
       ||
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006852:	4b60      	ldr	r3, [pc, #384]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	091b      	lsrs	r3, r3, #4
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
       ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d047      	beq.n	80068f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	73fb      	strb	r3, [r7, #15]
 800686a:	e044      	b.n	80068f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d018      	beq.n	80068a6 <RCCEx_PLLSAI2_Config+0x86>
 8006874:	2b03      	cmp	r3, #3
 8006876:	d825      	bhi.n	80068c4 <RCCEx_PLLSAI2_Config+0xa4>
 8006878:	2b01      	cmp	r3, #1
 800687a:	d002      	beq.n	8006882 <RCCEx_PLLSAI2_Config+0x62>
 800687c:	2b02      	cmp	r3, #2
 800687e:	d009      	beq.n	8006894 <RCCEx_PLLSAI2_Config+0x74>
 8006880:	e020      	b.n	80068c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006882:	4b54      	ldr	r3, [pc, #336]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d11d      	bne.n	80068ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006892:	e01a      	b.n	80068ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006894:	4b4f      	ldr	r3, [pc, #316]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800689c:	2b00      	cmp	r3, #0
 800689e:	d116      	bne.n	80068ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068a4:	e013      	b.n	80068ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068a6:	4b4b      	ldr	r3, [pc, #300]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10f      	bne.n	80068d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068b2:	4b48      	ldr	r3, [pc, #288]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068c2:	e006      	b.n	80068d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      break;
 80068c8:	e004      	b.n	80068d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068ca:	bf00      	nop
 80068cc:	e002      	b.n	80068d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068ce:	bf00      	nop
 80068d0:	e000      	b.n	80068d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10d      	bne.n	80068f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068da:	4b3e      	ldr	r3, [pc, #248]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6819      	ldr	r1, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	430b      	orrs	r3, r1
 80068f0:	4938      	ldr	r1, [pc, #224]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d166      	bne.n	80069ca <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068fc:	4b35      	ldr	r3, [pc, #212]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a34      	ldr	r2, [pc, #208]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006908:	f7fd fb3e 	bl	8003f88 <HAL_GetTick>
 800690c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800690e:	e009      	b.n	8006924 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006910:	f7fd fb3a 	bl	8003f88 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d902      	bls.n	8006924 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	73fb      	strb	r3, [r7, #15]
        break;
 8006922:	e005      	b.n	8006930 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006924:	4b2b      	ldr	r3, [pc, #172]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1ef      	bne.n	8006910 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d149      	bne.n	80069ca <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d110      	bne.n	800695e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6892      	ldr	r2, [r2, #8]
 800694c:	0211      	lsls	r1, r2, #8
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	68d2      	ldr	r2, [r2, #12]
 8006952:	06d2      	lsls	r2, r2, #27
 8006954:	430a      	orrs	r2, r1
 8006956:	491f      	ldr	r1, [pc, #124]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006958:	4313      	orrs	r3, r2
 800695a:	614b      	str	r3, [r1, #20]
 800695c:	e011      	b.n	8006982 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800695e:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006966:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6892      	ldr	r2, [r2, #8]
 800696e:	0211      	lsls	r1, r2, #8
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6912      	ldr	r2, [r2, #16]
 8006974:	0852      	lsrs	r2, r2, #1
 8006976:	3a01      	subs	r2, #1
 8006978:	0652      	lsls	r2, r2, #25
 800697a:	430a      	orrs	r2, r1
 800697c:	4915      	ldr	r1, [pc, #84]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800697e:	4313      	orrs	r3, r2
 8006980:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800698e:	f7fd fafb 	bl	8003f88 <HAL_GetTick>
 8006992:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006994:	e009      	b.n	80069aa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006996:	f7fd faf7 	bl	8003f88 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d902      	bls.n	80069aa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	73fb      	strb	r3, [r7, #15]
          break;
 80069a8:	e005      	b.n	80069b6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069aa:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0ef      	beq.n	8006996 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	4903      	ldr	r1, [pc, #12]	; (80069d4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000

080069d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e040      	b.n	8006a6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fa fd2c 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2224      	movs	r2, #36	; 0x24
 8006a04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f8c0 	bl	8006b9c <UART_SetConfig>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e022      	b.n	8006a6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fb6c 	bl	800710c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fbf3 	bl	8007250 <UART_CheckIdleState>
 8006a6a:	4603      	mov	r3, r0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	; 0x28
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	4613      	mov	r3, r2
 8006a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	f040 8082 	bne.w	8006b92 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_UART_Transmit+0x26>
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e07a      	b.n	8006b94 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_UART_Transmit+0x38>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e073      	b.n	8006b94 <HAL_UART_Transmit+0x120>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2221      	movs	r2, #33	; 0x21
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ac2:	f7fd fa61 	bl	8003f88 <HAL_GetTick>
 8006ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	88fa      	ldrh	r2, [r7, #6]
 8006ad4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae0:	d108      	bne.n	8006af4 <HAL_UART_Transmit+0x80>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	e003      	b.n	8006afc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b04:	e02d      	b.n	8006b62 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2180      	movs	r1, #128	; 0x80
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fbe6 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e039      	b.n	8006b94 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	881a      	ldrh	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b32:	b292      	uxth	r2, r2
 8006b34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	e008      	b.n	8006b50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	b292      	uxth	r2, r2
 8006b48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1cb      	bne.n	8006b06 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	2140      	movs	r1, #64	; 0x40
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fbb2 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e005      	b.n	8006b94 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e000      	b.n	8006b94 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ba0:	b08a      	sub	sp, #40	; 0x28
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4ba4      	ldr	r3, [pc, #656]	; (8006e5c <UART_SetConfig+0x2c0>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a99      	ldr	r2, [pc, #612]	; (8006e60 <UART_SetConfig+0x2c4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c04:	4313      	orrs	r3, r2
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a90      	ldr	r2, [pc, #576]	; (8006e64 <UART_SetConfig+0x2c8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d126      	bne.n	8006c74 <UART_SetConfig+0xd8>
 8006c26:	4b90      	ldr	r3, [pc, #576]	; (8006e68 <UART_SetConfig+0x2cc>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d81b      	bhi.n	8006c6c <UART_SetConfig+0xd0>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0xa0>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c4d 	.word	0x08006c4d
 8006c40:	08006c5d 	.word	0x08006c5d
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c65 	.word	0x08006c65
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c52:	e116      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006c54:	2302      	movs	r3, #2
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5a:	e112      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006c5c:	2304      	movs	r3, #4
 8006c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c62:	e10e      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006c64:	2308      	movs	r3, #8
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6a:	e10a      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c72:	e106      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a7c      	ldr	r2, [pc, #496]	; (8006e6c <UART_SetConfig+0x2d0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d138      	bne.n	8006cf0 <UART_SetConfig+0x154>
 8006c7e:	4b7a      	ldr	r3, [pc, #488]	; (8006e68 <UART_SetConfig+0x2cc>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b0c      	cmp	r3, #12
 8006c8a:	d82d      	bhi.n	8006ce8 <UART_SetConfig+0x14c>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0xf8>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006ce9 	.word	0x08006ce9
 8006c9c:	08006ce9 	.word	0x08006ce9
 8006ca0:	08006ce9 	.word	0x08006ce9
 8006ca4:	08006cd9 	.word	0x08006cd9
 8006ca8:	08006ce9 	.word	0x08006ce9
 8006cac:	08006ce9 	.word	0x08006ce9
 8006cb0:	08006ce9 	.word	0x08006ce9
 8006cb4:	08006cd1 	.word	0x08006cd1
 8006cb8:	08006ce9 	.word	0x08006ce9
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cce:	e0d8      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e0d4      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e0d0      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e0cc      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e0c8      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a5e      	ldr	r2, [pc, #376]	; (8006e70 <UART_SetConfig+0x2d4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d125      	bne.n	8006d46 <UART_SetConfig+0x1aa>
 8006cfa:	4b5b      	ldr	r3, [pc, #364]	; (8006e68 <UART_SetConfig+0x2cc>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d04:	2b30      	cmp	r3, #48	; 0x30
 8006d06:	d016      	beq.n	8006d36 <UART_SetConfig+0x19a>
 8006d08:	2b30      	cmp	r3, #48	; 0x30
 8006d0a:	d818      	bhi.n	8006d3e <UART_SetConfig+0x1a2>
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d00a      	beq.n	8006d26 <UART_SetConfig+0x18a>
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d814      	bhi.n	8006d3e <UART_SetConfig+0x1a2>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <UART_SetConfig+0x182>
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d008      	beq.n	8006d2e <UART_SetConfig+0x192>
 8006d1c:	e00f      	b.n	8006d3e <UART_SetConfig+0x1a2>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d24:	e0ad      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d26:	2302      	movs	r3, #2
 8006d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2c:	e0a9      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d2e:	2304      	movs	r3, #4
 8006d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d34:	e0a5      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d36:	2308      	movs	r3, #8
 8006d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3c:	e0a1      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d3e:	2310      	movs	r3, #16
 8006d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d44:	e09d      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a4a      	ldr	r2, [pc, #296]	; (8006e74 <UART_SetConfig+0x2d8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d125      	bne.n	8006d9c <UART_SetConfig+0x200>
 8006d50:	4b45      	ldr	r3, [pc, #276]	; (8006e68 <UART_SetConfig+0x2cc>)
 8006d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5c:	d016      	beq.n	8006d8c <UART_SetConfig+0x1f0>
 8006d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d60:	d818      	bhi.n	8006d94 <UART_SetConfig+0x1f8>
 8006d62:	2b80      	cmp	r3, #128	; 0x80
 8006d64:	d00a      	beq.n	8006d7c <UART_SetConfig+0x1e0>
 8006d66:	2b80      	cmp	r3, #128	; 0x80
 8006d68:	d814      	bhi.n	8006d94 <UART_SetConfig+0x1f8>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <UART_SetConfig+0x1d8>
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d008      	beq.n	8006d84 <UART_SetConfig+0x1e8>
 8006d72:	e00f      	b.n	8006d94 <UART_SetConfig+0x1f8>
 8006d74:	2300      	movs	r3, #0
 8006d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d7a:	e082      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d82:	e07e      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d84:	2304      	movs	r3, #4
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8a:	e07a      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d8c:	2308      	movs	r3, #8
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d92:	e076      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d94:	2310      	movs	r3, #16
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e072      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a35      	ldr	r2, [pc, #212]	; (8006e78 <UART_SetConfig+0x2dc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d12a      	bne.n	8006dfc <UART_SetConfig+0x260>
 8006da6:	4b30      	ldr	r3, [pc, #192]	; (8006e68 <UART_SetConfig+0x2cc>)
 8006da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db4:	d01a      	beq.n	8006dec <UART_SetConfig+0x250>
 8006db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dba:	d81b      	bhi.n	8006df4 <UART_SetConfig+0x258>
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc0:	d00c      	beq.n	8006ddc <UART_SetConfig+0x240>
 8006dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc6:	d815      	bhi.n	8006df4 <UART_SetConfig+0x258>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <UART_SetConfig+0x238>
 8006dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd0:	d008      	beq.n	8006de4 <UART_SetConfig+0x248>
 8006dd2:	e00f      	b.n	8006df4 <UART_SetConfig+0x258>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dda:	e052      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de2:	e04e      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006de4:	2304      	movs	r3, #4
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dea:	e04a      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006dec:	2308      	movs	r3, #8
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df2:	e046      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006df4:	2310      	movs	r3, #16
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfa:	e042      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a17      	ldr	r2, [pc, #92]	; (8006e60 <UART_SetConfig+0x2c4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d13a      	bne.n	8006e7c <UART_SetConfig+0x2e0>
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <UART_SetConfig+0x2cc>)
 8006e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e14:	d01a      	beq.n	8006e4c <UART_SetConfig+0x2b0>
 8006e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e1a:	d81b      	bhi.n	8006e54 <UART_SetConfig+0x2b8>
 8006e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e20:	d00c      	beq.n	8006e3c <UART_SetConfig+0x2a0>
 8006e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e26:	d815      	bhi.n	8006e54 <UART_SetConfig+0x2b8>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <UART_SetConfig+0x298>
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e30:	d008      	beq.n	8006e44 <UART_SetConfig+0x2a8>
 8006e32:	e00f      	b.n	8006e54 <UART_SetConfig+0x2b8>
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3a:	e022      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e42:	e01e      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4a:	e01a      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e52:	e016      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e5a:	e012      	b.n	8006e82 <UART_SetConfig+0x2e6>
 8006e5c:	efff69f3 	.word	0xefff69f3
 8006e60:	40008000 	.word	0x40008000
 8006e64:	40013800 	.word	0x40013800
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40004400 	.word	0x40004400
 8006e70:	40004800 	.word	0x40004800
 8006e74:	40004c00 	.word	0x40004c00
 8006e78:	40005000 	.word	0x40005000
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a9f      	ldr	r2, [pc, #636]	; (8007104 <UART_SetConfig+0x568>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d17a      	bne.n	8006f82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d824      	bhi.n	8006ede <UART_SetConfig+0x342>
 8006e94:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <UART_SetConfig+0x300>)
 8006e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9a:	bf00      	nop
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006edf 	.word	0x08006edf
 8006ea4:	08006ec9 	.word	0x08006ec9
 8006ea8:	08006edf 	.word	0x08006edf
 8006eac:	08006ecf 	.word	0x08006ecf
 8006eb0:	08006edf 	.word	0x08006edf
 8006eb4:	08006edf 	.word	0x08006edf
 8006eb8:	08006edf 	.word	0x08006edf
 8006ebc:	08006ed7 	.word	0x08006ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec0:	f7ff f834 	bl	8005f2c <HAL_RCC_GetPCLK1Freq>
 8006ec4:	61f8      	str	r0, [r7, #28]
        break;
 8006ec6:	e010      	b.n	8006eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec8:	4b8f      	ldr	r3, [pc, #572]	; (8007108 <UART_SetConfig+0x56c>)
 8006eca:	61fb      	str	r3, [r7, #28]
        break;
 8006ecc:	e00d      	b.n	8006eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ece:	f7fe ff95 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8006ed2:	61f8      	str	r0, [r7, #28]
        break;
 8006ed4:	e009      	b.n	8006eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eda:	61fb      	str	r3, [r7, #28]
        break;
 8006edc:	e005      	b.n	8006eea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ee8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80fb 	beq.w	80070e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4413      	add	r3, r2
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d305      	bcc.n	8006f0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d903      	bls.n	8006f16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f14:	e0e8      	b.n	80070e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	461c      	mov	r4, r3
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	f04f 0300 	mov.w	r3, #0
 8006f26:	022b      	lsls	r3, r5, #8
 8006f28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f2c:	0222      	lsls	r2, r4, #8
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	6849      	ldr	r1, [r1, #4]
 8006f32:	0849      	lsrs	r1, r1, #1
 8006f34:	2000      	movs	r0, #0
 8006f36:	4688      	mov	r8, r1
 8006f38:	4681      	mov	r9, r0
 8006f3a:	eb12 0a08 	adds.w	sl, r2, r8
 8006f3e:	eb43 0b09 	adc.w	fp, r3, r9
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f50:	4650      	mov	r0, sl
 8006f52:	4659      	mov	r1, fp
 8006f54:	f7f9 fea8 	bl	8000ca8 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f66:	d308      	bcc.n	8006f7a <UART_SetConfig+0x3de>
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f6e:	d204      	bcs.n	8006f7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	60da      	str	r2, [r3, #12]
 8006f78:	e0b6      	b.n	80070e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f80:	e0b2      	b.n	80070e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8a:	d15e      	bne.n	800704a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d828      	bhi.n	8006fe6 <UART_SetConfig+0x44a>
 8006f94:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <UART_SetConfig+0x400>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fc1 	.word	0x08006fc1
 8006fa0:	08006fc9 	.word	0x08006fc9
 8006fa4:	08006fd1 	.word	0x08006fd1
 8006fa8:	08006fe7 	.word	0x08006fe7
 8006fac:	08006fd7 	.word	0x08006fd7
 8006fb0:	08006fe7 	.word	0x08006fe7
 8006fb4:	08006fe7 	.word	0x08006fe7
 8006fb8:	08006fe7 	.word	0x08006fe7
 8006fbc:	08006fdf 	.word	0x08006fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc0:	f7fe ffb4 	bl	8005f2c <HAL_RCC_GetPCLK1Freq>
 8006fc4:	61f8      	str	r0, [r7, #28]
        break;
 8006fc6:	e014      	b.n	8006ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fc8:	f7fe ffc6 	bl	8005f58 <HAL_RCC_GetPCLK2Freq>
 8006fcc:	61f8      	str	r0, [r7, #28]
        break;
 8006fce:	e010      	b.n	8006ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd0:	4b4d      	ldr	r3, [pc, #308]	; (8007108 <UART_SetConfig+0x56c>)
 8006fd2:	61fb      	str	r3, [r7, #28]
        break;
 8006fd4:	e00d      	b.n	8006ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fd6:	f7fe ff11 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8006fda:	61f8      	str	r0, [r7, #28]
        break;
 8006fdc:	e009      	b.n	8006ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe2:	61fb      	str	r3, [r7, #28]
        break;
 8006fe4:	e005      	b.n	8006ff2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d077      	beq.n	80070e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	005a      	lsls	r2, r3, #1
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	085b      	lsrs	r3, r3, #1
 8007002:	441a      	add	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	fbb2 f3f3 	udiv	r3, r2, r3
 800700c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b0f      	cmp	r3, #15
 8007012:	d916      	bls.n	8007042 <UART_SetConfig+0x4a6>
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701a:	d212      	bcs.n	8007042 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	b29b      	uxth	r3, r3
 8007020:	f023 030f 	bic.w	r3, r3, #15
 8007024:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	b29b      	uxth	r3, r3
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	b29a      	uxth	r2, r3
 8007032:	8afb      	ldrh	r3, [r7, #22]
 8007034:	4313      	orrs	r3, r2
 8007036:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	8afa      	ldrh	r2, [r7, #22]
 800703e:	60da      	str	r2, [r3, #12]
 8007040:	e052      	b.n	80070e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007048:	e04e      	b.n	80070e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800704a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800704e:	2b08      	cmp	r3, #8
 8007050:	d827      	bhi.n	80070a2 <UART_SetConfig+0x506>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x4bc>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	0800707d 	.word	0x0800707d
 800705c:	08007085 	.word	0x08007085
 8007060:	0800708d 	.word	0x0800708d
 8007064:	080070a3 	.word	0x080070a3
 8007068:	08007093 	.word	0x08007093
 800706c:	080070a3 	.word	0x080070a3
 8007070:	080070a3 	.word	0x080070a3
 8007074:	080070a3 	.word	0x080070a3
 8007078:	0800709b 	.word	0x0800709b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fe ff56 	bl	8005f2c <HAL_RCC_GetPCLK1Freq>
 8007080:	61f8      	str	r0, [r7, #28]
        break;
 8007082:	e014      	b.n	80070ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007084:	f7fe ff68 	bl	8005f58 <HAL_RCC_GetPCLK2Freq>
 8007088:	61f8      	str	r0, [r7, #28]
        break;
 800708a:	e010      	b.n	80070ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800708c:	4b1e      	ldr	r3, [pc, #120]	; (8007108 <UART_SetConfig+0x56c>)
 800708e:	61fb      	str	r3, [r7, #28]
        break;
 8007090:	e00d      	b.n	80070ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007092:	f7fe feb3 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8007096:	61f8      	str	r0, [r7, #28]
        break;
 8007098:	e009      	b.n	80070ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709e:	61fb      	str	r3, [r7, #28]
        break;
 80070a0:	e005      	b.n	80070ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070ac:	bf00      	nop
    }

    if (pclk != 0U)
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d019      	beq.n	80070e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	085a      	lsrs	r2, r3, #1
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	441a      	add	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d909      	bls.n	80070e2 <UART_SetConfig+0x546>
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d4:	d205      	bcs.n	80070e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60da      	str	r2, [r3, #12]
 80070e0:	e002      	b.n	80070e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3728      	adds	r7, #40	; 0x28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007102:	bf00      	nop
 8007104:	40008000 	.word	0x40008000
 8007108:	00f42400 	.word	0x00f42400

0800710c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01a      	beq.n	8007222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800720a:	d10a      	bne.n	8007222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af02      	add	r7, sp, #8
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007260:	f7fc fe92 	bl	8003f88 <HAL_GetTick>
 8007264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b08      	cmp	r3, #8
 8007272:	d10e      	bne.n	8007292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f82d 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e023      	b.n	80072da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b04      	cmp	r3, #4
 800729e:	d10e      	bne.n	80072be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f817 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e00d      	b.n	80072da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	e0a5      	b.n	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072fa:	f000 80a1 	beq.w	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fe:	f7fc fe43 	bl	8003f88 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800730a:	429a      	cmp	r2, r3
 800730c:	d302      	bcc.n	8007314 <UART_WaitOnFlagUntilTimeout+0x32>
 800730e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007310:	2b00      	cmp	r3, #0
 8007312:	d13e      	bne.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007328:	667b      	str	r3, [r7, #100]	; 0x64
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007334:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007338:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e6      	bne.n	8007314 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	663b      	str	r3, [r7, #96]	; 0x60
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007366:	64ba      	str	r2, [r7, #72]	; 0x48
 8007368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800736c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e5      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e067      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d04f      	beq.n	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ae:	d147      	bne.n	8007440 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
 80073da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e6      	bne.n	80073ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3308      	adds	r3, #8
 80073f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	613b      	str	r3, [r7, #16]
   return(result);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	66bb      	str	r3, [r7, #104]	; 0x68
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800740c:	623a      	str	r2, [r7, #32]
 800740e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	61bb      	str	r3, [r7, #24]
   return(result);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e010      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4013      	ands	r3, r2
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	429a      	cmp	r2, r3
 800745c:	f43f af4a 	beq.w	80072f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3770      	adds	r7, #112	; 0x70
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <__errno>:
 800746c:	4b01      	ldr	r3, [pc, #4]	; (8007474 <__errno+0x8>)
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000020 	.word	0x20000020

08007478 <__libc_init_array>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	4d0d      	ldr	r5, [pc, #52]	; (80074b0 <__libc_init_array+0x38>)
 800747c:	4c0d      	ldr	r4, [pc, #52]	; (80074b4 <__libc_init_array+0x3c>)
 800747e:	1b64      	subs	r4, r4, r5
 8007480:	10a4      	asrs	r4, r4, #2
 8007482:	2600      	movs	r6, #0
 8007484:	42a6      	cmp	r6, r4
 8007486:	d109      	bne.n	800749c <__libc_init_array+0x24>
 8007488:	4d0b      	ldr	r5, [pc, #44]	; (80074b8 <__libc_init_array+0x40>)
 800748a:	4c0c      	ldr	r4, [pc, #48]	; (80074bc <__libc_init_array+0x44>)
 800748c:	f004 fd7a 	bl	800bf84 <_init>
 8007490:	1b64      	subs	r4, r4, r5
 8007492:	10a4      	asrs	r4, r4, #2
 8007494:	2600      	movs	r6, #0
 8007496:	42a6      	cmp	r6, r4
 8007498:	d105      	bne.n	80074a6 <__libc_init_array+0x2e>
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a0:	4798      	blx	r3
 80074a2:	3601      	adds	r6, #1
 80074a4:	e7ee      	b.n	8007484 <__libc_init_array+0xc>
 80074a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074aa:	4798      	blx	r3
 80074ac:	3601      	adds	r6, #1
 80074ae:	e7f2      	b.n	8007496 <__libc_init_array+0x1e>
 80074b0:	0800c5d4 	.word	0x0800c5d4
 80074b4:	0800c5d4 	.word	0x0800c5d4
 80074b8:	0800c5d4 	.word	0x0800c5d4
 80074bc:	0800c5d8 	.word	0x0800c5d8

080074c0 <memcpy>:
 80074c0:	440a      	add	r2, r1
 80074c2:	4291      	cmp	r1, r2
 80074c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80074c8:	d100      	bne.n	80074cc <memcpy+0xc>
 80074ca:	4770      	bx	lr
 80074cc:	b510      	push	{r4, lr}
 80074ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d6:	4291      	cmp	r1, r2
 80074d8:	d1f9      	bne.n	80074ce <memcpy+0xe>
 80074da:	bd10      	pop	{r4, pc}

080074dc <memset>:
 80074dc:	4402      	add	r2, r0
 80074de:	4603      	mov	r3, r0
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d100      	bne.n	80074e6 <memset+0xa>
 80074e4:	4770      	bx	lr
 80074e6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ea:	e7f9      	b.n	80074e0 <memset+0x4>

080074ec <__cvt>:
 80074ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	ec55 4b10 	vmov	r4, r5, d0
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	460e      	mov	r6, r1
 80074f8:	4619      	mov	r1, r3
 80074fa:	462b      	mov	r3, r5
 80074fc:	bfbb      	ittet	lt
 80074fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007502:	461d      	movlt	r5, r3
 8007504:	2300      	movge	r3, #0
 8007506:	232d      	movlt	r3, #45	; 0x2d
 8007508:	700b      	strb	r3, [r1, #0]
 800750a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007510:	4691      	mov	r9, r2
 8007512:	f023 0820 	bic.w	r8, r3, #32
 8007516:	bfbc      	itt	lt
 8007518:	4622      	movlt	r2, r4
 800751a:	4614      	movlt	r4, r2
 800751c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007520:	d005      	beq.n	800752e <__cvt+0x42>
 8007522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007526:	d100      	bne.n	800752a <__cvt+0x3e>
 8007528:	3601      	adds	r6, #1
 800752a:	2102      	movs	r1, #2
 800752c:	e000      	b.n	8007530 <__cvt+0x44>
 800752e:	2103      	movs	r1, #3
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	ab02      	add	r3, sp, #8
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	ec45 4b10 	vmov	d0, r4, r5
 800753c:	4653      	mov	r3, sl
 800753e:	4632      	mov	r2, r6
 8007540:	f001 ff12 	bl	8009368 <_dtoa_r>
 8007544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007548:	4607      	mov	r7, r0
 800754a:	d102      	bne.n	8007552 <__cvt+0x66>
 800754c:	f019 0f01 	tst.w	r9, #1
 8007550:	d022      	beq.n	8007598 <__cvt+0xac>
 8007552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007556:	eb07 0906 	add.w	r9, r7, r6
 800755a:	d110      	bne.n	800757e <__cvt+0x92>
 800755c:	783b      	ldrb	r3, [r7, #0]
 800755e:	2b30      	cmp	r3, #48	; 0x30
 8007560:	d10a      	bne.n	8007578 <__cvt+0x8c>
 8007562:	2200      	movs	r2, #0
 8007564:	2300      	movs	r3, #0
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 800756e:	b918      	cbnz	r0, 8007578 <__cvt+0x8c>
 8007570:	f1c6 0601 	rsb	r6, r6, #1
 8007574:	f8ca 6000 	str.w	r6, [sl]
 8007578:	f8da 3000 	ldr.w	r3, [sl]
 800757c:	4499      	add	r9, r3
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f9 faaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800758a:	b108      	cbz	r0, 8007590 <__cvt+0xa4>
 800758c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007590:	2230      	movs	r2, #48	; 0x30
 8007592:	9b03      	ldr	r3, [sp, #12]
 8007594:	454b      	cmp	r3, r9
 8007596:	d307      	bcc.n	80075a8 <__cvt+0xbc>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800759c:	1bdb      	subs	r3, r3, r7
 800759e:	4638      	mov	r0, r7
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	b004      	add	sp, #16
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	1c59      	adds	r1, r3, #1
 80075aa:	9103      	str	r1, [sp, #12]
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e7f0      	b.n	8007592 <__cvt+0xa6>

080075b0 <__exponent>:
 80075b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075b2:	4603      	mov	r3, r0
 80075b4:	2900      	cmp	r1, #0
 80075b6:	bfb8      	it	lt
 80075b8:	4249      	neglt	r1, r1
 80075ba:	f803 2b02 	strb.w	r2, [r3], #2
 80075be:	bfb4      	ite	lt
 80075c0:	222d      	movlt	r2, #45	; 0x2d
 80075c2:	222b      	movge	r2, #43	; 0x2b
 80075c4:	2909      	cmp	r1, #9
 80075c6:	7042      	strb	r2, [r0, #1]
 80075c8:	dd2a      	ble.n	8007620 <__exponent+0x70>
 80075ca:	f10d 0407 	add.w	r4, sp, #7
 80075ce:	46a4      	mov	ip, r4
 80075d0:	270a      	movs	r7, #10
 80075d2:	46a6      	mov	lr, r4
 80075d4:	460a      	mov	r2, r1
 80075d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80075da:	fb07 1516 	mls	r5, r7, r6, r1
 80075de:	3530      	adds	r5, #48	; 0x30
 80075e0:	2a63      	cmp	r2, #99	; 0x63
 80075e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80075e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075ea:	4631      	mov	r1, r6
 80075ec:	dcf1      	bgt.n	80075d2 <__exponent+0x22>
 80075ee:	3130      	adds	r1, #48	; 0x30
 80075f0:	f1ae 0502 	sub.w	r5, lr, #2
 80075f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075f8:	1c44      	adds	r4, r0, #1
 80075fa:	4629      	mov	r1, r5
 80075fc:	4561      	cmp	r1, ip
 80075fe:	d30a      	bcc.n	8007616 <__exponent+0x66>
 8007600:	f10d 0209 	add.w	r2, sp, #9
 8007604:	eba2 020e 	sub.w	r2, r2, lr
 8007608:	4565      	cmp	r5, ip
 800760a:	bf88      	it	hi
 800760c:	2200      	movhi	r2, #0
 800760e:	4413      	add	r3, r2
 8007610:	1a18      	subs	r0, r3, r0
 8007612:	b003      	add	sp, #12
 8007614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800761a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800761e:	e7ed      	b.n	80075fc <__exponent+0x4c>
 8007620:	2330      	movs	r3, #48	; 0x30
 8007622:	3130      	adds	r1, #48	; 0x30
 8007624:	7083      	strb	r3, [r0, #2]
 8007626:	70c1      	strb	r1, [r0, #3]
 8007628:	1d03      	adds	r3, r0, #4
 800762a:	e7f1      	b.n	8007610 <__exponent+0x60>

0800762c <_printf_float>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	ed2d 8b02 	vpush	{d8}
 8007634:	b08d      	sub	sp, #52	; 0x34
 8007636:	460c      	mov	r4, r1
 8007638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800763c:	4616      	mov	r6, r2
 800763e:	461f      	mov	r7, r3
 8007640:	4605      	mov	r5, r0
 8007642:	f003 f9a5 	bl	800a990 <_localeconv_r>
 8007646:	f8d0 a000 	ldr.w	sl, [r0]
 800764a:	4650      	mov	r0, sl
 800764c:	f7f8 fdd0 	bl	80001f0 <strlen>
 8007650:	2300      	movs	r3, #0
 8007652:	930a      	str	r3, [sp, #40]	; 0x28
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	f8d8 3000 	ldr.w	r3, [r8]
 800765c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007660:	3307      	adds	r3, #7
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	f103 0208 	add.w	r2, r3, #8
 800766a:	f8c8 2000 	str.w	r2, [r8]
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007676:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800767a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	f8cd 8018 	str.w	r8, [sp, #24]
 8007684:	ee08 0a10 	vmov	s16, r0
 8007688:	4b9f      	ldr	r3, [pc, #636]	; (8007908 <_printf_float+0x2dc>)
 800768a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007692:	f7f9 fa5b 	bl	8000b4c <__aeabi_dcmpun>
 8007696:	bb88      	cbnz	r0, 80076fc <_printf_float+0xd0>
 8007698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769c:	4b9a      	ldr	r3, [pc, #616]	; (8007908 <_printf_float+0x2dc>)
 800769e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076a2:	f7f9 fa35 	bl	8000b10 <__aeabi_dcmple>
 80076a6:	bb48      	cbnz	r0, 80076fc <_printf_float+0xd0>
 80076a8:	2200      	movs	r2, #0
 80076aa:	2300      	movs	r3, #0
 80076ac:	4640      	mov	r0, r8
 80076ae:	4649      	mov	r1, r9
 80076b0:	f7f9 fa24 	bl	8000afc <__aeabi_dcmplt>
 80076b4:	b110      	cbz	r0, 80076bc <_printf_float+0x90>
 80076b6:	232d      	movs	r3, #45	; 0x2d
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076bc:	4b93      	ldr	r3, [pc, #588]	; (800790c <_printf_float+0x2e0>)
 80076be:	4894      	ldr	r0, [pc, #592]	; (8007910 <_printf_float+0x2e4>)
 80076c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076c4:	bf94      	ite	ls
 80076c6:	4698      	movls	r8, r3
 80076c8:	4680      	movhi	r8, r0
 80076ca:	2303      	movs	r3, #3
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	9b05      	ldr	r3, [sp, #20]
 80076d0:	f023 0204 	bic.w	r2, r3, #4
 80076d4:	6022      	str	r2, [r4, #0]
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	9700      	str	r7, [sp, #0]
 80076dc:	4633      	mov	r3, r6
 80076de:	aa0b      	add	r2, sp, #44	; 0x2c
 80076e0:	4621      	mov	r1, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f9d8 	bl	8007a98 <_printf_common>
 80076e8:	3001      	adds	r0, #1
 80076ea:	f040 8090 	bne.w	800780e <_printf_float+0x1e2>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f2:	b00d      	add	sp, #52	; 0x34
 80076f4:	ecbd 8b02 	vpop	{d8}
 80076f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f9 fa22 	bl	8000b4c <__aeabi_dcmpun>
 8007708:	b140      	cbz	r0, 800771c <_printf_float+0xf0>
 800770a:	464b      	mov	r3, r9
 800770c:	2b00      	cmp	r3, #0
 800770e:	bfbc      	itt	lt
 8007710:	232d      	movlt	r3, #45	; 0x2d
 8007712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007716:	487f      	ldr	r0, [pc, #508]	; (8007914 <_printf_float+0x2e8>)
 8007718:	4b7f      	ldr	r3, [pc, #508]	; (8007918 <_printf_float+0x2ec>)
 800771a:	e7d1      	b.n	80076c0 <_printf_float+0x94>
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007722:	9206      	str	r2, [sp, #24]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	d13f      	bne.n	80077a8 <_printf_float+0x17c>
 8007728:	2306      	movs	r3, #6
 800772a:	6063      	str	r3, [r4, #4]
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	6861      	ldr	r1, [r4, #4]
 8007730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007734:	2300      	movs	r3, #0
 8007736:	9303      	str	r3, [sp, #12]
 8007738:	ab0a      	add	r3, sp, #40	; 0x28
 800773a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800773e:	ab09      	add	r3, sp, #36	; 0x24
 8007740:	ec49 8b10 	vmov	d0, r8, r9
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	6022      	str	r2, [r4, #0]
 8007748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800774c:	4628      	mov	r0, r5
 800774e:	f7ff fecd 	bl	80074ec <__cvt>
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007756:	2b47      	cmp	r3, #71	; 0x47
 8007758:	4680      	mov	r8, r0
 800775a:	d108      	bne.n	800776e <_printf_float+0x142>
 800775c:	1cc8      	adds	r0, r1, #3
 800775e:	db02      	blt.n	8007766 <_printf_float+0x13a>
 8007760:	6863      	ldr	r3, [r4, #4]
 8007762:	4299      	cmp	r1, r3
 8007764:	dd41      	ble.n	80077ea <_printf_float+0x1be>
 8007766:	f1ab 0b02 	sub.w	fp, fp, #2
 800776a:	fa5f fb8b 	uxtb.w	fp, fp
 800776e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007772:	d820      	bhi.n	80077b6 <_printf_float+0x18a>
 8007774:	3901      	subs	r1, #1
 8007776:	465a      	mov	r2, fp
 8007778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800777c:	9109      	str	r1, [sp, #36]	; 0x24
 800777e:	f7ff ff17 	bl	80075b0 <__exponent>
 8007782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007784:	1813      	adds	r3, r2, r0
 8007786:	2a01      	cmp	r2, #1
 8007788:	4681      	mov	r9, r0
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	dc02      	bgt.n	8007794 <_printf_float+0x168>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	07d2      	lsls	r2, r2, #31
 8007792:	d501      	bpl.n	8007798 <_printf_float+0x16c>
 8007794:	3301      	adds	r3, #1
 8007796:	6123      	str	r3, [r4, #16]
 8007798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800779c:	2b00      	cmp	r3, #0
 800779e:	d09c      	beq.n	80076da <_printf_float+0xae>
 80077a0:	232d      	movs	r3, #45	; 0x2d
 80077a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a6:	e798      	b.n	80076da <_printf_float+0xae>
 80077a8:	9a06      	ldr	r2, [sp, #24]
 80077aa:	2a47      	cmp	r2, #71	; 0x47
 80077ac:	d1be      	bne.n	800772c <_printf_float+0x100>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1bc      	bne.n	800772c <_printf_float+0x100>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e7b9      	b.n	800772a <_printf_float+0xfe>
 80077b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077ba:	d118      	bne.n	80077ee <_printf_float+0x1c2>
 80077bc:	2900      	cmp	r1, #0
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	dd0b      	ble.n	80077da <_printf_float+0x1ae>
 80077c2:	6121      	str	r1, [r4, #16]
 80077c4:	b913      	cbnz	r3, 80077cc <_printf_float+0x1a0>
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	07d0      	lsls	r0, r2, #31
 80077ca:	d502      	bpl.n	80077d2 <_printf_float+0x1a6>
 80077cc:	3301      	adds	r3, #1
 80077ce:	440b      	add	r3, r1
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80077d4:	f04f 0900 	mov.w	r9, #0
 80077d8:	e7de      	b.n	8007798 <_printf_float+0x16c>
 80077da:	b913      	cbnz	r3, 80077e2 <_printf_float+0x1b6>
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	07d2      	lsls	r2, r2, #31
 80077e0:	d501      	bpl.n	80077e6 <_printf_float+0x1ba>
 80077e2:	3302      	adds	r3, #2
 80077e4:	e7f4      	b.n	80077d0 <_printf_float+0x1a4>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e7f2      	b.n	80077d0 <_printf_float+0x1a4>
 80077ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	4299      	cmp	r1, r3
 80077f2:	db05      	blt.n	8007800 <_printf_float+0x1d4>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	6121      	str	r1, [r4, #16]
 80077f8:	07d8      	lsls	r0, r3, #31
 80077fa:	d5ea      	bpl.n	80077d2 <_printf_float+0x1a6>
 80077fc:	1c4b      	adds	r3, r1, #1
 80077fe:	e7e7      	b.n	80077d0 <_printf_float+0x1a4>
 8007800:	2900      	cmp	r1, #0
 8007802:	bfd4      	ite	le
 8007804:	f1c1 0202 	rsble	r2, r1, #2
 8007808:	2201      	movgt	r2, #1
 800780a:	4413      	add	r3, r2
 800780c:	e7e0      	b.n	80077d0 <_printf_float+0x1a4>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	055a      	lsls	r2, r3, #21
 8007812:	d407      	bmi.n	8007824 <_printf_float+0x1f8>
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	4642      	mov	r2, r8
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	d12c      	bne.n	800787c <_printf_float+0x250>
 8007822:	e764      	b.n	80076ee <_printf_float+0xc2>
 8007824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007828:	f240 80e0 	bls.w	80079ec <_printf_float+0x3c0>
 800782c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007830:	2200      	movs	r2, #0
 8007832:	2300      	movs	r3, #0
 8007834:	f7f9 f958 	bl	8000ae8 <__aeabi_dcmpeq>
 8007838:	2800      	cmp	r0, #0
 800783a:	d034      	beq.n	80078a6 <_printf_float+0x27a>
 800783c:	4a37      	ldr	r2, [pc, #220]	; (800791c <_printf_float+0x2f0>)
 800783e:	2301      	movs	r3, #1
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f af51 	beq.w	80076ee <_printf_float+0xc2>
 800784c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007850:	429a      	cmp	r2, r3
 8007852:	db02      	blt.n	800785a <_printf_float+0x22e>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	07d8      	lsls	r0, r3, #31
 8007858:	d510      	bpl.n	800787c <_printf_float+0x250>
 800785a:	ee18 3a10 	vmov	r3, s16
 800785e:	4652      	mov	r2, sl
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f af41 	beq.w	80076ee <_printf_float+0xc2>
 800786c:	f04f 0800 	mov.w	r8, #0
 8007870:	f104 091a 	add.w	r9, r4, #26
 8007874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007876:	3b01      	subs	r3, #1
 8007878:	4543      	cmp	r3, r8
 800787a:	dc09      	bgt.n	8007890 <_printf_float+0x264>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	079b      	lsls	r3, r3, #30
 8007880:	f100 8105 	bmi.w	8007a8e <_printf_float+0x462>
 8007884:	68e0      	ldr	r0, [r4, #12]
 8007886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007888:	4298      	cmp	r0, r3
 800788a:	bfb8      	it	lt
 800788c:	4618      	movlt	r0, r3
 800788e:	e730      	b.n	80076f2 <_printf_float+0xc6>
 8007890:	2301      	movs	r3, #1
 8007892:	464a      	mov	r2, r9
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	47b8      	blx	r7
 800789a:	3001      	adds	r0, #1
 800789c:	f43f af27 	beq.w	80076ee <_printf_float+0xc2>
 80078a0:	f108 0801 	add.w	r8, r8, #1
 80078a4:	e7e6      	b.n	8007874 <_printf_float+0x248>
 80078a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	dc39      	bgt.n	8007920 <_printf_float+0x2f4>
 80078ac:	4a1b      	ldr	r2, [pc, #108]	; (800791c <_printf_float+0x2f0>)
 80078ae:	2301      	movs	r3, #1
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	47b8      	blx	r7
 80078b6:	3001      	adds	r0, #1
 80078b8:	f43f af19 	beq.w	80076ee <_printf_float+0xc2>
 80078bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078c0:	4313      	orrs	r3, r2
 80078c2:	d102      	bne.n	80078ca <_printf_float+0x29e>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	07d9      	lsls	r1, r3, #31
 80078c8:	d5d8      	bpl.n	800787c <_printf_float+0x250>
 80078ca:	ee18 3a10 	vmov	r3, s16
 80078ce:	4652      	mov	r2, sl
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	f43f af09 	beq.w	80076ee <_printf_float+0xc2>
 80078dc:	f04f 0900 	mov.w	r9, #0
 80078e0:	f104 0a1a 	add.w	sl, r4, #26
 80078e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e6:	425b      	negs	r3, r3
 80078e8:	454b      	cmp	r3, r9
 80078ea:	dc01      	bgt.n	80078f0 <_printf_float+0x2c4>
 80078ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ee:	e792      	b.n	8007816 <_printf_float+0x1ea>
 80078f0:	2301      	movs	r3, #1
 80078f2:	4652      	mov	r2, sl
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f aef7 	beq.w	80076ee <_printf_float+0xc2>
 8007900:	f109 0901 	add.w	r9, r9, #1
 8007904:	e7ee      	b.n	80078e4 <_printf_float+0x2b8>
 8007906:	bf00      	nop
 8007908:	7fefffff 	.word	0x7fefffff
 800790c:	0800c124 	.word	0x0800c124
 8007910:	0800c128 	.word	0x0800c128
 8007914:	0800c130 	.word	0x0800c130
 8007918:	0800c12c 	.word	0x0800c12c
 800791c:	0800c134 	.word	0x0800c134
 8007920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007924:	429a      	cmp	r2, r3
 8007926:	bfa8      	it	ge
 8007928:	461a      	movge	r2, r3
 800792a:	2a00      	cmp	r2, #0
 800792c:	4691      	mov	r9, r2
 800792e:	dc37      	bgt.n	80079a0 <_printf_float+0x374>
 8007930:	f04f 0b00 	mov.w	fp, #0
 8007934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007938:	f104 021a 	add.w	r2, r4, #26
 800793c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800793e:	9305      	str	r3, [sp, #20]
 8007940:	eba3 0309 	sub.w	r3, r3, r9
 8007944:	455b      	cmp	r3, fp
 8007946:	dc33      	bgt.n	80079b0 <_printf_float+0x384>
 8007948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800794c:	429a      	cmp	r2, r3
 800794e:	db3b      	blt.n	80079c8 <_printf_float+0x39c>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	07da      	lsls	r2, r3, #31
 8007954:	d438      	bmi.n	80079c8 <_printf_float+0x39c>
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	9a05      	ldr	r2, [sp, #20]
 800795a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800795c:	1a9a      	subs	r2, r3, r2
 800795e:	eba3 0901 	sub.w	r9, r3, r1
 8007962:	4591      	cmp	r9, r2
 8007964:	bfa8      	it	ge
 8007966:	4691      	movge	r9, r2
 8007968:	f1b9 0f00 	cmp.w	r9, #0
 800796c:	dc35      	bgt.n	80079da <_printf_float+0x3ae>
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007976:	f104 0a1a 	add.w	sl, r4, #26
 800797a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	eba3 0309 	sub.w	r3, r3, r9
 8007984:	4543      	cmp	r3, r8
 8007986:	f77f af79 	ble.w	800787c <_printf_float+0x250>
 800798a:	2301      	movs	r3, #1
 800798c:	4652      	mov	r2, sl
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	f43f aeaa 	beq.w	80076ee <_printf_float+0xc2>
 800799a:	f108 0801 	add.w	r8, r8, #1
 800799e:	e7ec      	b.n	800797a <_printf_float+0x34e>
 80079a0:	4613      	mov	r3, r2
 80079a2:	4631      	mov	r1, r6
 80079a4:	4642      	mov	r2, r8
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	d1c0      	bne.n	8007930 <_printf_float+0x304>
 80079ae:	e69e      	b.n	80076ee <_printf_float+0xc2>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	9205      	str	r2, [sp, #20]
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f ae97 	beq.w	80076ee <_printf_float+0xc2>
 80079c0:	9a05      	ldr	r2, [sp, #20]
 80079c2:	f10b 0b01 	add.w	fp, fp, #1
 80079c6:	e7b9      	b.n	800793c <_printf_float+0x310>
 80079c8:	ee18 3a10 	vmov	r3, s16
 80079cc:	4652      	mov	r2, sl
 80079ce:	4631      	mov	r1, r6
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b8      	blx	r7
 80079d4:	3001      	adds	r0, #1
 80079d6:	d1be      	bne.n	8007956 <_printf_float+0x32a>
 80079d8:	e689      	b.n	80076ee <_printf_float+0xc2>
 80079da:	9a05      	ldr	r2, [sp, #20]
 80079dc:	464b      	mov	r3, r9
 80079de:	4442      	add	r2, r8
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	d1c1      	bne.n	800796e <_printf_float+0x342>
 80079ea:	e680      	b.n	80076ee <_printf_float+0xc2>
 80079ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ee:	2a01      	cmp	r2, #1
 80079f0:	dc01      	bgt.n	80079f6 <_printf_float+0x3ca>
 80079f2:	07db      	lsls	r3, r3, #31
 80079f4:	d538      	bpl.n	8007a68 <_printf_float+0x43c>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4642      	mov	r2, r8
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae74 	beq.w	80076ee <_printf_float+0xc2>
 8007a06:	ee18 3a10 	vmov	r3, s16
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f ae6b 	beq.w	80076ee <_printf_float+0xc2>
 8007a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f7f9 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a24:	b9d8      	cbnz	r0, 8007a5e <_printf_float+0x432>
 8007a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a28:	f108 0201 	add.w	r2, r8, #1
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	d10e      	bne.n	8007a56 <_printf_float+0x42a>
 8007a38:	e659      	b.n	80076ee <_printf_float+0xc2>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	f43f ae52 	beq.w	80076ee <_printf_float+0xc2>
 8007a4a:	f108 0801 	add.w	r8, r8, #1
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a50:	3b01      	subs	r3, #1
 8007a52:	4543      	cmp	r3, r8
 8007a54:	dcf1      	bgt.n	8007a3a <_printf_float+0x40e>
 8007a56:	464b      	mov	r3, r9
 8007a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a5c:	e6dc      	b.n	8007818 <_printf_float+0x1ec>
 8007a5e:	f04f 0800 	mov.w	r8, #0
 8007a62:	f104 0a1a 	add.w	sl, r4, #26
 8007a66:	e7f2      	b.n	8007a4e <_printf_float+0x422>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4642      	mov	r2, r8
 8007a6c:	e7df      	b.n	8007a2e <_printf_float+0x402>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	464a      	mov	r2, r9
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f ae38 	beq.w	80076ee <_printf_float+0xc2>
 8007a7e:	f108 0801 	add.w	r8, r8, #1
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a86:	1a5b      	subs	r3, r3, r1
 8007a88:	4543      	cmp	r3, r8
 8007a8a:	dcf0      	bgt.n	8007a6e <_printf_float+0x442>
 8007a8c:	e6fa      	b.n	8007884 <_printf_float+0x258>
 8007a8e:	f04f 0800 	mov.w	r8, #0
 8007a92:	f104 0919 	add.w	r9, r4, #25
 8007a96:	e7f4      	b.n	8007a82 <_printf_float+0x456>

08007a98 <_printf_common>:
 8007a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	4699      	mov	r9, r3
 8007aa0:	688a      	ldr	r2, [r1, #8]
 8007aa2:	690b      	ldr	r3, [r1, #16]
 8007aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bfb8      	it	lt
 8007aac:	4613      	movlt	r3, r2
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	b10a      	cbz	r2, 8007abe <_printf_common+0x26>
 8007aba:	3301      	adds	r3, #1
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	0699      	lsls	r1, r3, #26
 8007ac2:	bf42      	ittt	mi
 8007ac4:	6833      	ldrmi	r3, [r6, #0]
 8007ac6:	3302      	addmi	r3, #2
 8007ac8:	6033      	strmi	r3, [r6, #0]
 8007aca:	6825      	ldr	r5, [r4, #0]
 8007acc:	f015 0506 	ands.w	r5, r5, #6
 8007ad0:	d106      	bne.n	8007ae0 <_printf_common+0x48>
 8007ad2:	f104 0a19 	add.w	sl, r4, #25
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	6832      	ldr	r2, [r6, #0]
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dc26      	bgt.n	8007b2e <_printf_common+0x96>
 8007ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ae4:	1e13      	subs	r3, r2, #0
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	2301      	movne	r3, #1
 8007aec:	0692      	lsls	r2, r2, #26
 8007aee:	d42b      	bmi.n	8007b48 <_printf_common+0xb0>
 8007af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007af4:	4649      	mov	r1, r9
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c0      	blx	r8
 8007afa:	3001      	adds	r0, #1
 8007afc:	d01e      	beq.n	8007b3c <_printf_common+0xa4>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	68e5      	ldr	r5, [r4, #12]
 8007b02:	6832      	ldr	r2, [r6, #0]
 8007b04:	f003 0306 	and.w	r3, r3, #6
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	bf08      	it	eq
 8007b0c:	1aad      	subeq	r5, r5, r2
 8007b0e:	68a3      	ldr	r3, [r4, #8]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	bf0c      	ite	eq
 8007b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b18:	2500      	movne	r5, #0
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bfc4      	itt	gt
 8007b1e:	1a9b      	subgt	r3, r3, r2
 8007b20:	18ed      	addgt	r5, r5, r3
 8007b22:	2600      	movs	r6, #0
 8007b24:	341a      	adds	r4, #26
 8007b26:	42b5      	cmp	r5, r6
 8007b28:	d11a      	bne.n	8007b60 <_printf_common+0xc8>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e008      	b.n	8007b40 <_printf_common+0xa8>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4652      	mov	r2, sl
 8007b32:	4649      	mov	r1, r9
 8007b34:	4638      	mov	r0, r7
 8007b36:	47c0      	blx	r8
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d103      	bne.n	8007b44 <_printf_common+0xac>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b44:	3501      	adds	r5, #1
 8007b46:	e7c6      	b.n	8007ad6 <_printf_common+0x3e>
 8007b48:	18e1      	adds	r1, r4, r3
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	2030      	movs	r0, #48	; 0x30
 8007b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b52:	4422      	add	r2, r4
 8007b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	e7c7      	b.n	8007af0 <_printf_common+0x58>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4622      	mov	r2, r4
 8007b64:	4649      	mov	r1, r9
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c0      	blx	r8
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d0e6      	beq.n	8007b3c <_printf_common+0xa4>
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7d9      	b.n	8007b26 <_printf_common+0x8e>
	...

08007b74 <_printf_i>:
 8007b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	7e0f      	ldrb	r7, [r1, #24]
 8007b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b7c:	2f78      	cmp	r7, #120	; 0x78
 8007b7e:	4691      	mov	r9, r2
 8007b80:	4680      	mov	r8, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	469a      	mov	sl, r3
 8007b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b8a:	d807      	bhi.n	8007b9c <_printf_i+0x28>
 8007b8c:	2f62      	cmp	r7, #98	; 0x62
 8007b8e:	d80a      	bhi.n	8007ba6 <_printf_i+0x32>
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	f000 80d8 	beq.w	8007d46 <_printf_i+0x1d2>
 8007b96:	2f58      	cmp	r7, #88	; 0x58
 8007b98:	f000 80a3 	beq.w	8007ce2 <_printf_i+0x16e>
 8007b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ba4:	e03a      	b.n	8007c1c <_printf_i+0xa8>
 8007ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007baa:	2b15      	cmp	r3, #21
 8007bac:	d8f6      	bhi.n	8007b9c <_printf_i+0x28>
 8007bae:	a101      	add	r1, pc, #4	; (adr r1, 8007bb4 <_printf_i+0x40>)
 8007bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007c21 	.word	0x08007c21
 8007bbc:	08007b9d 	.word	0x08007b9d
 8007bc0:	08007b9d 	.word	0x08007b9d
 8007bc4:	08007b9d 	.word	0x08007b9d
 8007bc8:	08007b9d 	.word	0x08007b9d
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007b9d 	.word	0x08007b9d
 8007bd4:	08007b9d 	.word	0x08007b9d
 8007bd8:	08007b9d 	.word	0x08007b9d
 8007bdc:	08007b9d 	.word	0x08007b9d
 8007be0:	08007d2d 	.word	0x08007d2d
 8007be4:	08007c51 	.word	0x08007c51
 8007be8:	08007d0f 	.word	0x08007d0f
 8007bec:	08007b9d 	.word	0x08007b9d
 8007bf0:	08007b9d 	.word	0x08007b9d
 8007bf4:	08007d4f 	.word	0x08007d4f
 8007bf8:	08007b9d 	.word	0x08007b9d
 8007bfc:	08007c51 	.word	0x08007c51
 8007c00:	08007b9d 	.word	0x08007b9d
 8007c04:	08007b9d 	.word	0x08007b9d
 8007c08:	08007d17 	.word	0x08007d17
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	1d1a      	adds	r2, r3, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	602a      	str	r2, [r5, #0]
 8007c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0a3      	b.n	8007d68 <_printf_i+0x1f4>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	6829      	ldr	r1, [r5, #0]
 8007c24:	0606      	lsls	r6, r0, #24
 8007c26:	f101 0304 	add.w	r3, r1, #4
 8007c2a:	d50a      	bpl.n	8007c42 <_printf_i+0xce>
 8007c2c:	680e      	ldr	r6, [r1, #0]
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	2e00      	cmp	r6, #0
 8007c32:	da03      	bge.n	8007c3c <_printf_i+0xc8>
 8007c34:	232d      	movs	r3, #45	; 0x2d
 8007c36:	4276      	negs	r6, r6
 8007c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c3c:	485e      	ldr	r0, [pc, #376]	; (8007db8 <_printf_i+0x244>)
 8007c3e:	230a      	movs	r3, #10
 8007c40:	e019      	b.n	8007c76 <_printf_i+0x102>
 8007c42:	680e      	ldr	r6, [r1, #0]
 8007c44:	602b      	str	r3, [r5, #0]
 8007c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c4a:	bf18      	it	ne
 8007c4c:	b236      	sxthne	r6, r6
 8007c4e:	e7ef      	b.n	8007c30 <_printf_i+0xbc>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	6820      	ldr	r0, [r4, #0]
 8007c54:	1d19      	adds	r1, r3, #4
 8007c56:	6029      	str	r1, [r5, #0]
 8007c58:	0601      	lsls	r1, r0, #24
 8007c5a:	d501      	bpl.n	8007c60 <_printf_i+0xec>
 8007c5c:	681e      	ldr	r6, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <_printf_i+0xf2>
 8007c60:	0646      	lsls	r6, r0, #25
 8007c62:	d5fb      	bpl.n	8007c5c <_printf_i+0xe8>
 8007c64:	881e      	ldrh	r6, [r3, #0]
 8007c66:	4854      	ldr	r0, [pc, #336]	; (8007db8 <_printf_i+0x244>)
 8007c68:	2f6f      	cmp	r7, #111	; 0x6f
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2308      	moveq	r3, #8
 8007c6e:	230a      	movne	r3, #10
 8007c70:	2100      	movs	r1, #0
 8007c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c76:	6865      	ldr	r5, [r4, #4]
 8007c78:	60a5      	str	r5, [r4, #8]
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	bfa2      	ittt	ge
 8007c7e:	6821      	ldrge	r1, [r4, #0]
 8007c80:	f021 0104 	bicge.w	r1, r1, #4
 8007c84:	6021      	strge	r1, [r4, #0]
 8007c86:	b90e      	cbnz	r6, 8007c8c <_printf_i+0x118>
 8007c88:	2d00      	cmp	r5, #0
 8007c8a:	d04d      	beq.n	8007d28 <_printf_i+0x1b4>
 8007c8c:	4615      	mov	r5, r2
 8007c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c92:	fb03 6711 	mls	r7, r3, r1, r6
 8007c96:	5dc7      	ldrb	r7, [r0, r7]
 8007c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	42bb      	cmp	r3, r7
 8007ca0:	460e      	mov	r6, r1
 8007ca2:	d9f4      	bls.n	8007c8e <_printf_i+0x11a>
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d10b      	bne.n	8007cc0 <_printf_i+0x14c>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	07de      	lsls	r6, r3, #31
 8007cac:	d508      	bpl.n	8007cc0 <_printf_i+0x14c>
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	6861      	ldr	r1, [r4, #4]
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	bfde      	ittt	le
 8007cb6:	2330      	movle	r3, #48	; 0x30
 8007cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007cc0:	1b52      	subs	r2, r2, r5
 8007cc2:	6122      	str	r2, [r4, #16]
 8007cc4:	f8cd a000 	str.w	sl, [sp]
 8007cc8:	464b      	mov	r3, r9
 8007cca:	aa03      	add	r2, sp, #12
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f7ff fee2 	bl	8007a98 <_printf_common>
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d14c      	bne.n	8007d72 <_printf_i+0x1fe>
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cdc:	b004      	add	sp, #16
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	4835      	ldr	r0, [pc, #212]	; (8007db8 <_printf_i+0x244>)
 8007ce4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ce8:	6829      	ldr	r1, [r5, #0]
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cf0:	6029      	str	r1, [r5, #0]
 8007cf2:	061d      	lsls	r5, r3, #24
 8007cf4:	d514      	bpl.n	8007d20 <_printf_i+0x1ac>
 8007cf6:	07df      	lsls	r7, r3, #31
 8007cf8:	bf44      	itt	mi
 8007cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8007cfe:	6023      	strmi	r3, [r4, #0]
 8007d00:	b91e      	cbnz	r6, 8007d0a <_printf_i+0x196>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f023 0320 	bic.w	r3, r3, #32
 8007d08:	6023      	str	r3, [r4, #0]
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	e7b0      	b.n	8007c70 <_printf_i+0xfc>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	f043 0320 	orr.w	r3, r3, #32
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	2378      	movs	r3, #120	; 0x78
 8007d18:	4828      	ldr	r0, [pc, #160]	; (8007dbc <_printf_i+0x248>)
 8007d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d1e:	e7e3      	b.n	8007ce8 <_printf_i+0x174>
 8007d20:	0659      	lsls	r1, r3, #25
 8007d22:	bf48      	it	mi
 8007d24:	b2b6      	uxthmi	r6, r6
 8007d26:	e7e6      	b.n	8007cf6 <_printf_i+0x182>
 8007d28:	4615      	mov	r5, r2
 8007d2a:	e7bb      	b.n	8007ca4 <_printf_i+0x130>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	6826      	ldr	r6, [r4, #0]
 8007d30:	6961      	ldr	r1, [r4, #20]
 8007d32:	1d18      	adds	r0, r3, #4
 8007d34:	6028      	str	r0, [r5, #0]
 8007d36:	0635      	lsls	r5, r6, #24
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	d501      	bpl.n	8007d40 <_printf_i+0x1cc>
 8007d3c:	6019      	str	r1, [r3, #0]
 8007d3e:	e002      	b.n	8007d46 <_printf_i+0x1d2>
 8007d40:	0670      	lsls	r0, r6, #25
 8007d42:	d5fb      	bpl.n	8007d3c <_printf_i+0x1c8>
 8007d44:	8019      	strh	r1, [r3, #0]
 8007d46:	2300      	movs	r3, #0
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	4615      	mov	r5, r2
 8007d4c:	e7ba      	b.n	8007cc4 <_printf_i+0x150>
 8007d4e:	682b      	ldr	r3, [r5, #0]
 8007d50:	1d1a      	adds	r2, r3, #4
 8007d52:	602a      	str	r2, [r5, #0]
 8007d54:	681d      	ldr	r5, [r3, #0]
 8007d56:	6862      	ldr	r2, [r4, #4]
 8007d58:	2100      	movs	r1, #0
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f7f8 fa50 	bl	8000200 <memchr>
 8007d60:	b108      	cbz	r0, 8007d66 <_printf_i+0x1f2>
 8007d62:	1b40      	subs	r0, r0, r5
 8007d64:	6060      	str	r0, [r4, #4]
 8007d66:	6863      	ldr	r3, [r4, #4]
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d70:	e7a8      	b.n	8007cc4 <_printf_i+0x150>
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	462a      	mov	r2, r5
 8007d76:	4649      	mov	r1, r9
 8007d78:	4640      	mov	r0, r8
 8007d7a:	47d0      	blx	sl
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d0ab      	beq.n	8007cd8 <_printf_i+0x164>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	079b      	lsls	r3, r3, #30
 8007d84:	d413      	bmi.n	8007dae <_printf_i+0x23a>
 8007d86:	68e0      	ldr	r0, [r4, #12]
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	4298      	cmp	r0, r3
 8007d8c:	bfb8      	it	lt
 8007d8e:	4618      	movlt	r0, r3
 8007d90:	e7a4      	b.n	8007cdc <_printf_i+0x168>
 8007d92:	2301      	movs	r3, #1
 8007d94:	4632      	mov	r2, r6
 8007d96:	4649      	mov	r1, r9
 8007d98:	4640      	mov	r0, r8
 8007d9a:	47d0      	blx	sl
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d09b      	beq.n	8007cd8 <_printf_i+0x164>
 8007da0:	3501      	adds	r5, #1
 8007da2:	68e3      	ldr	r3, [r4, #12]
 8007da4:	9903      	ldr	r1, [sp, #12]
 8007da6:	1a5b      	subs	r3, r3, r1
 8007da8:	42ab      	cmp	r3, r5
 8007daa:	dcf2      	bgt.n	8007d92 <_printf_i+0x21e>
 8007dac:	e7eb      	b.n	8007d86 <_printf_i+0x212>
 8007dae:	2500      	movs	r5, #0
 8007db0:	f104 0619 	add.w	r6, r4, #25
 8007db4:	e7f5      	b.n	8007da2 <_printf_i+0x22e>
 8007db6:	bf00      	nop
 8007db8:	0800c136 	.word	0x0800c136
 8007dbc:	0800c147 	.word	0x0800c147

08007dc0 <_scanf_float>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	b087      	sub	sp, #28
 8007dc6:	4617      	mov	r7, r2
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	688b      	ldr	r3, [r1, #8]
 8007dcc:	1e5a      	subs	r2, r3, #1
 8007dce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007dd2:	bf83      	ittte	hi
 8007dd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007dd8:	195b      	addhi	r3, r3, r5
 8007dda:	9302      	strhi	r3, [sp, #8]
 8007ddc:	2300      	movls	r3, #0
 8007dde:	bf86      	itte	hi
 8007de0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007de4:	608b      	strhi	r3, [r1, #8]
 8007de6:	9302      	strls	r3, [sp, #8]
 8007de8:	680b      	ldr	r3, [r1, #0]
 8007dea:	468b      	mov	fp, r1
 8007dec:	2500      	movs	r5, #0
 8007dee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007df2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007df6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	465e      	mov	r6, fp
 8007e00:	46aa      	mov	sl, r5
 8007e02:	46a9      	mov	r9, r5
 8007e04:	9501      	str	r5, [sp, #4]
 8007e06:	68a2      	ldr	r2, [r4, #8]
 8007e08:	b152      	cbz	r2, 8007e20 <_scanf_float+0x60>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b4e      	cmp	r3, #78	; 0x4e
 8007e10:	d864      	bhi.n	8007edc <_scanf_float+0x11c>
 8007e12:	2b40      	cmp	r3, #64	; 0x40
 8007e14:	d83c      	bhi.n	8007e90 <_scanf_float+0xd0>
 8007e16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e1a:	b2c8      	uxtb	r0, r1
 8007e1c:	280e      	cmp	r0, #14
 8007e1e:	d93a      	bls.n	8007e96 <_scanf_float+0xd6>
 8007e20:	f1b9 0f00 	cmp.w	r9, #0
 8007e24:	d003      	beq.n	8007e2e <_scanf_float+0x6e>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007e32:	f1ba 0f01 	cmp.w	sl, #1
 8007e36:	f200 8113 	bhi.w	8008060 <_scanf_float+0x2a0>
 8007e3a:	455e      	cmp	r6, fp
 8007e3c:	f200 8105 	bhi.w	800804a <_scanf_float+0x28a>
 8007e40:	2501      	movs	r5, #1
 8007e42:	4628      	mov	r0, r5
 8007e44:	b007      	add	sp, #28
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e4e:	2a0d      	cmp	r2, #13
 8007e50:	d8e6      	bhi.n	8007e20 <_scanf_float+0x60>
 8007e52:	a101      	add	r1, pc, #4	; (adr r1, 8007e58 <_scanf_float+0x98>)
 8007e54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e58:	08007f97 	.word	0x08007f97
 8007e5c:	08007e21 	.word	0x08007e21
 8007e60:	08007e21 	.word	0x08007e21
 8007e64:	08007e21 	.word	0x08007e21
 8007e68:	08007ff7 	.word	0x08007ff7
 8007e6c:	08007fcf 	.word	0x08007fcf
 8007e70:	08007e21 	.word	0x08007e21
 8007e74:	08007e21 	.word	0x08007e21
 8007e78:	08007fa5 	.word	0x08007fa5
 8007e7c:	08007e21 	.word	0x08007e21
 8007e80:	08007e21 	.word	0x08007e21
 8007e84:	08007e21 	.word	0x08007e21
 8007e88:	08007e21 	.word	0x08007e21
 8007e8c:	08007f5d 	.word	0x08007f5d
 8007e90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007e94:	e7db      	b.n	8007e4e <_scanf_float+0x8e>
 8007e96:	290e      	cmp	r1, #14
 8007e98:	d8c2      	bhi.n	8007e20 <_scanf_float+0x60>
 8007e9a:	a001      	add	r0, pc, #4	; (adr r0, 8007ea0 <_scanf_float+0xe0>)
 8007e9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ea0:	08007f4f 	.word	0x08007f4f
 8007ea4:	08007e21 	.word	0x08007e21
 8007ea8:	08007f4f 	.word	0x08007f4f
 8007eac:	08007fe3 	.word	0x08007fe3
 8007eb0:	08007e21 	.word	0x08007e21
 8007eb4:	08007efd 	.word	0x08007efd
 8007eb8:	08007f39 	.word	0x08007f39
 8007ebc:	08007f39 	.word	0x08007f39
 8007ec0:	08007f39 	.word	0x08007f39
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f39 	.word	0x08007f39
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007f39 	.word	0x08007f39
 8007ed8:	08007f39 	.word	0x08007f39
 8007edc:	2b6e      	cmp	r3, #110	; 0x6e
 8007ede:	d809      	bhi.n	8007ef4 <_scanf_float+0x134>
 8007ee0:	2b60      	cmp	r3, #96	; 0x60
 8007ee2:	d8b2      	bhi.n	8007e4a <_scanf_float+0x8a>
 8007ee4:	2b54      	cmp	r3, #84	; 0x54
 8007ee6:	d077      	beq.n	8007fd8 <_scanf_float+0x218>
 8007ee8:	2b59      	cmp	r3, #89	; 0x59
 8007eea:	d199      	bne.n	8007e20 <_scanf_float+0x60>
 8007eec:	2d07      	cmp	r5, #7
 8007eee:	d197      	bne.n	8007e20 <_scanf_float+0x60>
 8007ef0:	2508      	movs	r5, #8
 8007ef2:	e029      	b.n	8007f48 <_scanf_float+0x188>
 8007ef4:	2b74      	cmp	r3, #116	; 0x74
 8007ef6:	d06f      	beq.n	8007fd8 <_scanf_float+0x218>
 8007ef8:	2b79      	cmp	r3, #121	; 0x79
 8007efa:	e7f6      	b.n	8007eea <_scanf_float+0x12a>
 8007efc:	6821      	ldr	r1, [r4, #0]
 8007efe:	05c8      	lsls	r0, r1, #23
 8007f00:	d51a      	bpl.n	8007f38 <_scanf_float+0x178>
 8007f02:	9b02      	ldr	r3, [sp, #8]
 8007f04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f08:	6021      	str	r1, [r4, #0]
 8007f0a:	f109 0901 	add.w	r9, r9, #1
 8007f0e:	b11b      	cbz	r3, 8007f18 <_scanf_float+0x158>
 8007f10:	3b01      	subs	r3, #1
 8007f12:	3201      	adds	r2, #1
 8007f14:	9302      	str	r3, [sp, #8]
 8007f16:	60a2      	str	r2, [r4, #8]
 8007f18:	68a3      	ldr	r3, [r4, #8]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	60a3      	str	r3, [r4, #8]
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	3301      	adds	r3, #1
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	f340 8084 	ble.w	8008038 <_scanf_float+0x278>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	3301      	adds	r3, #1
 8007f34:	603b      	str	r3, [r7, #0]
 8007f36:	e766      	b.n	8007e06 <_scanf_float+0x46>
 8007f38:	eb1a 0f05 	cmn.w	sl, r5
 8007f3c:	f47f af70 	bne.w	8007e20 <_scanf_float+0x60>
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	f806 3b01 	strb.w	r3, [r6], #1
 8007f4c:	e7e4      	b.n	8007f18 <_scanf_float+0x158>
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	0610      	lsls	r0, r2, #24
 8007f52:	f57f af65 	bpl.w	8007e20 <_scanf_float+0x60>
 8007f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f5a:	e7f4      	b.n	8007f46 <_scanf_float+0x186>
 8007f5c:	f1ba 0f00 	cmp.w	sl, #0
 8007f60:	d10e      	bne.n	8007f80 <_scanf_float+0x1c0>
 8007f62:	f1b9 0f00 	cmp.w	r9, #0
 8007f66:	d10e      	bne.n	8007f86 <_scanf_float+0x1c6>
 8007f68:	6822      	ldr	r2, [r4, #0]
 8007f6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f72:	d108      	bne.n	8007f86 <_scanf_float+0x1c6>
 8007f74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f78:	6022      	str	r2, [r4, #0]
 8007f7a:	f04f 0a01 	mov.w	sl, #1
 8007f7e:	e7e3      	b.n	8007f48 <_scanf_float+0x188>
 8007f80:	f1ba 0f02 	cmp.w	sl, #2
 8007f84:	d055      	beq.n	8008032 <_scanf_float+0x272>
 8007f86:	2d01      	cmp	r5, #1
 8007f88:	d002      	beq.n	8007f90 <_scanf_float+0x1d0>
 8007f8a:	2d04      	cmp	r5, #4
 8007f8c:	f47f af48 	bne.w	8007e20 <_scanf_float+0x60>
 8007f90:	3501      	adds	r5, #1
 8007f92:	b2ed      	uxtb	r5, r5
 8007f94:	e7d8      	b.n	8007f48 <_scanf_float+0x188>
 8007f96:	f1ba 0f01 	cmp.w	sl, #1
 8007f9a:	f47f af41 	bne.w	8007e20 <_scanf_float+0x60>
 8007f9e:	f04f 0a02 	mov.w	sl, #2
 8007fa2:	e7d1      	b.n	8007f48 <_scanf_float+0x188>
 8007fa4:	b97d      	cbnz	r5, 8007fc6 <_scanf_float+0x206>
 8007fa6:	f1b9 0f00 	cmp.w	r9, #0
 8007faa:	f47f af3c 	bne.w	8007e26 <_scanf_float+0x66>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007fb8:	f47f af39 	bne.w	8007e2e <_scanf_float+0x6e>
 8007fbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fc0:	6022      	str	r2, [r4, #0]
 8007fc2:	2501      	movs	r5, #1
 8007fc4:	e7c0      	b.n	8007f48 <_scanf_float+0x188>
 8007fc6:	2d03      	cmp	r5, #3
 8007fc8:	d0e2      	beq.n	8007f90 <_scanf_float+0x1d0>
 8007fca:	2d05      	cmp	r5, #5
 8007fcc:	e7de      	b.n	8007f8c <_scanf_float+0x1cc>
 8007fce:	2d02      	cmp	r5, #2
 8007fd0:	f47f af26 	bne.w	8007e20 <_scanf_float+0x60>
 8007fd4:	2503      	movs	r5, #3
 8007fd6:	e7b7      	b.n	8007f48 <_scanf_float+0x188>
 8007fd8:	2d06      	cmp	r5, #6
 8007fda:	f47f af21 	bne.w	8007e20 <_scanf_float+0x60>
 8007fde:	2507      	movs	r5, #7
 8007fe0:	e7b2      	b.n	8007f48 <_scanf_float+0x188>
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	0591      	lsls	r1, r2, #22
 8007fe6:	f57f af1b 	bpl.w	8007e20 <_scanf_float+0x60>
 8007fea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007fee:	6022      	str	r2, [r4, #0]
 8007ff0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ff4:	e7a8      	b.n	8007f48 <_scanf_float+0x188>
 8007ff6:	6822      	ldr	r2, [r4, #0]
 8007ff8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007ffc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008000:	d006      	beq.n	8008010 <_scanf_float+0x250>
 8008002:	0550      	lsls	r0, r2, #21
 8008004:	f57f af0c 	bpl.w	8007e20 <_scanf_float+0x60>
 8008008:	f1b9 0f00 	cmp.w	r9, #0
 800800c:	f43f af0f 	beq.w	8007e2e <_scanf_float+0x6e>
 8008010:	0591      	lsls	r1, r2, #22
 8008012:	bf58      	it	pl
 8008014:	9901      	ldrpl	r1, [sp, #4]
 8008016:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800801a:	bf58      	it	pl
 800801c:	eba9 0101 	subpl.w	r1, r9, r1
 8008020:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008024:	bf58      	it	pl
 8008026:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800802a:	6022      	str	r2, [r4, #0]
 800802c:	f04f 0900 	mov.w	r9, #0
 8008030:	e78a      	b.n	8007f48 <_scanf_float+0x188>
 8008032:	f04f 0a03 	mov.w	sl, #3
 8008036:	e787      	b.n	8007f48 <_scanf_float+0x188>
 8008038:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800803c:	4639      	mov	r1, r7
 800803e:	4640      	mov	r0, r8
 8008040:	4798      	blx	r3
 8008042:	2800      	cmp	r0, #0
 8008044:	f43f aedf 	beq.w	8007e06 <_scanf_float+0x46>
 8008048:	e6ea      	b.n	8007e20 <_scanf_float+0x60>
 800804a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800804e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008052:	463a      	mov	r2, r7
 8008054:	4640      	mov	r0, r8
 8008056:	4798      	blx	r3
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	3b01      	subs	r3, #1
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	e6ec      	b.n	8007e3a <_scanf_float+0x7a>
 8008060:	1e6b      	subs	r3, r5, #1
 8008062:	2b06      	cmp	r3, #6
 8008064:	d825      	bhi.n	80080b2 <_scanf_float+0x2f2>
 8008066:	2d02      	cmp	r5, #2
 8008068:	d836      	bhi.n	80080d8 <_scanf_float+0x318>
 800806a:	455e      	cmp	r6, fp
 800806c:	f67f aee8 	bls.w	8007e40 <_scanf_float+0x80>
 8008070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008074:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008078:	463a      	mov	r2, r7
 800807a:	4640      	mov	r0, r8
 800807c:	4798      	blx	r3
 800807e:	6923      	ldr	r3, [r4, #16]
 8008080:	3b01      	subs	r3, #1
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	e7f1      	b.n	800806a <_scanf_float+0x2aa>
 8008086:	9802      	ldr	r0, [sp, #8]
 8008088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800808c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008090:	9002      	str	r0, [sp, #8]
 8008092:	463a      	mov	r2, r7
 8008094:	4640      	mov	r0, r8
 8008096:	4798      	blx	r3
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	3b01      	subs	r3, #1
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080a2:	fa5f fa8a 	uxtb.w	sl, sl
 80080a6:	f1ba 0f02 	cmp.w	sl, #2
 80080aa:	d1ec      	bne.n	8008086 <_scanf_float+0x2c6>
 80080ac:	3d03      	subs	r5, #3
 80080ae:	b2ed      	uxtb	r5, r5
 80080b0:	1b76      	subs	r6, r6, r5
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	05da      	lsls	r2, r3, #23
 80080b6:	d52f      	bpl.n	8008118 <_scanf_float+0x358>
 80080b8:	055b      	lsls	r3, r3, #21
 80080ba:	d510      	bpl.n	80080de <_scanf_float+0x31e>
 80080bc:	455e      	cmp	r6, fp
 80080be:	f67f aebf 	bls.w	8007e40 <_scanf_float+0x80>
 80080c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080ca:	463a      	mov	r2, r7
 80080cc:	4640      	mov	r0, r8
 80080ce:	4798      	blx	r3
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	e7f1      	b.n	80080bc <_scanf_float+0x2fc>
 80080d8:	46aa      	mov	sl, r5
 80080da:	9602      	str	r6, [sp, #8]
 80080dc:	e7df      	b.n	800809e <_scanf_float+0x2de>
 80080de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	2965      	cmp	r1, #101	; 0x65
 80080e6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80080ea:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	d00c      	beq.n	800810c <_scanf_float+0x34c>
 80080f2:	2945      	cmp	r1, #69	; 0x45
 80080f4:	d00a      	beq.n	800810c <_scanf_float+0x34c>
 80080f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080fa:	463a      	mov	r2, r7
 80080fc:	4640      	mov	r0, r8
 80080fe:	4798      	blx	r3
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008106:	3b01      	subs	r3, #1
 8008108:	1eb5      	subs	r5, r6, #2
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008110:	463a      	mov	r2, r7
 8008112:	4640      	mov	r0, r8
 8008114:	4798      	blx	r3
 8008116:	462e      	mov	r6, r5
 8008118:	6825      	ldr	r5, [r4, #0]
 800811a:	f015 0510 	ands.w	r5, r5, #16
 800811e:	d159      	bne.n	80081d4 <_scanf_float+0x414>
 8008120:	7035      	strb	r5, [r6, #0]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812c:	d11b      	bne.n	8008166 <_scanf_float+0x3a6>
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	454b      	cmp	r3, r9
 8008132:	eba3 0209 	sub.w	r2, r3, r9
 8008136:	d123      	bne.n	8008180 <_scanf_float+0x3c0>
 8008138:	2200      	movs	r2, #0
 800813a:	4659      	mov	r1, fp
 800813c:	4640      	mov	r0, r8
 800813e:	f000 ff3d 	bl	8008fbc <_strtod_r>
 8008142:	6822      	ldr	r2, [r4, #0]
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	f012 0f02 	tst.w	r2, #2
 800814a:	ec57 6b10 	vmov	r6, r7, d0
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	d021      	beq.n	8008196 <_scanf_float+0x3d6>
 8008152:	9903      	ldr	r1, [sp, #12]
 8008154:	1d1a      	adds	r2, r3, #4
 8008156:	600a      	str	r2, [r1, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	e9c3 6700 	strd	r6, r7, [r3]
 800815e:	68e3      	ldr	r3, [r4, #12]
 8008160:	3301      	adds	r3, #1
 8008162:	60e3      	str	r3, [r4, #12]
 8008164:	e66d      	b.n	8007e42 <_scanf_float+0x82>
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0e5      	beq.n	8008138 <_scanf_float+0x378>
 800816c:	9905      	ldr	r1, [sp, #20]
 800816e:	230a      	movs	r3, #10
 8008170:	462a      	mov	r2, r5
 8008172:	3101      	adds	r1, #1
 8008174:	4640      	mov	r0, r8
 8008176:	f000 ffa9 	bl	80090cc <_strtol_r>
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	9e05      	ldr	r6, [sp, #20]
 800817e:	1ac2      	subs	r2, r0, r3
 8008180:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008184:	429e      	cmp	r6, r3
 8008186:	bf28      	it	cs
 8008188:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800818c:	4912      	ldr	r1, [pc, #72]	; (80081d8 <_scanf_float+0x418>)
 800818e:	4630      	mov	r0, r6
 8008190:	f000 f8d0 	bl	8008334 <siprintf>
 8008194:	e7d0      	b.n	8008138 <_scanf_float+0x378>
 8008196:	9903      	ldr	r1, [sp, #12]
 8008198:	f012 0f04 	tst.w	r2, #4
 800819c:	f103 0204 	add.w	r2, r3, #4
 80081a0:	600a      	str	r2, [r1, #0]
 80081a2:	d1d9      	bne.n	8008158 <_scanf_float+0x398>
 80081a4:	f8d3 8000 	ldr.w	r8, [r3]
 80081a8:	ee10 2a10 	vmov	r2, s0
 80081ac:	ee10 0a10 	vmov	r0, s0
 80081b0:	463b      	mov	r3, r7
 80081b2:	4639      	mov	r1, r7
 80081b4:	f7f8 fcca 	bl	8000b4c <__aeabi_dcmpun>
 80081b8:	b128      	cbz	r0, 80081c6 <_scanf_float+0x406>
 80081ba:	4808      	ldr	r0, [pc, #32]	; (80081dc <_scanf_float+0x41c>)
 80081bc:	f000 f8b4 	bl	8008328 <nanf>
 80081c0:	ed88 0a00 	vstr	s0, [r8]
 80081c4:	e7cb      	b.n	800815e <_scanf_float+0x39e>
 80081c6:	4630      	mov	r0, r6
 80081c8:	4639      	mov	r1, r7
 80081ca:	f7f8 fd1d 	bl	8000c08 <__aeabi_d2f>
 80081ce:	f8c8 0000 	str.w	r0, [r8]
 80081d2:	e7c4      	b.n	800815e <_scanf_float+0x39e>
 80081d4:	2500      	movs	r5, #0
 80081d6:	e634      	b.n	8007e42 <_scanf_float+0x82>
 80081d8:	0800c158 	.word	0x0800c158
 80081dc:	0800c5c8 	.word	0x0800c5c8

080081e0 <iprintf>:
 80081e0:	b40f      	push	{r0, r1, r2, r3}
 80081e2:	4b0a      	ldr	r3, [pc, #40]	; (800820c <iprintf+0x2c>)
 80081e4:	b513      	push	{r0, r1, r4, lr}
 80081e6:	681c      	ldr	r4, [r3, #0]
 80081e8:	b124      	cbz	r4, 80081f4 <iprintf+0x14>
 80081ea:	69a3      	ldr	r3, [r4, #24]
 80081ec:	b913      	cbnz	r3, 80081f4 <iprintf+0x14>
 80081ee:	4620      	mov	r0, r4
 80081f0:	f001 ffc2 	bl	800a178 <__sinit>
 80081f4:	ab05      	add	r3, sp, #20
 80081f6:	9a04      	ldr	r2, [sp, #16]
 80081f8:	68a1      	ldr	r1, [r4, #8]
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	4620      	mov	r0, r4
 80081fe:	f003 fb8b 	bl	800b918 <_vfiprintf_r>
 8008202:	b002      	add	sp, #8
 8008204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008208:	b004      	add	sp, #16
 800820a:	4770      	bx	lr
 800820c:	20000020 	.word	0x20000020

08008210 <putchar>:
 8008210:	4b09      	ldr	r3, [pc, #36]	; (8008238 <putchar+0x28>)
 8008212:	b513      	push	{r0, r1, r4, lr}
 8008214:	681c      	ldr	r4, [r3, #0]
 8008216:	4601      	mov	r1, r0
 8008218:	b134      	cbz	r4, 8008228 <putchar+0x18>
 800821a:	69a3      	ldr	r3, [r4, #24]
 800821c:	b923      	cbnz	r3, 8008228 <putchar+0x18>
 800821e:	9001      	str	r0, [sp, #4]
 8008220:	4620      	mov	r0, r4
 8008222:	f001 ffa9 	bl	800a178 <__sinit>
 8008226:	9901      	ldr	r1, [sp, #4]
 8008228:	68a2      	ldr	r2, [r4, #8]
 800822a:	4620      	mov	r0, r4
 800822c:	b002      	add	sp, #8
 800822e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008232:	f003 bca1 	b.w	800bb78 <_putc_r>
 8008236:	bf00      	nop
 8008238:	20000020 	.word	0x20000020

0800823c <_puts_r>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	460e      	mov	r6, r1
 8008240:	4605      	mov	r5, r0
 8008242:	b118      	cbz	r0, 800824c <_puts_r+0x10>
 8008244:	6983      	ldr	r3, [r0, #24]
 8008246:	b90b      	cbnz	r3, 800824c <_puts_r+0x10>
 8008248:	f001 ff96 	bl	800a178 <__sinit>
 800824c:	69ab      	ldr	r3, [r5, #24]
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	b913      	cbnz	r3, 8008258 <_puts_r+0x1c>
 8008252:	4628      	mov	r0, r5
 8008254:	f001 ff90 	bl	800a178 <__sinit>
 8008258:	4b2c      	ldr	r3, [pc, #176]	; (800830c <_puts_r+0xd0>)
 800825a:	429c      	cmp	r4, r3
 800825c:	d120      	bne.n	80082a0 <_puts_r+0x64>
 800825e:	686c      	ldr	r4, [r5, #4]
 8008260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008262:	07db      	lsls	r3, r3, #31
 8008264:	d405      	bmi.n	8008272 <_puts_r+0x36>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	0598      	lsls	r0, r3, #22
 800826a:	d402      	bmi.n	8008272 <_puts_r+0x36>
 800826c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826e:	f002 fb94 	bl	800a99a <__retarget_lock_acquire_recursive>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	0719      	lsls	r1, r3, #28
 8008276:	d51d      	bpl.n	80082b4 <_puts_r+0x78>
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	b1db      	cbz	r3, 80082b4 <_puts_r+0x78>
 800827c:	3e01      	subs	r6, #1
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008284:	3b01      	subs	r3, #1
 8008286:	60a3      	str	r3, [r4, #8]
 8008288:	bb39      	cbnz	r1, 80082da <_puts_r+0x9e>
 800828a:	2b00      	cmp	r3, #0
 800828c:	da38      	bge.n	8008300 <_puts_r+0xc4>
 800828e:	4622      	mov	r2, r4
 8008290:	210a      	movs	r1, #10
 8008292:	4628      	mov	r0, r5
 8008294:	f000 ff1c 	bl	80090d0 <__swbuf_r>
 8008298:	3001      	adds	r0, #1
 800829a:	d011      	beq.n	80082c0 <_puts_r+0x84>
 800829c:	250a      	movs	r5, #10
 800829e:	e011      	b.n	80082c4 <_puts_r+0x88>
 80082a0:	4b1b      	ldr	r3, [pc, #108]	; (8008310 <_puts_r+0xd4>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d101      	bne.n	80082aa <_puts_r+0x6e>
 80082a6:	68ac      	ldr	r4, [r5, #8]
 80082a8:	e7da      	b.n	8008260 <_puts_r+0x24>
 80082aa:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <_puts_r+0xd8>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	bf08      	it	eq
 80082b0:	68ec      	ldreq	r4, [r5, #12]
 80082b2:	e7d5      	b.n	8008260 <_puts_r+0x24>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 ff5c 	bl	8009174 <__swsetup_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d0dd      	beq.n	800827c <_puts_r+0x40>
 80082c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80082c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082c6:	07da      	lsls	r2, r3, #31
 80082c8:	d405      	bmi.n	80082d6 <_puts_r+0x9a>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	059b      	lsls	r3, r3, #22
 80082ce:	d402      	bmi.n	80082d6 <_puts_r+0x9a>
 80082d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d2:	f002 fb63 	bl	800a99c <__retarget_lock_release_recursive>
 80082d6:	4628      	mov	r0, r5
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da04      	bge.n	80082e8 <_puts_r+0xac>
 80082de:	69a2      	ldr	r2, [r4, #24]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	dc06      	bgt.n	80082f2 <_puts_r+0xb6>
 80082e4:	290a      	cmp	r1, #10
 80082e6:	d004      	beq.n	80082f2 <_puts_r+0xb6>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	6022      	str	r2, [r4, #0]
 80082ee:	7019      	strb	r1, [r3, #0]
 80082f0:	e7c5      	b.n	800827e <_puts_r+0x42>
 80082f2:	4622      	mov	r2, r4
 80082f4:	4628      	mov	r0, r5
 80082f6:	f000 feeb 	bl	80090d0 <__swbuf_r>
 80082fa:	3001      	adds	r0, #1
 80082fc:	d1bf      	bne.n	800827e <_puts_r+0x42>
 80082fe:	e7df      	b.n	80082c0 <_puts_r+0x84>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	250a      	movs	r5, #10
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	701d      	strb	r5, [r3, #0]
 800830a:	e7db      	b.n	80082c4 <_puts_r+0x88>
 800830c:	0800c364 	.word	0x0800c364
 8008310:	0800c384 	.word	0x0800c384
 8008314:	0800c344 	.word	0x0800c344

08008318 <puts>:
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <puts+0xc>)
 800831a:	4601      	mov	r1, r0
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	f7ff bf8d 	b.w	800823c <_puts_r>
 8008322:	bf00      	nop
 8008324:	20000020 	.word	0x20000020

08008328 <nanf>:
 8008328:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008330 <nanf+0x8>
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	7fc00000 	.word	0x7fc00000

08008334 <siprintf>:
 8008334:	b40e      	push	{r1, r2, r3}
 8008336:	b500      	push	{lr}
 8008338:	b09c      	sub	sp, #112	; 0x70
 800833a:	ab1d      	add	r3, sp, #116	; 0x74
 800833c:	9002      	str	r0, [sp, #8]
 800833e:	9006      	str	r0, [sp, #24]
 8008340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008344:	4809      	ldr	r0, [pc, #36]	; (800836c <siprintf+0x38>)
 8008346:	9107      	str	r1, [sp, #28]
 8008348:	9104      	str	r1, [sp, #16]
 800834a:	4909      	ldr	r1, [pc, #36]	; (8008370 <siprintf+0x3c>)
 800834c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008350:	9105      	str	r1, [sp, #20]
 8008352:	6800      	ldr	r0, [r0, #0]
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	a902      	add	r1, sp, #8
 8008358:	f003 f9b4 	bl	800b6c4 <_svfiprintf_r>
 800835c:	9b02      	ldr	r3, [sp, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	b01c      	add	sp, #112	; 0x70
 8008364:	f85d eb04 	ldr.w	lr, [sp], #4
 8008368:	b003      	add	sp, #12
 800836a:	4770      	bx	lr
 800836c:	20000020 	.word	0x20000020
 8008370:	ffff0208 	.word	0xffff0208

08008374 <sulp>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4604      	mov	r4, r0
 8008378:	460d      	mov	r5, r1
 800837a:	ec45 4b10 	vmov	d0, r4, r5
 800837e:	4616      	mov	r6, r2
 8008380:	f002 fefe 	bl	800b180 <__ulp>
 8008384:	ec51 0b10 	vmov	r0, r1, d0
 8008388:	b17e      	cbz	r6, 80083aa <sulp+0x36>
 800838a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800838e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd09      	ble.n	80083aa <sulp+0x36>
 8008396:	051b      	lsls	r3, r3, #20
 8008398:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800839c:	2400      	movs	r4, #0
 800839e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80083a2:	4622      	mov	r2, r4
 80083a4:	462b      	mov	r3, r5
 80083a6:	f7f8 f937 	bl	8000618 <__aeabi_dmul>
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	0000      	movs	r0, r0
	...

080083b0 <_strtod_l>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	ed2d 8b02 	vpush	{d8}
 80083b8:	b09d      	sub	sp, #116	; 0x74
 80083ba:	461f      	mov	r7, r3
 80083bc:	2300      	movs	r3, #0
 80083be:	9318      	str	r3, [sp, #96]	; 0x60
 80083c0:	4ba2      	ldr	r3, [pc, #648]	; (800864c <_strtod_l+0x29c>)
 80083c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	4604      	mov	r4, r0
 80083ca:	4618      	mov	r0, r3
 80083cc:	4688      	mov	r8, r1
 80083ce:	f7f7 ff0f 	bl	80001f0 <strlen>
 80083d2:	f04f 0a00 	mov.w	sl, #0
 80083d6:	4605      	mov	r5, r0
 80083d8:	f04f 0b00 	mov.w	fp, #0
 80083dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80083e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	2a2b      	cmp	r2, #43	; 0x2b
 80083e6:	d04e      	beq.n	8008486 <_strtod_l+0xd6>
 80083e8:	d83b      	bhi.n	8008462 <_strtod_l+0xb2>
 80083ea:	2a0d      	cmp	r2, #13
 80083ec:	d834      	bhi.n	8008458 <_strtod_l+0xa8>
 80083ee:	2a08      	cmp	r2, #8
 80083f0:	d834      	bhi.n	800845c <_strtod_l+0xac>
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	d03e      	beq.n	8008474 <_strtod_l+0xc4>
 80083f6:	2300      	movs	r3, #0
 80083f8:	930a      	str	r3, [sp, #40]	; 0x28
 80083fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80083fc:	7833      	ldrb	r3, [r6, #0]
 80083fe:	2b30      	cmp	r3, #48	; 0x30
 8008400:	f040 80b0 	bne.w	8008564 <_strtod_l+0x1b4>
 8008404:	7873      	ldrb	r3, [r6, #1]
 8008406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800840a:	2b58      	cmp	r3, #88	; 0x58
 800840c:	d168      	bne.n	80084e0 <_strtod_l+0x130>
 800840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	ab18      	add	r3, sp, #96	; 0x60
 8008414:	9702      	str	r7, [sp, #8]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4a8d      	ldr	r2, [pc, #564]	; (8008650 <_strtod_l+0x2a0>)
 800841a:	ab19      	add	r3, sp, #100	; 0x64
 800841c:	a917      	add	r1, sp, #92	; 0x5c
 800841e:	4620      	mov	r0, r4
 8008420:	f001 ffae 	bl	800a380 <__gethex>
 8008424:	f010 0707 	ands.w	r7, r0, #7
 8008428:	4605      	mov	r5, r0
 800842a:	d005      	beq.n	8008438 <_strtod_l+0x88>
 800842c:	2f06      	cmp	r7, #6
 800842e:	d12c      	bne.n	800848a <_strtod_l+0xda>
 8008430:	3601      	adds	r6, #1
 8008432:	2300      	movs	r3, #0
 8008434:	9617      	str	r6, [sp, #92]	; 0x5c
 8008436:	930a      	str	r3, [sp, #40]	; 0x28
 8008438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800843a:	2b00      	cmp	r3, #0
 800843c:	f040 8590 	bne.w	8008f60 <_strtod_l+0xbb0>
 8008440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008442:	b1eb      	cbz	r3, 8008480 <_strtod_l+0xd0>
 8008444:	4652      	mov	r2, sl
 8008446:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800844a:	ec43 2b10 	vmov	d0, r2, r3
 800844e:	b01d      	add	sp, #116	; 0x74
 8008450:	ecbd 8b02 	vpop	{d8}
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008458:	2a20      	cmp	r2, #32
 800845a:	d1cc      	bne.n	80083f6 <_strtod_l+0x46>
 800845c:	3301      	adds	r3, #1
 800845e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008460:	e7be      	b.n	80083e0 <_strtod_l+0x30>
 8008462:	2a2d      	cmp	r2, #45	; 0x2d
 8008464:	d1c7      	bne.n	80083f6 <_strtod_l+0x46>
 8008466:	2201      	movs	r2, #1
 8008468:	920a      	str	r2, [sp, #40]	; 0x28
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	9217      	str	r2, [sp, #92]	; 0x5c
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1c2      	bne.n	80083fa <_strtod_l+0x4a>
 8008474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008476:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 856e 	bne.w	8008f5c <_strtod_l+0xbac>
 8008480:	4652      	mov	r2, sl
 8008482:	465b      	mov	r3, fp
 8008484:	e7e1      	b.n	800844a <_strtod_l+0x9a>
 8008486:	2200      	movs	r2, #0
 8008488:	e7ee      	b.n	8008468 <_strtod_l+0xb8>
 800848a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800848c:	b13a      	cbz	r2, 800849e <_strtod_l+0xee>
 800848e:	2135      	movs	r1, #53	; 0x35
 8008490:	a81a      	add	r0, sp, #104	; 0x68
 8008492:	f002 ff80 	bl	800b396 <__copybits>
 8008496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008498:	4620      	mov	r0, r4
 800849a:	f002 fb3f 	bl	800ab1c <_Bfree>
 800849e:	3f01      	subs	r7, #1
 80084a0:	2f04      	cmp	r7, #4
 80084a2:	d806      	bhi.n	80084b2 <_strtod_l+0x102>
 80084a4:	e8df f007 	tbb	[pc, r7]
 80084a8:	1714030a 	.word	0x1714030a
 80084ac:	0a          	.byte	0x0a
 80084ad:	00          	.byte	0x00
 80084ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80084b2:	0728      	lsls	r0, r5, #28
 80084b4:	d5c0      	bpl.n	8008438 <_strtod_l+0x88>
 80084b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80084ba:	e7bd      	b.n	8008438 <_strtod_l+0x88>
 80084bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80084c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084ce:	e7f0      	b.n	80084b2 <_strtod_l+0x102>
 80084d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008654 <_strtod_l+0x2a4>
 80084d4:	e7ed      	b.n	80084b2 <_strtod_l+0x102>
 80084d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80084da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80084de:	e7e8      	b.n	80084b2 <_strtod_l+0x102>
 80084e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b30      	cmp	r3, #48	; 0x30
 80084ea:	d0f9      	beq.n	80084e0 <_strtod_l+0x130>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0a3      	beq.n	8008438 <_strtod_l+0x88>
 80084f0:	2301      	movs	r3, #1
 80084f2:	f04f 0900 	mov.w	r9, #0
 80084f6:	9304      	str	r3, [sp, #16]
 80084f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084fa:	9308      	str	r3, [sp, #32]
 80084fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8008500:	464f      	mov	r7, r9
 8008502:	220a      	movs	r2, #10
 8008504:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008506:	7806      	ldrb	r6, [r0, #0]
 8008508:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800850c:	b2d9      	uxtb	r1, r3
 800850e:	2909      	cmp	r1, #9
 8008510:	d92a      	bls.n	8008568 <_strtod_l+0x1b8>
 8008512:	9905      	ldr	r1, [sp, #20]
 8008514:	462a      	mov	r2, r5
 8008516:	f003 fbd2 	bl	800bcbe <strncmp>
 800851a:	b398      	cbz	r0, 8008584 <_strtod_l+0x1d4>
 800851c:	2000      	movs	r0, #0
 800851e:	4632      	mov	r2, r6
 8008520:	463d      	mov	r5, r7
 8008522:	9005      	str	r0, [sp, #20]
 8008524:	4603      	mov	r3, r0
 8008526:	2a65      	cmp	r2, #101	; 0x65
 8008528:	d001      	beq.n	800852e <_strtod_l+0x17e>
 800852a:	2a45      	cmp	r2, #69	; 0x45
 800852c:	d118      	bne.n	8008560 <_strtod_l+0x1b0>
 800852e:	b91d      	cbnz	r5, 8008538 <_strtod_l+0x188>
 8008530:	9a04      	ldr	r2, [sp, #16]
 8008532:	4302      	orrs	r2, r0
 8008534:	d09e      	beq.n	8008474 <_strtod_l+0xc4>
 8008536:	2500      	movs	r5, #0
 8008538:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800853c:	f108 0201 	add.w	r2, r8, #1
 8008540:	9217      	str	r2, [sp, #92]	; 0x5c
 8008542:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008546:	2a2b      	cmp	r2, #43	; 0x2b
 8008548:	d075      	beq.n	8008636 <_strtod_l+0x286>
 800854a:	2a2d      	cmp	r2, #45	; 0x2d
 800854c:	d07b      	beq.n	8008646 <_strtod_l+0x296>
 800854e:	f04f 0c00 	mov.w	ip, #0
 8008552:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008556:	2909      	cmp	r1, #9
 8008558:	f240 8082 	bls.w	8008660 <_strtod_l+0x2b0>
 800855c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008560:	2600      	movs	r6, #0
 8008562:	e09d      	b.n	80086a0 <_strtod_l+0x2f0>
 8008564:	2300      	movs	r3, #0
 8008566:	e7c4      	b.n	80084f2 <_strtod_l+0x142>
 8008568:	2f08      	cmp	r7, #8
 800856a:	bfd8      	it	le
 800856c:	9907      	ldrle	r1, [sp, #28]
 800856e:	f100 0001 	add.w	r0, r0, #1
 8008572:	bfda      	itte	le
 8008574:	fb02 3301 	mlale	r3, r2, r1, r3
 8008578:	9307      	strle	r3, [sp, #28]
 800857a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800857e:	3701      	adds	r7, #1
 8008580:	9017      	str	r0, [sp, #92]	; 0x5c
 8008582:	e7bf      	b.n	8008504 <_strtod_l+0x154>
 8008584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008586:	195a      	adds	r2, r3, r5
 8008588:	9217      	str	r2, [sp, #92]	; 0x5c
 800858a:	5d5a      	ldrb	r2, [r3, r5]
 800858c:	2f00      	cmp	r7, #0
 800858e:	d037      	beq.n	8008600 <_strtod_l+0x250>
 8008590:	9005      	str	r0, [sp, #20]
 8008592:	463d      	mov	r5, r7
 8008594:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008598:	2b09      	cmp	r3, #9
 800859a:	d912      	bls.n	80085c2 <_strtod_l+0x212>
 800859c:	2301      	movs	r3, #1
 800859e:	e7c2      	b.n	8008526 <_strtod_l+0x176>
 80085a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80085a6:	785a      	ldrb	r2, [r3, #1]
 80085a8:	3001      	adds	r0, #1
 80085aa:	2a30      	cmp	r2, #48	; 0x30
 80085ac:	d0f8      	beq.n	80085a0 <_strtod_l+0x1f0>
 80085ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80085b2:	2b08      	cmp	r3, #8
 80085b4:	f200 84d9 	bhi.w	8008f6a <_strtod_l+0xbba>
 80085b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085ba:	9005      	str	r0, [sp, #20]
 80085bc:	2000      	movs	r0, #0
 80085be:	9308      	str	r3, [sp, #32]
 80085c0:	4605      	mov	r5, r0
 80085c2:	3a30      	subs	r2, #48	; 0x30
 80085c4:	f100 0301 	add.w	r3, r0, #1
 80085c8:	d014      	beq.n	80085f4 <_strtod_l+0x244>
 80085ca:	9905      	ldr	r1, [sp, #20]
 80085cc:	4419      	add	r1, r3
 80085ce:	9105      	str	r1, [sp, #20]
 80085d0:	462b      	mov	r3, r5
 80085d2:	eb00 0e05 	add.w	lr, r0, r5
 80085d6:	210a      	movs	r1, #10
 80085d8:	4573      	cmp	r3, lr
 80085da:	d113      	bne.n	8008604 <_strtod_l+0x254>
 80085dc:	182b      	adds	r3, r5, r0
 80085de:	2b08      	cmp	r3, #8
 80085e0:	f105 0501 	add.w	r5, r5, #1
 80085e4:	4405      	add	r5, r0
 80085e6:	dc1c      	bgt.n	8008622 <_strtod_l+0x272>
 80085e8:	9907      	ldr	r1, [sp, #28]
 80085ea:	230a      	movs	r3, #10
 80085ec:	fb03 2301 	mla	r3, r3, r1, r2
 80085f0:	9307      	str	r3, [sp, #28]
 80085f2:	2300      	movs	r3, #0
 80085f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085f6:	1c51      	adds	r1, r2, #1
 80085f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80085fa:	7852      	ldrb	r2, [r2, #1]
 80085fc:	4618      	mov	r0, r3
 80085fe:	e7c9      	b.n	8008594 <_strtod_l+0x1e4>
 8008600:	4638      	mov	r0, r7
 8008602:	e7d2      	b.n	80085aa <_strtod_l+0x1fa>
 8008604:	2b08      	cmp	r3, #8
 8008606:	dc04      	bgt.n	8008612 <_strtod_l+0x262>
 8008608:	9e07      	ldr	r6, [sp, #28]
 800860a:	434e      	muls	r6, r1
 800860c:	9607      	str	r6, [sp, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	e7e2      	b.n	80085d8 <_strtod_l+0x228>
 8008612:	f103 0c01 	add.w	ip, r3, #1
 8008616:	f1bc 0f10 	cmp.w	ip, #16
 800861a:	bfd8      	it	le
 800861c:	fb01 f909 	mulle.w	r9, r1, r9
 8008620:	e7f5      	b.n	800860e <_strtod_l+0x25e>
 8008622:	2d10      	cmp	r5, #16
 8008624:	bfdc      	itt	le
 8008626:	230a      	movle	r3, #10
 8008628:	fb03 2909 	mlale	r9, r3, r9, r2
 800862c:	e7e1      	b.n	80085f2 <_strtod_l+0x242>
 800862e:	2300      	movs	r3, #0
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	2301      	movs	r3, #1
 8008634:	e77c      	b.n	8008530 <_strtod_l+0x180>
 8008636:	f04f 0c00 	mov.w	ip, #0
 800863a:	f108 0202 	add.w	r2, r8, #2
 800863e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008640:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008644:	e785      	b.n	8008552 <_strtod_l+0x1a2>
 8008646:	f04f 0c01 	mov.w	ip, #1
 800864a:	e7f6      	b.n	800863a <_strtod_l+0x28a>
 800864c:	0800c40c 	.word	0x0800c40c
 8008650:	0800c160 	.word	0x0800c160
 8008654:	7ff00000 	.word	0x7ff00000
 8008658:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800865a:	1c51      	adds	r1, r2, #1
 800865c:	9117      	str	r1, [sp, #92]	; 0x5c
 800865e:	7852      	ldrb	r2, [r2, #1]
 8008660:	2a30      	cmp	r2, #48	; 0x30
 8008662:	d0f9      	beq.n	8008658 <_strtod_l+0x2a8>
 8008664:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008668:	2908      	cmp	r1, #8
 800866a:	f63f af79 	bhi.w	8008560 <_strtod_l+0x1b0>
 800866e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008672:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008674:	9206      	str	r2, [sp, #24]
 8008676:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008678:	1c51      	adds	r1, r2, #1
 800867a:	9117      	str	r1, [sp, #92]	; 0x5c
 800867c:	7852      	ldrb	r2, [r2, #1]
 800867e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008682:	2e09      	cmp	r6, #9
 8008684:	d937      	bls.n	80086f6 <_strtod_l+0x346>
 8008686:	9e06      	ldr	r6, [sp, #24]
 8008688:	1b89      	subs	r1, r1, r6
 800868a:	2908      	cmp	r1, #8
 800868c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008690:	dc02      	bgt.n	8008698 <_strtod_l+0x2e8>
 8008692:	4576      	cmp	r6, lr
 8008694:	bfa8      	it	ge
 8008696:	4676      	movge	r6, lr
 8008698:	f1bc 0f00 	cmp.w	ip, #0
 800869c:	d000      	beq.n	80086a0 <_strtod_l+0x2f0>
 800869e:	4276      	negs	r6, r6
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	d14d      	bne.n	8008740 <_strtod_l+0x390>
 80086a4:	9904      	ldr	r1, [sp, #16]
 80086a6:	4301      	orrs	r1, r0
 80086a8:	f47f aec6 	bne.w	8008438 <_strtod_l+0x88>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f47f aee1 	bne.w	8008474 <_strtod_l+0xc4>
 80086b2:	2a69      	cmp	r2, #105	; 0x69
 80086b4:	d027      	beq.n	8008706 <_strtod_l+0x356>
 80086b6:	dc24      	bgt.n	8008702 <_strtod_l+0x352>
 80086b8:	2a49      	cmp	r2, #73	; 0x49
 80086ba:	d024      	beq.n	8008706 <_strtod_l+0x356>
 80086bc:	2a4e      	cmp	r2, #78	; 0x4e
 80086be:	f47f aed9 	bne.w	8008474 <_strtod_l+0xc4>
 80086c2:	499f      	ldr	r1, [pc, #636]	; (8008940 <_strtod_l+0x590>)
 80086c4:	a817      	add	r0, sp, #92	; 0x5c
 80086c6:	f002 f8b3 	bl	800a830 <__match>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f43f aed2 	beq.w	8008474 <_strtod_l+0xc4>
 80086d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b28      	cmp	r3, #40	; 0x28
 80086d6:	d12d      	bne.n	8008734 <_strtod_l+0x384>
 80086d8:	499a      	ldr	r1, [pc, #616]	; (8008944 <_strtod_l+0x594>)
 80086da:	aa1a      	add	r2, sp, #104	; 0x68
 80086dc:	a817      	add	r0, sp, #92	; 0x5c
 80086de:	f002 f8bb 	bl	800a858 <__hexnan>
 80086e2:	2805      	cmp	r0, #5
 80086e4:	d126      	bne.n	8008734 <_strtod_l+0x384>
 80086e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80086ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80086f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80086f4:	e6a0      	b.n	8008438 <_strtod_l+0x88>
 80086f6:	210a      	movs	r1, #10
 80086f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80086fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008700:	e7b9      	b.n	8008676 <_strtod_l+0x2c6>
 8008702:	2a6e      	cmp	r2, #110	; 0x6e
 8008704:	e7db      	b.n	80086be <_strtod_l+0x30e>
 8008706:	4990      	ldr	r1, [pc, #576]	; (8008948 <_strtod_l+0x598>)
 8008708:	a817      	add	r0, sp, #92	; 0x5c
 800870a:	f002 f891 	bl	800a830 <__match>
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f aeb0 	beq.w	8008474 <_strtod_l+0xc4>
 8008714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008716:	498d      	ldr	r1, [pc, #564]	; (800894c <_strtod_l+0x59c>)
 8008718:	3b01      	subs	r3, #1
 800871a:	a817      	add	r0, sp, #92	; 0x5c
 800871c:	9317      	str	r3, [sp, #92]	; 0x5c
 800871e:	f002 f887 	bl	800a830 <__match>
 8008722:	b910      	cbnz	r0, 800872a <_strtod_l+0x37a>
 8008724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008726:	3301      	adds	r3, #1
 8008728:	9317      	str	r3, [sp, #92]	; 0x5c
 800872a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800895c <_strtod_l+0x5ac>
 800872e:	f04f 0a00 	mov.w	sl, #0
 8008732:	e681      	b.n	8008438 <_strtod_l+0x88>
 8008734:	4886      	ldr	r0, [pc, #536]	; (8008950 <_strtod_l+0x5a0>)
 8008736:	f003 fa67 	bl	800bc08 <nan>
 800873a:	ec5b ab10 	vmov	sl, fp, d0
 800873e:	e67b      	b.n	8008438 <_strtod_l+0x88>
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	9807      	ldr	r0, [sp, #28]
 8008744:	1af3      	subs	r3, r6, r3
 8008746:	2f00      	cmp	r7, #0
 8008748:	bf08      	it	eq
 800874a:	462f      	moveq	r7, r5
 800874c:	2d10      	cmp	r5, #16
 800874e:	9306      	str	r3, [sp, #24]
 8008750:	46a8      	mov	r8, r5
 8008752:	bfa8      	it	ge
 8008754:	f04f 0810 	movge.w	r8, #16
 8008758:	f7f7 fee4 	bl	8000524 <__aeabi_ui2d>
 800875c:	2d09      	cmp	r5, #9
 800875e:	4682      	mov	sl, r0
 8008760:	468b      	mov	fp, r1
 8008762:	dd13      	ble.n	800878c <_strtod_l+0x3dc>
 8008764:	4b7b      	ldr	r3, [pc, #492]	; (8008954 <_strtod_l+0x5a4>)
 8008766:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800876a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800876e:	f7f7 ff53 	bl	8000618 <__aeabi_dmul>
 8008772:	4682      	mov	sl, r0
 8008774:	4648      	mov	r0, r9
 8008776:	468b      	mov	fp, r1
 8008778:	f7f7 fed4 	bl	8000524 <__aeabi_ui2d>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4650      	mov	r0, sl
 8008782:	4659      	mov	r1, fp
 8008784:	f7f7 fd92 	bl	80002ac <__adddf3>
 8008788:	4682      	mov	sl, r0
 800878a:	468b      	mov	fp, r1
 800878c:	2d0f      	cmp	r5, #15
 800878e:	dc38      	bgt.n	8008802 <_strtod_l+0x452>
 8008790:	9b06      	ldr	r3, [sp, #24]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f43f ae50 	beq.w	8008438 <_strtod_l+0x88>
 8008798:	dd24      	ble.n	80087e4 <_strtod_l+0x434>
 800879a:	2b16      	cmp	r3, #22
 800879c:	dc0b      	bgt.n	80087b6 <_strtod_l+0x406>
 800879e:	496d      	ldr	r1, [pc, #436]	; (8008954 <_strtod_l+0x5a4>)
 80087a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087a8:	4652      	mov	r2, sl
 80087aa:	465b      	mov	r3, fp
 80087ac:	f7f7 ff34 	bl	8000618 <__aeabi_dmul>
 80087b0:	4682      	mov	sl, r0
 80087b2:	468b      	mov	fp, r1
 80087b4:	e640      	b.n	8008438 <_strtod_l+0x88>
 80087b6:	9a06      	ldr	r2, [sp, #24]
 80087b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80087bc:	4293      	cmp	r3, r2
 80087be:	db20      	blt.n	8008802 <_strtod_l+0x452>
 80087c0:	4c64      	ldr	r4, [pc, #400]	; (8008954 <_strtod_l+0x5a4>)
 80087c2:	f1c5 050f 	rsb	r5, r5, #15
 80087c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087d2:	f7f7 ff21 	bl	8000618 <__aeabi_dmul>
 80087d6:	9b06      	ldr	r3, [sp, #24]
 80087d8:	1b5d      	subs	r5, r3, r5
 80087da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80087de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087e2:	e7e3      	b.n	80087ac <_strtod_l+0x3fc>
 80087e4:	9b06      	ldr	r3, [sp, #24]
 80087e6:	3316      	adds	r3, #22
 80087e8:	db0b      	blt.n	8008802 <_strtod_l+0x452>
 80087ea:	9b05      	ldr	r3, [sp, #20]
 80087ec:	1b9e      	subs	r6, r3, r6
 80087ee:	4b59      	ldr	r3, [pc, #356]	; (8008954 <_strtod_l+0x5a4>)
 80087f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80087f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7f8 f836 	bl	800086c <__aeabi_ddiv>
 8008800:	e7d6      	b.n	80087b0 <_strtod_l+0x400>
 8008802:	9b06      	ldr	r3, [sp, #24]
 8008804:	eba5 0808 	sub.w	r8, r5, r8
 8008808:	4498      	add	r8, r3
 800880a:	f1b8 0f00 	cmp.w	r8, #0
 800880e:	dd74      	ble.n	80088fa <_strtod_l+0x54a>
 8008810:	f018 030f 	ands.w	r3, r8, #15
 8008814:	d00a      	beq.n	800882c <_strtod_l+0x47c>
 8008816:	494f      	ldr	r1, [pc, #316]	; (8008954 <_strtod_l+0x5a4>)
 8008818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800881c:	4652      	mov	r2, sl
 800881e:	465b      	mov	r3, fp
 8008820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008824:	f7f7 fef8 	bl	8000618 <__aeabi_dmul>
 8008828:	4682      	mov	sl, r0
 800882a:	468b      	mov	fp, r1
 800882c:	f038 080f 	bics.w	r8, r8, #15
 8008830:	d04f      	beq.n	80088d2 <_strtod_l+0x522>
 8008832:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008836:	dd22      	ble.n	800887e <_strtod_l+0x4ce>
 8008838:	2500      	movs	r5, #0
 800883a:	462e      	mov	r6, r5
 800883c:	9507      	str	r5, [sp, #28]
 800883e:	9505      	str	r5, [sp, #20]
 8008840:	2322      	movs	r3, #34	; 0x22
 8008842:	f8df b118 	ldr.w	fp, [pc, #280]	; 800895c <_strtod_l+0x5ac>
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	f04f 0a00 	mov.w	sl, #0
 800884c:	9b07      	ldr	r3, [sp, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f43f adf2 	beq.w	8008438 <_strtod_l+0x88>
 8008854:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008856:	4620      	mov	r0, r4
 8008858:	f002 f960 	bl	800ab1c <_Bfree>
 800885c:	9905      	ldr	r1, [sp, #20]
 800885e:	4620      	mov	r0, r4
 8008860:	f002 f95c 	bl	800ab1c <_Bfree>
 8008864:	4631      	mov	r1, r6
 8008866:	4620      	mov	r0, r4
 8008868:	f002 f958 	bl	800ab1c <_Bfree>
 800886c:	9907      	ldr	r1, [sp, #28]
 800886e:	4620      	mov	r0, r4
 8008870:	f002 f954 	bl	800ab1c <_Bfree>
 8008874:	4629      	mov	r1, r5
 8008876:	4620      	mov	r0, r4
 8008878:	f002 f950 	bl	800ab1c <_Bfree>
 800887c:	e5dc      	b.n	8008438 <_strtod_l+0x88>
 800887e:	4b36      	ldr	r3, [pc, #216]	; (8008958 <_strtod_l+0x5a8>)
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	2300      	movs	r3, #0
 8008884:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	4699      	mov	r9, r3
 800888e:	f1b8 0f01 	cmp.w	r8, #1
 8008892:	dc21      	bgt.n	80088d8 <_strtod_l+0x528>
 8008894:	b10b      	cbz	r3, 800889a <_strtod_l+0x4ea>
 8008896:	4682      	mov	sl, r0
 8008898:	468b      	mov	fp, r1
 800889a:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <_strtod_l+0x5a8>)
 800889c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80088a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80088a4:	4652      	mov	r2, sl
 80088a6:	465b      	mov	r3, fp
 80088a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80088ac:	f7f7 feb4 	bl	8000618 <__aeabi_dmul>
 80088b0:	4b2a      	ldr	r3, [pc, #168]	; (800895c <_strtod_l+0x5ac>)
 80088b2:	460a      	mov	r2, r1
 80088b4:	400b      	ands	r3, r1
 80088b6:	492a      	ldr	r1, [pc, #168]	; (8008960 <_strtod_l+0x5b0>)
 80088b8:	428b      	cmp	r3, r1
 80088ba:	4682      	mov	sl, r0
 80088bc:	d8bc      	bhi.n	8008838 <_strtod_l+0x488>
 80088be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088c2:	428b      	cmp	r3, r1
 80088c4:	bf86      	itte	hi
 80088c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008964 <_strtod_l+0x5b4>
 80088ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80088ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80088d2:	2300      	movs	r3, #0
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	e084      	b.n	80089e2 <_strtod_l+0x632>
 80088d8:	f018 0f01 	tst.w	r8, #1
 80088dc:	d005      	beq.n	80088ea <_strtod_l+0x53a>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	f7f7 fe98 	bl	8000618 <__aeabi_dmul>
 80088e8:	2301      	movs	r3, #1
 80088ea:	9a04      	ldr	r2, [sp, #16]
 80088ec:	3208      	adds	r2, #8
 80088ee:	f109 0901 	add.w	r9, r9, #1
 80088f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088f6:	9204      	str	r2, [sp, #16]
 80088f8:	e7c9      	b.n	800888e <_strtod_l+0x4de>
 80088fa:	d0ea      	beq.n	80088d2 <_strtod_l+0x522>
 80088fc:	f1c8 0800 	rsb	r8, r8, #0
 8008900:	f018 020f 	ands.w	r2, r8, #15
 8008904:	d00a      	beq.n	800891c <_strtod_l+0x56c>
 8008906:	4b13      	ldr	r3, [pc, #76]	; (8008954 <_strtod_l+0x5a4>)
 8008908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890c:	4650      	mov	r0, sl
 800890e:	4659      	mov	r1, fp
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f7f7 ffaa 	bl	800086c <__aeabi_ddiv>
 8008918:	4682      	mov	sl, r0
 800891a:	468b      	mov	fp, r1
 800891c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008920:	d0d7      	beq.n	80088d2 <_strtod_l+0x522>
 8008922:	f1b8 0f1f 	cmp.w	r8, #31
 8008926:	dd1f      	ble.n	8008968 <_strtod_l+0x5b8>
 8008928:	2500      	movs	r5, #0
 800892a:	462e      	mov	r6, r5
 800892c:	9507      	str	r5, [sp, #28]
 800892e:	9505      	str	r5, [sp, #20]
 8008930:	2322      	movs	r3, #34	; 0x22
 8008932:	f04f 0a00 	mov.w	sl, #0
 8008936:	f04f 0b00 	mov.w	fp, #0
 800893a:	6023      	str	r3, [r4, #0]
 800893c:	e786      	b.n	800884c <_strtod_l+0x49c>
 800893e:	bf00      	nop
 8008940:	0800c131 	.word	0x0800c131
 8008944:	0800c174 	.word	0x0800c174
 8008948:	0800c129 	.word	0x0800c129
 800894c:	0800c2b4 	.word	0x0800c2b4
 8008950:	0800c5c8 	.word	0x0800c5c8
 8008954:	0800c4a8 	.word	0x0800c4a8
 8008958:	0800c480 	.word	0x0800c480
 800895c:	7ff00000 	.word	0x7ff00000
 8008960:	7ca00000 	.word	0x7ca00000
 8008964:	7fefffff 	.word	0x7fefffff
 8008968:	f018 0310 	ands.w	r3, r8, #16
 800896c:	bf18      	it	ne
 800896e:	236a      	movne	r3, #106	; 0x6a
 8008970:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008d20 <_strtod_l+0x970>
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	4650      	mov	r0, sl
 8008978:	4659      	mov	r1, fp
 800897a:	2300      	movs	r3, #0
 800897c:	f018 0f01 	tst.w	r8, #1
 8008980:	d004      	beq.n	800898c <_strtod_l+0x5dc>
 8008982:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008986:	f7f7 fe47 	bl	8000618 <__aeabi_dmul>
 800898a:	2301      	movs	r3, #1
 800898c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008990:	f109 0908 	add.w	r9, r9, #8
 8008994:	d1f2      	bne.n	800897c <_strtod_l+0x5cc>
 8008996:	b10b      	cbz	r3, 800899c <_strtod_l+0x5ec>
 8008998:	4682      	mov	sl, r0
 800899a:	468b      	mov	fp, r1
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	b1c3      	cbz	r3, 80089d2 <_strtod_l+0x622>
 80089a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80089a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	4659      	mov	r1, fp
 80089ac:	dd11      	ble.n	80089d2 <_strtod_l+0x622>
 80089ae:	2b1f      	cmp	r3, #31
 80089b0:	f340 8124 	ble.w	8008bfc <_strtod_l+0x84c>
 80089b4:	2b34      	cmp	r3, #52	; 0x34
 80089b6:	bfde      	ittt	le
 80089b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80089bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80089c0:	fa03 f202 	lslle.w	r2, r3, r2
 80089c4:	f04f 0a00 	mov.w	sl, #0
 80089c8:	bfcc      	ite	gt
 80089ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80089ce:	ea02 0b01 	andle.w	fp, r2, r1
 80089d2:	2200      	movs	r2, #0
 80089d4:	2300      	movs	r3, #0
 80089d6:	4650      	mov	r0, sl
 80089d8:	4659      	mov	r1, fp
 80089da:	f7f8 f885 	bl	8000ae8 <__aeabi_dcmpeq>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d1a2      	bne.n	8008928 <_strtod_l+0x578>
 80089e2:	9b07      	ldr	r3, [sp, #28]
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	9908      	ldr	r1, [sp, #32]
 80089e8:	462b      	mov	r3, r5
 80089ea:	463a      	mov	r2, r7
 80089ec:	4620      	mov	r0, r4
 80089ee:	f002 f8fd 	bl	800abec <__s2b>
 80089f2:	9007      	str	r0, [sp, #28]
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f43f af1f 	beq.w	8008838 <_strtod_l+0x488>
 80089fa:	9b05      	ldr	r3, [sp, #20]
 80089fc:	1b9e      	subs	r6, r3, r6
 80089fe:	9b06      	ldr	r3, [sp, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	bfb4      	ite	lt
 8008a04:	4633      	movlt	r3, r6
 8008a06:	2300      	movge	r3, #0
 8008a08:	930c      	str	r3, [sp, #48]	; 0x30
 8008a0a:	9b06      	ldr	r3, [sp, #24]
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a12:	9312      	str	r3, [sp, #72]	; 0x48
 8008a14:	462e      	mov	r6, r5
 8008a16:	9b07      	ldr	r3, [sp, #28]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	6859      	ldr	r1, [r3, #4]
 8008a1c:	f002 f83e 	bl	800aa9c <_Balloc>
 8008a20:	9005      	str	r0, [sp, #20]
 8008a22:	2800      	cmp	r0, #0
 8008a24:	f43f af0c 	beq.w	8008840 <_strtod_l+0x490>
 8008a28:	9b07      	ldr	r3, [sp, #28]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	3202      	adds	r2, #2
 8008a2e:	f103 010c 	add.w	r1, r3, #12
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	300c      	adds	r0, #12
 8008a36:	f7fe fd43 	bl	80074c0 <memcpy>
 8008a3a:	ec4b ab10 	vmov	d0, sl, fp
 8008a3e:	aa1a      	add	r2, sp, #104	; 0x68
 8008a40:	a919      	add	r1, sp, #100	; 0x64
 8008a42:	4620      	mov	r0, r4
 8008a44:	f002 fc18 	bl	800b278 <__d2b>
 8008a48:	ec4b ab18 	vmov	d8, sl, fp
 8008a4c:	9018      	str	r0, [sp, #96]	; 0x60
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f aef6 	beq.w	8008840 <_strtod_l+0x490>
 8008a54:	2101      	movs	r1, #1
 8008a56:	4620      	mov	r0, r4
 8008a58:	f002 f962 	bl	800ad20 <__i2b>
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f43f aeee 	beq.w	8008840 <_strtod_l+0x490>
 8008a64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a66:	9904      	ldr	r1, [sp, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	bfab      	itete	ge
 8008a6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008a6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008a70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008a72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008a76:	bfac      	ite	ge
 8008a78:	eb03 0902 	addge.w	r9, r3, r2
 8008a7c:	1ad7      	sublt	r7, r2, r3
 8008a7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a80:	eba3 0801 	sub.w	r8, r3, r1
 8008a84:	4490      	add	r8, r2
 8008a86:	4ba1      	ldr	r3, [pc, #644]	; (8008d0c <_strtod_l+0x95c>)
 8008a88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008a8c:	4598      	cmp	r8, r3
 8008a8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a92:	f280 80c7 	bge.w	8008c24 <_strtod_l+0x874>
 8008a96:	eba3 0308 	sub.w	r3, r3, r8
 8008a9a:	2b1f      	cmp	r3, #31
 8008a9c:	eba2 0203 	sub.w	r2, r2, r3
 8008aa0:	f04f 0101 	mov.w	r1, #1
 8008aa4:	f300 80b1 	bgt.w	8008c0a <_strtod_l+0x85a>
 8008aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008aac:	930d      	str	r3, [sp, #52]	; 0x34
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9308      	str	r3, [sp, #32]
 8008ab2:	eb09 0802 	add.w	r8, r9, r2
 8008ab6:	9b04      	ldr	r3, [sp, #16]
 8008ab8:	45c1      	cmp	r9, r8
 8008aba:	4417      	add	r7, r2
 8008abc:	441f      	add	r7, r3
 8008abe:	464b      	mov	r3, r9
 8008ac0:	bfa8      	it	ge
 8008ac2:	4643      	movge	r3, r8
 8008ac4:	42bb      	cmp	r3, r7
 8008ac6:	bfa8      	it	ge
 8008ac8:	463b      	movge	r3, r7
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfc2      	ittt	gt
 8008ace:	eba8 0803 	subgt.w	r8, r8, r3
 8008ad2:	1aff      	subgt	r7, r7, r3
 8008ad4:	eba9 0903 	subgt.w	r9, r9, r3
 8008ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dd17      	ble.n	8008b0e <_strtod_l+0x75e>
 8008ade:	4631      	mov	r1, r6
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f002 f9dc 	bl	800aea0 <__pow5mult>
 8008ae8:	4606      	mov	r6, r0
 8008aea:	2800      	cmp	r0, #0
 8008aec:	f43f aea8 	beq.w	8008840 <_strtod_l+0x490>
 8008af0:	4601      	mov	r1, r0
 8008af2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008af4:	4620      	mov	r0, r4
 8008af6:	f002 f929 	bl	800ad4c <__multiply>
 8008afa:	900b      	str	r0, [sp, #44]	; 0x2c
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f43f ae9f 	beq.w	8008840 <_strtod_l+0x490>
 8008b02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b04:	4620      	mov	r0, r4
 8008b06:	f002 f809 	bl	800ab1c <_Bfree>
 8008b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0c:	9318      	str	r3, [sp, #96]	; 0x60
 8008b0e:	f1b8 0f00 	cmp.w	r8, #0
 8008b12:	f300 808c 	bgt.w	8008c2e <_strtod_l+0x87e>
 8008b16:	9b06      	ldr	r3, [sp, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	dd08      	ble.n	8008b2e <_strtod_l+0x77e>
 8008b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b1e:	9905      	ldr	r1, [sp, #20]
 8008b20:	4620      	mov	r0, r4
 8008b22:	f002 f9bd 	bl	800aea0 <__pow5mult>
 8008b26:	9005      	str	r0, [sp, #20]
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f43f ae89 	beq.w	8008840 <_strtod_l+0x490>
 8008b2e:	2f00      	cmp	r7, #0
 8008b30:	dd08      	ble.n	8008b44 <_strtod_l+0x794>
 8008b32:	9905      	ldr	r1, [sp, #20]
 8008b34:	463a      	mov	r2, r7
 8008b36:	4620      	mov	r0, r4
 8008b38:	f002 fa0c 	bl	800af54 <__lshift>
 8008b3c:	9005      	str	r0, [sp, #20]
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f43f ae7e 	beq.w	8008840 <_strtod_l+0x490>
 8008b44:	f1b9 0f00 	cmp.w	r9, #0
 8008b48:	dd08      	ble.n	8008b5c <_strtod_l+0x7ac>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	464a      	mov	r2, r9
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f002 fa00 	bl	800af54 <__lshift>
 8008b54:	4606      	mov	r6, r0
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f43f ae72 	beq.w	8008840 <_strtod_l+0x490>
 8008b5c:	9a05      	ldr	r2, [sp, #20]
 8008b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b60:	4620      	mov	r0, r4
 8008b62:	f002 fa83 	bl	800b06c <__mdiff>
 8008b66:	4605      	mov	r5, r0
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	f43f ae69 	beq.w	8008840 <_strtod_l+0x490>
 8008b6e:	68c3      	ldr	r3, [r0, #12]
 8008b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b72:	2300      	movs	r3, #0
 8008b74:	60c3      	str	r3, [r0, #12]
 8008b76:	4631      	mov	r1, r6
 8008b78:	f002 fa5c 	bl	800b034 <__mcmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	da60      	bge.n	8008c42 <_strtod_l+0x892>
 8008b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b82:	ea53 030a 	orrs.w	r3, r3, sl
 8008b86:	f040 8082 	bne.w	8008c8e <_strtod_l+0x8de>
 8008b8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d17d      	bne.n	8008c8e <_strtod_l+0x8de>
 8008b92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b96:	0d1b      	lsrs	r3, r3, #20
 8008b98:	051b      	lsls	r3, r3, #20
 8008b9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b9e:	d976      	bls.n	8008c8e <_strtod_l+0x8de>
 8008ba0:	696b      	ldr	r3, [r5, #20]
 8008ba2:	b913      	cbnz	r3, 8008baa <_strtod_l+0x7fa>
 8008ba4:	692b      	ldr	r3, [r5, #16]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	dd71      	ble.n	8008c8e <_strtod_l+0x8de>
 8008baa:	4629      	mov	r1, r5
 8008bac:	2201      	movs	r2, #1
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f002 f9d0 	bl	800af54 <__lshift>
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	f002 fa3c 	bl	800b034 <__mcmp>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	dd66      	ble.n	8008c8e <_strtod_l+0x8de>
 8008bc0:	9904      	ldr	r1, [sp, #16]
 8008bc2:	4a53      	ldr	r2, [pc, #332]	; (8008d10 <_strtod_l+0x960>)
 8008bc4:	465b      	mov	r3, fp
 8008bc6:	2900      	cmp	r1, #0
 8008bc8:	f000 8081 	beq.w	8008cce <_strtod_l+0x91e>
 8008bcc:	ea02 010b 	and.w	r1, r2, fp
 8008bd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008bd4:	dc7b      	bgt.n	8008cce <_strtod_l+0x91e>
 8008bd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008bda:	f77f aea9 	ble.w	8008930 <_strtod_l+0x580>
 8008bde:	4b4d      	ldr	r3, [pc, #308]	; (8008d14 <_strtod_l+0x964>)
 8008be0:	4650      	mov	r0, sl
 8008be2:	4659      	mov	r1, fp
 8008be4:	2200      	movs	r2, #0
 8008be6:	f7f7 fd17 	bl	8000618 <__aeabi_dmul>
 8008bea:	460b      	mov	r3, r1
 8008bec:	4303      	orrs	r3, r0
 8008bee:	bf08      	it	eq
 8008bf0:	2322      	moveq	r3, #34	; 0x22
 8008bf2:	4682      	mov	sl, r0
 8008bf4:	468b      	mov	fp, r1
 8008bf6:	bf08      	it	eq
 8008bf8:	6023      	streq	r3, [r4, #0]
 8008bfa:	e62b      	b.n	8008854 <_strtod_l+0x4a4>
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	ea03 0a0a 	and.w	sl, r3, sl
 8008c08:	e6e3      	b.n	80089d2 <_strtod_l+0x622>
 8008c0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008c0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008c12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008c16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008c1a:	fa01 f308 	lsl.w	r3, r1, r8
 8008c1e:	9308      	str	r3, [sp, #32]
 8008c20:	910d      	str	r1, [sp, #52]	; 0x34
 8008c22:	e746      	b.n	8008ab2 <_strtod_l+0x702>
 8008c24:	2300      	movs	r3, #0
 8008c26:	9308      	str	r3, [sp, #32]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c2c:	e741      	b.n	8008ab2 <_strtod_l+0x702>
 8008c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c30:	4642      	mov	r2, r8
 8008c32:	4620      	mov	r0, r4
 8008c34:	f002 f98e 	bl	800af54 <__lshift>
 8008c38:	9018      	str	r0, [sp, #96]	; 0x60
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f47f af6b 	bne.w	8008b16 <_strtod_l+0x766>
 8008c40:	e5fe      	b.n	8008840 <_strtod_l+0x490>
 8008c42:	465f      	mov	r7, fp
 8008c44:	d16e      	bne.n	8008d24 <_strtod_l+0x974>
 8008c46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c4c:	b342      	cbz	r2, 8008ca0 <_strtod_l+0x8f0>
 8008c4e:	4a32      	ldr	r2, [pc, #200]	; (8008d18 <_strtod_l+0x968>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d128      	bne.n	8008ca6 <_strtod_l+0x8f6>
 8008c54:	9b04      	ldr	r3, [sp, #16]
 8008c56:	4651      	mov	r1, sl
 8008c58:	b1eb      	cbz	r3, 8008c96 <_strtod_l+0x8e6>
 8008c5a:	4b2d      	ldr	r3, [pc, #180]	; (8008d10 <_strtod_l+0x960>)
 8008c5c:	403b      	ands	r3, r7
 8008c5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c66:	d819      	bhi.n	8008c9c <_strtod_l+0x8ec>
 8008c68:	0d1b      	lsrs	r3, r3, #20
 8008c6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	4299      	cmp	r1, r3
 8008c74:	d117      	bne.n	8008ca6 <_strtod_l+0x8f6>
 8008c76:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <_strtod_l+0x96c>)
 8008c78:	429f      	cmp	r7, r3
 8008c7a:	d102      	bne.n	8008c82 <_strtod_l+0x8d2>
 8008c7c:	3101      	adds	r1, #1
 8008c7e:	f43f addf 	beq.w	8008840 <_strtod_l+0x490>
 8008c82:	4b23      	ldr	r3, [pc, #140]	; (8008d10 <_strtod_l+0x960>)
 8008c84:	403b      	ands	r3, r7
 8008c86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008c8a:	f04f 0a00 	mov.w	sl, #0
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1a4      	bne.n	8008bde <_strtod_l+0x82e>
 8008c94:	e5de      	b.n	8008854 <_strtod_l+0x4a4>
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c9a:	e7ea      	b.n	8008c72 <_strtod_l+0x8c2>
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	e7e8      	b.n	8008c72 <_strtod_l+0x8c2>
 8008ca0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ca4:	d08c      	beq.n	8008bc0 <_strtod_l+0x810>
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	b1db      	cbz	r3, 8008ce2 <_strtod_l+0x932>
 8008caa:	423b      	tst	r3, r7
 8008cac:	d0ef      	beq.n	8008c8e <_strtod_l+0x8de>
 8008cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cb0:	9a04      	ldr	r2, [sp, #16]
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	b1c3      	cbz	r3, 8008cea <_strtod_l+0x93a>
 8008cb8:	f7ff fb5c 	bl	8008374 <sulp>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	ec51 0b18 	vmov	r0, r1, d8
 8008cc4:	f7f7 faf2 	bl	80002ac <__adddf3>
 8008cc8:	4682      	mov	sl, r0
 8008cca:	468b      	mov	fp, r1
 8008ccc:	e7df      	b.n	8008c8e <_strtod_l+0x8de>
 8008cce:	4013      	ands	r3, r2
 8008cd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008cd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008cd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cdc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008ce0:	e7d5      	b.n	8008c8e <_strtod_l+0x8de>
 8008ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ce4:	ea13 0f0a 	tst.w	r3, sl
 8008ce8:	e7e0      	b.n	8008cac <_strtod_l+0x8fc>
 8008cea:	f7ff fb43 	bl	8008374 <sulp>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	ec51 0b18 	vmov	r0, r1, d8
 8008cf6:	f7f7 fad7 	bl	80002a8 <__aeabi_dsub>
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4682      	mov	sl, r0
 8008d00:	468b      	mov	fp, r1
 8008d02:	f7f7 fef1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0c1      	beq.n	8008c8e <_strtod_l+0x8de>
 8008d0a:	e611      	b.n	8008930 <_strtod_l+0x580>
 8008d0c:	fffffc02 	.word	0xfffffc02
 8008d10:	7ff00000 	.word	0x7ff00000
 8008d14:	39500000 	.word	0x39500000
 8008d18:	000fffff 	.word	0x000fffff
 8008d1c:	7fefffff 	.word	0x7fefffff
 8008d20:	0800c188 	.word	0x0800c188
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	f002 fb02 	bl	800b330 <__ratio>
 8008d2c:	ec59 8b10 	vmov	r8, r9, d0
 8008d30:	ee10 0a10 	vmov	r0, s0
 8008d34:	2200      	movs	r2, #0
 8008d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	f7f7 fee8 	bl	8000b10 <__aeabi_dcmple>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d07a      	beq.n	8008e3a <_strtod_l+0xa8a>
 8008d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d04a      	beq.n	8008de0 <_strtod_l+0xa30>
 8008d4a:	4b95      	ldr	r3, [pc, #596]	; (8008fa0 <_strtod_l+0xbf0>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008fa0 <_strtod_l+0xbf0>
 8008d56:	f04f 0800 	mov.w	r8, #0
 8008d5a:	4b92      	ldr	r3, [pc, #584]	; (8008fa4 <_strtod_l+0xbf4>)
 8008d5c:	403b      	ands	r3, r7
 8008d5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d62:	4b91      	ldr	r3, [pc, #580]	; (8008fa8 <_strtod_l+0xbf8>)
 8008d64:	429a      	cmp	r2, r3
 8008d66:	f040 80b0 	bne.w	8008eca <_strtod_l+0xb1a>
 8008d6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008d72:	ec4b ab10 	vmov	d0, sl, fp
 8008d76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d7a:	f002 fa01 	bl	800b180 <__ulp>
 8008d7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d82:	ec53 2b10 	vmov	r2, r3, d0
 8008d86:	f7f7 fc47 	bl	8000618 <__aeabi_dmul>
 8008d8a:	4652      	mov	r2, sl
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	f7f7 fa8d 	bl	80002ac <__adddf3>
 8008d92:	460b      	mov	r3, r1
 8008d94:	4983      	ldr	r1, [pc, #524]	; (8008fa4 <_strtod_l+0xbf4>)
 8008d96:	4a85      	ldr	r2, [pc, #532]	; (8008fac <_strtod_l+0xbfc>)
 8008d98:	4019      	ands	r1, r3
 8008d9a:	4291      	cmp	r1, r2
 8008d9c:	4682      	mov	sl, r0
 8008d9e:	d960      	bls.n	8008e62 <_strtod_l+0xab2>
 8008da0:	ee18 3a90 	vmov	r3, s17
 8008da4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d104      	bne.n	8008db6 <_strtod_l+0xa06>
 8008dac:	ee18 3a10 	vmov	r3, s16
 8008db0:	3301      	adds	r3, #1
 8008db2:	f43f ad45 	beq.w	8008840 <_strtod_l+0x490>
 8008db6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008fb8 <_strtod_l+0xc08>
 8008dba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f001 feab 	bl	800ab1c <_Bfree>
 8008dc6:	9905      	ldr	r1, [sp, #20]
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f001 fea7 	bl	800ab1c <_Bfree>
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f001 fea3 	bl	800ab1c <_Bfree>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f001 fe9f 	bl	800ab1c <_Bfree>
 8008dde:	e61a      	b.n	8008a16 <_strtod_l+0x666>
 8008de0:	f1ba 0f00 	cmp.w	sl, #0
 8008de4:	d11b      	bne.n	8008e1e <_strtod_l+0xa6e>
 8008de6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008dea:	b9f3      	cbnz	r3, 8008e2a <_strtod_l+0xa7a>
 8008dec:	4b6c      	ldr	r3, [pc, #432]	; (8008fa0 <_strtod_l+0xbf0>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	4640      	mov	r0, r8
 8008df2:	4649      	mov	r1, r9
 8008df4:	f7f7 fe82 	bl	8000afc <__aeabi_dcmplt>
 8008df8:	b9d0      	cbnz	r0, 8008e30 <_strtod_l+0xa80>
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	4b6c      	ldr	r3, [pc, #432]	; (8008fb0 <_strtod_l+0xc00>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	f7f7 fc09 	bl	8000618 <__aeabi_dmul>
 8008e06:	4680      	mov	r8, r0
 8008e08:	4689      	mov	r9, r1
 8008e0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008e12:	9315      	str	r3, [sp, #84]	; 0x54
 8008e14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008e18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e1c:	e79d      	b.n	8008d5a <_strtod_l+0x9aa>
 8008e1e:	f1ba 0f01 	cmp.w	sl, #1
 8008e22:	d102      	bne.n	8008e2a <_strtod_l+0xa7a>
 8008e24:	2f00      	cmp	r7, #0
 8008e26:	f43f ad83 	beq.w	8008930 <_strtod_l+0x580>
 8008e2a:	4b62      	ldr	r3, [pc, #392]	; (8008fb4 <_strtod_l+0xc04>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	e78e      	b.n	8008d4e <_strtod_l+0x99e>
 8008e30:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008fb0 <_strtod_l+0xc00>
 8008e34:	f04f 0800 	mov.w	r8, #0
 8008e38:	e7e7      	b.n	8008e0a <_strtod_l+0xa5a>
 8008e3a:	4b5d      	ldr	r3, [pc, #372]	; (8008fb0 <_strtod_l+0xc00>)
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4649      	mov	r1, r9
 8008e40:	2200      	movs	r2, #0
 8008e42:	f7f7 fbe9 	bl	8000618 <__aeabi_dmul>
 8008e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e48:	4680      	mov	r8, r0
 8008e4a:	4689      	mov	r9, r1
 8008e4c:	b933      	cbnz	r3, 8008e5c <_strtod_l+0xaac>
 8008e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e52:	900e      	str	r0, [sp, #56]	; 0x38
 8008e54:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008e5a:	e7dd      	b.n	8008e18 <_strtod_l+0xa68>
 8008e5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008e60:	e7f9      	b.n	8008e56 <_strtod_l+0xaa6>
 8008e62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1a8      	bne.n	8008dbe <_strtod_l+0xa0e>
 8008e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e72:	0d1b      	lsrs	r3, r3, #20
 8008e74:	051b      	lsls	r3, r3, #20
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d1a1      	bne.n	8008dbe <_strtod_l+0xa0e>
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f7f7 ff2b 	bl	8000cd8 <__aeabi_d2lz>
 8008e82:	f7f7 fb9b 	bl	80005bc <__aeabi_l2d>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	f7f7 fa0b 	bl	80002a8 <__aeabi_dsub>
 8008e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e98:	ea43 030a 	orr.w	r3, r3, sl
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	d055      	beq.n	8008f50 <_strtod_l+0xba0>
 8008ea4:	a336      	add	r3, pc, #216	; (adr r3, 8008f80 <_strtod_l+0xbd0>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7f7 fe27 	bl	8000afc <__aeabi_dcmplt>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f47f acd0 	bne.w	8008854 <_strtod_l+0x4a4>
 8008eb4:	a334      	add	r3, pc, #208	; (adr r3, 8008f88 <_strtod_l+0xbd8>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	f7f7 fe3b 	bl	8000b38 <__aeabi_dcmpgt>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f43f af7b 	beq.w	8008dbe <_strtod_l+0xa0e>
 8008ec8:	e4c4      	b.n	8008854 <_strtod_l+0x4a4>
 8008eca:	9b04      	ldr	r3, [sp, #16]
 8008ecc:	b333      	cbz	r3, 8008f1c <_strtod_l+0xb6c>
 8008ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ed0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ed4:	d822      	bhi.n	8008f1c <_strtod_l+0xb6c>
 8008ed6:	a32e      	add	r3, pc, #184	; (adr r3, 8008f90 <_strtod_l+0xbe0>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	4640      	mov	r0, r8
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 fe16 	bl	8000b10 <__aeabi_dcmple>
 8008ee4:	b1a0      	cbz	r0, 8008f10 <_strtod_l+0xb60>
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4640      	mov	r0, r8
 8008eea:	f7f7 fe6d 	bl	8000bc8 <__aeabi_d2uiz>
 8008eee:	2801      	cmp	r0, #1
 8008ef0:	bf38      	it	cc
 8008ef2:	2001      	movcc	r0, #1
 8008ef4:	f7f7 fb16 	bl	8000524 <__aeabi_ui2d>
 8008ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efa:	4680      	mov	r8, r0
 8008efc:	4689      	mov	r9, r1
 8008efe:	bb23      	cbnz	r3, 8008f4a <_strtod_l+0xb9a>
 8008f00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f04:	9010      	str	r0, [sp, #64]	; 0x40
 8008f06:	9311      	str	r3, [sp, #68]	; 0x44
 8008f08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f14:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f20:	eeb0 0a48 	vmov.f32	s0, s16
 8008f24:	eef0 0a68 	vmov.f32	s1, s17
 8008f28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f2c:	f002 f928 	bl	800b180 <__ulp>
 8008f30:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f34:	ec53 2b10 	vmov	r2, r3, d0
 8008f38:	f7f7 fb6e 	bl	8000618 <__aeabi_dmul>
 8008f3c:	ec53 2b18 	vmov	r2, r3, d8
 8008f40:	f7f7 f9b4 	bl	80002ac <__adddf3>
 8008f44:	4682      	mov	sl, r0
 8008f46:	468b      	mov	fp, r1
 8008f48:	e78d      	b.n	8008e66 <_strtod_l+0xab6>
 8008f4a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008f4e:	e7db      	b.n	8008f08 <_strtod_l+0xb58>
 8008f50:	a311      	add	r3, pc, #68	; (adr r3, 8008f98 <_strtod_l+0xbe8>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 fdd1 	bl	8000afc <__aeabi_dcmplt>
 8008f5a:	e7b2      	b.n	8008ec2 <_strtod_l+0xb12>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	f7ff ba6b 	b.w	8008440 <_strtod_l+0x90>
 8008f6a:	2a65      	cmp	r2, #101	; 0x65
 8008f6c:	f43f ab5f 	beq.w	800862e <_strtod_l+0x27e>
 8008f70:	2a45      	cmp	r2, #69	; 0x45
 8008f72:	f43f ab5c 	beq.w	800862e <_strtod_l+0x27e>
 8008f76:	2301      	movs	r3, #1
 8008f78:	f7ff bb94 	b.w	80086a4 <_strtod_l+0x2f4>
 8008f7c:	f3af 8000 	nop.w
 8008f80:	94a03595 	.word	0x94a03595
 8008f84:	3fdfffff 	.word	0x3fdfffff
 8008f88:	35afe535 	.word	0x35afe535
 8008f8c:	3fe00000 	.word	0x3fe00000
 8008f90:	ffc00000 	.word	0xffc00000
 8008f94:	41dfffff 	.word	0x41dfffff
 8008f98:	94a03595 	.word	0x94a03595
 8008f9c:	3fcfffff 	.word	0x3fcfffff
 8008fa0:	3ff00000 	.word	0x3ff00000
 8008fa4:	7ff00000 	.word	0x7ff00000
 8008fa8:	7fe00000 	.word	0x7fe00000
 8008fac:	7c9fffff 	.word	0x7c9fffff
 8008fb0:	3fe00000 	.word	0x3fe00000
 8008fb4:	bff00000 	.word	0xbff00000
 8008fb8:	7fefffff 	.word	0x7fefffff

08008fbc <_strtod_r>:
 8008fbc:	4b01      	ldr	r3, [pc, #4]	; (8008fc4 <_strtod_r+0x8>)
 8008fbe:	f7ff b9f7 	b.w	80083b0 <_strtod_l>
 8008fc2:	bf00      	nop
 8008fc4:	20000088 	.word	0x20000088

08008fc8 <_strtol_l.constprop.0>:
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fce:	d001      	beq.n	8008fd4 <_strtol_l.constprop.0+0xc>
 8008fd0:	2b24      	cmp	r3, #36	; 0x24
 8008fd2:	d906      	bls.n	8008fe2 <_strtol_l.constprop.0+0x1a>
 8008fd4:	f7fe fa4a 	bl	800746c <__errno>
 8008fd8:	2316      	movs	r3, #22
 8008fda:	6003      	str	r3, [r0, #0]
 8008fdc:	2000      	movs	r0, #0
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80090c8 <_strtol_l.constprop.0+0x100>
 8008fe6:	460d      	mov	r5, r1
 8008fe8:	462e      	mov	r6, r5
 8008fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008ff2:	f017 0708 	ands.w	r7, r7, #8
 8008ff6:	d1f7      	bne.n	8008fe8 <_strtol_l.constprop.0+0x20>
 8008ff8:	2c2d      	cmp	r4, #45	; 0x2d
 8008ffa:	d132      	bne.n	8009062 <_strtol_l.constprop.0+0x9a>
 8008ffc:	782c      	ldrb	r4, [r5, #0]
 8008ffe:	2701      	movs	r7, #1
 8009000:	1cb5      	adds	r5, r6, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d05b      	beq.n	80090be <_strtol_l.constprop.0+0xf6>
 8009006:	2b10      	cmp	r3, #16
 8009008:	d109      	bne.n	800901e <_strtol_l.constprop.0+0x56>
 800900a:	2c30      	cmp	r4, #48	; 0x30
 800900c:	d107      	bne.n	800901e <_strtol_l.constprop.0+0x56>
 800900e:	782c      	ldrb	r4, [r5, #0]
 8009010:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009014:	2c58      	cmp	r4, #88	; 0x58
 8009016:	d14d      	bne.n	80090b4 <_strtol_l.constprop.0+0xec>
 8009018:	786c      	ldrb	r4, [r5, #1]
 800901a:	2310      	movs	r3, #16
 800901c:	3502      	adds	r5, #2
 800901e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009022:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009026:	f04f 0c00 	mov.w	ip, #0
 800902a:	fbb8 f9f3 	udiv	r9, r8, r3
 800902e:	4666      	mov	r6, ip
 8009030:	fb03 8a19 	mls	sl, r3, r9, r8
 8009034:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009038:	f1be 0f09 	cmp.w	lr, #9
 800903c:	d816      	bhi.n	800906c <_strtol_l.constprop.0+0xa4>
 800903e:	4674      	mov	r4, lr
 8009040:	42a3      	cmp	r3, r4
 8009042:	dd24      	ble.n	800908e <_strtol_l.constprop.0+0xc6>
 8009044:	f1bc 0f00 	cmp.w	ip, #0
 8009048:	db1e      	blt.n	8009088 <_strtol_l.constprop.0+0xc0>
 800904a:	45b1      	cmp	r9, r6
 800904c:	d31c      	bcc.n	8009088 <_strtol_l.constprop.0+0xc0>
 800904e:	d101      	bne.n	8009054 <_strtol_l.constprop.0+0x8c>
 8009050:	45a2      	cmp	sl, r4
 8009052:	db19      	blt.n	8009088 <_strtol_l.constprop.0+0xc0>
 8009054:	fb06 4603 	mla	r6, r6, r3, r4
 8009058:	f04f 0c01 	mov.w	ip, #1
 800905c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009060:	e7e8      	b.n	8009034 <_strtol_l.constprop.0+0x6c>
 8009062:	2c2b      	cmp	r4, #43	; 0x2b
 8009064:	bf04      	itt	eq
 8009066:	782c      	ldrbeq	r4, [r5, #0]
 8009068:	1cb5      	addeq	r5, r6, #2
 800906a:	e7ca      	b.n	8009002 <_strtol_l.constprop.0+0x3a>
 800906c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009070:	f1be 0f19 	cmp.w	lr, #25
 8009074:	d801      	bhi.n	800907a <_strtol_l.constprop.0+0xb2>
 8009076:	3c37      	subs	r4, #55	; 0x37
 8009078:	e7e2      	b.n	8009040 <_strtol_l.constprop.0+0x78>
 800907a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800907e:	f1be 0f19 	cmp.w	lr, #25
 8009082:	d804      	bhi.n	800908e <_strtol_l.constprop.0+0xc6>
 8009084:	3c57      	subs	r4, #87	; 0x57
 8009086:	e7db      	b.n	8009040 <_strtol_l.constprop.0+0x78>
 8009088:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800908c:	e7e6      	b.n	800905c <_strtol_l.constprop.0+0x94>
 800908e:	f1bc 0f00 	cmp.w	ip, #0
 8009092:	da05      	bge.n	80090a0 <_strtol_l.constprop.0+0xd8>
 8009094:	2322      	movs	r3, #34	; 0x22
 8009096:	6003      	str	r3, [r0, #0]
 8009098:	4646      	mov	r6, r8
 800909a:	b942      	cbnz	r2, 80090ae <_strtol_l.constprop.0+0xe6>
 800909c:	4630      	mov	r0, r6
 800909e:	e79e      	b.n	8008fde <_strtol_l.constprop.0+0x16>
 80090a0:	b107      	cbz	r7, 80090a4 <_strtol_l.constprop.0+0xdc>
 80090a2:	4276      	negs	r6, r6
 80090a4:	2a00      	cmp	r2, #0
 80090a6:	d0f9      	beq.n	800909c <_strtol_l.constprop.0+0xd4>
 80090a8:	f1bc 0f00 	cmp.w	ip, #0
 80090ac:	d000      	beq.n	80090b0 <_strtol_l.constprop.0+0xe8>
 80090ae:	1e69      	subs	r1, r5, #1
 80090b0:	6011      	str	r1, [r2, #0]
 80090b2:	e7f3      	b.n	800909c <_strtol_l.constprop.0+0xd4>
 80090b4:	2430      	movs	r4, #48	; 0x30
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1b1      	bne.n	800901e <_strtol_l.constprop.0+0x56>
 80090ba:	2308      	movs	r3, #8
 80090bc:	e7af      	b.n	800901e <_strtol_l.constprop.0+0x56>
 80090be:	2c30      	cmp	r4, #48	; 0x30
 80090c0:	d0a5      	beq.n	800900e <_strtol_l.constprop.0+0x46>
 80090c2:	230a      	movs	r3, #10
 80090c4:	e7ab      	b.n	800901e <_strtol_l.constprop.0+0x56>
 80090c6:	bf00      	nop
 80090c8:	0800c1b1 	.word	0x0800c1b1

080090cc <_strtol_r>:
 80090cc:	f7ff bf7c 	b.w	8008fc8 <_strtol_l.constprop.0>

080090d0 <__swbuf_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	4605      	mov	r5, r0
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x12>
 80090da:	6983      	ldr	r3, [r0, #24]
 80090dc:	b90b      	cbnz	r3, 80090e2 <__swbuf_r+0x12>
 80090de:	f001 f84b 	bl	800a178 <__sinit>
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <__swbuf_r+0x98>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d12b      	bne.n	8009140 <__swbuf_r+0x70>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	071a      	lsls	r2, r3, #28
 80090f2:	d52f      	bpl.n	8009154 <__swbuf_r+0x84>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b36b      	cbz	r3, 8009154 <__swbuf_r+0x84>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc04      	bgt.n	8009112 <__swbuf_r+0x42>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 ffa0 	bl	800a050 <_fflush_r>
 8009110:	bb30      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	701e      	strb	r6, [r3, #0]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	3001      	adds	r0, #1
 8009124:	4283      	cmp	r3, r0
 8009126:	d004      	beq.n	8009132 <__swbuf_r+0x62>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	07db      	lsls	r3, r3, #31
 800912c:	d506      	bpl.n	800913c <__swbuf_r+0x6c>
 800912e:	2e0a      	cmp	r6, #10
 8009130:	d104      	bne.n	800913c <__swbuf_r+0x6c>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 ff8b 	bl	800a050 <_fflush_r>
 800913a:	b988      	cbnz	r0, 8009160 <__swbuf_r+0x90>
 800913c:	4638      	mov	r0, r7
 800913e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <__swbuf_r+0x9c>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d101      	bne.n	800914a <__swbuf_r+0x7a>
 8009146:	68ac      	ldr	r4, [r5, #8]
 8009148:	e7cf      	b.n	80090ea <__swbuf_r+0x1a>
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <__swbuf_r+0xa0>)
 800914c:	429c      	cmp	r4, r3
 800914e:	bf08      	it	eq
 8009150:	68ec      	ldreq	r4, [r5, #12]
 8009152:	e7ca      	b.n	80090ea <__swbuf_r+0x1a>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f80c 	bl	8009174 <__swsetup_r>
 800915c:	2800      	cmp	r0, #0
 800915e:	d0cb      	beq.n	80090f8 <__swbuf_r+0x28>
 8009160:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009164:	e7ea      	b.n	800913c <__swbuf_r+0x6c>
 8009166:	bf00      	nop
 8009168:	0800c364 	.word	0x0800c364
 800916c:	0800c384 	.word	0x0800c384
 8009170:	0800c344 	.word	0x0800c344

08009174 <__swsetup_r>:
 8009174:	4b32      	ldr	r3, [pc, #200]	; (8009240 <__swsetup_r+0xcc>)
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	681d      	ldr	r5, [r3, #0]
 800917a:	4606      	mov	r6, r0
 800917c:	460c      	mov	r4, r1
 800917e:	b125      	cbz	r5, 800918a <__swsetup_r+0x16>
 8009180:	69ab      	ldr	r3, [r5, #24]
 8009182:	b913      	cbnz	r3, 800918a <__swsetup_r+0x16>
 8009184:	4628      	mov	r0, r5
 8009186:	f000 fff7 	bl	800a178 <__sinit>
 800918a:	4b2e      	ldr	r3, [pc, #184]	; (8009244 <__swsetup_r+0xd0>)
 800918c:	429c      	cmp	r4, r3
 800918e:	d10f      	bne.n	80091b0 <__swsetup_r+0x3c>
 8009190:	686c      	ldr	r4, [r5, #4]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009198:	0719      	lsls	r1, r3, #28
 800919a:	d42c      	bmi.n	80091f6 <__swsetup_r+0x82>
 800919c:	06dd      	lsls	r5, r3, #27
 800919e:	d411      	bmi.n	80091c4 <__swsetup_r+0x50>
 80091a0:	2309      	movs	r3, #9
 80091a2:	6033      	str	r3, [r6, #0]
 80091a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ae:	e03e      	b.n	800922e <__swsetup_r+0xba>
 80091b0:	4b25      	ldr	r3, [pc, #148]	; (8009248 <__swsetup_r+0xd4>)
 80091b2:	429c      	cmp	r4, r3
 80091b4:	d101      	bne.n	80091ba <__swsetup_r+0x46>
 80091b6:	68ac      	ldr	r4, [r5, #8]
 80091b8:	e7eb      	b.n	8009192 <__swsetup_r+0x1e>
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <__swsetup_r+0xd8>)
 80091bc:	429c      	cmp	r4, r3
 80091be:	bf08      	it	eq
 80091c0:	68ec      	ldreq	r4, [r5, #12]
 80091c2:	e7e6      	b.n	8009192 <__swsetup_r+0x1e>
 80091c4:	0758      	lsls	r0, r3, #29
 80091c6:	d512      	bpl.n	80091ee <__swsetup_r+0x7a>
 80091c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ca:	b141      	cbz	r1, 80091de <__swsetup_r+0x6a>
 80091cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d0:	4299      	cmp	r1, r3
 80091d2:	d002      	beq.n	80091da <__swsetup_r+0x66>
 80091d4:	4630      	mov	r0, r6
 80091d6:	f002 f939 	bl	800b44c <_free_r>
 80091da:	2300      	movs	r3, #0
 80091dc:	6363      	str	r3, [r4, #52]	; 0x34
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091e4:	81a3      	strh	r3, [r4, #12]
 80091e6:	2300      	movs	r3, #0
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f043 0308 	orr.w	r3, r3, #8
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	6923      	ldr	r3, [r4, #16]
 80091f8:	b94b      	cbnz	r3, 800920e <__swsetup_r+0x9a>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009204:	d003      	beq.n	800920e <__swsetup_r+0x9a>
 8009206:	4621      	mov	r1, r4
 8009208:	4630      	mov	r0, r6
 800920a:	f001 fbed 	bl	800a9e8 <__smakebuf_r>
 800920e:	89a0      	ldrh	r0, [r4, #12]
 8009210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009214:	f010 0301 	ands.w	r3, r0, #1
 8009218:	d00a      	beq.n	8009230 <__swsetup_r+0xbc>
 800921a:	2300      	movs	r3, #0
 800921c:	60a3      	str	r3, [r4, #8]
 800921e:	6963      	ldr	r3, [r4, #20]
 8009220:	425b      	negs	r3, r3
 8009222:	61a3      	str	r3, [r4, #24]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	b943      	cbnz	r3, 800923a <__swsetup_r+0xc6>
 8009228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800922c:	d1ba      	bne.n	80091a4 <__swsetup_r+0x30>
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	0781      	lsls	r1, r0, #30
 8009232:	bf58      	it	pl
 8009234:	6963      	ldrpl	r3, [r4, #20]
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	e7f4      	b.n	8009224 <__swsetup_r+0xb0>
 800923a:	2000      	movs	r0, #0
 800923c:	e7f7      	b.n	800922e <__swsetup_r+0xba>
 800923e:	bf00      	nop
 8009240:	20000020 	.word	0x20000020
 8009244:	0800c364 	.word	0x0800c364
 8009248:	0800c384 	.word	0x0800c384
 800924c:	0800c344 	.word	0x0800c344

08009250 <quorem>:
 8009250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	6903      	ldr	r3, [r0, #16]
 8009256:	690c      	ldr	r4, [r1, #16]
 8009258:	42a3      	cmp	r3, r4
 800925a:	4607      	mov	r7, r0
 800925c:	f2c0 8081 	blt.w	8009362 <quorem+0x112>
 8009260:	3c01      	subs	r4, #1
 8009262:	f101 0814 	add.w	r8, r1, #20
 8009266:	f100 0514 	add.w	r5, r0, #20
 800926a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009278:	3301      	adds	r3, #1
 800927a:	429a      	cmp	r2, r3
 800927c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009280:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009284:	fbb2 f6f3 	udiv	r6, r2, r3
 8009288:	d331      	bcc.n	80092ee <quorem+0x9e>
 800928a:	f04f 0e00 	mov.w	lr, #0
 800928e:	4640      	mov	r0, r8
 8009290:	46ac      	mov	ip, r5
 8009292:	46f2      	mov	sl, lr
 8009294:	f850 2b04 	ldr.w	r2, [r0], #4
 8009298:	b293      	uxth	r3, r2
 800929a:	fb06 e303 	mla	r3, r6, r3, lr
 800929e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	ebaa 0303 	sub.w	r3, sl, r3
 80092a8:	f8dc a000 	ldr.w	sl, [ip]
 80092ac:	0c12      	lsrs	r2, r2, #16
 80092ae:	fa13 f38a 	uxtah	r3, r3, sl
 80092b2:	fb06 e202 	mla	r2, r6, r2, lr
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	9b00      	ldr	r3, [sp, #0]
 80092ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092be:	b292      	uxth	r2, r2
 80092c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80092c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80092cc:	4581      	cmp	r9, r0
 80092ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092d2:	f84c 3b04 	str.w	r3, [ip], #4
 80092d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092da:	d2db      	bcs.n	8009294 <quorem+0x44>
 80092dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80092e0:	b92b      	cbnz	r3, 80092ee <quorem+0x9e>
 80092e2:	9b01      	ldr	r3, [sp, #4]
 80092e4:	3b04      	subs	r3, #4
 80092e6:	429d      	cmp	r5, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	d32e      	bcc.n	800934a <quorem+0xfa>
 80092ec:	613c      	str	r4, [r7, #16]
 80092ee:	4638      	mov	r0, r7
 80092f0:	f001 fea0 	bl	800b034 <__mcmp>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	db24      	blt.n	8009342 <quorem+0xf2>
 80092f8:	3601      	adds	r6, #1
 80092fa:	4628      	mov	r0, r5
 80092fc:	f04f 0c00 	mov.w	ip, #0
 8009300:	f858 2b04 	ldr.w	r2, [r8], #4
 8009304:	f8d0 e000 	ldr.w	lr, [r0]
 8009308:	b293      	uxth	r3, r2
 800930a:	ebac 0303 	sub.w	r3, ip, r3
 800930e:	0c12      	lsrs	r2, r2, #16
 8009310:	fa13 f38e 	uxtah	r3, r3, lr
 8009314:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800931c:	b29b      	uxth	r3, r3
 800931e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009322:	45c1      	cmp	r9, r8
 8009324:	f840 3b04 	str.w	r3, [r0], #4
 8009328:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800932c:	d2e8      	bcs.n	8009300 <quorem+0xb0>
 800932e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009336:	b922      	cbnz	r2, 8009342 <quorem+0xf2>
 8009338:	3b04      	subs	r3, #4
 800933a:	429d      	cmp	r5, r3
 800933c:	461a      	mov	r2, r3
 800933e:	d30a      	bcc.n	8009356 <quorem+0x106>
 8009340:	613c      	str	r4, [r7, #16]
 8009342:	4630      	mov	r0, r6
 8009344:	b003      	add	sp, #12
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	6812      	ldr	r2, [r2, #0]
 800934c:	3b04      	subs	r3, #4
 800934e:	2a00      	cmp	r2, #0
 8009350:	d1cc      	bne.n	80092ec <quorem+0x9c>
 8009352:	3c01      	subs	r4, #1
 8009354:	e7c7      	b.n	80092e6 <quorem+0x96>
 8009356:	6812      	ldr	r2, [r2, #0]
 8009358:	3b04      	subs	r3, #4
 800935a:	2a00      	cmp	r2, #0
 800935c:	d1f0      	bne.n	8009340 <quorem+0xf0>
 800935e:	3c01      	subs	r4, #1
 8009360:	e7eb      	b.n	800933a <quorem+0xea>
 8009362:	2000      	movs	r0, #0
 8009364:	e7ee      	b.n	8009344 <quorem+0xf4>
	...

08009368 <_dtoa_r>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	ed2d 8b04 	vpush	{d8-d9}
 8009370:	ec57 6b10 	vmov	r6, r7, d0
 8009374:	b093      	sub	sp, #76	; 0x4c
 8009376:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009378:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800937c:	9106      	str	r1, [sp, #24]
 800937e:	ee10 aa10 	vmov	sl, s0
 8009382:	4604      	mov	r4, r0
 8009384:	9209      	str	r2, [sp, #36]	; 0x24
 8009386:	930c      	str	r3, [sp, #48]	; 0x30
 8009388:	46bb      	mov	fp, r7
 800938a:	b975      	cbnz	r5, 80093aa <_dtoa_r+0x42>
 800938c:	2010      	movs	r0, #16
 800938e:	f001 fb6b 	bl	800aa68 <malloc>
 8009392:	4602      	mov	r2, r0
 8009394:	6260      	str	r0, [r4, #36]	; 0x24
 8009396:	b920      	cbnz	r0, 80093a2 <_dtoa_r+0x3a>
 8009398:	4ba7      	ldr	r3, [pc, #668]	; (8009638 <_dtoa_r+0x2d0>)
 800939a:	21ea      	movs	r1, #234	; 0xea
 800939c:	48a7      	ldr	r0, [pc, #668]	; (800963c <_dtoa_r+0x2d4>)
 800939e:	f002 fcc1 	bl	800bd24 <__assert_func>
 80093a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093a6:	6005      	str	r5, [r0, #0]
 80093a8:	60c5      	str	r5, [r0, #12]
 80093aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ac:	6819      	ldr	r1, [r3, #0]
 80093ae:	b151      	cbz	r1, 80093c6 <_dtoa_r+0x5e>
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	604a      	str	r2, [r1, #4]
 80093b4:	2301      	movs	r3, #1
 80093b6:	4093      	lsls	r3, r2
 80093b8:	608b      	str	r3, [r1, #8]
 80093ba:	4620      	mov	r0, r4
 80093bc:	f001 fbae 	bl	800ab1c <_Bfree>
 80093c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	1e3b      	subs	r3, r7, #0
 80093c8:	bfaa      	itet	ge
 80093ca:	2300      	movge	r3, #0
 80093cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80093d0:	f8c8 3000 	strge.w	r3, [r8]
 80093d4:	4b9a      	ldr	r3, [pc, #616]	; (8009640 <_dtoa_r+0x2d8>)
 80093d6:	bfbc      	itt	lt
 80093d8:	2201      	movlt	r2, #1
 80093da:	f8c8 2000 	strlt.w	r2, [r8]
 80093de:	ea33 030b 	bics.w	r3, r3, fp
 80093e2:	d11b      	bne.n	800941c <_dtoa_r+0xb4>
 80093e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093f0:	4333      	orrs	r3, r6
 80093f2:	f000 8592 	beq.w	8009f1a <_dtoa_r+0xbb2>
 80093f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093f8:	b963      	cbnz	r3, 8009414 <_dtoa_r+0xac>
 80093fa:	4b92      	ldr	r3, [pc, #584]	; (8009644 <_dtoa_r+0x2dc>)
 80093fc:	e022      	b.n	8009444 <_dtoa_r+0xdc>
 80093fe:	4b92      	ldr	r3, [pc, #584]	; (8009648 <_dtoa_r+0x2e0>)
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	3308      	adds	r3, #8
 8009404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	9801      	ldr	r0, [sp, #4]
 800940a:	b013      	add	sp, #76	; 0x4c
 800940c:	ecbd 8b04 	vpop	{d8-d9}
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	4b8b      	ldr	r3, [pc, #556]	; (8009644 <_dtoa_r+0x2dc>)
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	3303      	adds	r3, #3
 800941a:	e7f3      	b.n	8009404 <_dtoa_r+0x9c>
 800941c:	2200      	movs	r2, #0
 800941e:	2300      	movs	r3, #0
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	f7f7 fb60 	bl	8000ae8 <__aeabi_dcmpeq>
 8009428:	ec4b ab19 	vmov	d9, sl, fp
 800942c:	4680      	mov	r8, r0
 800942e:	b158      	cbz	r0, 8009448 <_dtoa_r+0xe0>
 8009430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009432:	2301      	movs	r3, #1
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 856b 	beq.w	8009f14 <_dtoa_r+0xbac>
 800943e:	4883      	ldr	r0, [pc, #524]	; (800964c <_dtoa_r+0x2e4>)
 8009440:	6018      	str	r0, [r3, #0]
 8009442:	1e43      	subs	r3, r0, #1
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	e7df      	b.n	8009408 <_dtoa_r+0xa0>
 8009448:	ec4b ab10 	vmov	d0, sl, fp
 800944c:	aa10      	add	r2, sp, #64	; 0x40
 800944e:	a911      	add	r1, sp, #68	; 0x44
 8009450:	4620      	mov	r0, r4
 8009452:	f001 ff11 	bl	800b278 <__d2b>
 8009456:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800945a:	ee08 0a10 	vmov	s16, r0
 800945e:	2d00      	cmp	r5, #0
 8009460:	f000 8084 	beq.w	800956c <_dtoa_r+0x204>
 8009464:	ee19 3a90 	vmov	r3, s19
 8009468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800946c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009470:	4656      	mov	r6, sl
 8009472:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009476:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800947a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800947e:	4b74      	ldr	r3, [pc, #464]	; (8009650 <_dtoa_r+0x2e8>)
 8009480:	2200      	movs	r2, #0
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	f7f6 ff0f 	bl	80002a8 <__aeabi_dsub>
 800948a:	a365      	add	r3, pc, #404	; (adr r3, 8009620 <_dtoa_r+0x2b8>)
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f7 f8c2 	bl	8000618 <__aeabi_dmul>
 8009494:	a364      	add	r3, pc, #400	; (adr r3, 8009628 <_dtoa_r+0x2c0>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f6 ff07 	bl	80002ac <__adddf3>
 800949e:	4606      	mov	r6, r0
 80094a0:	4628      	mov	r0, r5
 80094a2:	460f      	mov	r7, r1
 80094a4:	f7f7 f84e 	bl	8000544 <__aeabi_i2d>
 80094a8:	a361      	add	r3, pc, #388	; (adr r3, 8009630 <_dtoa_r+0x2c8>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f7f7 f8b3 	bl	8000618 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7f6 fef7 	bl	80002ac <__adddf3>
 80094be:	4606      	mov	r6, r0
 80094c0:	460f      	mov	r7, r1
 80094c2:	f7f7 fb59 	bl	8000b78 <__aeabi_d2iz>
 80094c6:	2200      	movs	r2, #0
 80094c8:	9000      	str	r0, [sp, #0]
 80094ca:	2300      	movs	r3, #0
 80094cc:	4630      	mov	r0, r6
 80094ce:	4639      	mov	r1, r7
 80094d0:	f7f7 fb14 	bl	8000afc <__aeabi_dcmplt>
 80094d4:	b150      	cbz	r0, 80094ec <_dtoa_r+0x184>
 80094d6:	9800      	ldr	r0, [sp, #0]
 80094d8:	f7f7 f834 	bl	8000544 <__aeabi_i2d>
 80094dc:	4632      	mov	r2, r6
 80094de:	463b      	mov	r3, r7
 80094e0:	f7f7 fb02 	bl	8000ae8 <__aeabi_dcmpeq>
 80094e4:	b910      	cbnz	r0, 80094ec <_dtoa_r+0x184>
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	9b00      	ldr	r3, [sp, #0]
 80094ee:	2b16      	cmp	r3, #22
 80094f0:	d85a      	bhi.n	80095a8 <_dtoa_r+0x240>
 80094f2:	9a00      	ldr	r2, [sp, #0]
 80094f4:	4b57      	ldr	r3, [pc, #348]	; (8009654 <_dtoa_r+0x2ec>)
 80094f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	ec51 0b19 	vmov	r0, r1, d9
 8009502:	f7f7 fafb 	bl	8000afc <__aeabi_dcmplt>
 8009506:	2800      	cmp	r0, #0
 8009508:	d050      	beq.n	80095ac <_dtoa_r+0x244>
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	3b01      	subs	r3, #1
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	2300      	movs	r3, #0
 8009512:	930b      	str	r3, [sp, #44]	; 0x2c
 8009514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009516:	1b5d      	subs	r5, r3, r5
 8009518:	1e6b      	subs	r3, r5, #1
 800951a:	9305      	str	r3, [sp, #20]
 800951c:	bf45      	ittet	mi
 800951e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009522:	9304      	strmi	r3, [sp, #16]
 8009524:	2300      	movpl	r3, #0
 8009526:	2300      	movmi	r3, #0
 8009528:	bf4c      	ite	mi
 800952a:	9305      	strmi	r3, [sp, #20]
 800952c:	9304      	strpl	r3, [sp, #16]
 800952e:	9b00      	ldr	r3, [sp, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	db3d      	blt.n	80095b0 <_dtoa_r+0x248>
 8009534:	9b05      	ldr	r3, [sp, #20]
 8009536:	9a00      	ldr	r2, [sp, #0]
 8009538:	920a      	str	r2, [sp, #40]	; 0x28
 800953a:	4413      	add	r3, r2
 800953c:	9305      	str	r3, [sp, #20]
 800953e:	2300      	movs	r3, #0
 8009540:	9307      	str	r3, [sp, #28]
 8009542:	9b06      	ldr	r3, [sp, #24]
 8009544:	2b09      	cmp	r3, #9
 8009546:	f200 8089 	bhi.w	800965c <_dtoa_r+0x2f4>
 800954a:	2b05      	cmp	r3, #5
 800954c:	bfc4      	itt	gt
 800954e:	3b04      	subgt	r3, #4
 8009550:	9306      	strgt	r3, [sp, #24]
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	f1a3 0302 	sub.w	r3, r3, #2
 8009558:	bfcc      	ite	gt
 800955a:	2500      	movgt	r5, #0
 800955c:	2501      	movle	r5, #1
 800955e:	2b03      	cmp	r3, #3
 8009560:	f200 8087 	bhi.w	8009672 <_dtoa_r+0x30a>
 8009564:	e8df f003 	tbb	[pc, r3]
 8009568:	59383a2d 	.word	0x59383a2d
 800956c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009570:	441d      	add	r5, r3
 8009572:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009576:	2b20      	cmp	r3, #32
 8009578:	bfc1      	itttt	gt
 800957a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800957e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009582:	fa0b f303 	lslgt.w	r3, fp, r3
 8009586:	fa26 f000 	lsrgt.w	r0, r6, r0
 800958a:	bfda      	itte	le
 800958c:	f1c3 0320 	rsble	r3, r3, #32
 8009590:	fa06 f003 	lslle.w	r0, r6, r3
 8009594:	4318      	orrgt	r0, r3
 8009596:	f7f6 ffc5 	bl	8000524 <__aeabi_ui2d>
 800959a:	2301      	movs	r3, #1
 800959c:	4606      	mov	r6, r0
 800959e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80095a2:	3d01      	subs	r5, #1
 80095a4:	930e      	str	r3, [sp, #56]	; 0x38
 80095a6:	e76a      	b.n	800947e <_dtoa_r+0x116>
 80095a8:	2301      	movs	r3, #1
 80095aa:	e7b2      	b.n	8009512 <_dtoa_r+0x1aa>
 80095ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80095ae:	e7b1      	b.n	8009514 <_dtoa_r+0x1ac>
 80095b0:	9b04      	ldr	r3, [sp, #16]
 80095b2:	9a00      	ldr	r2, [sp, #0]
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	4253      	negs	r3, r2
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	2300      	movs	r3, #0
 80095be:	930a      	str	r3, [sp, #40]	; 0x28
 80095c0:	e7bf      	b.n	8009542 <_dtoa_r+0x1da>
 80095c2:	2300      	movs	r3, #0
 80095c4:	9308      	str	r3, [sp, #32]
 80095c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dc55      	bgt.n	8009678 <_dtoa_r+0x310>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095d2:	461a      	mov	r2, r3
 80095d4:	9209      	str	r2, [sp, #36]	; 0x24
 80095d6:	e00c      	b.n	80095f2 <_dtoa_r+0x28a>
 80095d8:	2301      	movs	r3, #1
 80095da:	e7f3      	b.n	80095c4 <_dtoa_r+0x25c>
 80095dc:	2300      	movs	r3, #0
 80095de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e0:	9308      	str	r3, [sp, #32]
 80095e2:	9b00      	ldr	r3, [sp, #0]
 80095e4:	4413      	add	r3, r2
 80095e6:	9302      	str	r3, [sp, #8]
 80095e8:	3301      	adds	r3, #1
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	9303      	str	r3, [sp, #12]
 80095ee:	bfb8      	it	lt
 80095f0:	2301      	movlt	r3, #1
 80095f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095f4:	2200      	movs	r2, #0
 80095f6:	6042      	str	r2, [r0, #4]
 80095f8:	2204      	movs	r2, #4
 80095fa:	f102 0614 	add.w	r6, r2, #20
 80095fe:	429e      	cmp	r6, r3
 8009600:	6841      	ldr	r1, [r0, #4]
 8009602:	d93d      	bls.n	8009680 <_dtoa_r+0x318>
 8009604:	4620      	mov	r0, r4
 8009606:	f001 fa49 	bl	800aa9c <_Balloc>
 800960a:	9001      	str	r0, [sp, #4]
 800960c:	2800      	cmp	r0, #0
 800960e:	d13b      	bne.n	8009688 <_dtoa_r+0x320>
 8009610:	4b11      	ldr	r3, [pc, #68]	; (8009658 <_dtoa_r+0x2f0>)
 8009612:	4602      	mov	r2, r0
 8009614:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009618:	e6c0      	b.n	800939c <_dtoa_r+0x34>
 800961a:	2301      	movs	r3, #1
 800961c:	e7df      	b.n	80095de <_dtoa_r+0x276>
 800961e:	bf00      	nop
 8009620:	636f4361 	.word	0x636f4361
 8009624:	3fd287a7 	.word	0x3fd287a7
 8009628:	8b60c8b3 	.word	0x8b60c8b3
 800962c:	3fc68a28 	.word	0x3fc68a28
 8009630:	509f79fb 	.word	0x509f79fb
 8009634:	3fd34413 	.word	0x3fd34413
 8009638:	0800c2be 	.word	0x0800c2be
 800963c:	0800c2d5 	.word	0x0800c2d5
 8009640:	7ff00000 	.word	0x7ff00000
 8009644:	0800c2ba 	.word	0x0800c2ba
 8009648:	0800c2b1 	.word	0x0800c2b1
 800964c:	0800c135 	.word	0x0800c135
 8009650:	3ff80000 	.word	0x3ff80000
 8009654:	0800c4a8 	.word	0x0800c4a8
 8009658:	0800c330 	.word	0x0800c330
 800965c:	2501      	movs	r5, #1
 800965e:	2300      	movs	r3, #0
 8009660:	9306      	str	r3, [sp, #24]
 8009662:	9508      	str	r5, [sp, #32]
 8009664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009668:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800966c:	2200      	movs	r2, #0
 800966e:	2312      	movs	r3, #18
 8009670:	e7b0      	b.n	80095d4 <_dtoa_r+0x26c>
 8009672:	2301      	movs	r3, #1
 8009674:	9308      	str	r3, [sp, #32]
 8009676:	e7f5      	b.n	8009664 <_dtoa_r+0x2fc>
 8009678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800967e:	e7b8      	b.n	80095f2 <_dtoa_r+0x28a>
 8009680:	3101      	adds	r1, #1
 8009682:	6041      	str	r1, [r0, #4]
 8009684:	0052      	lsls	r2, r2, #1
 8009686:	e7b8      	b.n	80095fa <_dtoa_r+0x292>
 8009688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800968a:	9a01      	ldr	r2, [sp, #4]
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	2b0e      	cmp	r3, #14
 8009692:	f200 809d 	bhi.w	80097d0 <_dtoa_r+0x468>
 8009696:	2d00      	cmp	r5, #0
 8009698:	f000 809a 	beq.w	80097d0 <_dtoa_r+0x468>
 800969c:	9b00      	ldr	r3, [sp, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dd32      	ble.n	8009708 <_dtoa_r+0x3a0>
 80096a2:	4ab7      	ldr	r2, [pc, #732]	; (8009980 <_dtoa_r+0x618>)
 80096a4:	f003 030f 	and.w	r3, r3, #15
 80096a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096b0:	9b00      	ldr	r3, [sp, #0]
 80096b2:	05d8      	lsls	r0, r3, #23
 80096b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80096b8:	d516      	bpl.n	80096e8 <_dtoa_r+0x380>
 80096ba:	4bb2      	ldr	r3, [pc, #712]	; (8009984 <_dtoa_r+0x61c>)
 80096bc:	ec51 0b19 	vmov	r0, r1, d9
 80096c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096c4:	f7f7 f8d2 	bl	800086c <__aeabi_ddiv>
 80096c8:	f007 070f 	and.w	r7, r7, #15
 80096cc:	4682      	mov	sl, r0
 80096ce:	468b      	mov	fp, r1
 80096d0:	2503      	movs	r5, #3
 80096d2:	4eac      	ldr	r6, [pc, #688]	; (8009984 <_dtoa_r+0x61c>)
 80096d4:	b957      	cbnz	r7, 80096ec <_dtoa_r+0x384>
 80096d6:	4642      	mov	r2, r8
 80096d8:	464b      	mov	r3, r9
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	f7f7 f8c5 	bl	800086c <__aeabi_ddiv>
 80096e2:	4682      	mov	sl, r0
 80096e4:	468b      	mov	fp, r1
 80096e6:	e028      	b.n	800973a <_dtoa_r+0x3d2>
 80096e8:	2502      	movs	r5, #2
 80096ea:	e7f2      	b.n	80096d2 <_dtoa_r+0x36a>
 80096ec:	07f9      	lsls	r1, r7, #31
 80096ee:	d508      	bpl.n	8009702 <_dtoa_r+0x39a>
 80096f0:	4640      	mov	r0, r8
 80096f2:	4649      	mov	r1, r9
 80096f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096f8:	f7f6 ff8e 	bl	8000618 <__aeabi_dmul>
 80096fc:	3501      	adds	r5, #1
 80096fe:	4680      	mov	r8, r0
 8009700:	4689      	mov	r9, r1
 8009702:	107f      	asrs	r7, r7, #1
 8009704:	3608      	adds	r6, #8
 8009706:	e7e5      	b.n	80096d4 <_dtoa_r+0x36c>
 8009708:	f000 809b 	beq.w	8009842 <_dtoa_r+0x4da>
 800970c:	9b00      	ldr	r3, [sp, #0]
 800970e:	4f9d      	ldr	r7, [pc, #628]	; (8009984 <_dtoa_r+0x61c>)
 8009710:	425e      	negs	r6, r3
 8009712:	4b9b      	ldr	r3, [pc, #620]	; (8009980 <_dtoa_r+0x618>)
 8009714:	f006 020f 	and.w	r2, r6, #15
 8009718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	ec51 0b19 	vmov	r0, r1, d9
 8009724:	f7f6 ff78 	bl	8000618 <__aeabi_dmul>
 8009728:	1136      	asrs	r6, r6, #4
 800972a:	4682      	mov	sl, r0
 800972c:	468b      	mov	fp, r1
 800972e:	2300      	movs	r3, #0
 8009730:	2502      	movs	r5, #2
 8009732:	2e00      	cmp	r6, #0
 8009734:	d17a      	bne.n	800982c <_dtoa_r+0x4c4>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1d3      	bne.n	80096e2 <_dtoa_r+0x37a>
 800973a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8082 	beq.w	8009846 <_dtoa_r+0x4de>
 8009742:	4b91      	ldr	r3, [pc, #580]	; (8009988 <_dtoa_r+0x620>)
 8009744:	2200      	movs	r2, #0
 8009746:	4650      	mov	r0, sl
 8009748:	4659      	mov	r1, fp
 800974a:	f7f7 f9d7 	bl	8000afc <__aeabi_dcmplt>
 800974e:	2800      	cmp	r0, #0
 8009750:	d079      	beq.n	8009846 <_dtoa_r+0x4de>
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d076      	beq.n	8009846 <_dtoa_r+0x4de>
 8009758:	9b02      	ldr	r3, [sp, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd36      	ble.n	80097cc <_dtoa_r+0x464>
 800975e:	9b00      	ldr	r3, [sp, #0]
 8009760:	4650      	mov	r0, sl
 8009762:	4659      	mov	r1, fp
 8009764:	1e5f      	subs	r7, r3, #1
 8009766:	2200      	movs	r2, #0
 8009768:	4b88      	ldr	r3, [pc, #544]	; (800998c <_dtoa_r+0x624>)
 800976a:	f7f6 ff55 	bl	8000618 <__aeabi_dmul>
 800976e:	9e02      	ldr	r6, [sp, #8]
 8009770:	4682      	mov	sl, r0
 8009772:	468b      	mov	fp, r1
 8009774:	3501      	adds	r5, #1
 8009776:	4628      	mov	r0, r5
 8009778:	f7f6 fee4 	bl	8000544 <__aeabi_i2d>
 800977c:	4652      	mov	r2, sl
 800977e:	465b      	mov	r3, fp
 8009780:	f7f6 ff4a 	bl	8000618 <__aeabi_dmul>
 8009784:	4b82      	ldr	r3, [pc, #520]	; (8009990 <_dtoa_r+0x628>)
 8009786:	2200      	movs	r2, #0
 8009788:	f7f6 fd90 	bl	80002ac <__adddf3>
 800978c:	46d0      	mov	r8, sl
 800978e:	46d9      	mov	r9, fp
 8009790:	4682      	mov	sl, r0
 8009792:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009796:	2e00      	cmp	r6, #0
 8009798:	d158      	bne.n	800984c <_dtoa_r+0x4e4>
 800979a:	4b7e      	ldr	r3, [pc, #504]	; (8009994 <_dtoa_r+0x62c>)
 800979c:	2200      	movs	r2, #0
 800979e:	4640      	mov	r0, r8
 80097a0:	4649      	mov	r1, r9
 80097a2:	f7f6 fd81 	bl	80002a8 <__aeabi_dsub>
 80097a6:	4652      	mov	r2, sl
 80097a8:	465b      	mov	r3, fp
 80097aa:	4680      	mov	r8, r0
 80097ac:	4689      	mov	r9, r1
 80097ae:	f7f7 f9c3 	bl	8000b38 <__aeabi_dcmpgt>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f040 8295 	bne.w	8009ce2 <_dtoa_r+0x97a>
 80097b8:	4652      	mov	r2, sl
 80097ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097be:	4640      	mov	r0, r8
 80097c0:	4649      	mov	r1, r9
 80097c2:	f7f7 f99b 	bl	8000afc <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f040 8289 	bne.w	8009cde <_dtoa_r+0x976>
 80097cc:	ec5b ab19 	vmov	sl, fp, d9
 80097d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f2c0 8148 	blt.w	8009a68 <_dtoa_r+0x700>
 80097d8:	9a00      	ldr	r2, [sp, #0]
 80097da:	2a0e      	cmp	r2, #14
 80097dc:	f300 8144 	bgt.w	8009a68 <_dtoa_r+0x700>
 80097e0:	4b67      	ldr	r3, [pc, #412]	; (8009980 <_dtoa_r+0x618>)
 80097e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f280 80d5 	bge.w	800999c <_dtoa_r+0x634>
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f300 80d1 	bgt.w	800999c <_dtoa_r+0x634>
 80097fa:	f040 826f 	bne.w	8009cdc <_dtoa_r+0x974>
 80097fe:	4b65      	ldr	r3, [pc, #404]	; (8009994 <_dtoa_r+0x62c>)
 8009800:	2200      	movs	r2, #0
 8009802:	4640      	mov	r0, r8
 8009804:	4649      	mov	r1, r9
 8009806:	f7f6 ff07 	bl	8000618 <__aeabi_dmul>
 800980a:	4652      	mov	r2, sl
 800980c:	465b      	mov	r3, fp
 800980e:	f7f7 f989 	bl	8000b24 <__aeabi_dcmpge>
 8009812:	9e03      	ldr	r6, [sp, #12]
 8009814:	4637      	mov	r7, r6
 8009816:	2800      	cmp	r0, #0
 8009818:	f040 8245 	bne.w	8009ca6 <_dtoa_r+0x93e>
 800981c:	9d01      	ldr	r5, [sp, #4]
 800981e:	2331      	movs	r3, #49	; 0x31
 8009820:	f805 3b01 	strb.w	r3, [r5], #1
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	3301      	adds	r3, #1
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	e240      	b.n	8009cae <_dtoa_r+0x946>
 800982c:	07f2      	lsls	r2, r6, #31
 800982e:	d505      	bpl.n	800983c <_dtoa_r+0x4d4>
 8009830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009834:	f7f6 fef0 	bl	8000618 <__aeabi_dmul>
 8009838:	3501      	adds	r5, #1
 800983a:	2301      	movs	r3, #1
 800983c:	1076      	asrs	r6, r6, #1
 800983e:	3708      	adds	r7, #8
 8009840:	e777      	b.n	8009732 <_dtoa_r+0x3ca>
 8009842:	2502      	movs	r5, #2
 8009844:	e779      	b.n	800973a <_dtoa_r+0x3d2>
 8009846:	9f00      	ldr	r7, [sp, #0]
 8009848:	9e03      	ldr	r6, [sp, #12]
 800984a:	e794      	b.n	8009776 <_dtoa_r+0x40e>
 800984c:	9901      	ldr	r1, [sp, #4]
 800984e:	4b4c      	ldr	r3, [pc, #304]	; (8009980 <_dtoa_r+0x618>)
 8009850:	4431      	add	r1, r6
 8009852:	910d      	str	r1, [sp, #52]	; 0x34
 8009854:	9908      	ldr	r1, [sp, #32]
 8009856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800985a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800985e:	2900      	cmp	r1, #0
 8009860:	d043      	beq.n	80098ea <_dtoa_r+0x582>
 8009862:	494d      	ldr	r1, [pc, #308]	; (8009998 <_dtoa_r+0x630>)
 8009864:	2000      	movs	r0, #0
 8009866:	f7f7 f801 	bl	800086c <__aeabi_ddiv>
 800986a:	4652      	mov	r2, sl
 800986c:	465b      	mov	r3, fp
 800986e:	f7f6 fd1b 	bl	80002a8 <__aeabi_dsub>
 8009872:	9d01      	ldr	r5, [sp, #4]
 8009874:	4682      	mov	sl, r0
 8009876:	468b      	mov	fp, r1
 8009878:	4649      	mov	r1, r9
 800987a:	4640      	mov	r0, r8
 800987c:	f7f7 f97c 	bl	8000b78 <__aeabi_d2iz>
 8009880:	4606      	mov	r6, r0
 8009882:	f7f6 fe5f 	bl	8000544 <__aeabi_i2d>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4640      	mov	r0, r8
 800988c:	4649      	mov	r1, r9
 800988e:	f7f6 fd0b 	bl	80002a8 <__aeabi_dsub>
 8009892:	3630      	adds	r6, #48	; 0x30
 8009894:	f805 6b01 	strb.w	r6, [r5], #1
 8009898:	4652      	mov	r2, sl
 800989a:	465b      	mov	r3, fp
 800989c:	4680      	mov	r8, r0
 800989e:	4689      	mov	r9, r1
 80098a0:	f7f7 f92c 	bl	8000afc <__aeabi_dcmplt>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d163      	bne.n	8009970 <_dtoa_r+0x608>
 80098a8:	4642      	mov	r2, r8
 80098aa:	464b      	mov	r3, r9
 80098ac:	4936      	ldr	r1, [pc, #216]	; (8009988 <_dtoa_r+0x620>)
 80098ae:	2000      	movs	r0, #0
 80098b0:	f7f6 fcfa 	bl	80002a8 <__aeabi_dsub>
 80098b4:	4652      	mov	r2, sl
 80098b6:	465b      	mov	r3, fp
 80098b8:	f7f7 f920 	bl	8000afc <__aeabi_dcmplt>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f040 80b5 	bne.w	8009a2c <_dtoa_r+0x6c4>
 80098c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098c4:	429d      	cmp	r5, r3
 80098c6:	d081      	beq.n	80097cc <_dtoa_r+0x464>
 80098c8:	4b30      	ldr	r3, [pc, #192]	; (800998c <_dtoa_r+0x624>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	4650      	mov	r0, sl
 80098ce:	4659      	mov	r1, fp
 80098d0:	f7f6 fea2 	bl	8000618 <__aeabi_dmul>
 80098d4:	4b2d      	ldr	r3, [pc, #180]	; (800998c <_dtoa_r+0x624>)
 80098d6:	4682      	mov	sl, r0
 80098d8:	468b      	mov	fp, r1
 80098da:	4640      	mov	r0, r8
 80098dc:	4649      	mov	r1, r9
 80098de:	2200      	movs	r2, #0
 80098e0:	f7f6 fe9a 	bl	8000618 <__aeabi_dmul>
 80098e4:	4680      	mov	r8, r0
 80098e6:	4689      	mov	r9, r1
 80098e8:	e7c6      	b.n	8009878 <_dtoa_r+0x510>
 80098ea:	4650      	mov	r0, sl
 80098ec:	4659      	mov	r1, fp
 80098ee:	f7f6 fe93 	bl	8000618 <__aeabi_dmul>
 80098f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f4:	9d01      	ldr	r5, [sp, #4]
 80098f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098f8:	4682      	mov	sl, r0
 80098fa:	468b      	mov	fp, r1
 80098fc:	4649      	mov	r1, r9
 80098fe:	4640      	mov	r0, r8
 8009900:	f7f7 f93a 	bl	8000b78 <__aeabi_d2iz>
 8009904:	4606      	mov	r6, r0
 8009906:	f7f6 fe1d 	bl	8000544 <__aeabi_i2d>
 800990a:	3630      	adds	r6, #48	; 0x30
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4640      	mov	r0, r8
 8009912:	4649      	mov	r1, r9
 8009914:	f7f6 fcc8 	bl	80002a8 <__aeabi_dsub>
 8009918:	f805 6b01 	strb.w	r6, [r5], #1
 800991c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800991e:	429d      	cmp	r5, r3
 8009920:	4680      	mov	r8, r0
 8009922:	4689      	mov	r9, r1
 8009924:	f04f 0200 	mov.w	r2, #0
 8009928:	d124      	bne.n	8009974 <_dtoa_r+0x60c>
 800992a:	4b1b      	ldr	r3, [pc, #108]	; (8009998 <_dtoa_r+0x630>)
 800992c:	4650      	mov	r0, sl
 800992e:	4659      	mov	r1, fp
 8009930:	f7f6 fcbc 	bl	80002ac <__adddf3>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f7 f8fc 	bl	8000b38 <__aeabi_dcmpgt>
 8009940:	2800      	cmp	r0, #0
 8009942:	d173      	bne.n	8009a2c <_dtoa_r+0x6c4>
 8009944:	4652      	mov	r2, sl
 8009946:	465b      	mov	r3, fp
 8009948:	4913      	ldr	r1, [pc, #76]	; (8009998 <_dtoa_r+0x630>)
 800994a:	2000      	movs	r0, #0
 800994c:	f7f6 fcac 	bl	80002a8 <__aeabi_dsub>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4640      	mov	r0, r8
 8009956:	4649      	mov	r1, r9
 8009958:	f7f7 f8d0 	bl	8000afc <__aeabi_dcmplt>
 800995c:	2800      	cmp	r0, #0
 800995e:	f43f af35 	beq.w	80097cc <_dtoa_r+0x464>
 8009962:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009964:	1e6b      	subs	r3, r5, #1
 8009966:	930f      	str	r3, [sp, #60]	; 0x3c
 8009968:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800996c:	2b30      	cmp	r3, #48	; 0x30
 800996e:	d0f8      	beq.n	8009962 <_dtoa_r+0x5fa>
 8009970:	9700      	str	r7, [sp, #0]
 8009972:	e049      	b.n	8009a08 <_dtoa_r+0x6a0>
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <_dtoa_r+0x624>)
 8009976:	f7f6 fe4f 	bl	8000618 <__aeabi_dmul>
 800997a:	4680      	mov	r8, r0
 800997c:	4689      	mov	r9, r1
 800997e:	e7bd      	b.n	80098fc <_dtoa_r+0x594>
 8009980:	0800c4a8 	.word	0x0800c4a8
 8009984:	0800c480 	.word	0x0800c480
 8009988:	3ff00000 	.word	0x3ff00000
 800998c:	40240000 	.word	0x40240000
 8009990:	401c0000 	.word	0x401c0000
 8009994:	40140000 	.word	0x40140000
 8009998:	3fe00000 	.word	0x3fe00000
 800999c:	9d01      	ldr	r5, [sp, #4]
 800999e:	4656      	mov	r6, sl
 80099a0:	465f      	mov	r7, fp
 80099a2:	4642      	mov	r2, r8
 80099a4:	464b      	mov	r3, r9
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 ff5f 	bl	800086c <__aeabi_ddiv>
 80099ae:	f7f7 f8e3 	bl	8000b78 <__aeabi_d2iz>
 80099b2:	4682      	mov	sl, r0
 80099b4:	f7f6 fdc6 	bl	8000544 <__aeabi_i2d>
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	f7f6 fe2c 	bl	8000618 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80099cc:	f7f6 fc6c 	bl	80002a8 <__aeabi_dsub>
 80099d0:	f805 6b01 	strb.w	r6, [r5], #1
 80099d4:	9e01      	ldr	r6, [sp, #4]
 80099d6:	9f03      	ldr	r7, [sp, #12]
 80099d8:	1bae      	subs	r6, r5, r6
 80099da:	42b7      	cmp	r7, r6
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	d135      	bne.n	8009a4e <_dtoa_r+0x6e6>
 80099e2:	f7f6 fc63 	bl	80002ac <__adddf3>
 80099e6:	4642      	mov	r2, r8
 80099e8:	464b      	mov	r3, r9
 80099ea:	4606      	mov	r6, r0
 80099ec:	460f      	mov	r7, r1
 80099ee:	f7f7 f8a3 	bl	8000b38 <__aeabi_dcmpgt>
 80099f2:	b9d0      	cbnz	r0, 8009a2a <_dtoa_r+0x6c2>
 80099f4:	4642      	mov	r2, r8
 80099f6:	464b      	mov	r3, r9
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f7 f874 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a00:	b110      	cbz	r0, 8009a08 <_dtoa_r+0x6a0>
 8009a02:	f01a 0f01 	tst.w	sl, #1
 8009a06:	d110      	bne.n	8009a2a <_dtoa_r+0x6c2>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	ee18 1a10 	vmov	r1, s16
 8009a0e:	f001 f885 	bl	800ab1c <_Bfree>
 8009a12:	2300      	movs	r3, #0
 8009a14:	9800      	ldr	r0, [sp, #0]
 8009a16:	702b      	strb	r3, [r5, #0]
 8009a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	6018      	str	r0, [r3, #0]
 8009a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f43f acf1 	beq.w	8009408 <_dtoa_r+0xa0>
 8009a26:	601d      	str	r5, [r3, #0]
 8009a28:	e4ee      	b.n	8009408 <_dtoa_r+0xa0>
 8009a2a:	9f00      	ldr	r7, [sp, #0]
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	461d      	mov	r5, r3
 8009a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a34:	2a39      	cmp	r2, #57	; 0x39
 8009a36:	d106      	bne.n	8009a46 <_dtoa_r+0x6de>
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d1f7      	bne.n	8009a2e <_dtoa_r+0x6c6>
 8009a3e:	9901      	ldr	r1, [sp, #4]
 8009a40:	2230      	movs	r2, #48	; 0x30
 8009a42:	3701      	adds	r7, #1
 8009a44:	700a      	strb	r2, [r1, #0]
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	3201      	adds	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	e790      	b.n	8009970 <_dtoa_r+0x608>
 8009a4e:	4ba6      	ldr	r3, [pc, #664]	; (8009ce8 <_dtoa_r+0x980>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	f7f6 fde1 	bl	8000618 <__aeabi_dmul>
 8009a56:	2200      	movs	r2, #0
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	f7f7 f843 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d09d      	beq.n	80099a2 <_dtoa_r+0x63a>
 8009a66:	e7cf      	b.n	8009a08 <_dtoa_r+0x6a0>
 8009a68:	9a08      	ldr	r2, [sp, #32]
 8009a6a:	2a00      	cmp	r2, #0
 8009a6c:	f000 80d7 	beq.w	8009c1e <_dtoa_r+0x8b6>
 8009a70:	9a06      	ldr	r2, [sp, #24]
 8009a72:	2a01      	cmp	r2, #1
 8009a74:	f300 80ba 	bgt.w	8009bec <_dtoa_r+0x884>
 8009a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a7a:	2a00      	cmp	r2, #0
 8009a7c:	f000 80b2 	beq.w	8009be4 <_dtoa_r+0x87c>
 8009a80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a84:	9e07      	ldr	r6, [sp, #28]
 8009a86:	9d04      	ldr	r5, [sp, #16]
 8009a88:	9a04      	ldr	r2, [sp, #16]
 8009a8a:	441a      	add	r2, r3
 8009a8c:	9204      	str	r2, [sp, #16]
 8009a8e:	9a05      	ldr	r2, [sp, #20]
 8009a90:	2101      	movs	r1, #1
 8009a92:	441a      	add	r2, r3
 8009a94:	4620      	mov	r0, r4
 8009a96:	9205      	str	r2, [sp, #20]
 8009a98:	f001 f942 	bl	800ad20 <__i2b>
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	dd0c      	ble.n	8009abc <_dtoa_r+0x754>
 8009aa2:	9b05      	ldr	r3, [sp, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dd09      	ble.n	8009abc <_dtoa_r+0x754>
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	9a04      	ldr	r2, [sp, #16]
 8009aac:	bfa8      	it	ge
 8009aae:	462b      	movge	r3, r5
 8009ab0:	1ad2      	subs	r2, r2, r3
 8009ab2:	9204      	str	r2, [sp, #16]
 8009ab4:	9a05      	ldr	r2, [sp, #20]
 8009ab6:	1aed      	subs	r5, r5, r3
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	9b07      	ldr	r3, [sp, #28]
 8009abe:	b31b      	cbz	r3, 8009b08 <_dtoa_r+0x7a0>
 8009ac0:	9b08      	ldr	r3, [sp, #32]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 80af 	beq.w	8009c26 <_dtoa_r+0x8be>
 8009ac8:	2e00      	cmp	r6, #0
 8009aca:	dd13      	ble.n	8009af4 <_dtoa_r+0x78c>
 8009acc:	4639      	mov	r1, r7
 8009ace:	4632      	mov	r2, r6
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f001 f9e5 	bl	800aea0 <__pow5mult>
 8009ad6:	ee18 2a10 	vmov	r2, s16
 8009ada:	4601      	mov	r1, r0
 8009adc:	4607      	mov	r7, r0
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f001 f934 	bl	800ad4c <__multiply>
 8009ae4:	ee18 1a10 	vmov	r1, s16
 8009ae8:	4680      	mov	r8, r0
 8009aea:	4620      	mov	r0, r4
 8009aec:	f001 f816 	bl	800ab1c <_Bfree>
 8009af0:	ee08 8a10 	vmov	s16, r8
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	1b9a      	subs	r2, r3, r6
 8009af8:	d006      	beq.n	8009b08 <_dtoa_r+0x7a0>
 8009afa:	ee18 1a10 	vmov	r1, s16
 8009afe:	4620      	mov	r0, r4
 8009b00:	f001 f9ce 	bl	800aea0 <__pow5mult>
 8009b04:	ee08 0a10 	vmov	s16, r0
 8009b08:	2101      	movs	r1, #1
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f001 f908 	bl	800ad20 <__i2b>
 8009b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	4606      	mov	r6, r0
 8009b16:	f340 8088 	ble.w	8009c2a <_dtoa_r+0x8c2>
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f001 f9be 	bl	800aea0 <__pow5mult>
 8009b24:	9b06      	ldr	r3, [sp, #24]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	4606      	mov	r6, r0
 8009b2a:	f340 8081 	ble.w	8009c30 <_dtoa_r+0x8c8>
 8009b2e:	f04f 0800 	mov.w	r8, #0
 8009b32:	6933      	ldr	r3, [r6, #16]
 8009b34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b38:	6918      	ldr	r0, [r3, #16]
 8009b3a:	f001 f8a1 	bl	800ac80 <__hi0bits>
 8009b3e:	f1c0 0020 	rsb	r0, r0, #32
 8009b42:	9b05      	ldr	r3, [sp, #20]
 8009b44:	4418      	add	r0, r3
 8009b46:	f010 001f 	ands.w	r0, r0, #31
 8009b4a:	f000 8092 	beq.w	8009c72 <_dtoa_r+0x90a>
 8009b4e:	f1c0 0320 	rsb	r3, r0, #32
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	f340 808a 	ble.w	8009c6c <_dtoa_r+0x904>
 8009b58:	f1c0 001c 	rsb	r0, r0, #28
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	4403      	add	r3, r0
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	4403      	add	r3, r0
 8009b66:	4405      	add	r5, r0
 8009b68:	9305      	str	r3, [sp, #20]
 8009b6a:	9b04      	ldr	r3, [sp, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dd07      	ble.n	8009b80 <_dtoa_r+0x818>
 8009b70:	ee18 1a10 	vmov	r1, s16
 8009b74:	461a      	mov	r2, r3
 8009b76:	4620      	mov	r0, r4
 8009b78:	f001 f9ec 	bl	800af54 <__lshift>
 8009b7c:	ee08 0a10 	vmov	s16, r0
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dd05      	ble.n	8009b92 <_dtoa_r+0x82a>
 8009b86:	4631      	mov	r1, r6
 8009b88:	461a      	mov	r2, r3
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f001 f9e2 	bl	800af54 <__lshift>
 8009b90:	4606      	mov	r6, r0
 8009b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d06e      	beq.n	8009c76 <_dtoa_r+0x90e>
 8009b98:	ee18 0a10 	vmov	r0, s16
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	f001 fa49 	bl	800b034 <__mcmp>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	da67      	bge.n	8009c76 <_dtoa_r+0x90e>
 8009ba6:	9b00      	ldr	r3, [sp, #0]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	ee18 1a10 	vmov	r1, s16
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	220a      	movs	r2, #10
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 ffd3 	bl	800ab60 <__multadd>
 8009bba:	9b08      	ldr	r3, [sp, #32]
 8009bbc:	ee08 0a10 	vmov	s16, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 81b1 	beq.w	8009f28 <_dtoa_r+0xbc0>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4639      	mov	r1, r7
 8009bca:	220a      	movs	r2, #10
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f000 ffc7 	bl	800ab60 <__multadd>
 8009bd2:	9b02      	ldr	r3, [sp, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	f300 808e 	bgt.w	8009cf8 <_dtoa_r+0x990>
 8009bdc:	9b06      	ldr	r3, [sp, #24]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	dc51      	bgt.n	8009c86 <_dtoa_r+0x91e>
 8009be2:	e089      	b.n	8009cf8 <_dtoa_r+0x990>
 8009be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bea:	e74b      	b.n	8009a84 <_dtoa_r+0x71c>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	1e5e      	subs	r6, r3, #1
 8009bf0:	9b07      	ldr	r3, [sp, #28]
 8009bf2:	42b3      	cmp	r3, r6
 8009bf4:	bfbf      	itttt	lt
 8009bf6:	9b07      	ldrlt	r3, [sp, #28]
 8009bf8:	9607      	strlt	r6, [sp, #28]
 8009bfa:	1af2      	sublt	r2, r6, r3
 8009bfc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009bfe:	bfb6      	itet	lt
 8009c00:	189b      	addlt	r3, r3, r2
 8009c02:	1b9e      	subge	r6, r3, r6
 8009c04:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	bfb8      	it	lt
 8009c0a:	2600      	movlt	r6, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bfb7      	itett	lt
 8009c10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009c14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009c18:	1a9d      	sublt	r5, r3, r2
 8009c1a:	2300      	movlt	r3, #0
 8009c1c:	e734      	b.n	8009a88 <_dtoa_r+0x720>
 8009c1e:	9e07      	ldr	r6, [sp, #28]
 8009c20:	9d04      	ldr	r5, [sp, #16]
 8009c22:	9f08      	ldr	r7, [sp, #32]
 8009c24:	e73b      	b.n	8009a9e <_dtoa_r+0x736>
 8009c26:	9a07      	ldr	r2, [sp, #28]
 8009c28:	e767      	b.n	8009afa <_dtoa_r+0x792>
 8009c2a:	9b06      	ldr	r3, [sp, #24]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	dc18      	bgt.n	8009c62 <_dtoa_r+0x8fa>
 8009c30:	f1ba 0f00 	cmp.w	sl, #0
 8009c34:	d115      	bne.n	8009c62 <_dtoa_r+0x8fa>
 8009c36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c3a:	b993      	cbnz	r3, 8009c62 <_dtoa_r+0x8fa>
 8009c3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c40:	0d1b      	lsrs	r3, r3, #20
 8009c42:	051b      	lsls	r3, r3, #20
 8009c44:	b183      	cbz	r3, 8009c68 <_dtoa_r+0x900>
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	9b05      	ldr	r3, [sp, #20]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	9305      	str	r3, [sp, #20]
 8009c52:	f04f 0801 	mov.w	r8, #1
 8009c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f47f af6a 	bne.w	8009b32 <_dtoa_r+0x7ca>
 8009c5e:	2001      	movs	r0, #1
 8009c60:	e76f      	b.n	8009b42 <_dtoa_r+0x7da>
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	e7f6      	b.n	8009c56 <_dtoa_r+0x8ee>
 8009c68:	4698      	mov	r8, r3
 8009c6a:	e7f4      	b.n	8009c56 <_dtoa_r+0x8ee>
 8009c6c:	f43f af7d 	beq.w	8009b6a <_dtoa_r+0x802>
 8009c70:	4618      	mov	r0, r3
 8009c72:	301c      	adds	r0, #28
 8009c74:	e772      	b.n	8009b5c <_dtoa_r+0x7f4>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc37      	bgt.n	8009cec <_dtoa_r+0x984>
 8009c7c:	9b06      	ldr	r3, [sp, #24]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	dd34      	ble.n	8009cec <_dtoa_r+0x984>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	9302      	str	r3, [sp, #8]
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	b96b      	cbnz	r3, 8009ca6 <_dtoa_r+0x93e>
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	2205      	movs	r2, #5
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 ff66 	bl	800ab60 <__multadd>
 8009c94:	4601      	mov	r1, r0
 8009c96:	4606      	mov	r6, r0
 8009c98:	ee18 0a10 	vmov	r0, s16
 8009c9c:	f001 f9ca 	bl	800b034 <__mcmp>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	f73f adbb 	bgt.w	800981c <_dtoa_r+0x4b4>
 8009ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca8:	9d01      	ldr	r5, [sp, #4]
 8009caa:	43db      	mvns	r3, r3
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 ff31 	bl	800ab1c <_Bfree>
 8009cba:	2f00      	cmp	r7, #0
 8009cbc:	f43f aea4 	beq.w	8009a08 <_dtoa_r+0x6a0>
 8009cc0:	f1b8 0f00 	cmp.w	r8, #0
 8009cc4:	d005      	beq.n	8009cd2 <_dtoa_r+0x96a>
 8009cc6:	45b8      	cmp	r8, r7
 8009cc8:	d003      	beq.n	8009cd2 <_dtoa_r+0x96a>
 8009cca:	4641      	mov	r1, r8
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 ff25 	bl	800ab1c <_Bfree>
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 ff21 	bl	800ab1c <_Bfree>
 8009cda:	e695      	b.n	8009a08 <_dtoa_r+0x6a0>
 8009cdc:	2600      	movs	r6, #0
 8009cde:	4637      	mov	r7, r6
 8009ce0:	e7e1      	b.n	8009ca6 <_dtoa_r+0x93e>
 8009ce2:	9700      	str	r7, [sp, #0]
 8009ce4:	4637      	mov	r7, r6
 8009ce6:	e599      	b.n	800981c <_dtoa_r+0x4b4>
 8009ce8:	40240000 	.word	0x40240000
 8009cec:	9b08      	ldr	r3, [sp, #32]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 80ca 	beq.w	8009e88 <_dtoa_r+0xb20>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	9302      	str	r3, [sp, #8]
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	dd05      	ble.n	8009d08 <_dtoa_r+0x9a0>
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	462a      	mov	r2, r5
 8009d00:	4620      	mov	r0, r4
 8009d02:	f001 f927 	bl	800af54 <__lshift>
 8009d06:	4607      	mov	r7, r0
 8009d08:	f1b8 0f00 	cmp.w	r8, #0
 8009d0c:	d05b      	beq.n	8009dc6 <_dtoa_r+0xa5e>
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 fec3 	bl	800aa9c <_Balloc>
 8009d16:	4605      	mov	r5, r0
 8009d18:	b928      	cbnz	r0, 8009d26 <_dtoa_r+0x9be>
 8009d1a:	4b87      	ldr	r3, [pc, #540]	; (8009f38 <_dtoa_r+0xbd0>)
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d22:	f7ff bb3b 	b.w	800939c <_dtoa_r+0x34>
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	3202      	adds	r2, #2
 8009d2a:	0092      	lsls	r2, r2, #2
 8009d2c:	f107 010c 	add.w	r1, r7, #12
 8009d30:	300c      	adds	r0, #12
 8009d32:	f7fd fbc5 	bl	80074c0 <memcpy>
 8009d36:	2201      	movs	r2, #1
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f001 f90a 	bl	800af54 <__lshift>
 8009d40:	9b01      	ldr	r3, [sp, #4]
 8009d42:	f103 0901 	add.w	r9, r3, #1
 8009d46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	9305      	str	r3, [sp, #20]
 8009d4e:	f00a 0301 	and.w	r3, sl, #1
 8009d52:	46b8      	mov	r8, r7
 8009d54:	9304      	str	r3, [sp, #16]
 8009d56:	4607      	mov	r7, r0
 8009d58:	4631      	mov	r1, r6
 8009d5a:	ee18 0a10 	vmov	r0, s16
 8009d5e:	f7ff fa77 	bl	8009250 <quorem>
 8009d62:	4641      	mov	r1, r8
 8009d64:	9002      	str	r0, [sp, #8]
 8009d66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d6a:	ee18 0a10 	vmov	r0, s16
 8009d6e:	f001 f961 	bl	800b034 <__mcmp>
 8009d72:	463a      	mov	r2, r7
 8009d74:	9003      	str	r0, [sp, #12]
 8009d76:	4631      	mov	r1, r6
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 f977 	bl	800b06c <__mdiff>
 8009d7e:	68c2      	ldr	r2, [r0, #12]
 8009d80:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009d84:	4605      	mov	r5, r0
 8009d86:	bb02      	cbnz	r2, 8009dca <_dtoa_r+0xa62>
 8009d88:	4601      	mov	r1, r0
 8009d8a:	ee18 0a10 	vmov	r0, s16
 8009d8e:	f001 f951 	bl	800b034 <__mcmp>
 8009d92:	4602      	mov	r2, r0
 8009d94:	4629      	mov	r1, r5
 8009d96:	4620      	mov	r0, r4
 8009d98:	9207      	str	r2, [sp, #28]
 8009d9a:	f000 febf 	bl	800ab1c <_Bfree>
 8009d9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009da2:	ea43 0102 	orr.w	r1, r3, r2
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	430b      	orrs	r3, r1
 8009daa:	464d      	mov	r5, r9
 8009dac:	d10f      	bne.n	8009dce <_dtoa_r+0xa66>
 8009dae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009db2:	d02a      	beq.n	8009e0a <_dtoa_r+0xaa2>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dd02      	ble.n	8009dc0 <_dtoa_r+0xa58>
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009dc0:	f88b a000 	strb.w	sl, [fp]
 8009dc4:	e775      	b.n	8009cb2 <_dtoa_r+0x94a>
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	e7ba      	b.n	8009d40 <_dtoa_r+0x9d8>
 8009dca:	2201      	movs	r2, #1
 8009dcc:	e7e2      	b.n	8009d94 <_dtoa_r+0xa2c>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	db04      	blt.n	8009dde <_dtoa_r+0xa76>
 8009dd4:	9906      	ldr	r1, [sp, #24]
 8009dd6:	430b      	orrs	r3, r1
 8009dd8:	9904      	ldr	r1, [sp, #16]
 8009dda:	430b      	orrs	r3, r1
 8009ddc:	d122      	bne.n	8009e24 <_dtoa_r+0xabc>
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	ddee      	ble.n	8009dc0 <_dtoa_r+0xa58>
 8009de2:	ee18 1a10 	vmov	r1, s16
 8009de6:	2201      	movs	r2, #1
 8009de8:	4620      	mov	r0, r4
 8009dea:	f001 f8b3 	bl	800af54 <__lshift>
 8009dee:	4631      	mov	r1, r6
 8009df0:	ee08 0a10 	vmov	s16, r0
 8009df4:	f001 f91e 	bl	800b034 <__mcmp>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	dc03      	bgt.n	8009e04 <_dtoa_r+0xa9c>
 8009dfc:	d1e0      	bne.n	8009dc0 <_dtoa_r+0xa58>
 8009dfe:	f01a 0f01 	tst.w	sl, #1
 8009e02:	d0dd      	beq.n	8009dc0 <_dtoa_r+0xa58>
 8009e04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e08:	d1d7      	bne.n	8009dba <_dtoa_r+0xa52>
 8009e0a:	2339      	movs	r3, #57	; 0x39
 8009e0c:	f88b 3000 	strb.w	r3, [fp]
 8009e10:	462b      	mov	r3, r5
 8009e12:	461d      	mov	r5, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e1a:	2a39      	cmp	r2, #57	; 0x39
 8009e1c:	d071      	beq.n	8009f02 <_dtoa_r+0xb9a>
 8009e1e:	3201      	adds	r2, #1
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	e746      	b.n	8009cb2 <_dtoa_r+0x94a>
 8009e24:	2a00      	cmp	r2, #0
 8009e26:	dd07      	ble.n	8009e38 <_dtoa_r+0xad0>
 8009e28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e2c:	d0ed      	beq.n	8009e0a <_dtoa_r+0xaa2>
 8009e2e:	f10a 0301 	add.w	r3, sl, #1
 8009e32:	f88b 3000 	strb.w	r3, [fp]
 8009e36:	e73c      	b.n	8009cb2 <_dtoa_r+0x94a>
 8009e38:	9b05      	ldr	r3, [sp, #20]
 8009e3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009e3e:	4599      	cmp	r9, r3
 8009e40:	d047      	beq.n	8009ed2 <_dtoa_r+0xb6a>
 8009e42:	ee18 1a10 	vmov	r1, s16
 8009e46:	2300      	movs	r3, #0
 8009e48:	220a      	movs	r2, #10
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fe88 	bl	800ab60 <__multadd>
 8009e50:	45b8      	cmp	r8, r7
 8009e52:	ee08 0a10 	vmov	s16, r0
 8009e56:	f04f 0300 	mov.w	r3, #0
 8009e5a:	f04f 020a 	mov.w	r2, #10
 8009e5e:	4641      	mov	r1, r8
 8009e60:	4620      	mov	r0, r4
 8009e62:	d106      	bne.n	8009e72 <_dtoa_r+0xb0a>
 8009e64:	f000 fe7c 	bl	800ab60 <__multadd>
 8009e68:	4680      	mov	r8, r0
 8009e6a:	4607      	mov	r7, r0
 8009e6c:	f109 0901 	add.w	r9, r9, #1
 8009e70:	e772      	b.n	8009d58 <_dtoa_r+0x9f0>
 8009e72:	f000 fe75 	bl	800ab60 <__multadd>
 8009e76:	4639      	mov	r1, r7
 8009e78:	4680      	mov	r8, r0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 fe6e 	bl	800ab60 <__multadd>
 8009e84:	4607      	mov	r7, r0
 8009e86:	e7f1      	b.n	8009e6c <_dtoa_r+0xb04>
 8009e88:	9b03      	ldr	r3, [sp, #12]
 8009e8a:	9302      	str	r3, [sp, #8]
 8009e8c:	9d01      	ldr	r5, [sp, #4]
 8009e8e:	ee18 0a10 	vmov	r0, s16
 8009e92:	4631      	mov	r1, r6
 8009e94:	f7ff f9dc 	bl	8009250 <quorem>
 8009e98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	f805 ab01 	strb.w	sl, [r5], #1
 8009ea2:	1aea      	subs	r2, r5, r3
 8009ea4:	9b02      	ldr	r3, [sp, #8]
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	dd09      	ble.n	8009ebe <_dtoa_r+0xb56>
 8009eaa:	ee18 1a10 	vmov	r1, s16
 8009eae:	2300      	movs	r3, #0
 8009eb0:	220a      	movs	r2, #10
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fe54 	bl	800ab60 <__multadd>
 8009eb8:	ee08 0a10 	vmov	s16, r0
 8009ebc:	e7e7      	b.n	8009e8e <_dtoa_r+0xb26>
 8009ebe:	9b02      	ldr	r3, [sp, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bfc8      	it	gt
 8009ec4:	461d      	movgt	r5, r3
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	bfd8      	it	le
 8009eca:	2501      	movle	r5, #1
 8009ecc:	441d      	add	r5, r3
 8009ece:	f04f 0800 	mov.w	r8, #0
 8009ed2:	ee18 1a10 	vmov	r1, s16
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f001 f83b 	bl	800af54 <__lshift>
 8009ede:	4631      	mov	r1, r6
 8009ee0:	ee08 0a10 	vmov	s16, r0
 8009ee4:	f001 f8a6 	bl	800b034 <__mcmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	dc91      	bgt.n	8009e10 <_dtoa_r+0xaa8>
 8009eec:	d102      	bne.n	8009ef4 <_dtoa_r+0xb8c>
 8009eee:	f01a 0f01 	tst.w	sl, #1
 8009ef2:	d18d      	bne.n	8009e10 <_dtoa_r+0xaa8>
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	461d      	mov	r5, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a30      	cmp	r2, #48	; 0x30
 8009efe:	d0fa      	beq.n	8009ef6 <_dtoa_r+0xb8e>
 8009f00:	e6d7      	b.n	8009cb2 <_dtoa_r+0x94a>
 8009f02:	9a01      	ldr	r2, [sp, #4]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d184      	bne.n	8009e12 <_dtoa_r+0xaaa>
 8009f08:	9b00      	ldr	r3, [sp, #0]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	2331      	movs	r3, #49	; 0x31
 8009f10:	7013      	strb	r3, [r2, #0]
 8009f12:	e6ce      	b.n	8009cb2 <_dtoa_r+0x94a>
 8009f14:	4b09      	ldr	r3, [pc, #36]	; (8009f3c <_dtoa_r+0xbd4>)
 8009f16:	f7ff ba95 	b.w	8009444 <_dtoa_r+0xdc>
 8009f1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f47f aa6e 	bne.w	80093fe <_dtoa_r+0x96>
 8009f22:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <_dtoa_r+0xbd8>)
 8009f24:	f7ff ba8e 	b.w	8009444 <_dtoa_r+0xdc>
 8009f28:	9b02      	ldr	r3, [sp, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dcae      	bgt.n	8009e8c <_dtoa_r+0xb24>
 8009f2e:	9b06      	ldr	r3, [sp, #24]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	f73f aea8 	bgt.w	8009c86 <_dtoa_r+0x91e>
 8009f36:	e7a9      	b.n	8009e8c <_dtoa_r+0xb24>
 8009f38:	0800c330 	.word	0x0800c330
 8009f3c:	0800c134 	.word	0x0800c134
 8009f40:	0800c2b1 	.word	0x0800c2b1

08009f44 <__sflush_r>:
 8009f44:	898a      	ldrh	r2, [r1, #12]
 8009f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	0710      	lsls	r0, r2, #28
 8009f4e:	460c      	mov	r4, r1
 8009f50:	d458      	bmi.n	800a004 <__sflush_r+0xc0>
 8009f52:	684b      	ldr	r3, [r1, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dc05      	bgt.n	8009f64 <__sflush_r+0x20>
 8009f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	dc02      	bgt.n	8009f64 <__sflush_r+0x20>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f66:	2e00      	cmp	r6, #0
 8009f68:	d0f9      	beq.n	8009f5e <__sflush_r+0x1a>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f70:	682f      	ldr	r7, [r5, #0]
 8009f72:	602b      	str	r3, [r5, #0]
 8009f74:	d032      	beq.n	8009fdc <__sflush_r+0x98>
 8009f76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	075a      	lsls	r2, r3, #29
 8009f7c:	d505      	bpl.n	8009f8a <__sflush_r+0x46>
 8009f7e:	6863      	ldr	r3, [r4, #4]
 8009f80:	1ac0      	subs	r0, r0, r3
 8009f82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f84:	b10b      	cbz	r3, 8009f8a <__sflush_r+0x46>
 8009f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f88:	1ac0      	subs	r0, r0, r3
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f90:	6a21      	ldr	r1, [r4, #32]
 8009f92:	4628      	mov	r0, r5
 8009f94:	47b0      	blx	r6
 8009f96:	1c43      	adds	r3, r0, #1
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	d106      	bne.n	8009faa <__sflush_r+0x66>
 8009f9c:	6829      	ldr	r1, [r5, #0]
 8009f9e:	291d      	cmp	r1, #29
 8009fa0:	d82c      	bhi.n	8009ffc <__sflush_r+0xb8>
 8009fa2:	4a2a      	ldr	r2, [pc, #168]	; (800a04c <__sflush_r+0x108>)
 8009fa4:	40ca      	lsrs	r2, r1
 8009fa6:	07d6      	lsls	r6, r2, #31
 8009fa8:	d528      	bpl.n	8009ffc <__sflush_r+0xb8>
 8009faa:	2200      	movs	r2, #0
 8009fac:	6062      	str	r2, [r4, #4]
 8009fae:	04d9      	lsls	r1, r3, #19
 8009fb0:	6922      	ldr	r2, [r4, #16]
 8009fb2:	6022      	str	r2, [r4, #0]
 8009fb4:	d504      	bpl.n	8009fc0 <__sflush_r+0x7c>
 8009fb6:	1c42      	adds	r2, r0, #1
 8009fb8:	d101      	bne.n	8009fbe <__sflush_r+0x7a>
 8009fba:	682b      	ldr	r3, [r5, #0]
 8009fbc:	b903      	cbnz	r3, 8009fc0 <__sflush_r+0x7c>
 8009fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8009fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc2:	602f      	str	r7, [r5, #0]
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	d0ca      	beq.n	8009f5e <__sflush_r+0x1a>
 8009fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d002      	beq.n	8009fd6 <__sflush_r+0x92>
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f001 fa3b 	bl	800b44c <_free_r>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8009fda:	e7c1      	b.n	8009f60 <__sflush_r+0x1c>
 8009fdc:	6a21      	ldr	r1, [r4, #32]
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	47b0      	blx	r6
 8009fe4:	1c41      	adds	r1, r0, #1
 8009fe6:	d1c7      	bne.n	8009f78 <__sflush_r+0x34>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0c4      	beq.n	8009f78 <__sflush_r+0x34>
 8009fee:	2b1d      	cmp	r3, #29
 8009ff0:	d001      	beq.n	8009ff6 <__sflush_r+0xb2>
 8009ff2:	2b16      	cmp	r3, #22
 8009ff4:	d101      	bne.n	8009ffa <__sflush_r+0xb6>
 8009ff6:	602f      	str	r7, [r5, #0]
 8009ff8:	e7b1      	b.n	8009f5e <__sflush_r+0x1a>
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	e7ad      	b.n	8009f60 <__sflush_r+0x1c>
 800a004:	690f      	ldr	r7, [r1, #16]
 800a006:	2f00      	cmp	r7, #0
 800a008:	d0a9      	beq.n	8009f5e <__sflush_r+0x1a>
 800a00a:	0793      	lsls	r3, r2, #30
 800a00c:	680e      	ldr	r6, [r1, #0]
 800a00e:	bf08      	it	eq
 800a010:	694b      	ldreq	r3, [r1, #20]
 800a012:	600f      	str	r7, [r1, #0]
 800a014:	bf18      	it	ne
 800a016:	2300      	movne	r3, #0
 800a018:	eba6 0807 	sub.w	r8, r6, r7
 800a01c:	608b      	str	r3, [r1, #8]
 800a01e:	f1b8 0f00 	cmp.w	r8, #0
 800a022:	dd9c      	ble.n	8009f5e <__sflush_r+0x1a>
 800a024:	6a21      	ldr	r1, [r4, #32]
 800a026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a028:	4643      	mov	r3, r8
 800a02a:	463a      	mov	r2, r7
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b0      	blx	r6
 800a030:	2800      	cmp	r0, #0
 800a032:	dc06      	bgt.n	800a042 <__sflush_r+0xfe>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a040:	e78e      	b.n	8009f60 <__sflush_r+0x1c>
 800a042:	4407      	add	r7, r0
 800a044:	eba8 0800 	sub.w	r8, r8, r0
 800a048:	e7e9      	b.n	800a01e <__sflush_r+0xda>
 800a04a:	bf00      	nop
 800a04c:	20400001 	.word	0x20400001

0800a050 <_fflush_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	690b      	ldr	r3, [r1, #16]
 800a054:	4605      	mov	r5, r0
 800a056:	460c      	mov	r4, r1
 800a058:	b913      	cbnz	r3, 800a060 <_fflush_r+0x10>
 800a05a:	2500      	movs	r5, #0
 800a05c:	4628      	mov	r0, r5
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	b118      	cbz	r0, 800a06a <_fflush_r+0x1a>
 800a062:	6983      	ldr	r3, [r0, #24]
 800a064:	b90b      	cbnz	r3, 800a06a <_fflush_r+0x1a>
 800a066:	f000 f887 	bl	800a178 <__sinit>
 800a06a:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <_fflush_r+0x6c>)
 800a06c:	429c      	cmp	r4, r3
 800a06e:	d11b      	bne.n	800a0a8 <_fflush_r+0x58>
 800a070:	686c      	ldr	r4, [r5, #4]
 800a072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0ef      	beq.n	800a05a <_fflush_r+0xa>
 800a07a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a07c:	07d0      	lsls	r0, r2, #31
 800a07e:	d404      	bmi.n	800a08a <_fflush_r+0x3a>
 800a080:	0599      	lsls	r1, r3, #22
 800a082:	d402      	bmi.n	800a08a <_fflush_r+0x3a>
 800a084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a086:	f000 fc88 	bl	800a99a <__retarget_lock_acquire_recursive>
 800a08a:	4628      	mov	r0, r5
 800a08c:	4621      	mov	r1, r4
 800a08e:	f7ff ff59 	bl	8009f44 <__sflush_r>
 800a092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a094:	07da      	lsls	r2, r3, #31
 800a096:	4605      	mov	r5, r0
 800a098:	d4e0      	bmi.n	800a05c <_fflush_r+0xc>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	059b      	lsls	r3, r3, #22
 800a09e:	d4dd      	bmi.n	800a05c <_fflush_r+0xc>
 800a0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0a2:	f000 fc7b 	bl	800a99c <__retarget_lock_release_recursive>
 800a0a6:	e7d9      	b.n	800a05c <_fflush_r+0xc>
 800a0a8:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <_fflush_r+0x70>)
 800a0aa:	429c      	cmp	r4, r3
 800a0ac:	d101      	bne.n	800a0b2 <_fflush_r+0x62>
 800a0ae:	68ac      	ldr	r4, [r5, #8]
 800a0b0:	e7df      	b.n	800a072 <_fflush_r+0x22>
 800a0b2:	4b04      	ldr	r3, [pc, #16]	; (800a0c4 <_fflush_r+0x74>)
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	bf08      	it	eq
 800a0b8:	68ec      	ldreq	r4, [r5, #12]
 800a0ba:	e7da      	b.n	800a072 <_fflush_r+0x22>
 800a0bc:	0800c364 	.word	0x0800c364
 800a0c0:	0800c384 	.word	0x0800c384
 800a0c4:	0800c344 	.word	0x0800c344

0800a0c8 <std>:
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a0d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0d6:	6083      	str	r3, [r0, #8]
 800a0d8:	8181      	strh	r1, [r0, #12]
 800a0da:	6643      	str	r3, [r0, #100]	; 0x64
 800a0dc:	81c2      	strh	r2, [r0, #14]
 800a0de:	6183      	str	r3, [r0, #24]
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	305c      	adds	r0, #92	; 0x5c
 800a0e6:	f7fd f9f9 	bl	80074dc <memset>
 800a0ea:	4b05      	ldr	r3, [pc, #20]	; (800a100 <std+0x38>)
 800a0ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a0ee:	4b05      	ldr	r3, [pc, #20]	; (800a104 <std+0x3c>)
 800a0f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0f2:	4b05      	ldr	r3, [pc, #20]	; (800a108 <std+0x40>)
 800a0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0f6:	4b05      	ldr	r3, [pc, #20]	; (800a10c <std+0x44>)
 800a0f8:	6224      	str	r4, [r4, #32]
 800a0fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	bf00      	nop
 800a100:	0800bc39 	.word	0x0800bc39
 800a104:	0800bc5b 	.word	0x0800bc5b
 800a108:	0800bc93 	.word	0x0800bc93
 800a10c:	0800bcb7 	.word	0x0800bcb7

0800a110 <_cleanup_r>:
 800a110:	4901      	ldr	r1, [pc, #4]	; (800a118 <_cleanup_r+0x8>)
 800a112:	f000 b8af 	b.w	800a274 <_fwalk_reent>
 800a116:	bf00      	nop
 800a118:	0800a051 	.word	0x0800a051

0800a11c <__sfmoreglue>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	2268      	movs	r2, #104	; 0x68
 800a120:	1e4d      	subs	r5, r1, #1
 800a122:	4355      	muls	r5, r2
 800a124:	460e      	mov	r6, r1
 800a126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a12a:	f001 f9fb 	bl	800b524 <_malloc_r>
 800a12e:	4604      	mov	r4, r0
 800a130:	b140      	cbz	r0, 800a144 <__sfmoreglue+0x28>
 800a132:	2100      	movs	r1, #0
 800a134:	e9c0 1600 	strd	r1, r6, [r0]
 800a138:	300c      	adds	r0, #12
 800a13a:	60a0      	str	r0, [r4, #8]
 800a13c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a140:	f7fd f9cc 	bl	80074dc <memset>
 800a144:	4620      	mov	r0, r4
 800a146:	bd70      	pop	{r4, r5, r6, pc}

0800a148 <__sfp_lock_acquire>:
 800a148:	4801      	ldr	r0, [pc, #4]	; (800a150 <__sfp_lock_acquire+0x8>)
 800a14a:	f000 bc26 	b.w	800a99a <__retarget_lock_acquire_recursive>
 800a14e:	bf00      	nop
 800a150:	200003cd 	.word	0x200003cd

0800a154 <__sfp_lock_release>:
 800a154:	4801      	ldr	r0, [pc, #4]	; (800a15c <__sfp_lock_release+0x8>)
 800a156:	f000 bc21 	b.w	800a99c <__retarget_lock_release_recursive>
 800a15a:	bf00      	nop
 800a15c:	200003cd 	.word	0x200003cd

0800a160 <__sinit_lock_acquire>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__sinit_lock_acquire+0x8>)
 800a162:	f000 bc1a 	b.w	800a99a <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	200003ce 	.word	0x200003ce

0800a16c <__sinit_lock_release>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__sinit_lock_release+0x8>)
 800a16e:	f000 bc15 	b.w	800a99c <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	200003ce 	.word	0x200003ce

0800a178 <__sinit>:
 800a178:	b510      	push	{r4, lr}
 800a17a:	4604      	mov	r4, r0
 800a17c:	f7ff fff0 	bl	800a160 <__sinit_lock_acquire>
 800a180:	69a3      	ldr	r3, [r4, #24]
 800a182:	b11b      	cbz	r3, 800a18c <__sinit+0x14>
 800a184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a188:	f7ff bff0 	b.w	800a16c <__sinit_lock_release>
 800a18c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a190:	6523      	str	r3, [r4, #80]	; 0x50
 800a192:	4b13      	ldr	r3, [pc, #76]	; (800a1e0 <__sinit+0x68>)
 800a194:	4a13      	ldr	r2, [pc, #76]	; (800a1e4 <__sinit+0x6c>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	62a2      	str	r2, [r4, #40]	; 0x28
 800a19a:	42a3      	cmp	r3, r4
 800a19c:	bf04      	itt	eq
 800a19e:	2301      	moveq	r3, #1
 800a1a0:	61a3      	streq	r3, [r4, #24]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 f820 	bl	800a1e8 <__sfp>
 800a1a8:	6060      	str	r0, [r4, #4]
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 f81c 	bl	800a1e8 <__sfp>
 800a1b0:	60a0      	str	r0, [r4, #8]
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 f818 	bl	800a1e8 <__sfp>
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	60e0      	str	r0, [r4, #12]
 800a1bc:	2104      	movs	r1, #4
 800a1be:	6860      	ldr	r0, [r4, #4]
 800a1c0:	f7ff ff82 	bl	800a0c8 <std>
 800a1c4:	68a0      	ldr	r0, [r4, #8]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	2109      	movs	r1, #9
 800a1ca:	f7ff ff7d 	bl	800a0c8 <std>
 800a1ce:	68e0      	ldr	r0, [r4, #12]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	2112      	movs	r1, #18
 800a1d4:	f7ff ff78 	bl	800a0c8 <std>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	61a3      	str	r3, [r4, #24]
 800a1dc:	e7d2      	b.n	800a184 <__sinit+0xc>
 800a1de:	bf00      	nop
 800a1e0:	0800c120 	.word	0x0800c120
 800a1e4:	0800a111 	.word	0x0800a111

0800a1e8 <__sfp>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	f7ff ffac 	bl	800a148 <__sfp_lock_acquire>
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	; (800a26c <__sfp+0x84>)
 800a1f2:	681e      	ldr	r6, [r3, #0]
 800a1f4:	69b3      	ldr	r3, [r6, #24]
 800a1f6:	b913      	cbnz	r3, 800a1fe <__sfp+0x16>
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f7ff ffbd 	bl	800a178 <__sinit>
 800a1fe:	3648      	adds	r6, #72	; 0x48
 800a200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a204:	3b01      	subs	r3, #1
 800a206:	d503      	bpl.n	800a210 <__sfp+0x28>
 800a208:	6833      	ldr	r3, [r6, #0]
 800a20a:	b30b      	cbz	r3, 800a250 <__sfp+0x68>
 800a20c:	6836      	ldr	r6, [r6, #0]
 800a20e:	e7f7      	b.n	800a200 <__sfp+0x18>
 800a210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a214:	b9d5      	cbnz	r5, 800a24c <__sfp+0x64>
 800a216:	4b16      	ldr	r3, [pc, #88]	; (800a270 <__sfp+0x88>)
 800a218:	60e3      	str	r3, [r4, #12]
 800a21a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a21e:	6665      	str	r5, [r4, #100]	; 0x64
 800a220:	f000 fbba 	bl	800a998 <__retarget_lock_init_recursive>
 800a224:	f7ff ff96 	bl	800a154 <__sfp_lock_release>
 800a228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a22c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a230:	6025      	str	r5, [r4, #0]
 800a232:	61a5      	str	r5, [r4, #24]
 800a234:	2208      	movs	r2, #8
 800a236:	4629      	mov	r1, r5
 800a238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a23c:	f7fd f94e 	bl	80074dc <memset>
 800a240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a248:	4620      	mov	r0, r4
 800a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a24c:	3468      	adds	r4, #104	; 0x68
 800a24e:	e7d9      	b.n	800a204 <__sfp+0x1c>
 800a250:	2104      	movs	r1, #4
 800a252:	4638      	mov	r0, r7
 800a254:	f7ff ff62 	bl	800a11c <__sfmoreglue>
 800a258:	4604      	mov	r4, r0
 800a25a:	6030      	str	r0, [r6, #0]
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d1d5      	bne.n	800a20c <__sfp+0x24>
 800a260:	f7ff ff78 	bl	800a154 <__sfp_lock_release>
 800a264:	230c      	movs	r3, #12
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	e7ee      	b.n	800a248 <__sfp+0x60>
 800a26a:	bf00      	nop
 800a26c:	0800c120 	.word	0x0800c120
 800a270:	ffff0001 	.word	0xffff0001

0800a274 <_fwalk_reent>:
 800a274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a278:	4606      	mov	r6, r0
 800a27a:	4688      	mov	r8, r1
 800a27c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a280:	2700      	movs	r7, #0
 800a282:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a286:	f1b9 0901 	subs.w	r9, r9, #1
 800a28a:	d505      	bpl.n	800a298 <_fwalk_reent+0x24>
 800a28c:	6824      	ldr	r4, [r4, #0]
 800a28e:	2c00      	cmp	r4, #0
 800a290:	d1f7      	bne.n	800a282 <_fwalk_reent+0xe>
 800a292:	4638      	mov	r0, r7
 800a294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a298:	89ab      	ldrh	r3, [r5, #12]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d907      	bls.n	800a2ae <_fwalk_reent+0x3a>
 800a29e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	d003      	beq.n	800a2ae <_fwalk_reent+0x3a>
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	47c0      	blx	r8
 800a2ac:	4307      	orrs	r7, r0
 800a2ae:	3568      	adds	r5, #104	; 0x68
 800a2b0:	e7e9      	b.n	800a286 <_fwalk_reent+0x12>

0800a2b2 <rshift>:
 800a2b2:	6903      	ldr	r3, [r0, #16]
 800a2b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2c0:	f100 0414 	add.w	r4, r0, #20
 800a2c4:	dd45      	ble.n	800a352 <rshift+0xa0>
 800a2c6:	f011 011f 	ands.w	r1, r1, #31
 800a2ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2d2:	d10c      	bne.n	800a2ee <rshift+0x3c>
 800a2d4:	f100 0710 	add.w	r7, r0, #16
 800a2d8:	4629      	mov	r1, r5
 800a2da:	42b1      	cmp	r1, r6
 800a2dc:	d334      	bcc.n	800a348 <rshift+0x96>
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	1eea      	subs	r2, r5, #3
 800a2e4:	4296      	cmp	r6, r2
 800a2e6:	bf38      	it	cc
 800a2e8:	2300      	movcc	r3, #0
 800a2ea:	4423      	add	r3, r4
 800a2ec:	e015      	b.n	800a31a <rshift+0x68>
 800a2ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2f2:	f1c1 0820 	rsb	r8, r1, #32
 800a2f6:	40cf      	lsrs	r7, r1
 800a2f8:	f105 0e04 	add.w	lr, r5, #4
 800a2fc:	46a1      	mov	r9, r4
 800a2fe:	4576      	cmp	r6, lr
 800a300:	46f4      	mov	ip, lr
 800a302:	d815      	bhi.n	800a330 <rshift+0x7e>
 800a304:	1a9a      	subs	r2, r3, r2
 800a306:	0092      	lsls	r2, r2, #2
 800a308:	3a04      	subs	r2, #4
 800a30a:	3501      	adds	r5, #1
 800a30c:	42ae      	cmp	r6, r5
 800a30e:	bf38      	it	cc
 800a310:	2200      	movcc	r2, #0
 800a312:	18a3      	adds	r3, r4, r2
 800a314:	50a7      	str	r7, [r4, r2]
 800a316:	b107      	cbz	r7, 800a31a <rshift+0x68>
 800a318:	3304      	adds	r3, #4
 800a31a:	1b1a      	subs	r2, r3, r4
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a322:	bf08      	it	eq
 800a324:	2300      	moveq	r3, #0
 800a326:	6102      	str	r2, [r0, #16]
 800a328:	bf08      	it	eq
 800a32a:	6143      	streq	r3, [r0, #20]
 800a32c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a330:	f8dc c000 	ldr.w	ip, [ip]
 800a334:	fa0c fc08 	lsl.w	ip, ip, r8
 800a338:	ea4c 0707 	orr.w	r7, ip, r7
 800a33c:	f849 7b04 	str.w	r7, [r9], #4
 800a340:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a344:	40cf      	lsrs	r7, r1
 800a346:	e7da      	b.n	800a2fe <rshift+0x4c>
 800a348:	f851 cb04 	ldr.w	ip, [r1], #4
 800a34c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a350:	e7c3      	b.n	800a2da <rshift+0x28>
 800a352:	4623      	mov	r3, r4
 800a354:	e7e1      	b.n	800a31a <rshift+0x68>

0800a356 <__hexdig_fun>:
 800a356:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a35a:	2b09      	cmp	r3, #9
 800a35c:	d802      	bhi.n	800a364 <__hexdig_fun+0xe>
 800a35e:	3820      	subs	r0, #32
 800a360:	b2c0      	uxtb	r0, r0
 800a362:	4770      	bx	lr
 800a364:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a368:	2b05      	cmp	r3, #5
 800a36a:	d801      	bhi.n	800a370 <__hexdig_fun+0x1a>
 800a36c:	3847      	subs	r0, #71	; 0x47
 800a36e:	e7f7      	b.n	800a360 <__hexdig_fun+0xa>
 800a370:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a374:	2b05      	cmp	r3, #5
 800a376:	d801      	bhi.n	800a37c <__hexdig_fun+0x26>
 800a378:	3827      	subs	r0, #39	; 0x27
 800a37a:	e7f1      	b.n	800a360 <__hexdig_fun+0xa>
 800a37c:	2000      	movs	r0, #0
 800a37e:	4770      	bx	lr

0800a380 <__gethex>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	ed2d 8b02 	vpush	{d8}
 800a388:	b089      	sub	sp, #36	; 0x24
 800a38a:	ee08 0a10 	vmov	s16, r0
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	4bb4      	ldr	r3, [pc, #720]	; (800a664 <__gethex+0x2e4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	4618      	mov	r0, r3
 800a398:	468b      	mov	fp, r1
 800a39a:	4690      	mov	r8, r2
 800a39c:	f7f5 ff28 	bl	80001f0 <strlen>
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	f8db 2000 	ldr.w	r2, [fp]
 800a3a6:	4403      	add	r3, r0
 800a3a8:	4682      	mov	sl, r0
 800a3aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a3ae:	9305      	str	r3, [sp, #20]
 800a3b0:	1c93      	adds	r3, r2, #2
 800a3b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a3b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a3ba:	32fe      	adds	r2, #254	; 0xfe
 800a3bc:	18d1      	adds	r1, r2, r3
 800a3be:	461f      	mov	r7, r3
 800a3c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3c4:	9100      	str	r1, [sp, #0]
 800a3c6:	2830      	cmp	r0, #48	; 0x30
 800a3c8:	d0f8      	beq.n	800a3bc <__gethex+0x3c>
 800a3ca:	f7ff ffc4 	bl	800a356 <__hexdig_fun>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d13a      	bne.n	800a44a <__gethex+0xca>
 800a3d4:	9901      	ldr	r1, [sp, #4]
 800a3d6:	4652      	mov	r2, sl
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f001 fc70 	bl	800bcbe <strncmp>
 800a3de:	4605      	mov	r5, r0
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d168      	bne.n	800a4b6 <__gethex+0x136>
 800a3e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a3e8:	eb07 060a 	add.w	r6, r7, sl
 800a3ec:	f7ff ffb3 	bl	800a356 <__hexdig_fun>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d062      	beq.n	800a4ba <__gethex+0x13a>
 800a3f4:	4633      	mov	r3, r6
 800a3f6:	7818      	ldrb	r0, [r3, #0]
 800a3f8:	2830      	cmp	r0, #48	; 0x30
 800a3fa:	461f      	mov	r7, r3
 800a3fc:	f103 0301 	add.w	r3, r3, #1
 800a400:	d0f9      	beq.n	800a3f6 <__gethex+0x76>
 800a402:	f7ff ffa8 	bl	800a356 <__hexdig_fun>
 800a406:	2301      	movs	r3, #1
 800a408:	fab0 f480 	clz	r4, r0
 800a40c:	0964      	lsrs	r4, r4, #5
 800a40e:	4635      	mov	r5, r6
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	463a      	mov	r2, r7
 800a414:	4616      	mov	r6, r2
 800a416:	3201      	adds	r2, #1
 800a418:	7830      	ldrb	r0, [r6, #0]
 800a41a:	f7ff ff9c 	bl	800a356 <__hexdig_fun>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d1f8      	bne.n	800a414 <__gethex+0x94>
 800a422:	9901      	ldr	r1, [sp, #4]
 800a424:	4652      	mov	r2, sl
 800a426:	4630      	mov	r0, r6
 800a428:	f001 fc49 	bl	800bcbe <strncmp>
 800a42c:	b980      	cbnz	r0, 800a450 <__gethex+0xd0>
 800a42e:	b94d      	cbnz	r5, 800a444 <__gethex+0xc4>
 800a430:	eb06 050a 	add.w	r5, r6, sl
 800a434:	462a      	mov	r2, r5
 800a436:	4616      	mov	r6, r2
 800a438:	3201      	adds	r2, #1
 800a43a:	7830      	ldrb	r0, [r6, #0]
 800a43c:	f7ff ff8b 	bl	800a356 <__hexdig_fun>
 800a440:	2800      	cmp	r0, #0
 800a442:	d1f8      	bne.n	800a436 <__gethex+0xb6>
 800a444:	1bad      	subs	r5, r5, r6
 800a446:	00ad      	lsls	r5, r5, #2
 800a448:	e004      	b.n	800a454 <__gethex+0xd4>
 800a44a:	2400      	movs	r4, #0
 800a44c:	4625      	mov	r5, r4
 800a44e:	e7e0      	b.n	800a412 <__gethex+0x92>
 800a450:	2d00      	cmp	r5, #0
 800a452:	d1f7      	bne.n	800a444 <__gethex+0xc4>
 800a454:	7833      	ldrb	r3, [r6, #0]
 800a456:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a45a:	2b50      	cmp	r3, #80	; 0x50
 800a45c:	d13b      	bne.n	800a4d6 <__gethex+0x156>
 800a45e:	7873      	ldrb	r3, [r6, #1]
 800a460:	2b2b      	cmp	r3, #43	; 0x2b
 800a462:	d02c      	beq.n	800a4be <__gethex+0x13e>
 800a464:	2b2d      	cmp	r3, #45	; 0x2d
 800a466:	d02e      	beq.n	800a4c6 <__gethex+0x146>
 800a468:	1c71      	adds	r1, r6, #1
 800a46a:	f04f 0900 	mov.w	r9, #0
 800a46e:	7808      	ldrb	r0, [r1, #0]
 800a470:	f7ff ff71 	bl	800a356 <__hexdig_fun>
 800a474:	1e43      	subs	r3, r0, #1
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b18      	cmp	r3, #24
 800a47a:	d82c      	bhi.n	800a4d6 <__gethex+0x156>
 800a47c:	f1a0 0210 	sub.w	r2, r0, #16
 800a480:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a484:	f7ff ff67 	bl	800a356 <__hexdig_fun>
 800a488:	1e43      	subs	r3, r0, #1
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b18      	cmp	r3, #24
 800a48e:	d91d      	bls.n	800a4cc <__gethex+0x14c>
 800a490:	f1b9 0f00 	cmp.w	r9, #0
 800a494:	d000      	beq.n	800a498 <__gethex+0x118>
 800a496:	4252      	negs	r2, r2
 800a498:	4415      	add	r5, r2
 800a49a:	f8cb 1000 	str.w	r1, [fp]
 800a49e:	b1e4      	cbz	r4, 800a4da <__gethex+0x15a>
 800a4a0:	9b00      	ldr	r3, [sp, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bf14      	ite	ne
 800a4a6:	2700      	movne	r7, #0
 800a4a8:	2706      	moveq	r7, #6
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	b009      	add	sp, #36	; 0x24
 800a4ae:	ecbd 8b02 	vpop	{d8}
 800a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b6:	463e      	mov	r6, r7
 800a4b8:	4625      	mov	r5, r4
 800a4ba:	2401      	movs	r4, #1
 800a4bc:	e7ca      	b.n	800a454 <__gethex+0xd4>
 800a4be:	f04f 0900 	mov.w	r9, #0
 800a4c2:	1cb1      	adds	r1, r6, #2
 800a4c4:	e7d3      	b.n	800a46e <__gethex+0xee>
 800a4c6:	f04f 0901 	mov.w	r9, #1
 800a4ca:	e7fa      	b.n	800a4c2 <__gethex+0x142>
 800a4cc:	230a      	movs	r3, #10
 800a4ce:	fb03 0202 	mla	r2, r3, r2, r0
 800a4d2:	3a10      	subs	r2, #16
 800a4d4:	e7d4      	b.n	800a480 <__gethex+0x100>
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	e7df      	b.n	800a49a <__gethex+0x11a>
 800a4da:	1bf3      	subs	r3, r6, r7
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	4621      	mov	r1, r4
 800a4e0:	2b07      	cmp	r3, #7
 800a4e2:	dc0b      	bgt.n	800a4fc <__gethex+0x17c>
 800a4e4:	ee18 0a10 	vmov	r0, s16
 800a4e8:	f000 fad8 	bl	800aa9c <_Balloc>
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	b940      	cbnz	r0, 800a502 <__gethex+0x182>
 800a4f0:	4b5d      	ldr	r3, [pc, #372]	; (800a668 <__gethex+0x2e8>)
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	21de      	movs	r1, #222	; 0xde
 800a4f6:	485d      	ldr	r0, [pc, #372]	; (800a66c <__gethex+0x2ec>)
 800a4f8:	f001 fc14 	bl	800bd24 <__assert_func>
 800a4fc:	3101      	adds	r1, #1
 800a4fe:	105b      	asrs	r3, r3, #1
 800a500:	e7ee      	b.n	800a4e0 <__gethex+0x160>
 800a502:	f100 0914 	add.w	r9, r0, #20
 800a506:	f04f 0b00 	mov.w	fp, #0
 800a50a:	f1ca 0301 	rsb	r3, sl, #1
 800a50e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a512:	f8cd b000 	str.w	fp, [sp]
 800a516:	9306      	str	r3, [sp, #24]
 800a518:	42b7      	cmp	r7, r6
 800a51a:	d340      	bcc.n	800a59e <__gethex+0x21e>
 800a51c:	9802      	ldr	r0, [sp, #8]
 800a51e:	9b00      	ldr	r3, [sp, #0]
 800a520:	f840 3b04 	str.w	r3, [r0], #4
 800a524:	eba0 0009 	sub.w	r0, r0, r9
 800a528:	1080      	asrs	r0, r0, #2
 800a52a:	0146      	lsls	r6, r0, #5
 800a52c:	6120      	str	r0, [r4, #16]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fba6 	bl	800ac80 <__hi0bits>
 800a534:	1a30      	subs	r0, r6, r0
 800a536:	f8d8 6000 	ldr.w	r6, [r8]
 800a53a:	42b0      	cmp	r0, r6
 800a53c:	dd63      	ble.n	800a606 <__gethex+0x286>
 800a53e:	1b87      	subs	r7, r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	4620      	mov	r0, r4
 800a544:	f000 ff4a 	bl	800b3dc <__any_on>
 800a548:	4682      	mov	sl, r0
 800a54a:	b1a8      	cbz	r0, 800a578 <__gethex+0x1f8>
 800a54c:	1e7b      	subs	r3, r7, #1
 800a54e:	1159      	asrs	r1, r3, #5
 800a550:	f003 021f 	and.w	r2, r3, #31
 800a554:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a558:	f04f 0a01 	mov.w	sl, #1
 800a55c:	fa0a f202 	lsl.w	r2, sl, r2
 800a560:	420a      	tst	r2, r1
 800a562:	d009      	beq.n	800a578 <__gethex+0x1f8>
 800a564:	4553      	cmp	r3, sl
 800a566:	dd05      	ble.n	800a574 <__gethex+0x1f4>
 800a568:	1eb9      	subs	r1, r7, #2
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 ff36 	bl	800b3dc <__any_on>
 800a570:	2800      	cmp	r0, #0
 800a572:	d145      	bne.n	800a600 <__gethex+0x280>
 800a574:	f04f 0a02 	mov.w	sl, #2
 800a578:	4639      	mov	r1, r7
 800a57a:	4620      	mov	r0, r4
 800a57c:	f7ff fe99 	bl	800a2b2 <rshift>
 800a580:	443d      	add	r5, r7
 800a582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a586:	42ab      	cmp	r3, r5
 800a588:	da4c      	bge.n	800a624 <__gethex+0x2a4>
 800a58a:	ee18 0a10 	vmov	r0, s16
 800a58e:	4621      	mov	r1, r4
 800a590:	f000 fac4 	bl	800ab1c <_Bfree>
 800a594:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a596:	2300      	movs	r3, #0
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	27a3      	movs	r7, #163	; 0xa3
 800a59c:	e785      	b.n	800a4aa <__gethex+0x12a>
 800a59e:	1e73      	subs	r3, r6, #1
 800a5a0:	9a05      	ldr	r2, [sp, #20]
 800a5a2:	9303      	str	r3, [sp, #12]
 800a5a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d019      	beq.n	800a5e0 <__gethex+0x260>
 800a5ac:	f1bb 0f20 	cmp.w	fp, #32
 800a5b0:	d107      	bne.n	800a5c2 <__gethex+0x242>
 800a5b2:	9b02      	ldr	r3, [sp, #8]
 800a5b4:	9a00      	ldr	r2, [sp, #0]
 800a5b6:	f843 2b04 	str.w	r2, [r3], #4
 800a5ba:	9302      	str	r3, [sp, #8]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	469b      	mov	fp, r3
 800a5c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a5c6:	f7ff fec6 	bl	800a356 <__hexdig_fun>
 800a5ca:	9b00      	ldr	r3, [sp, #0]
 800a5cc:	f000 000f 	and.w	r0, r0, #15
 800a5d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800a5d4:	4303      	orrs	r3, r0
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	f10b 0b04 	add.w	fp, fp, #4
 800a5dc:	9b03      	ldr	r3, [sp, #12]
 800a5de:	e00d      	b.n	800a5fc <__gethex+0x27c>
 800a5e0:	9b03      	ldr	r3, [sp, #12]
 800a5e2:	9a06      	ldr	r2, [sp, #24]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	42bb      	cmp	r3, r7
 800a5e8:	d3e0      	bcc.n	800a5ac <__gethex+0x22c>
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	9901      	ldr	r1, [sp, #4]
 800a5ee:	9307      	str	r3, [sp, #28]
 800a5f0:	4652      	mov	r2, sl
 800a5f2:	f001 fb64 	bl	800bcbe <strncmp>
 800a5f6:	9b07      	ldr	r3, [sp, #28]
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1d7      	bne.n	800a5ac <__gethex+0x22c>
 800a5fc:	461e      	mov	r6, r3
 800a5fe:	e78b      	b.n	800a518 <__gethex+0x198>
 800a600:	f04f 0a03 	mov.w	sl, #3
 800a604:	e7b8      	b.n	800a578 <__gethex+0x1f8>
 800a606:	da0a      	bge.n	800a61e <__gethex+0x29e>
 800a608:	1a37      	subs	r7, r6, r0
 800a60a:	4621      	mov	r1, r4
 800a60c:	ee18 0a10 	vmov	r0, s16
 800a610:	463a      	mov	r2, r7
 800a612:	f000 fc9f 	bl	800af54 <__lshift>
 800a616:	1bed      	subs	r5, r5, r7
 800a618:	4604      	mov	r4, r0
 800a61a:	f100 0914 	add.w	r9, r0, #20
 800a61e:	f04f 0a00 	mov.w	sl, #0
 800a622:	e7ae      	b.n	800a582 <__gethex+0x202>
 800a624:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a628:	42a8      	cmp	r0, r5
 800a62a:	dd72      	ble.n	800a712 <__gethex+0x392>
 800a62c:	1b45      	subs	r5, r0, r5
 800a62e:	42ae      	cmp	r6, r5
 800a630:	dc36      	bgt.n	800a6a0 <__gethex+0x320>
 800a632:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a636:	2b02      	cmp	r3, #2
 800a638:	d02a      	beq.n	800a690 <__gethex+0x310>
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d02c      	beq.n	800a698 <__gethex+0x318>
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d11c      	bne.n	800a67c <__gethex+0x2fc>
 800a642:	42ae      	cmp	r6, r5
 800a644:	d11a      	bne.n	800a67c <__gethex+0x2fc>
 800a646:	2e01      	cmp	r6, #1
 800a648:	d112      	bne.n	800a670 <__gethex+0x2f0>
 800a64a:	9a04      	ldr	r2, [sp, #16]
 800a64c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a650:	6013      	str	r3, [r2, #0]
 800a652:	2301      	movs	r3, #1
 800a654:	6123      	str	r3, [r4, #16]
 800a656:	f8c9 3000 	str.w	r3, [r9]
 800a65a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a65c:	2762      	movs	r7, #98	; 0x62
 800a65e:	601c      	str	r4, [r3, #0]
 800a660:	e723      	b.n	800a4aa <__gethex+0x12a>
 800a662:	bf00      	nop
 800a664:	0800c40c 	.word	0x0800c40c
 800a668:	0800c330 	.word	0x0800c330
 800a66c:	0800c3a4 	.word	0x0800c3a4
 800a670:	1e71      	subs	r1, r6, #1
 800a672:	4620      	mov	r0, r4
 800a674:	f000 feb2 	bl	800b3dc <__any_on>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d1e6      	bne.n	800a64a <__gethex+0x2ca>
 800a67c:	ee18 0a10 	vmov	r0, s16
 800a680:	4621      	mov	r1, r4
 800a682:	f000 fa4b 	bl	800ab1c <_Bfree>
 800a686:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a688:	2300      	movs	r3, #0
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	2750      	movs	r7, #80	; 0x50
 800a68e:	e70c      	b.n	800a4aa <__gethex+0x12a>
 800a690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a692:	2b00      	cmp	r3, #0
 800a694:	d1f2      	bne.n	800a67c <__gethex+0x2fc>
 800a696:	e7d8      	b.n	800a64a <__gethex+0x2ca>
 800a698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1d5      	bne.n	800a64a <__gethex+0x2ca>
 800a69e:	e7ed      	b.n	800a67c <__gethex+0x2fc>
 800a6a0:	1e6f      	subs	r7, r5, #1
 800a6a2:	f1ba 0f00 	cmp.w	sl, #0
 800a6a6:	d131      	bne.n	800a70c <__gethex+0x38c>
 800a6a8:	b127      	cbz	r7, 800a6b4 <__gethex+0x334>
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 fe95 	bl	800b3dc <__any_on>
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	117b      	asrs	r3, r7, #5
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a6bc:	f007 071f 	and.w	r7, r7, #31
 800a6c0:	fa01 f707 	lsl.w	r7, r1, r7
 800a6c4:	421f      	tst	r7, r3
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	bf18      	it	ne
 800a6cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800a6d0:	1b76      	subs	r6, r6, r5
 800a6d2:	f7ff fdee 	bl	800a2b2 <rshift>
 800a6d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6da:	2702      	movs	r7, #2
 800a6dc:	f1ba 0f00 	cmp.w	sl, #0
 800a6e0:	d048      	beq.n	800a774 <__gethex+0x3f4>
 800a6e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d015      	beq.n	800a716 <__gethex+0x396>
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d017      	beq.n	800a71e <__gethex+0x39e>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d109      	bne.n	800a706 <__gethex+0x386>
 800a6f2:	f01a 0f02 	tst.w	sl, #2
 800a6f6:	d006      	beq.n	800a706 <__gethex+0x386>
 800a6f8:	f8d9 0000 	ldr.w	r0, [r9]
 800a6fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800a700:	f01a 0f01 	tst.w	sl, #1
 800a704:	d10e      	bne.n	800a724 <__gethex+0x3a4>
 800a706:	f047 0710 	orr.w	r7, r7, #16
 800a70a:	e033      	b.n	800a774 <__gethex+0x3f4>
 800a70c:	f04f 0a01 	mov.w	sl, #1
 800a710:	e7d0      	b.n	800a6b4 <__gethex+0x334>
 800a712:	2701      	movs	r7, #1
 800a714:	e7e2      	b.n	800a6dc <__gethex+0x35c>
 800a716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a718:	f1c3 0301 	rsb	r3, r3, #1
 800a71c:	9315      	str	r3, [sp, #84]	; 0x54
 800a71e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0f0      	beq.n	800a706 <__gethex+0x386>
 800a724:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a728:	f104 0314 	add.w	r3, r4, #20
 800a72c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a730:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a734:	f04f 0c00 	mov.w	ip, #0
 800a738:	4618      	mov	r0, r3
 800a73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a742:	d01c      	beq.n	800a77e <__gethex+0x3fe>
 800a744:	3201      	adds	r2, #1
 800a746:	6002      	str	r2, [r0, #0]
 800a748:	2f02      	cmp	r7, #2
 800a74a:	f104 0314 	add.w	r3, r4, #20
 800a74e:	d13f      	bne.n	800a7d0 <__gethex+0x450>
 800a750:	f8d8 2000 	ldr.w	r2, [r8]
 800a754:	3a01      	subs	r2, #1
 800a756:	42b2      	cmp	r2, r6
 800a758:	d10a      	bne.n	800a770 <__gethex+0x3f0>
 800a75a:	1171      	asrs	r1, r6, #5
 800a75c:	2201      	movs	r2, #1
 800a75e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a762:	f006 061f 	and.w	r6, r6, #31
 800a766:	fa02 f606 	lsl.w	r6, r2, r6
 800a76a:	421e      	tst	r6, r3
 800a76c:	bf18      	it	ne
 800a76e:	4617      	movne	r7, r2
 800a770:	f047 0720 	orr.w	r7, r7, #32
 800a774:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a776:	601c      	str	r4, [r3, #0]
 800a778:	9b04      	ldr	r3, [sp, #16]
 800a77a:	601d      	str	r5, [r3, #0]
 800a77c:	e695      	b.n	800a4aa <__gethex+0x12a>
 800a77e:	4299      	cmp	r1, r3
 800a780:	f843 cc04 	str.w	ip, [r3, #-4]
 800a784:	d8d8      	bhi.n	800a738 <__gethex+0x3b8>
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	459b      	cmp	fp, r3
 800a78a:	db19      	blt.n	800a7c0 <__gethex+0x440>
 800a78c:	6861      	ldr	r1, [r4, #4]
 800a78e:	ee18 0a10 	vmov	r0, s16
 800a792:	3101      	adds	r1, #1
 800a794:	f000 f982 	bl	800aa9c <_Balloc>
 800a798:	4681      	mov	r9, r0
 800a79a:	b918      	cbnz	r0, 800a7a4 <__gethex+0x424>
 800a79c:	4b1a      	ldr	r3, [pc, #104]	; (800a808 <__gethex+0x488>)
 800a79e:	4602      	mov	r2, r0
 800a7a0:	2184      	movs	r1, #132	; 0x84
 800a7a2:	e6a8      	b.n	800a4f6 <__gethex+0x176>
 800a7a4:	6922      	ldr	r2, [r4, #16]
 800a7a6:	3202      	adds	r2, #2
 800a7a8:	f104 010c 	add.w	r1, r4, #12
 800a7ac:	0092      	lsls	r2, r2, #2
 800a7ae:	300c      	adds	r0, #12
 800a7b0:	f7fc fe86 	bl	80074c0 <memcpy>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	ee18 0a10 	vmov	r0, s16
 800a7ba:	f000 f9af 	bl	800ab1c <_Bfree>
 800a7be:	464c      	mov	r4, r9
 800a7c0:	6923      	ldr	r3, [r4, #16]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7c8:	6122      	str	r2, [r4, #16]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	615a      	str	r2, [r3, #20]
 800a7ce:	e7bb      	b.n	800a748 <__gethex+0x3c8>
 800a7d0:	6922      	ldr	r2, [r4, #16]
 800a7d2:	455a      	cmp	r2, fp
 800a7d4:	dd0b      	ble.n	800a7ee <__gethex+0x46e>
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f7ff fd6a 	bl	800a2b2 <rshift>
 800a7de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7e2:	3501      	adds	r5, #1
 800a7e4:	42ab      	cmp	r3, r5
 800a7e6:	f6ff aed0 	blt.w	800a58a <__gethex+0x20a>
 800a7ea:	2701      	movs	r7, #1
 800a7ec:	e7c0      	b.n	800a770 <__gethex+0x3f0>
 800a7ee:	f016 061f 	ands.w	r6, r6, #31
 800a7f2:	d0fa      	beq.n	800a7ea <__gethex+0x46a>
 800a7f4:	4453      	add	r3, sl
 800a7f6:	f1c6 0620 	rsb	r6, r6, #32
 800a7fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a7fe:	f000 fa3f 	bl	800ac80 <__hi0bits>
 800a802:	42b0      	cmp	r0, r6
 800a804:	dbe7      	blt.n	800a7d6 <__gethex+0x456>
 800a806:	e7f0      	b.n	800a7ea <__gethex+0x46a>
 800a808:	0800c330 	.word	0x0800c330

0800a80c <L_shift>:
 800a80c:	f1c2 0208 	rsb	r2, r2, #8
 800a810:	0092      	lsls	r2, r2, #2
 800a812:	b570      	push	{r4, r5, r6, lr}
 800a814:	f1c2 0620 	rsb	r6, r2, #32
 800a818:	6843      	ldr	r3, [r0, #4]
 800a81a:	6804      	ldr	r4, [r0, #0]
 800a81c:	fa03 f506 	lsl.w	r5, r3, r6
 800a820:	432c      	orrs	r4, r5
 800a822:	40d3      	lsrs	r3, r2
 800a824:	6004      	str	r4, [r0, #0]
 800a826:	f840 3f04 	str.w	r3, [r0, #4]!
 800a82a:	4288      	cmp	r0, r1
 800a82c:	d3f4      	bcc.n	800a818 <L_shift+0xc>
 800a82e:	bd70      	pop	{r4, r5, r6, pc}

0800a830 <__match>:
 800a830:	b530      	push	{r4, r5, lr}
 800a832:	6803      	ldr	r3, [r0, #0]
 800a834:	3301      	adds	r3, #1
 800a836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a83a:	b914      	cbnz	r4, 800a842 <__match+0x12>
 800a83c:	6003      	str	r3, [r0, #0]
 800a83e:	2001      	movs	r0, #1
 800a840:	bd30      	pop	{r4, r5, pc}
 800a842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a846:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a84a:	2d19      	cmp	r5, #25
 800a84c:	bf98      	it	ls
 800a84e:	3220      	addls	r2, #32
 800a850:	42a2      	cmp	r2, r4
 800a852:	d0f0      	beq.n	800a836 <__match+0x6>
 800a854:	2000      	movs	r0, #0
 800a856:	e7f3      	b.n	800a840 <__match+0x10>

0800a858 <__hexnan>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	680b      	ldr	r3, [r1, #0]
 800a85e:	115e      	asrs	r6, r3, #5
 800a860:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a864:	f013 031f 	ands.w	r3, r3, #31
 800a868:	b087      	sub	sp, #28
 800a86a:	bf18      	it	ne
 800a86c:	3604      	addne	r6, #4
 800a86e:	2500      	movs	r5, #0
 800a870:	1f37      	subs	r7, r6, #4
 800a872:	4690      	mov	r8, r2
 800a874:	6802      	ldr	r2, [r0, #0]
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	4682      	mov	sl, r0
 800a87a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a87e:	46b9      	mov	r9, r7
 800a880:	463c      	mov	r4, r7
 800a882:	9502      	str	r5, [sp, #8]
 800a884:	46ab      	mov	fp, r5
 800a886:	7851      	ldrb	r1, [r2, #1]
 800a888:	1c53      	adds	r3, r2, #1
 800a88a:	9303      	str	r3, [sp, #12]
 800a88c:	b341      	cbz	r1, 800a8e0 <__hexnan+0x88>
 800a88e:	4608      	mov	r0, r1
 800a890:	9205      	str	r2, [sp, #20]
 800a892:	9104      	str	r1, [sp, #16]
 800a894:	f7ff fd5f 	bl	800a356 <__hexdig_fun>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d14f      	bne.n	800a93c <__hexnan+0xe4>
 800a89c:	9904      	ldr	r1, [sp, #16]
 800a89e:	9a05      	ldr	r2, [sp, #20]
 800a8a0:	2920      	cmp	r1, #32
 800a8a2:	d818      	bhi.n	800a8d6 <__hexnan+0x7e>
 800a8a4:	9b02      	ldr	r3, [sp, #8]
 800a8a6:	459b      	cmp	fp, r3
 800a8a8:	dd13      	ble.n	800a8d2 <__hexnan+0x7a>
 800a8aa:	454c      	cmp	r4, r9
 800a8ac:	d206      	bcs.n	800a8bc <__hexnan+0x64>
 800a8ae:	2d07      	cmp	r5, #7
 800a8b0:	dc04      	bgt.n	800a8bc <__hexnan+0x64>
 800a8b2:	462a      	mov	r2, r5
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f7ff ffa8 	bl	800a80c <L_shift>
 800a8bc:	4544      	cmp	r4, r8
 800a8be:	d950      	bls.n	800a962 <__hexnan+0x10a>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a8c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8ca:	f8cd b008 	str.w	fp, [sp, #8]
 800a8ce:	464c      	mov	r4, r9
 800a8d0:	461d      	mov	r5, r3
 800a8d2:	9a03      	ldr	r2, [sp, #12]
 800a8d4:	e7d7      	b.n	800a886 <__hexnan+0x2e>
 800a8d6:	2929      	cmp	r1, #41	; 0x29
 800a8d8:	d156      	bne.n	800a988 <__hexnan+0x130>
 800a8da:	3202      	adds	r2, #2
 800a8dc:	f8ca 2000 	str.w	r2, [sl]
 800a8e0:	f1bb 0f00 	cmp.w	fp, #0
 800a8e4:	d050      	beq.n	800a988 <__hexnan+0x130>
 800a8e6:	454c      	cmp	r4, r9
 800a8e8:	d206      	bcs.n	800a8f8 <__hexnan+0xa0>
 800a8ea:	2d07      	cmp	r5, #7
 800a8ec:	dc04      	bgt.n	800a8f8 <__hexnan+0xa0>
 800a8ee:	462a      	mov	r2, r5
 800a8f0:	4649      	mov	r1, r9
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f7ff ff8a 	bl	800a80c <L_shift>
 800a8f8:	4544      	cmp	r4, r8
 800a8fa:	d934      	bls.n	800a966 <__hexnan+0x10e>
 800a8fc:	f1a8 0204 	sub.w	r2, r8, #4
 800a900:	4623      	mov	r3, r4
 800a902:	f853 1b04 	ldr.w	r1, [r3], #4
 800a906:	f842 1f04 	str.w	r1, [r2, #4]!
 800a90a:	429f      	cmp	r7, r3
 800a90c:	d2f9      	bcs.n	800a902 <__hexnan+0xaa>
 800a90e:	1b3b      	subs	r3, r7, r4
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	3304      	adds	r3, #4
 800a916:	3401      	adds	r4, #1
 800a918:	3e03      	subs	r6, #3
 800a91a:	42b4      	cmp	r4, r6
 800a91c:	bf88      	it	hi
 800a91e:	2304      	movhi	r3, #4
 800a920:	4443      	add	r3, r8
 800a922:	2200      	movs	r2, #0
 800a924:	f843 2b04 	str.w	r2, [r3], #4
 800a928:	429f      	cmp	r7, r3
 800a92a:	d2fb      	bcs.n	800a924 <__hexnan+0xcc>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	b91b      	cbnz	r3, 800a938 <__hexnan+0xe0>
 800a930:	4547      	cmp	r7, r8
 800a932:	d127      	bne.n	800a984 <__hexnan+0x12c>
 800a934:	2301      	movs	r3, #1
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	2005      	movs	r0, #5
 800a93a:	e026      	b.n	800a98a <__hexnan+0x132>
 800a93c:	3501      	adds	r5, #1
 800a93e:	2d08      	cmp	r5, #8
 800a940:	f10b 0b01 	add.w	fp, fp, #1
 800a944:	dd06      	ble.n	800a954 <__hexnan+0xfc>
 800a946:	4544      	cmp	r4, r8
 800a948:	d9c3      	bls.n	800a8d2 <__hexnan+0x7a>
 800a94a:	2300      	movs	r3, #0
 800a94c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a950:	2501      	movs	r5, #1
 800a952:	3c04      	subs	r4, #4
 800a954:	6822      	ldr	r2, [r4, #0]
 800a956:	f000 000f 	and.w	r0, r0, #15
 800a95a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a95e:	6022      	str	r2, [r4, #0]
 800a960:	e7b7      	b.n	800a8d2 <__hexnan+0x7a>
 800a962:	2508      	movs	r5, #8
 800a964:	e7b5      	b.n	800a8d2 <__hexnan+0x7a>
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0df      	beq.n	800a92c <__hexnan+0xd4>
 800a96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a970:	f1c3 0320 	rsb	r3, r3, #32
 800a974:	fa22 f303 	lsr.w	r3, r2, r3
 800a978:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a97c:	401a      	ands	r2, r3
 800a97e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a982:	e7d3      	b.n	800a92c <__hexnan+0xd4>
 800a984:	3f04      	subs	r7, #4
 800a986:	e7d1      	b.n	800a92c <__hexnan+0xd4>
 800a988:	2004      	movs	r0, #4
 800a98a:	b007      	add	sp, #28
 800a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a990 <_localeconv_r>:
 800a990:	4800      	ldr	r0, [pc, #0]	; (800a994 <_localeconv_r+0x4>)
 800a992:	4770      	bx	lr
 800a994:	20000178 	.word	0x20000178

0800a998 <__retarget_lock_init_recursive>:
 800a998:	4770      	bx	lr

0800a99a <__retarget_lock_acquire_recursive>:
 800a99a:	4770      	bx	lr

0800a99c <__retarget_lock_release_recursive>:
 800a99c:	4770      	bx	lr

0800a99e <__swhatbuf_r>:
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	460e      	mov	r6, r1
 800a9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a6:	2900      	cmp	r1, #0
 800a9a8:	b096      	sub	sp, #88	; 0x58
 800a9aa:	4614      	mov	r4, r2
 800a9ac:	461d      	mov	r5, r3
 800a9ae:	da08      	bge.n	800a9c2 <__swhatbuf_r+0x24>
 800a9b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	602a      	str	r2, [r5, #0]
 800a9b8:	061a      	lsls	r2, r3, #24
 800a9ba:	d410      	bmi.n	800a9de <__swhatbuf_r+0x40>
 800a9bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9c0:	e00e      	b.n	800a9e0 <__swhatbuf_r+0x42>
 800a9c2:	466a      	mov	r2, sp
 800a9c4:	f001 f9ee 	bl	800bda4 <_fstat_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dbf1      	blt.n	800a9b0 <__swhatbuf_r+0x12>
 800a9cc:	9a01      	ldr	r2, [sp, #4]
 800a9ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9d6:	425a      	negs	r2, r3
 800a9d8:	415a      	adcs	r2, r3
 800a9da:	602a      	str	r2, [r5, #0]
 800a9dc:	e7ee      	b.n	800a9bc <__swhatbuf_r+0x1e>
 800a9de:	2340      	movs	r3, #64	; 0x40
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	b016      	add	sp, #88	; 0x58
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}

0800a9e8 <__smakebuf_r>:
 800a9e8:	898b      	ldrh	r3, [r1, #12]
 800a9ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9ec:	079d      	lsls	r5, r3, #30
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	d507      	bpl.n	800aa04 <__smakebuf_r+0x1c>
 800a9f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	6123      	str	r3, [r4, #16]
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	6163      	str	r3, [r4, #20]
 800aa00:	b002      	add	sp, #8
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	ab01      	add	r3, sp, #4
 800aa06:	466a      	mov	r2, sp
 800aa08:	f7ff ffc9 	bl	800a99e <__swhatbuf_r>
 800aa0c:	9900      	ldr	r1, [sp, #0]
 800aa0e:	4605      	mov	r5, r0
 800aa10:	4630      	mov	r0, r6
 800aa12:	f000 fd87 	bl	800b524 <_malloc_r>
 800aa16:	b948      	cbnz	r0, 800aa2c <__smakebuf_r+0x44>
 800aa18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa1c:	059a      	lsls	r2, r3, #22
 800aa1e:	d4ef      	bmi.n	800aa00 <__smakebuf_r+0x18>
 800aa20:	f023 0303 	bic.w	r3, r3, #3
 800aa24:	f043 0302 	orr.w	r3, r3, #2
 800aa28:	81a3      	strh	r3, [r4, #12]
 800aa2a:	e7e3      	b.n	800a9f4 <__smakebuf_r+0xc>
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <__smakebuf_r+0x7c>)
 800aa2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	6020      	str	r0, [r4, #0]
 800aa34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	9b00      	ldr	r3, [sp, #0]
 800aa3c:	6163      	str	r3, [r4, #20]
 800aa3e:	9b01      	ldr	r3, [sp, #4]
 800aa40:	6120      	str	r0, [r4, #16]
 800aa42:	b15b      	cbz	r3, 800aa5c <__smakebuf_r+0x74>
 800aa44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f001 f9bd 	bl	800bdc8 <_isatty_r>
 800aa4e:	b128      	cbz	r0, 800aa5c <__smakebuf_r+0x74>
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	f023 0303 	bic.w	r3, r3, #3
 800aa56:	f043 0301 	orr.w	r3, r3, #1
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	89a0      	ldrh	r0, [r4, #12]
 800aa5e:	4305      	orrs	r5, r0
 800aa60:	81a5      	strh	r5, [r4, #12]
 800aa62:	e7cd      	b.n	800aa00 <__smakebuf_r+0x18>
 800aa64:	0800a111 	.word	0x0800a111

0800aa68 <malloc>:
 800aa68:	4b02      	ldr	r3, [pc, #8]	; (800aa74 <malloc+0xc>)
 800aa6a:	4601      	mov	r1, r0
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	f000 bd59 	b.w	800b524 <_malloc_r>
 800aa72:	bf00      	nop
 800aa74:	20000020 	.word	0x20000020

0800aa78 <__ascii_mbtowc>:
 800aa78:	b082      	sub	sp, #8
 800aa7a:	b901      	cbnz	r1, 800aa7e <__ascii_mbtowc+0x6>
 800aa7c:	a901      	add	r1, sp, #4
 800aa7e:	b142      	cbz	r2, 800aa92 <__ascii_mbtowc+0x1a>
 800aa80:	b14b      	cbz	r3, 800aa96 <__ascii_mbtowc+0x1e>
 800aa82:	7813      	ldrb	r3, [r2, #0]
 800aa84:	600b      	str	r3, [r1, #0]
 800aa86:	7812      	ldrb	r2, [r2, #0]
 800aa88:	1e10      	subs	r0, r2, #0
 800aa8a:	bf18      	it	ne
 800aa8c:	2001      	movne	r0, #1
 800aa8e:	b002      	add	sp, #8
 800aa90:	4770      	bx	lr
 800aa92:	4610      	mov	r0, r2
 800aa94:	e7fb      	b.n	800aa8e <__ascii_mbtowc+0x16>
 800aa96:	f06f 0001 	mvn.w	r0, #1
 800aa9a:	e7f8      	b.n	800aa8e <__ascii_mbtowc+0x16>

0800aa9c <_Balloc>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	460d      	mov	r5, r1
 800aaa4:	b976      	cbnz	r6, 800aac4 <_Balloc+0x28>
 800aaa6:	2010      	movs	r0, #16
 800aaa8:	f7ff ffde 	bl	800aa68 <malloc>
 800aaac:	4602      	mov	r2, r0
 800aaae:	6260      	str	r0, [r4, #36]	; 0x24
 800aab0:	b920      	cbnz	r0, 800aabc <_Balloc+0x20>
 800aab2:	4b18      	ldr	r3, [pc, #96]	; (800ab14 <_Balloc+0x78>)
 800aab4:	4818      	ldr	r0, [pc, #96]	; (800ab18 <_Balloc+0x7c>)
 800aab6:	2166      	movs	r1, #102	; 0x66
 800aab8:	f001 f934 	bl	800bd24 <__assert_func>
 800aabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aac0:	6006      	str	r6, [r0, #0]
 800aac2:	60c6      	str	r6, [r0, #12]
 800aac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aac6:	68f3      	ldr	r3, [r6, #12]
 800aac8:	b183      	cbz	r3, 800aaec <_Balloc+0x50>
 800aaca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aad2:	b9b8      	cbnz	r0, 800ab04 <_Balloc+0x68>
 800aad4:	2101      	movs	r1, #1
 800aad6:	fa01 f605 	lsl.w	r6, r1, r5
 800aada:	1d72      	adds	r2, r6, #5
 800aadc:	0092      	lsls	r2, r2, #2
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 fc9d 	bl	800b41e <_calloc_r>
 800aae4:	b160      	cbz	r0, 800ab00 <_Balloc+0x64>
 800aae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaea:	e00e      	b.n	800ab0a <_Balloc+0x6e>
 800aaec:	2221      	movs	r2, #33	; 0x21
 800aaee:	2104      	movs	r1, #4
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f000 fc94 	bl	800b41e <_calloc_r>
 800aaf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaf8:	60f0      	str	r0, [r6, #12]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e4      	bne.n	800aaca <_Balloc+0x2e>
 800ab00:	2000      	movs	r0, #0
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
 800ab04:	6802      	ldr	r2, [r0, #0]
 800ab06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab10:	e7f7      	b.n	800ab02 <_Balloc+0x66>
 800ab12:	bf00      	nop
 800ab14:	0800c2be 	.word	0x0800c2be
 800ab18:	0800c420 	.word	0x0800c420

0800ab1c <_Bfree>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab20:	4605      	mov	r5, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	b976      	cbnz	r6, 800ab44 <_Bfree+0x28>
 800ab26:	2010      	movs	r0, #16
 800ab28:	f7ff ff9e 	bl	800aa68 <malloc>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	6268      	str	r0, [r5, #36]	; 0x24
 800ab30:	b920      	cbnz	r0, 800ab3c <_Bfree+0x20>
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <_Bfree+0x3c>)
 800ab34:	4809      	ldr	r0, [pc, #36]	; (800ab5c <_Bfree+0x40>)
 800ab36:	218a      	movs	r1, #138	; 0x8a
 800ab38:	f001 f8f4 	bl	800bd24 <__assert_func>
 800ab3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab40:	6006      	str	r6, [r0, #0]
 800ab42:	60c6      	str	r6, [r0, #12]
 800ab44:	b13c      	cbz	r4, 800ab56 <_Bfree+0x3a>
 800ab46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab48:	6862      	ldr	r2, [r4, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab50:	6021      	str	r1, [r4, #0]
 800ab52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab56:	bd70      	pop	{r4, r5, r6, pc}
 800ab58:	0800c2be 	.word	0x0800c2be
 800ab5c:	0800c420 	.word	0x0800c420

0800ab60 <__multadd>:
 800ab60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab64:	690d      	ldr	r5, [r1, #16]
 800ab66:	4607      	mov	r7, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	461e      	mov	r6, r3
 800ab6c:	f101 0c14 	add.w	ip, r1, #20
 800ab70:	2000      	movs	r0, #0
 800ab72:	f8dc 3000 	ldr.w	r3, [ip]
 800ab76:	b299      	uxth	r1, r3
 800ab78:	fb02 6101 	mla	r1, r2, r1, r6
 800ab7c:	0c1e      	lsrs	r6, r3, #16
 800ab7e:	0c0b      	lsrs	r3, r1, #16
 800ab80:	fb02 3306 	mla	r3, r2, r6, r3
 800ab84:	b289      	uxth	r1, r1
 800ab86:	3001      	adds	r0, #1
 800ab88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab8c:	4285      	cmp	r5, r0
 800ab8e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab96:	dcec      	bgt.n	800ab72 <__multadd+0x12>
 800ab98:	b30e      	cbz	r6, 800abde <__multadd+0x7e>
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	42ab      	cmp	r3, r5
 800ab9e:	dc19      	bgt.n	800abd4 <__multadd+0x74>
 800aba0:	6861      	ldr	r1, [r4, #4]
 800aba2:	4638      	mov	r0, r7
 800aba4:	3101      	adds	r1, #1
 800aba6:	f7ff ff79 	bl	800aa9c <_Balloc>
 800abaa:	4680      	mov	r8, r0
 800abac:	b928      	cbnz	r0, 800abba <__multadd+0x5a>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <__multadd+0x84>)
 800abb2:	480d      	ldr	r0, [pc, #52]	; (800abe8 <__multadd+0x88>)
 800abb4:	21b5      	movs	r1, #181	; 0xb5
 800abb6:	f001 f8b5 	bl	800bd24 <__assert_func>
 800abba:	6922      	ldr	r2, [r4, #16]
 800abbc:	3202      	adds	r2, #2
 800abbe:	f104 010c 	add.w	r1, r4, #12
 800abc2:	0092      	lsls	r2, r2, #2
 800abc4:	300c      	adds	r0, #12
 800abc6:	f7fc fc7b 	bl	80074c0 <memcpy>
 800abca:	4621      	mov	r1, r4
 800abcc:	4638      	mov	r0, r7
 800abce:	f7ff ffa5 	bl	800ab1c <_Bfree>
 800abd2:	4644      	mov	r4, r8
 800abd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abd8:	3501      	adds	r5, #1
 800abda:	615e      	str	r6, [r3, #20]
 800abdc:	6125      	str	r5, [r4, #16]
 800abde:	4620      	mov	r0, r4
 800abe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe4:	0800c330 	.word	0x0800c330
 800abe8:	0800c420 	.word	0x0800c420

0800abec <__s2b>:
 800abec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf0:	460c      	mov	r4, r1
 800abf2:	4615      	mov	r5, r2
 800abf4:	461f      	mov	r7, r3
 800abf6:	2209      	movs	r2, #9
 800abf8:	3308      	adds	r3, #8
 800abfa:	4606      	mov	r6, r0
 800abfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac00:	2100      	movs	r1, #0
 800ac02:	2201      	movs	r2, #1
 800ac04:	429a      	cmp	r2, r3
 800ac06:	db09      	blt.n	800ac1c <__s2b+0x30>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff ff47 	bl	800aa9c <_Balloc>
 800ac0e:	b940      	cbnz	r0, 800ac22 <__s2b+0x36>
 800ac10:	4602      	mov	r2, r0
 800ac12:	4b19      	ldr	r3, [pc, #100]	; (800ac78 <__s2b+0x8c>)
 800ac14:	4819      	ldr	r0, [pc, #100]	; (800ac7c <__s2b+0x90>)
 800ac16:	21ce      	movs	r1, #206	; 0xce
 800ac18:	f001 f884 	bl	800bd24 <__assert_func>
 800ac1c:	0052      	lsls	r2, r2, #1
 800ac1e:	3101      	adds	r1, #1
 800ac20:	e7f0      	b.n	800ac04 <__s2b+0x18>
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	6143      	str	r3, [r0, #20]
 800ac26:	2d09      	cmp	r5, #9
 800ac28:	f04f 0301 	mov.w	r3, #1
 800ac2c:	6103      	str	r3, [r0, #16]
 800ac2e:	dd16      	ble.n	800ac5e <__s2b+0x72>
 800ac30:	f104 0909 	add.w	r9, r4, #9
 800ac34:	46c8      	mov	r8, r9
 800ac36:	442c      	add	r4, r5
 800ac38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	3b30      	subs	r3, #48	; 0x30
 800ac40:	220a      	movs	r2, #10
 800ac42:	4630      	mov	r0, r6
 800ac44:	f7ff ff8c 	bl	800ab60 <__multadd>
 800ac48:	45a0      	cmp	r8, r4
 800ac4a:	d1f5      	bne.n	800ac38 <__s2b+0x4c>
 800ac4c:	f1a5 0408 	sub.w	r4, r5, #8
 800ac50:	444c      	add	r4, r9
 800ac52:	1b2d      	subs	r5, r5, r4
 800ac54:	1963      	adds	r3, r4, r5
 800ac56:	42bb      	cmp	r3, r7
 800ac58:	db04      	blt.n	800ac64 <__s2b+0x78>
 800ac5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5e:	340a      	adds	r4, #10
 800ac60:	2509      	movs	r5, #9
 800ac62:	e7f6      	b.n	800ac52 <__s2b+0x66>
 800ac64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac68:	4601      	mov	r1, r0
 800ac6a:	3b30      	subs	r3, #48	; 0x30
 800ac6c:	220a      	movs	r2, #10
 800ac6e:	4630      	mov	r0, r6
 800ac70:	f7ff ff76 	bl	800ab60 <__multadd>
 800ac74:	e7ee      	b.n	800ac54 <__s2b+0x68>
 800ac76:	bf00      	nop
 800ac78:	0800c330 	.word	0x0800c330
 800ac7c:	0800c420 	.word	0x0800c420

0800ac80 <__hi0bits>:
 800ac80:	0c03      	lsrs	r3, r0, #16
 800ac82:	041b      	lsls	r3, r3, #16
 800ac84:	b9d3      	cbnz	r3, 800acbc <__hi0bits+0x3c>
 800ac86:	0400      	lsls	r0, r0, #16
 800ac88:	2310      	movs	r3, #16
 800ac8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac8e:	bf04      	itt	eq
 800ac90:	0200      	lsleq	r0, r0, #8
 800ac92:	3308      	addeq	r3, #8
 800ac94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac98:	bf04      	itt	eq
 800ac9a:	0100      	lsleq	r0, r0, #4
 800ac9c:	3304      	addeq	r3, #4
 800ac9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aca2:	bf04      	itt	eq
 800aca4:	0080      	lsleq	r0, r0, #2
 800aca6:	3302      	addeq	r3, #2
 800aca8:	2800      	cmp	r0, #0
 800acaa:	db05      	blt.n	800acb8 <__hi0bits+0x38>
 800acac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acb0:	f103 0301 	add.w	r3, r3, #1
 800acb4:	bf08      	it	eq
 800acb6:	2320      	moveq	r3, #32
 800acb8:	4618      	mov	r0, r3
 800acba:	4770      	bx	lr
 800acbc:	2300      	movs	r3, #0
 800acbe:	e7e4      	b.n	800ac8a <__hi0bits+0xa>

0800acc0 <__lo0bits>:
 800acc0:	6803      	ldr	r3, [r0, #0]
 800acc2:	f013 0207 	ands.w	r2, r3, #7
 800acc6:	4601      	mov	r1, r0
 800acc8:	d00b      	beq.n	800ace2 <__lo0bits+0x22>
 800acca:	07da      	lsls	r2, r3, #31
 800accc:	d423      	bmi.n	800ad16 <__lo0bits+0x56>
 800acce:	0798      	lsls	r0, r3, #30
 800acd0:	bf49      	itett	mi
 800acd2:	085b      	lsrmi	r3, r3, #1
 800acd4:	089b      	lsrpl	r3, r3, #2
 800acd6:	2001      	movmi	r0, #1
 800acd8:	600b      	strmi	r3, [r1, #0]
 800acda:	bf5c      	itt	pl
 800acdc:	600b      	strpl	r3, [r1, #0]
 800acde:	2002      	movpl	r0, #2
 800ace0:	4770      	bx	lr
 800ace2:	b298      	uxth	r0, r3
 800ace4:	b9a8      	cbnz	r0, 800ad12 <__lo0bits+0x52>
 800ace6:	0c1b      	lsrs	r3, r3, #16
 800ace8:	2010      	movs	r0, #16
 800acea:	b2da      	uxtb	r2, r3
 800acec:	b90a      	cbnz	r2, 800acf2 <__lo0bits+0x32>
 800acee:	3008      	adds	r0, #8
 800acf0:	0a1b      	lsrs	r3, r3, #8
 800acf2:	071a      	lsls	r2, r3, #28
 800acf4:	bf04      	itt	eq
 800acf6:	091b      	lsreq	r3, r3, #4
 800acf8:	3004      	addeq	r0, #4
 800acfa:	079a      	lsls	r2, r3, #30
 800acfc:	bf04      	itt	eq
 800acfe:	089b      	lsreq	r3, r3, #2
 800ad00:	3002      	addeq	r0, #2
 800ad02:	07da      	lsls	r2, r3, #31
 800ad04:	d403      	bmi.n	800ad0e <__lo0bits+0x4e>
 800ad06:	085b      	lsrs	r3, r3, #1
 800ad08:	f100 0001 	add.w	r0, r0, #1
 800ad0c:	d005      	beq.n	800ad1a <__lo0bits+0x5a>
 800ad0e:	600b      	str	r3, [r1, #0]
 800ad10:	4770      	bx	lr
 800ad12:	4610      	mov	r0, r2
 800ad14:	e7e9      	b.n	800acea <__lo0bits+0x2a>
 800ad16:	2000      	movs	r0, #0
 800ad18:	4770      	bx	lr
 800ad1a:	2020      	movs	r0, #32
 800ad1c:	4770      	bx	lr
	...

0800ad20 <__i2b>:
 800ad20:	b510      	push	{r4, lr}
 800ad22:	460c      	mov	r4, r1
 800ad24:	2101      	movs	r1, #1
 800ad26:	f7ff feb9 	bl	800aa9c <_Balloc>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	b928      	cbnz	r0, 800ad3a <__i2b+0x1a>
 800ad2e:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <__i2b+0x24>)
 800ad30:	4805      	ldr	r0, [pc, #20]	; (800ad48 <__i2b+0x28>)
 800ad32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad36:	f000 fff5 	bl	800bd24 <__assert_func>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	6144      	str	r4, [r0, #20]
 800ad3e:	6103      	str	r3, [r0, #16]
 800ad40:	bd10      	pop	{r4, pc}
 800ad42:	bf00      	nop
 800ad44:	0800c330 	.word	0x0800c330
 800ad48:	0800c420 	.word	0x0800c420

0800ad4c <__multiply>:
 800ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad50:	4691      	mov	r9, r2
 800ad52:	690a      	ldr	r2, [r1, #16]
 800ad54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	bfb8      	it	lt
 800ad5c:	460b      	movlt	r3, r1
 800ad5e:	460c      	mov	r4, r1
 800ad60:	bfbc      	itt	lt
 800ad62:	464c      	movlt	r4, r9
 800ad64:	4699      	movlt	r9, r3
 800ad66:	6927      	ldr	r7, [r4, #16]
 800ad68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad6c:	68a3      	ldr	r3, [r4, #8]
 800ad6e:	6861      	ldr	r1, [r4, #4]
 800ad70:	eb07 060a 	add.w	r6, r7, sl
 800ad74:	42b3      	cmp	r3, r6
 800ad76:	b085      	sub	sp, #20
 800ad78:	bfb8      	it	lt
 800ad7a:	3101      	addlt	r1, #1
 800ad7c:	f7ff fe8e 	bl	800aa9c <_Balloc>
 800ad80:	b930      	cbnz	r0, 800ad90 <__multiply+0x44>
 800ad82:	4602      	mov	r2, r0
 800ad84:	4b44      	ldr	r3, [pc, #272]	; (800ae98 <__multiply+0x14c>)
 800ad86:	4845      	ldr	r0, [pc, #276]	; (800ae9c <__multiply+0x150>)
 800ad88:	f240 115d 	movw	r1, #349	; 0x15d
 800ad8c:	f000 ffca 	bl	800bd24 <__assert_func>
 800ad90:	f100 0514 	add.w	r5, r0, #20
 800ad94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad98:	462b      	mov	r3, r5
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	4543      	cmp	r3, r8
 800ad9e:	d321      	bcc.n	800ade4 <__multiply+0x98>
 800ada0:	f104 0314 	add.w	r3, r4, #20
 800ada4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ada8:	f109 0314 	add.w	r3, r9, #20
 800adac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800adb0:	9202      	str	r2, [sp, #8]
 800adb2:	1b3a      	subs	r2, r7, r4
 800adb4:	3a15      	subs	r2, #21
 800adb6:	f022 0203 	bic.w	r2, r2, #3
 800adba:	3204      	adds	r2, #4
 800adbc:	f104 0115 	add.w	r1, r4, #21
 800adc0:	428f      	cmp	r7, r1
 800adc2:	bf38      	it	cc
 800adc4:	2204      	movcc	r2, #4
 800adc6:	9201      	str	r2, [sp, #4]
 800adc8:	9a02      	ldr	r2, [sp, #8]
 800adca:	9303      	str	r3, [sp, #12]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d80c      	bhi.n	800adea <__multiply+0x9e>
 800add0:	2e00      	cmp	r6, #0
 800add2:	dd03      	ble.n	800addc <__multiply+0x90>
 800add4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800add8:	2b00      	cmp	r3, #0
 800adda:	d05a      	beq.n	800ae92 <__multiply+0x146>
 800addc:	6106      	str	r6, [r0, #16]
 800adde:	b005      	add	sp, #20
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	f843 2b04 	str.w	r2, [r3], #4
 800ade8:	e7d8      	b.n	800ad9c <__multiply+0x50>
 800adea:	f8b3 a000 	ldrh.w	sl, [r3]
 800adee:	f1ba 0f00 	cmp.w	sl, #0
 800adf2:	d024      	beq.n	800ae3e <__multiply+0xf2>
 800adf4:	f104 0e14 	add.w	lr, r4, #20
 800adf8:	46a9      	mov	r9, r5
 800adfa:	f04f 0c00 	mov.w	ip, #0
 800adfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae02:	f8d9 1000 	ldr.w	r1, [r9]
 800ae06:	fa1f fb82 	uxth.w	fp, r2
 800ae0a:	b289      	uxth	r1, r1
 800ae0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae14:	f8d9 2000 	ldr.w	r2, [r9]
 800ae18:	4461      	add	r1, ip
 800ae1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae26:	b289      	uxth	r1, r1
 800ae28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae2c:	4577      	cmp	r7, lr
 800ae2e:	f849 1b04 	str.w	r1, [r9], #4
 800ae32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae36:	d8e2      	bhi.n	800adfe <__multiply+0xb2>
 800ae38:	9a01      	ldr	r2, [sp, #4]
 800ae3a:	f845 c002 	str.w	ip, [r5, r2]
 800ae3e:	9a03      	ldr	r2, [sp, #12]
 800ae40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae44:	3304      	adds	r3, #4
 800ae46:	f1b9 0f00 	cmp.w	r9, #0
 800ae4a:	d020      	beq.n	800ae8e <__multiply+0x142>
 800ae4c:	6829      	ldr	r1, [r5, #0]
 800ae4e:	f104 0c14 	add.w	ip, r4, #20
 800ae52:	46ae      	mov	lr, r5
 800ae54:	f04f 0a00 	mov.w	sl, #0
 800ae58:	f8bc b000 	ldrh.w	fp, [ip]
 800ae5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae60:	fb09 220b 	mla	r2, r9, fp, r2
 800ae64:	4492      	add	sl, r2
 800ae66:	b289      	uxth	r1, r1
 800ae68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ae6c:	f84e 1b04 	str.w	r1, [lr], #4
 800ae70:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae74:	f8be 1000 	ldrh.w	r1, [lr]
 800ae78:	0c12      	lsrs	r2, r2, #16
 800ae7a:	fb09 1102 	mla	r1, r9, r2, r1
 800ae7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ae82:	4567      	cmp	r7, ip
 800ae84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae88:	d8e6      	bhi.n	800ae58 <__multiply+0x10c>
 800ae8a:	9a01      	ldr	r2, [sp, #4]
 800ae8c:	50a9      	str	r1, [r5, r2]
 800ae8e:	3504      	adds	r5, #4
 800ae90:	e79a      	b.n	800adc8 <__multiply+0x7c>
 800ae92:	3e01      	subs	r6, #1
 800ae94:	e79c      	b.n	800add0 <__multiply+0x84>
 800ae96:	bf00      	nop
 800ae98:	0800c330 	.word	0x0800c330
 800ae9c:	0800c420 	.word	0x0800c420

0800aea0 <__pow5mult>:
 800aea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea4:	4615      	mov	r5, r2
 800aea6:	f012 0203 	ands.w	r2, r2, #3
 800aeaa:	4606      	mov	r6, r0
 800aeac:	460f      	mov	r7, r1
 800aeae:	d007      	beq.n	800aec0 <__pow5mult+0x20>
 800aeb0:	4c25      	ldr	r4, [pc, #148]	; (800af48 <__pow5mult+0xa8>)
 800aeb2:	3a01      	subs	r2, #1
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeba:	f7ff fe51 	bl	800ab60 <__multadd>
 800aebe:	4607      	mov	r7, r0
 800aec0:	10ad      	asrs	r5, r5, #2
 800aec2:	d03d      	beq.n	800af40 <__pow5mult+0xa0>
 800aec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aec6:	b97c      	cbnz	r4, 800aee8 <__pow5mult+0x48>
 800aec8:	2010      	movs	r0, #16
 800aeca:	f7ff fdcd 	bl	800aa68 <malloc>
 800aece:	4602      	mov	r2, r0
 800aed0:	6270      	str	r0, [r6, #36]	; 0x24
 800aed2:	b928      	cbnz	r0, 800aee0 <__pow5mult+0x40>
 800aed4:	4b1d      	ldr	r3, [pc, #116]	; (800af4c <__pow5mult+0xac>)
 800aed6:	481e      	ldr	r0, [pc, #120]	; (800af50 <__pow5mult+0xb0>)
 800aed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aedc:	f000 ff22 	bl	800bd24 <__assert_func>
 800aee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aee4:	6004      	str	r4, [r0, #0]
 800aee6:	60c4      	str	r4, [r0, #12]
 800aee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aeec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aef0:	b94c      	cbnz	r4, 800af06 <__pow5mult+0x66>
 800aef2:	f240 2171 	movw	r1, #625	; 0x271
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7ff ff12 	bl	800ad20 <__i2b>
 800aefc:	2300      	movs	r3, #0
 800aefe:	f8c8 0008 	str.w	r0, [r8, #8]
 800af02:	4604      	mov	r4, r0
 800af04:	6003      	str	r3, [r0, #0]
 800af06:	f04f 0900 	mov.w	r9, #0
 800af0a:	07eb      	lsls	r3, r5, #31
 800af0c:	d50a      	bpl.n	800af24 <__pow5mult+0x84>
 800af0e:	4639      	mov	r1, r7
 800af10:	4622      	mov	r2, r4
 800af12:	4630      	mov	r0, r6
 800af14:	f7ff ff1a 	bl	800ad4c <__multiply>
 800af18:	4639      	mov	r1, r7
 800af1a:	4680      	mov	r8, r0
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7ff fdfd 	bl	800ab1c <_Bfree>
 800af22:	4647      	mov	r7, r8
 800af24:	106d      	asrs	r5, r5, #1
 800af26:	d00b      	beq.n	800af40 <__pow5mult+0xa0>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	b938      	cbnz	r0, 800af3c <__pow5mult+0x9c>
 800af2c:	4622      	mov	r2, r4
 800af2e:	4621      	mov	r1, r4
 800af30:	4630      	mov	r0, r6
 800af32:	f7ff ff0b 	bl	800ad4c <__multiply>
 800af36:	6020      	str	r0, [r4, #0]
 800af38:	f8c0 9000 	str.w	r9, [r0]
 800af3c:	4604      	mov	r4, r0
 800af3e:	e7e4      	b.n	800af0a <__pow5mult+0x6a>
 800af40:	4638      	mov	r0, r7
 800af42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af46:	bf00      	nop
 800af48:	0800c570 	.word	0x0800c570
 800af4c:	0800c2be 	.word	0x0800c2be
 800af50:	0800c420 	.word	0x0800c420

0800af54 <__lshift>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	460c      	mov	r4, r1
 800af5a:	6849      	ldr	r1, [r1, #4]
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	4607      	mov	r7, r0
 800af66:	4691      	mov	r9, r2
 800af68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af6c:	f108 0601 	add.w	r6, r8, #1
 800af70:	42b3      	cmp	r3, r6
 800af72:	db0b      	blt.n	800af8c <__lshift+0x38>
 800af74:	4638      	mov	r0, r7
 800af76:	f7ff fd91 	bl	800aa9c <_Balloc>
 800af7a:	4605      	mov	r5, r0
 800af7c:	b948      	cbnz	r0, 800af92 <__lshift+0x3e>
 800af7e:	4602      	mov	r2, r0
 800af80:	4b2a      	ldr	r3, [pc, #168]	; (800b02c <__lshift+0xd8>)
 800af82:	482b      	ldr	r0, [pc, #172]	; (800b030 <__lshift+0xdc>)
 800af84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af88:	f000 fecc 	bl	800bd24 <__assert_func>
 800af8c:	3101      	adds	r1, #1
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	e7ee      	b.n	800af70 <__lshift+0x1c>
 800af92:	2300      	movs	r3, #0
 800af94:	f100 0114 	add.w	r1, r0, #20
 800af98:	f100 0210 	add.w	r2, r0, #16
 800af9c:	4618      	mov	r0, r3
 800af9e:	4553      	cmp	r3, sl
 800afa0:	db37      	blt.n	800b012 <__lshift+0xbe>
 800afa2:	6920      	ldr	r0, [r4, #16]
 800afa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afa8:	f104 0314 	add.w	r3, r4, #20
 800afac:	f019 091f 	ands.w	r9, r9, #31
 800afb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800afb8:	d02f      	beq.n	800b01a <__lshift+0xc6>
 800afba:	f1c9 0e20 	rsb	lr, r9, #32
 800afbe:	468a      	mov	sl, r1
 800afc0:	f04f 0c00 	mov.w	ip, #0
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	fa02 f209 	lsl.w	r2, r2, r9
 800afca:	ea42 020c 	orr.w	r2, r2, ip
 800afce:	f84a 2b04 	str.w	r2, [sl], #4
 800afd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd6:	4298      	cmp	r0, r3
 800afd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800afdc:	d8f2      	bhi.n	800afc4 <__lshift+0x70>
 800afde:	1b03      	subs	r3, r0, r4
 800afe0:	3b15      	subs	r3, #21
 800afe2:	f023 0303 	bic.w	r3, r3, #3
 800afe6:	3304      	adds	r3, #4
 800afe8:	f104 0215 	add.w	r2, r4, #21
 800afec:	4290      	cmp	r0, r2
 800afee:	bf38      	it	cc
 800aff0:	2304      	movcc	r3, #4
 800aff2:	f841 c003 	str.w	ip, [r1, r3]
 800aff6:	f1bc 0f00 	cmp.w	ip, #0
 800affa:	d001      	beq.n	800b000 <__lshift+0xac>
 800affc:	f108 0602 	add.w	r6, r8, #2
 800b000:	3e01      	subs	r6, #1
 800b002:	4638      	mov	r0, r7
 800b004:	612e      	str	r6, [r5, #16]
 800b006:	4621      	mov	r1, r4
 800b008:	f7ff fd88 	bl	800ab1c <_Bfree>
 800b00c:	4628      	mov	r0, r5
 800b00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b012:	f842 0f04 	str.w	r0, [r2, #4]!
 800b016:	3301      	adds	r3, #1
 800b018:	e7c1      	b.n	800af9e <__lshift+0x4a>
 800b01a:	3904      	subs	r1, #4
 800b01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b020:	f841 2f04 	str.w	r2, [r1, #4]!
 800b024:	4298      	cmp	r0, r3
 800b026:	d8f9      	bhi.n	800b01c <__lshift+0xc8>
 800b028:	e7ea      	b.n	800b000 <__lshift+0xac>
 800b02a:	bf00      	nop
 800b02c:	0800c330 	.word	0x0800c330
 800b030:	0800c420 	.word	0x0800c420

0800b034 <__mcmp>:
 800b034:	b530      	push	{r4, r5, lr}
 800b036:	6902      	ldr	r2, [r0, #16]
 800b038:	690c      	ldr	r4, [r1, #16]
 800b03a:	1b12      	subs	r2, r2, r4
 800b03c:	d10e      	bne.n	800b05c <__mcmp+0x28>
 800b03e:	f100 0314 	add.w	r3, r0, #20
 800b042:	3114      	adds	r1, #20
 800b044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b04c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b054:	42a5      	cmp	r5, r4
 800b056:	d003      	beq.n	800b060 <__mcmp+0x2c>
 800b058:	d305      	bcc.n	800b066 <__mcmp+0x32>
 800b05a:	2201      	movs	r2, #1
 800b05c:	4610      	mov	r0, r2
 800b05e:	bd30      	pop	{r4, r5, pc}
 800b060:	4283      	cmp	r3, r0
 800b062:	d3f3      	bcc.n	800b04c <__mcmp+0x18>
 800b064:	e7fa      	b.n	800b05c <__mcmp+0x28>
 800b066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b06a:	e7f7      	b.n	800b05c <__mcmp+0x28>

0800b06c <__mdiff>:
 800b06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b070:	460c      	mov	r4, r1
 800b072:	4606      	mov	r6, r0
 800b074:	4611      	mov	r1, r2
 800b076:	4620      	mov	r0, r4
 800b078:	4690      	mov	r8, r2
 800b07a:	f7ff ffdb 	bl	800b034 <__mcmp>
 800b07e:	1e05      	subs	r5, r0, #0
 800b080:	d110      	bne.n	800b0a4 <__mdiff+0x38>
 800b082:	4629      	mov	r1, r5
 800b084:	4630      	mov	r0, r6
 800b086:	f7ff fd09 	bl	800aa9c <_Balloc>
 800b08a:	b930      	cbnz	r0, 800b09a <__mdiff+0x2e>
 800b08c:	4b3a      	ldr	r3, [pc, #232]	; (800b178 <__mdiff+0x10c>)
 800b08e:	4602      	mov	r2, r0
 800b090:	f240 2132 	movw	r1, #562	; 0x232
 800b094:	4839      	ldr	r0, [pc, #228]	; (800b17c <__mdiff+0x110>)
 800b096:	f000 fe45 	bl	800bd24 <__assert_func>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a4:	bfa4      	itt	ge
 800b0a6:	4643      	movge	r3, r8
 800b0a8:	46a0      	movge	r8, r4
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0b0:	bfa6      	itte	ge
 800b0b2:	461c      	movge	r4, r3
 800b0b4:	2500      	movge	r5, #0
 800b0b6:	2501      	movlt	r5, #1
 800b0b8:	f7ff fcf0 	bl	800aa9c <_Balloc>
 800b0bc:	b920      	cbnz	r0, 800b0c8 <__mdiff+0x5c>
 800b0be:	4b2e      	ldr	r3, [pc, #184]	; (800b178 <__mdiff+0x10c>)
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0c6:	e7e5      	b.n	800b094 <__mdiff+0x28>
 800b0c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b0cc:	6926      	ldr	r6, [r4, #16]
 800b0ce:	60c5      	str	r5, [r0, #12]
 800b0d0:	f104 0914 	add.w	r9, r4, #20
 800b0d4:	f108 0514 	add.w	r5, r8, #20
 800b0d8:	f100 0e14 	add.w	lr, r0, #20
 800b0dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b0e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0e4:	f108 0210 	add.w	r2, r8, #16
 800b0e8:	46f2      	mov	sl, lr
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0f4:	fa1f f883 	uxth.w	r8, r3
 800b0f8:	fa11 f18b 	uxtah	r1, r1, fp
 800b0fc:	0c1b      	lsrs	r3, r3, #16
 800b0fe:	eba1 0808 	sub.w	r8, r1, r8
 800b102:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b106:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b10a:	fa1f f888 	uxth.w	r8, r8
 800b10e:	1419      	asrs	r1, r3, #16
 800b110:	454e      	cmp	r6, r9
 800b112:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b116:	f84a 3b04 	str.w	r3, [sl], #4
 800b11a:	d8e7      	bhi.n	800b0ec <__mdiff+0x80>
 800b11c:	1b33      	subs	r3, r6, r4
 800b11e:	3b15      	subs	r3, #21
 800b120:	f023 0303 	bic.w	r3, r3, #3
 800b124:	3304      	adds	r3, #4
 800b126:	3415      	adds	r4, #21
 800b128:	42a6      	cmp	r6, r4
 800b12a:	bf38      	it	cc
 800b12c:	2304      	movcc	r3, #4
 800b12e:	441d      	add	r5, r3
 800b130:	4473      	add	r3, lr
 800b132:	469e      	mov	lr, r3
 800b134:	462e      	mov	r6, r5
 800b136:	4566      	cmp	r6, ip
 800b138:	d30e      	bcc.n	800b158 <__mdiff+0xec>
 800b13a:	f10c 0203 	add.w	r2, ip, #3
 800b13e:	1b52      	subs	r2, r2, r5
 800b140:	f022 0203 	bic.w	r2, r2, #3
 800b144:	3d03      	subs	r5, #3
 800b146:	45ac      	cmp	ip, r5
 800b148:	bf38      	it	cc
 800b14a:	2200      	movcc	r2, #0
 800b14c:	441a      	add	r2, r3
 800b14e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b152:	b17b      	cbz	r3, 800b174 <__mdiff+0x108>
 800b154:	6107      	str	r7, [r0, #16]
 800b156:	e7a3      	b.n	800b0a0 <__mdiff+0x34>
 800b158:	f856 8b04 	ldr.w	r8, [r6], #4
 800b15c:	fa11 f288 	uxtah	r2, r1, r8
 800b160:	1414      	asrs	r4, r2, #16
 800b162:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b166:	b292      	uxth	r2, r2
 800b168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b16c:	f84e 2b04 	str.w	r2, [lr], #4
 800b170:	1421      	asrs	r1, r4, #16
 800b172:	e7e0      	b.n	800b136 <__mdiff+0xca>
 800b174:	3f01      	subs	r7, #1
 800b176:	e7ea      	b.n	800b14e <__mdiff+0xe2>
 800b178:	0800c330 	.word	0x0800c330
 800b17c:	0800c420 	.word	0x0800c420

0800b180 <__ulp>:
 800b180:	b082      	sub	sp, #8
 800b182:	ed8d 0b00 	vstr	d0, [sp]
 800b186:	9b01      	ldr	r3, [sp, #4]
 800b188:	4912      	ldr	r1, [pc, #72]	; (800b1d4 <__ulp+0x54>)
 800b18a:	4019      	ands	r1, r3
 800b18c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b190:	2900      	cmp	r1, #0
 800b192:	dd05      	ble.n	800b1a0 <__ulp+0x20>
 800b194:	2200      	movs	r2, #0
 800b196:	460b      	mov	r3, r1
 800b198:	ec43 2b10 	vmov	d0, r2, r3
 800b19c:	b002      	add	sp, #8
 800b19e:	4770      	bx	lr
 800b1a0:	4249      	negs	r1, r1
 800b1a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b1a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b1aa:	f04f 0200 	mov.w	r2, #0
 800b1ae:	f04f 0300 	mov.w	r3, #0
 800b1b2:	da04      	bge.n	800b1be <__ulp+0x3e>
 800b1b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b1b8:	fa41 f300 	asr.w	r3, r1, r0
 800b1bc:	e7ec      	b.n	800b198 <__ulp+0x18>
 800b1be:	f1a0 0114 	sub.w	r1, r0, #20
 800b1c2:	291e      	cmp	r1, #30
 800b1c4:	bfda      	itte	le
 800b1c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b1ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800b1ce:	2101      	movgt	r1, #1
 800b1d0:	460a      	mov	r2, r1
 800b1d2:	e7e1      	b.n	800b198 <__ulp+0x18>
 800b1d4:	7ff00000 	.word	0x7ff00000

0800b1d8 <__b2d>:
 800b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1da:	6905      	ldr	r5, [r0, #16]
 800b1dc:	f100 0714 	add.w	r7, r0, #20
 800b1e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b1e4:	1f2e      	subs	r6, r5, #4
 800b1e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f7ff fd48 	bl	800ac80 <__hi0bits>
 800b1f0:	f1c0 0320 	rsb	r3, r0, #32
 800b1f4:	280a      	cmp	r0, #10
 800b1f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b274 <__b2d+0x9c>
 800b1fa:	600b      	str	r3, [r1, #0]
 800b1fc:	dc14      	bgt.n	800b228 <__b2d+0x50>
 800b1fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800b202:	fa24 f10e 	lsr.w	r1, r4, lr
 800b206:	42b7      	cmp	r7, r6
 800b208:	ea41 030c 	orr.w	r3, r1, ip
 800b20c:	bf34      	ite	cc
 800b20e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b212:	2100      	movcs	r1, #0
 800b214:	3015      	adds	r0, #21
 800b216:	fa04 f000 	lsl.w	r0, r4, r0
 800b21a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b21e:	ea40 0201 	orr.w	r2, r0, r1
 800b222:	ec43 2b10 	vmov	d0, r2, r3
 800b226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b228:	42b7      	cmp	r7, r6
 800b22a:	bf3a      	itte	cc
 800b22c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b230:	f1a5 0608 	subcc.w	r6, r5, #8
 800b234:	2100      	movcs	r1, #0
 800b236:	380b      	subs	r0, #11
 800b238:	d017      	beq.n	800b26a <__b2d+0x92>
 800b23a:	f1c0 0c20 	rsb	ip, r0, #32
 800b23e:	fa04 f500 	lsl.w	r5, r4, r0
 800b242:	42be      	cmp	r6, r7
 800b244:	fa21 f40c 	lsr.w	r4, r1, ip
 800b248:	ea45 0504 	orr.w	r5, r5, r4
 800b24c:	bf8c      	ite	hi
 800b24e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b252:	2400      	movls	r4, #0
 800b254:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b258:	fa01 f000 	lsl.w	r0, r1, r0
 800b25c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b260:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b264:	ea40 0204 	orr.w	r2, r0, r4
 800b268:	e7db      	b.n	800b222 <__b2d+0x4a>
 800b26a:	ea44 030c 	orr.w	r3, r4, ip
 800b26e:	460a      	mov	r2, r1
 800b270:	e7d7      	b.n	800b222 <__b2d+0x4a>
 800b272:	bf00      	nop
 800b274:	3ff00000 	.word	0x3ff00000

0800b278 <__d2b>:
 800b278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b27c:	4689      	mov	r9, r1
 800b27e:	2101      	movs	r1, #1
 800b280:	ec57 6b10 	vmov	r6, r7, d0
 800b284:	4690      	mov	r8, r2
 800b286:	f7ff fc09 	bl	800aa9c <_Balloc>
 800b28a:	4604      	mov	r4, r0
 800b28c:	b930      	cbnz	r0, 800b29c <__d2b+0x24>
 800b28e:	4602      	mov	r2, r0
 800b290:	4b25      	ldr	r3, [pc, #148]	; (800b328 <__d2b+0xb0>)
 800b292:	4826      	ldr	r0, [pc, #152]	; (800b32c <__d2b+0xb4>)
 800b294:	f240 310a 	movw	r1, #778	; 0x30a
 800b298:	f000 fd44 	bl	800bd24 <__assert_func>
 800b29c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2a4:	bb35      	cbnz	r5, 800b2f4 <__d2b+0x7c>
 800b2a6:	2e00      	cmp	r6, #0
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	d028      	beq.n	800b2fe <__d2b+0x86>
 800b2ac:	4668      	mov	r0, sp
 800b2ae:	9600      	str	r6, [sp, #0]
 800b2b0:	f7ff fd06 	bl	800acc0 <__lo0bits>
 800b2b4:	9900      	ldr	r1, [sp, #0]
 800b2b6:	b300      	cbz	r0, 800b2fa <__d2b+0x82>
 800b2b8:	9a01      	ldr	r2, [sp, #4]
 800b2ba:	f1c0 0320 	rsb	r3, r0, #32
 800b2be:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c2:	430b      	orrs	r3, r1
 800b2c4:	40c2      	lsrs	r2, r0
 800b2c6:	6163      	str	r3, [r4, #20]
 800b2c8:	9201      	str	r2, [sp, #4]
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	61a3      	str	r3, [r4, #24]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bf14      	ite	ne
 800b2d2:	2202      	movne	r2, #2
 800b2d4:	2201      	moveq	r2, #1
 800b2d6:	6122      	str	r2, [r4, #16]
 800b2d8:	b1d5      	cbz	r5, 800b310 <__d2b+0x98>
 800b2da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2de:	4405      	add	r5, r0
 800b2e0:	f8c9 5000 	str.w	r5, [r9]
 800b2e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2e8:	f8c8 0000 	str.w	r0, [r8]
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	b003      	add	sp, #12
 800b2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2f8:	e7d5      	b.n	800b2a6 <__d2b+0x2e>
 800b2fa:	6161      	str	r1, [r4, #20]
 800b2fc:	e7e5      	b.n	800b2ca <__d2b+0x52>
 800b2fe:	a801      	add	r0, sp, #4
 800b300:	f7ff fcde 	bl	800acc0 <__lo0bits>
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	6163      	str	r3, [r4, #20]
 800b308:	2201      	movs	r2, #1
 800b30a:	6122      	str	r2, [r4, #16]
 800b30c:	3020      	adds	r0, #32
 800b30e:	e7e3      	b.n	800b2d8 <__d2b+0x60>
 800b310:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b314:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b318:	f8c9 0000 	str.w	r0, [r9]
 800b31c:	6918      	ldr	r0, [r3, #16]
 800b31e:	f7ff fcaf 	bl	800ac80 <__hi0bits>
 800b322:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b326:	e7df      	b.n	800b2e8 <__d2b+0x70>
 800b328:	0800c330 	.word	0x0800c330
 800b32c:	0800c420 	.word	0x0800c420

0800b330 <__ratio>:
 800b330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	4688      	mov	r8, r1
 800b336:	4669      	mov	r1, sp
 800b338:	4681      	mov	r9, r0
 800b33a:	f7ff ff4d 	bl	800b1d8 <__b2d>
 800b33e:	a901      	add	r1, sp, #4
 800b340:	4640      	mov	r0, r8
 800b342:	ec55 4b10 	vmov	r4, r5, d0
 800b346:	f7ff ff47 	bl	800b1d8 <__b2d>
 800b34a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b34e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b352:	eba3 0c02 	sub.w	ip, r3, r2
 800b356:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b35a:	1a9b      	subs	r3, r3, r2
 800b35c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b360:	ec51 0b10 	vmov	r0, r1, d0
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfd6      	itet	le
 800b368:	460a      	movle	r2, r1
 800b36a:	462a      	movgt	r2, r5
 800b36c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b370:	468b      	mov	fp, r1
 800b372:	462f      	mov	r7, r5
 800b374:	bfd4      	ite	le
 800b376:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b37a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b37e:	4620      	mov	r0, r4
 800b380:	ee10 2a10 	vmov	r2, s0
 800b384:	465b      	mov	r3, fp
 800b386:	4639      	mov	r1, r7
 800b388:	f7f5 fa70 	bl	800086c <__aeabi_ddiv>
 800b38c:	ec41 0b10 	vmov	d0, r0, r1
 800b390:	b003      	add	sp, #12
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b396 <__copybits>:
 800b396:	3901      	subs	r1, #1
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	1149      	asrs	r1, r1, #5
 800b39c:	6914      	ldr	r4, [r2, #16]
 800b39e:	3101      	adds	r1, #1
 800b3a0:	f102 0314 	add.w	r3, r2, #20
 800b3a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3ac:	1f05      	subs	r5, r0, #4
 800b3ae:	42a3      	cmp	r3, r4
 800b3b0:	d30c      	bcc.n	800b3cc <__copybits+0x36>
 800b3b2:	1aa3      	subs	r3, r4, r2
 800b3b4:	3b11      	subs	r3, #17
 800b3b6:	f023 0303 	bic.w	r3, r3, #3
 800b3ba:	3211      	adds	r2, #17
 800b3bc:	42a2      	cmp	r2, r4
 800b3be:	bf88      	it	hi
 800b3c0:	2300      	movhi	r3, #0
 800b3c2:	4418      	add	r0, r3
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	4288      	cmp	r0, r1
 800b3c8:	d305      	bcc.n	800b3d6 <__copybits+0x40>
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3d4:	e7eb      	b.n	800b3ae <__copybits+0x18>
 800b3d6:	f840 3b04 	str.w	r3, [r0], #4
 800b3da:	e7f4      	b.n	800b3c6 <__copybits+0x30>

0800b3dc <__any_on>:
 800b3dc:	f100 0214 	add.w	r2, r0, #20
 800b3e0:	6900      	ldr	r0, [r0, #16]
 800b3e2:	114b      	asrs	r3, r1, #5
 800b3e4:	4298      	cmp	r0, r3
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	db11      	blt.n	800b40e <__any_on+0x32>
 800b3ea:	dd0a      	ble.n	800b402 <__any_on+0x26>
 800b3ec:	f011 011f 	ands.w	r1, r1, #31
 800b3f0:	d007      	beq.n	800b402 <__any_on+0x26>
 800b3f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3f6:	fa24 f001 	lsr.w	r0, r4, r1
 800b3fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b3fe:	428c      	cmp	r4, r1
 800b400:	d10b      	bne.n	800b41a <__any_on+0x3e>
 800b402:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b406:	4293      	cmp	r3, r2
 800b408:	d803      	bhi.n	800b412 <__any_on+0x36>
 800b40a:	2000      	movs	r0, #0
 800b40c:	bd10      	pop	{r4, pc}
 800b40e:	4603      	mov	r3, r0
 800b410:	e7f7      	b.n	800b402 <__any_on+0x26>
 800b412:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b416:	2900      	cmp	r1, #0
 800b418:	d0f5      	beq.n	800b406 <__any_on+0x2a>
 800b41a:	2001      	movs	r0, #1
 800b41c:	e7f6      	b.n	800b40c <__any_on+0x30>

0800b41e <_calloc_r>:
 800b41e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b420:	fba1 2402 	umull	r2, r4, r1, r2
 800b424:	b94c      	cbnz	r4, 800b43a <_calloc_r+0x1c>
 800b426:	4611      	mov	r1, r2
 800b428:	9201      	str	r2, [sp, #4]
 800b42a:	f000 f87b 	bl	800b524 <_malloc_r>
 800b42e:	9a01      	ldr	r2, [sp, #4]
 800b430:	4605      	mov	r5, r0
 800b432:	b930      	cbnz	r0, 800b442 <_calloc_r+0x24>
 800b434:	4628      	mov	r0, r5
 800b436:	b003      	add	sp, #12
 800b438:	bd30      	pop	{r4, r5, pc}
 800b43a:	220c      	movs	r2, #12
 800b43c:	6002      	str	r2, [r0, #0]
 800b43e:	2500      	movs	r5, #0
 800b440:	e7f8      	b.n	800b434 <_calloc_r+0x16>
 800b442:	4621      	mov	r1, r4
 800b444:	f7fc f84a 	bl	80074dc <memset>
 800b448:	e7f4      	b.n	800b434 <_calloc_r+0x16>
	...

0800b44c <_free_r>:
 800b44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b44e:	2900      	cmp	r1, #0
 800b450:	d044      	beq.n	800b4dc <_free_r+0x90>
 800b452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b456:	9001      	str	r0, [sp, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f1a1 0404 	sub.w	r4, r1, #4
 800b45e:	bfb8      	it	lt
 800b460:	18e4      	addlt	r4, r4, r3
 800b462:	f000 fced 	bl	800be40 <__malloc_lock>
 800b466:	4a1e      	ldr	r2, [pc, #120]	; (800b4e0 <_free_r+0x94>)
 800b468:	9801      	ldr	r0, [sp, #4]
 800b46a:	6813      	ldr	r3, [r2, #0]
 800b46c:	b933      	cbnz	r3, 800b47c <_free_r+0x30>
 800b46e:	6063      	str	r3, [r4, #4]
 800b470:	6014      	str	r4, [r2, #0]
 800b472:	b003      	add	sp, #12
 800b474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b478:	f000 bce8 	b.w	800be4c <__malloc_unlock>
 800b47c:	42a3      	cmp	r3, r4
 800b47e:	d908      	bls.n	800b492 <_free_r+0x46>
 800b480:	6825      	ldr	r5, [r4, #0]
 800b482:	1961      	adds	r1, r4, r5
 800b484:	428b      	cmp	r3, r1
 800b486:	bf01      	itttt	eq
 800b488:	6819      	ldreq	r1, [r3, #0]
 800b48a:	685b      	ldreq	r3, [r3, #4]
 800b48c:	1949      	addeq	r1, r1, r5
 800b48e:	6021      	streq	r1, [r4, #0]
 800b490:	e7ed      	b.n	800b46e <_free_r+0x22>
 800b492:	461a      	mov	r2, r3
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	b10b      	cbz	r3, 800b49c <_free_r+0x50>
 800b498:	42a3      	cmp	r3, r4
 800b49a:	d9fa      	bls.n	800b492 <_free_r+0x46>
 800b49c:	6811      	ldr	r1, [r2, #0]
 800b49e:	1855      	adds	r5, r2, r1
 800b4a0:	42a5      	cmp	r5, r4
 800b4a2:	d10b      	bne.n	800b4bc <_free_r+0x70>
 800b4a4:	6824      	ldr	r4, [r4, #0]
 800b4a6:	4421      	add	r1, r4
 800b4a8:	1854      	adds	r4, r2, r1
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	6011      	str	r1, [r2, #0]
 800b4ae:	d1e0      	bne.n	800b472 <_free_r+0x26>
 800b4b0:	681c      	ldr	r4, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	6053      	str	r3, [r2, #4]
 800b4b6:	4421      	add	r1, r4
 800b4b8:	6011      	str	r1, [r2, #0]
 800b4ba:	e7da      	b.n	800b472 <_free_r+0x26>
 800b4bc:	d902      	bls.n	800b4c4 <_free_r+0x78>
 800b4be:	230c      	movs	r3, #12
 800b4c0:	6003      	str	r3, [r0, #0]
 800b4c2:	e7d6      	b.n	800b472 <_free_r+0x26>
 800b4c4:	6825      	ldr	r5, [r4, #0]
 800b4c6:	1961      	adds	r1, r4, r5
 800b4c8:	428b      	cmp	r3, r1
 800b4ca:	bf04      	itt	eq
 800b4cc:	6819      	ldreq	r1, [r3, #0]
 800b4ce:	685b      	ldreq	r3, [r3, #4]
 800b4d0:	6063      	str	r3, [r4, #4]
 800b4d2:	bf04      	itt	eq
 800b4d4:	1949      	addeq	r1, r1, r5
 800b4d6:	6021      	streq	r1, [r4, #0]
 800b4d8:	6054      	str	r4, [r2, #4]
 800b4da:	e7ca      	b.n	800b472 <_free_r+0x26>
 800b4dc:	b003      	add	sp, #12
 800b4de:	bd30      	pop	{r4, r5, pc}
 800b4e0:	200003d0 	.word	0x200003d0

0800b4e4 <sbrk_aligned>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	4e0e      	ldr	r6, [pc, #56]	; (800b520 <sbrk_aligned+0x3c>)
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	6831      	ldr	r1, [r6, #0]
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	b911      	cbnz	r1, 800b4f6 <sbrk_aligned+0x12>
 800b4f0:	f000 fb92 	bl	800bc18 <_sbrk_r>
 800b4f4:	6030      	str	r0, [r6, #0]
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f000 fb8d 	bl	800bc18 <_sbrk_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	d00a      	beq.n	800b518 <sbrk_aligned+0x34>
 800b502:	1cc4      	adds	r4, r0, #3
 800b504:	f024 0403 	bic.w	r4, r4, #3
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d007      	beq.n	800b51c <sbrk_aligned+0x38>
 800b50c:	1a21      	subs	r1, r4, r0
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 fb82 	bl	800bc18 <_sbrk_r>
 800b514:	3001      	adds	r0, #1
 800b516:	d101      	bne.n	800b51c <sbrk_aligned+0x38>
 800b518:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b51c:	4620      	mov	r0, r4
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	200003d4 	.word	0x200003d4

0800b524 <_malloc_r>:
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	1ccd      	adds	r5, r1, #3
 800b52a:	f025 0503 	bic.w	r5, r5, #3
 800b52e:	3508      	adds	r5, #8
 800b530:	2d0c      	cmp	r5, #12
 800b532:	bf38      	it	cc
 800b534:	250c      	movcc	r5, #12
 800b536:	2d00      	cmp	r5, #0
 800b538:	4607      	mov	r7, r0
 800b53a:	db01      	blt.n	800b540 <_malloc_r+0x1c>
 800b53c:	42a9      	cmp	r1, r5
 800b53e:	d905      	bls.n	800b54c <_malloc_r+0x28>
 800b540:	230c      	movs	r3, #12
 800b542:	603b      	str	r3, [r7, #0]
 800b544:	2600      	movs	r6, #0
 800b546:	4630      	mov	r0, r6
 800b548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b54c:	4e2e      	ldr	r6, [pc, #184]	; (800b608 <_malloc_r+0xe4>)
 800b54e:	f000 fc77 	bl	800be40 <__malloc_lock>
 800b552:	6833      	ldr	r3, [r6, #0]
 800b554:	461c      	mov	r4, r3
 800b556:	bb34      	cbnz	r4, 800b5a6 <_malloc_r+0x82>
 800b558:	4629      	mov	r1, r5
 800b55a:	4638      	mov	r0, r7
 800b55c:	f7ff ffc2 	bl	800b4e4 <sbrk_aligned>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	4604      	mov	r4, r0
 800b564:	d14d      	bne.n	800b602 <_malloc_r+0xde>
 800b566:	6834      	ldr	r4, [r6, #0]
 800b568:	4626      	mov	r6, r4
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	d140      	bne.n	800b5f0 <_malloc_r+0xcc>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	4631      	mov	r1, r6
 800b572:	4638      	mov	r0, r7
 800b574:	eb04 0803 	add.w	r8, r4, r3
 800b578:	f000 fb4e 	bl	800bc18 <_sbrk_r>
 800b57c:	4580      	cmp	r8, r0
 800b57e:	d13a      	bne.n	800b5f6 <_malloc_r+0xd2>
 800b580:	6821      	ldr	r1, [r4, #0]
 800b582:	3503      	adds	r5, #3
 800b584:	1a6d      	subs	r5, r5, r1
 800b586:	f025 0503 	bic.w	r5, r5, #3
 800b58a:	3508      	adds	r5, #8
 800b58c:	2d0c      	cmp	r5, #12
 800b58e:	bf38      	it	cc
 800b590:	250c      	movcc	r5, #12
 800b592:	4629      	mov	r1, r5
 800b594:	4638      	mov	r0, r7
 800b596:	f7ff ffa5 	bl	800b4e4 <sbrk_aligned>
 800b59a:	3001      	adds	r0, #1
 800b59c:	d02b      	beq.n	800b5f6 <_malloc_r+0xd2>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	442b      	add	r3, r5
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	e00e      	b.n	800b5c4 <_malloc_r+0xa0>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	1b52      	subs	r2, r2, r5
 800b5aa:	d41e      	bmi.n	800b5ea <_malloc_r+0xc6>
 800b5ac:	2a0b      	cmp	r2, #11
 800b5ae:	d916      	bls.n	800b5de <_malloc_r+0xba>
 800b5b0:	1961      	adds	r1, r4, r5
 800b5b2:	42a3      	cmp	r3, r4
 800b5b4:	6025      	str	r5, [r4, #0]
 800b5b6:	bf18      	it	ne
 800b5b8:	6059      	strne	r1, [r3, #4]
 800b5ba:	6863      	ldr	r3, [r4, #4]
 800b5bc:	bf08      	it	eq
 800b5be:	6031      	streq	r1, [r6, #0]
 800b5c0:	5162      	str	r2, [r4, r5]
 800b5c2:	604b      	str	r3, [r1, #4]
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f104 060b 	add.w	r6, r4, #11
 800b5ca:	f000 fc3f 	bl	800be4c <__malloc_unlock>
 800b5ce:	f026 0607 	bic.w	r6, r6, #7
 800b5d2:	1d23      	adds	r3, r4, #4
 800b5d4:	1af2      	subs	r2, r6, r3
 800b5d6:	d0b6      	beq.n	800b546 <_malloc_r+0x22>
 800b5d8:	1b9b      	subs	r3, r3, r6
 800b5da:	50a3      	str	r3, [r4, r2]
 800b5dc:	e7b3      	b.n	800b546 <_malloc_r+0x22>
 800b5de:	6862      	ldr	r2, [r4, #4]
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	bf0c      	ite	eq
 800b5e4:	6032      	streq	r2, [r6, #0]
 800b5e6:	605a      	strne	r2, [r3, #4]
 800b5e8:	e7ec      	b.n	800b5c4 <_malloc_r+0xa0>
 800b5ea:	4623      	mov	r3, r4
 800b5ec:	6864      	ldr	r4, [r4, #4]
 800b5ee:	e7b2      	b.n	800b556 <_malloc_r+0x32>
 800b5f0:	4634      	mov	r4, r6
 800b5f2:	6876      	ldr	r6, [r6, #4]
 800b5f4:	e7b9      	b.n	800b56a <_malloc_r+0x46>
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	603b      	str	r3, [r7, #0]
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	f000 fc26 	bl	800be4c <__malloc_unlock>
 800b600:	e7a1      	b.n	800b546 <_malloc_r+0x22>
 800b602:	6025      	str	r5, [r4, #0]
 800b604:	e7de      	b.n	800b5c4 <_malloc_r+0xa0>
 800b606:	bf00      	nop
 800b608:	200003d0 	.word	0x200003d0

0800b60c <__ssputs_r>:
 800b60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b610:	688e      	ldr	r6, [r1, #8]
 800b612:	429e      	cmp	r6, r3
 800b614:	4682      	mov	sl, r0
 800b616:	460c      	mov	r4, r1
 800b618:	4690      	mov	r8, r2
 800b61a:	461f      	mov	r7, r3
 800b61c:	d838      	bhi.n	800b690 <__ssputs_r+0x84>
 800b61e:	898a      	ldrh	r2, [r1, #12]
 800b620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b624:	d032      	beq.n	800b68c <__ssputs_r+0x80>
 800b626:	6825      	ldr	r5, [r4, #0]
 800b628:	6909      	ldr	r1, [r1, #16]
 800b62a:	eba5 0901 	sub.w	r9, r5, r1
 800b62e:	6965      	ldr	r5, [r4, #20]
 800b630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b634:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b638:	3301      	adds	r3, #1
 800b63a:	444b      	add	r3, r9
 800b63c:	106d      	asrs	r5, r5, #1
 800b63e:	429d      	cmp	r5, r3
 800b640:	bf38      	it	cc
 800b642:	461d      	movcc	r5, r3
 800b644:	0553      	lsls	r3, r2, #21
 800b646:	d531      	bpl.n	800b6ac <__ssputs_r+0xa0>
 800b648:	4629      	mov	r1, r5
 800b64a:	f7ff ff6b 	bl	800b524 <_malloc_r>
 800b64e:	4606      	mov	r6, r0
 800b650:	b950      	cbnz	r0, 800b668 <__ssputs_r+0x5c>
 800b652:	230c      	movs	r3, #12
 800b654:	f8ca 3000 	str.w	r3, [sl]
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b65e:	81a3      	strh	r3, [r4, #12]
 800b660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b668:	6921      	ldr	r1, [r4, #16]
 800b66a:	464a      	mov	r2, r9
 800b66c:	f7fb ff28 	bl	80074c0 <memcpy>
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	6126      	str	r6, [r4, #16]
 800b67e:	6165      	str	r5, [r4, #20]
 800b680:	444e      	add	r6, r9
 800b682:	eba5 0509 	sub.w	r5, r5, r9
 800b686:	6026      	str	r6, [r4, #0]
 800b688:	60a5      	str	r5, [r4, #8]
 800b68a:	463e      	mov	r6, r7
 800b68c:	42be      	cmp	r6, r7
 800b68e:	d900      	bls.n	800b692 <__ssputs_r+0x86>
 800b690:	463e      	mov	r6, r7
 800b692:	6820      	ldr	r0, [r4, #0]
 800b694:	4632      	mov	r2, r6
 800b696:	4641      	mov	r1, r8
 800b698:	f000 fbb8 	bl	800be0c <memmove>
 800b69c:	68a3      	ldr	r3, [r4, #8]
 800b69e:	1b9b      	subs	r3, r3, r6
 800b6a0:	60a3      	str	r3, [r4, #8]
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	4433      	add	r3, r6
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e7db      	b.n	800b664 <__ssputs_r+0x58>
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	f000 fbd3 	bl	800be58 <_realloc_r>
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d1e1      	bne.n	800b67c <__ssputs_r+0x70>
 800b6b8:	6921      	ldr	r1, [r4, #16]
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	f7ff fec6 	bl	800b44c <_free_r>
 800b6c0:	e7c7      	b.n	800b652 <__ssputs_r+0x46>
	...

0800b6c4 <_svfiprintf_r>:
 800b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	4698      	mov	r8, r3
 800b6ca:	898b      	ldrh	r3, [r1, #12]
 800b6cc:	061b      	lsls	r3, r3, #24
 800b6ce:	b09d      	sub	sp, #116	; 0x74
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	d50e      	bpl.n	800b6f6 <_svfiprintf_r+0x32>
 800b6d8:	690b      	ldr	r3, [r1, #16]
 800b6da:	b963      	cbnz	r3, 800b6f6 <_svfiprintf_r+0x32>
 800b6dc:	2140      	movs	r1, #64	; 0x40
 800b6de:	f7ff ff21 	bl	800b524 <_malloc_r>
 800b6e2:	6028      	str	r0, [r5, #0]
 800b6e4:	6128      	str	r0, [r5, #16]
 800b6e6:	b920      	cbnz	r0, 800b6f2 <_svfiprintf_r+0x2e>
 800b6e8:	230c      	movs	r3, #12
 800b6ea:	603b      	str	r3, [r7, #0]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6f0:	e0d1      	b.n	800b896 <_svfiprintf_r+0x1d2>
 800b6f2:	2340      	movs	r3, #64	; 0x40
 800b6f4:	616b      	str	r3, [r5, #20]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fa:	2320      	movs	r3, #32
 800b6fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b700:	f8cd 800c 	str.w	r8, [sp, #12]
 800b704:	2330      	movs	r3, #48	; 0x30
 800b706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8b0 <_svfiprintf_r+0x1ec>
 800b70a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b70e:	f04f 0901 	mov.w	r9, #1
 800b712:	4623      	mov	r3, r4
 800b714:	469a      	mov	sl, r3
 800b716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71a:	b10a      	cbz	r2, 800b720 <_svfiprintf_r+0x5c>
 800b71c:	2a25      	cmp	r2, #37	; 0x25
 800b71e:	d1f9      	bne.n	800b714 <_svfiprintf_r+0x50>
 800b720:	ebba 0b04 	subs.w	fp, sl, r4
 800b724:	d00b      	beq.n	800b73e <_svfiprintf_r+0x7a>
 800b726:	465b      	mov	r3, fp
 800b728:	4622      	mov	r2, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	4638      	mov	r0, r7
 800b72e:	f7ff ff6d 	bl	800b60c <__ssputs_r>
 800b732:	3001      	adds	r0, #1
 800b734:	f000 80aa 	beq.w	800b88c <_svfiprintf_r+0x1c8>
 800b738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b73a:	445a      	add	r2, fp
 800b73c:	9209      	str	r2, [sp, #36]	; 0x24
 800b73e:	f89a 3000 	ldrb.w	r3, [sl]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 80a2 	beq.w	800b88c <_svfiprintf_r+0x1c8>
 800b748:	2300      	movs	r3, #0
 800b74a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b74e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b752:	f10a 0a01 	add.w	sl, sl, #1
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	9307      	str	r3, [sp, #28]
 800b75a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b75e:	931a      	str	r3, [sp, #104]	; 0x68
 800b760:	4654      	mov	r4, sl
 800b762:	2205      	movs	r2, #5
 800b764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b768:	4851      	ldr	r0, [pc, #324]	; (800b8b0 <_svfiprintf_r+0x1ec>)
 800b76a:	f7f4 fd49 	bl	8000200 <memchr>
 800b76e:	9a04      	ldr	r2, [sp, #16]
 800b770:	b9d8      	cbnz	r0, 800b7aa <_svfiprintf_r+0xe6>
 800b772:	06d0      	lsls	r0, r2, #27
 800b774:	bf44      	itt	mi
 800b776:	2320      	movmi	r3, #32
 800b778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b77c:	0711      	lsls	r1, r2, #28
 800b77e:	bf44      	itt	mi
 800b780:	232b      	movmi	r3, #43	; 0x2b
 800b782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b786:	f89a 3000 	ldrb.w	r3, [sl]
 800b78a:	2b2a      	cmp	r3, #42	; 0x2a
 800b78c:	d015      	beq.n	800b7ba <_svfiprintf_r+0xf6>
 800b78e:	9a07      	ldr	r2, [sp, #28]
 800b790:	4654      	mov	r4, sl
 800b792:	2000      	movs	r0, #0
 800b794:	f04f 0c0a 	mov.w	ip, #10
 800b798:	4621      	mov	r1, r4
 800b79a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b79e:	3b30      	subs	r3, #48	; 0x30
 800b7a0:	2b09      	cmp	r3, #9
 800b7a2:	d94e      	bls.n	800b842 <_svfiprintf_r+0x17e>
 800b7a4:	b1b0      	cbz	r0, 800b7d4 <_svfiprintf_r+0x110>
 800b7a6:	9207      	str	r2, [sp, #28]
 800b7a8:	e014      	b.n	800b7d4 <_svfiprintf_r+0x110>
 800b7aa:	eba0 0308 	sub.w	r3, r0, r8
 800b7ae:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	46a2      	mov	sl, r4
 800b7b8:	e7d2      	b.n	800b760 <_svfiprintf_r+0x9c>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	1d19      	adds	r1, r3, #4
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	9103      	str	r1, [sp, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bfbb      	ittet	lt
 800b7c6:	425b      	neglt	r3, r3
 800b7c8:	f042 0202 	orrlt.w	r2, r2, #2
 800b7cc:	9307      	strge	r3, [sp, #28]
 800b7ce:	9307      	strlt	r3, [sp, #28]
 800b7d0:	bfb8      	it	lt
 800b7d2:	9204      	strlt	r2, [sp, #16]
 800b7d4:	7823      	ldrb	r3, [r4, #0]
 800b7d6:	2b2e      	cmp	r3, #46	; 0x2e
 800b7d8:	d10c      	bne.n	800b7f4 <_svfiprintf_r+0x130>
 800b7da:	7863      	ldrb	r3, [r4, #1]
 800b7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b7de:	d135      	bne.n	800b84c <_svfiprintf_r+0x188>
 800b7e0:	9b03      	ldr	r3, [sp, #12]
 800b7e2:	1d1a      	adds	r2, r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	9203      	str	r2, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfb8      	it	lt
 800b7ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7f0:	3402      	adds	r4, #2
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8c0 <_svfiprintf_r+0x1fc>
 800b7f8:	7821      	ldrb	r1, [r4, #0]
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	4650      	mov	r0, sl
 800b7fe:	f7f4 fcff 	bl	8000200 <memchr>
 800b802:	b140      	cbz	r0, 800b816 <_svfiprintf_r+0x152>
 800b804:	2340      	movs	r3, #64	; 0x40
 800b806:	eba0 000a 	sub.w	r0, r0, sl
 800b80a:	fa03 f000 	lsl.w	r0, r3, r0
 800b80e:	9b04      	ldr	r3, [sp, #16]
 800b810:	4303      	orrs	r3, r0
 800b812:	3401      	adds	r4, #1
 800b814:	9304      	str	r3, [sp, #16]
 800b816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81a:	4826      	ldr	r0, [pc, #152]	; (800b8b4 <_svfiprintf_r+0x1f0>)
 800b81c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b820:	2206      	movs	r2, #6
 800b822:	f7f4 fced 	bl	8000200 <memchr>
 800b826:	2800      	cmp	r0, #0
 800b828:	d038      	beq.n	800b89c <_svfiprintf_r+0x1d8>
 800b82a:	4b23      	ldr	r3, [pc, #140]	; (800b8b8 <_svfiprintf_r+0x1f4>)
 800b82c:	bb1b      	cbnz	r3, 800b876 <_svfiprintf_r+0x1b2>
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	3307      	adds	r3, #7
 800b832:	f023 0307 	bic.w	r3, r3, #7
 800b836:	3308      	adds	r3, #8
 800b838:	9303      	str	r3, [sp, #12]
 800b83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83c:	4433      	add	r3, r6
 800b83e:	9309      	str	r3, [sp, #36]	; 0x24
 800b840:	e767      	b.n	800b712 <_svfiprintf_r+0x4e>
 800b842:	fb0c 3202 	mla	r2, ip, r2, r3
 800b846:	460c      	mov	r4, r1
 800b848:	2001      	movs	r0, #1
 800b84a:	e7a5      	b.n	800b798 <_svfiprintf_r+0xd4>
 800b84c:	2300      	movs	r3, #0
 800b84e:	3401      	adds	r4, #1
 800b850:	9305      	str	r3, [sp, #20]
 800b852:	4619      	mov	r1, r3
 800b854:	f04f 0c0a 	mov.w	ip, #10
 800b858:	4620      	mov	r0, r4
 800b85a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b85e:	3a30      	subs	r2, #48	; 0x30
 800b860:	2a09      	cmp	r2, #9
 800b862:	d903      	bls.n	800b86c <_svfiprintf_r+0x1a8>
 800b864:	2b00      	cmp	r3, #0
 800b866:	d0c5      	beq.n	800b7f4 <_svfiprintf_r+0x130>
 800b868:	9105      	str	r1, [sp, #20]
 800b86a:	e7c3      	b.n	800b7f4 <_svfiprintf_r+0x130>
 800b86c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b870:	4604      	mov	r4, r0
 800b872:	2301      	movs	r3, #1
 800b874:	e7f0      	b.n	800b858 <_svfiprintf_r+0x194>
 800b876:	ab03      	add	r3, sp, #12
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	462a      	mov	r2, r5
 800b87c:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <_svfiprintf_r+0x1f8>)
 800b87e:	a904      	add	r1, sp, #16
 800b880:	4638      	mov	r0, r7
 800b882:	f7fb fed3 	bl	800762c <_printf_float>
 800b886:	1c42      	adds	r2, r0, #1
 800b888:	4606      	mov	r6, r0
 800b88a:	d1d6      	bne.n	800b83a <_svfiprintf_r+0x176>
 800b88c:	89ab      	ldrh	r3, [r5, #12]
 800b88e:	065b      	lsls	r3, r3, #25
 800b890:	f53f af2c 	bmi.w	800b6ec <_svfiprintf_r+0x28>
 800b894:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b896:	b01d      	add	sp, #116	; 0x74
 800b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89c:	ab03      	add	r3, sp, #12
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	462a      	mov	r2, r5
 800b8a2:	4b06      	ldr	r3, [pc, #24]	; (800b8bc <_svfiprintf_r+0x1f8>)
 800b8a4:	a904      	add	r1, sp, #16
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	f7fc f964 	bl	8007b74 <_printf_i>
 800b8ac:	e7eb      	b.n	800b886 <_svfiprintf_r+0x1c2>
 800b8ae:	bf00      	nop
 800b8b0:	0800c57c 	.word	0x0800c57c
 800b8b4:	0800c586 	.word	0x0800c586
 800b8b8:	0800762d 	.word	0x0800762d
 800b8bc:	0800b60d 	.word	0x0800b60d
 800b8c0:	0800c582 	.word	0x0800c582

0800b8c4 <__sfputc_r>:
 800b8c4:	6893      	ldr	r3, [r2, #8]
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	b410      	push	{r4}
 800b8cc:	6093      	str	r3, [r2, #8]
 800b8ce:	da08      	bge.n	800b8e2 <__sfputc_r+0x1e>
 800b8d0:	6994      	ldr	r4, [r2, #24]
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	db01      	blt.n	800b8da <__sfputc_r+0x16>
 800b8d6:	290a      	cmp	r1, #10
 800b8d8:	d103      	bne.n	800b8e2 <__sfputc_r+0x1e>
 800b8da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8de:	f7fd bbf7 	b.w	80090d0 <__swbuf_r>
 800b8e2:	6813      	ldr	r3, [r2, #0]
 800b8e4:	1c58      	adds	r0, r3, #1
 800b8e6:	6010      	str	r0, [r2, #0]
 800b8e8:	7019      	strb	r1, [r3, #0]
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <__sfputs_r>:
 800b8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	460f      	mov	r7, r1
 800b8f8:	4614      	mov	r4, r2
 800b8fa:	18d5      	adds	r5, r2, r3
 800b8fc:	42ac      	cmp	r4, r5
 800b8fe:	d101      	bne.n	800b904 <__sfputs_r+0x12>
 800b900:	2000      	movs	r0, #0
 800b902:	e007      	b.n	800b914 <__sfputs_r+0x22>
 800b904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b908:	463a      	mov	r2, r7
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7ff ffda 	bl	800b8c4 <__sfputc_r>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d1f3      	bne.n	800b8fc <__sfputs_r+0xa>
 800b914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b918 <_vfiprintf_r>:
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	460d      	mov	r5, r1
 800b91e:	b09d      	sub	sp, #116	; 0x74
 800b920:	4614      	mov	r4, r2
 800b922:	4698      	mov	r8, r3
 800b924:	4606      	mov	r6, r0
 800b926:	b118      	cbz	r0, 800b930 <_vfiprintf_r+0x18>
 800b928:	6983      	ldr	r3, [r0, #24]
 800b92a:	b90b      	cbnz	r3, 800b930 <_vfiprintf_r+0x18>
 800b92c:	f7fe fc24 	bl	800a178 <__sinit>
 800b930:	4b89      	ldr	r3, [pc, #548]	; (800bb58 <_vfiprintf_r+0x240>)
 800b932:	429d      	cmp	r5, r3
 800b934:	d11b      	bne.n	800b96e <_vfiprintf_r+0x56>
 800b936:	6875      	ldr	r5, [r6, #4]
 800b938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b93a:	07d9      	lsls	r1, r3, #31
 800b93c:	d405      	bmi.n	800b94a <_vfiprintf_r+0x32>
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	059a      	lsls	r2, r3, #22
 800b942:	d402      	bmi.n	800b94a <_vfiprintf_r+0x32>
 800b944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b946:	f7ff f828 	bl	800a99a <__retarget_lock_acquire_recursive>
 800b94a:	89ab      	ldrh	r3, [r5, #12]
 800b94c:	071b      	lsls	r3, r3, #28
 800b94e:	d501      	bpl.n	800b954 <_vfiprintf_r+0x3c>
 800b950:	692b      	ldr	r3, [r5, #16]
 800b952:	b9eb      	cbnz	r3, 800b990 <_vfiprintf_r+0x78>
 800b954:	4629      	mov	r1, r5
 800b956:	4630      	mov	r0, r6
 800b958:	f7fd fc0c 	bl	8009174 <__swsetup_r>
 800b95c:	b1c0      	cbz	r0, 800b990 <_vfiprintf_r+0x78>
 800b95e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b960:	07dc      	lsls	r4, r3, #31
 800b962:	d50e      	bpl.n	800b982 <_vfiprintf_r+0x6a>
 800b964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b968:	b01d      	add	sp, #116	; 0x74
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96e:	4b7b      	ldr	r3, [pc, #492]	; (800bb5c <_vfiprintf_r+0x244>)
 800b970:	429d      	cmp	r5, r3
 800b972:	d101      	bne.n	800b978 <_vfiprintf_r+0x60>
 800b974:	68b5      	ldr	r5, [r6, #8]
 800b976:	e7df      	b.n	800b938 <_vfiprintf_r+0x20>
 800b978:	4b79      	ldr	r3, [pc, #484]	; (800bb60 <_vfiprintf_r+0x248>)
 800b97a:	429d      	cmp	r5, r3
 800b97c:	bf08      	it	eq
 800b97e:	68f5      	ldreq	r5, [r6, #12]
 800b980:	e7da      	b.n	800b938 <_vfiprintf_r+0x20>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	0598      	lsls	r0, r3, #22
 800b986:	d4ed      	bmi.n	800b964 <_vfiprintf_r+0x4c>
 800b988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b98a:	f7ff f807 	bl	800a99c <__retarget_lock_release_recursive>
 800b98e:	e7e9      	b.n	800b964 <_vfiprintf_r+0x4c>
 800b990:	2300      	movs	r3, #0
 800b992:	9309      	str	r3, [sp, #36]	; 0x24
 800b994:	2320      	movs	r3, #32
 800b996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b99a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b99e:	2330      	movs	r3, #48	; 0x30
 800b9a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb64 <_vfiprintf_r+0x24c>
 800b9a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a8:	f04f 0901 	mov.w	r9, #1
 800b9ac:	4623      	mov	r3, r4
 800b9ae:	469a      	mov	sl, r3
 800b9b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b4:	b10a      	cbz	r2, 800b9ba <_vfiprintf_r+0xa2>
 800b9b6:	2a25      	cmp	r2, #37	; 0x25
 800b9b8:	d1f9      	bne.n	800b9ae <_vfiprintf_r+0x96>
 800b9ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b9be:	d00b      	beq.n	800b9d8 <_vfiprintf_r+0xc0>
 800b9c0:	465b      	mov	r3, fp
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f7ff ff93 	bl	800b8f2 <__sfputs_r>
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	f000 80aa 	beq.w	800bb26 <_vfiprintf_r+0x20e>
 800b9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d4:	445a      	add	r2, fp
 800b9d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 80a2 	beq.w	800bb26 <_vfiprintf_r+0x20e>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ec:	f10a 0a01 	add.w	sl, sl, #1
 800b9f0:	9304      	str	r3, [sp, #16]
 800b9f2:	9307      	str	r3, [sp, #28]
 800b9f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b9fa:	4654      	mov	r4, sl
 800b9fc:	2205      	movs	r2, #5
 800b9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba02:	4858      	ldr	r0, [pc, #352]	; (800bb64 <_vfiprintf_r+0x24c>)
 800ba04:	f7f4 fbfc 	bl	8000200 <memchr>
 800ba08:	9a04      	ldr	r2, [sp, #16]
 800ba0a:	b9d8      	cbnz	r0, 800ba44 <_vfiprintf_r+0x12c>
 800ba0c:	06d1      	lsls	r1, r2, #27
 800ba0e:	bf44      	itt	mi
 800ba10:	2320      	movmi	r3, #32
 800ba12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba16:	0713      	lsls	r3, r2, #28
 800ba18:	bf44      	itt	mi
 800ba1a:	232b      	movmi	r3, #43	; 0x2b
 800ba1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba20:	f89a 3000 	ldrb.w	r3, [sl]
 800ba24:	2b2a      	cmp	r3, #42	; 0x2a
 800ba26:	d015      	beq.n	800ba54 <_vfiprintf_r+0x13c>
 800ba28:	9a07      	ldr	r2, [sp, #28]
 800ba2a:	4654      	mov	r4, sl
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	f04f 0c0a 	mov.w	ip, #10
 800ba32:	4621      	mov	r1, r4
 800ba34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba38:	3b30      	subs	r3, #48	; 0x30
 800ba3a:	2b09      	cmp	r3, #9
 800ba3c:	d94e      	bls.n	800badc <_vfiprintf_r+0x1c4>
 800ba3e:	b1b0      	cbz	r0, 800ba6e <_vfiprintf_r+0x156>
 800ba40:	9207      	str	r2, [sp, #28]
 800ba42:	e014      	b.n	800ba6e <_vfiprintf_r+0x156>
 800ba44:	eba0 0308 	sub.w	r3, r0, r8
 800ba48:	fa09 f303 	lsl.w	r3, r9, r3
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	9304      	str	r3, [sp, #16]
 800ba50:	46a2      	mov	sl, r4
 800ba52:	e7d2      	b.n	800b9fa <_vfiprintf_r+0xe2>
 800ba54:	9b03      	ldr	r3, [sp, #12]
 800ba56:	1d19      	adds	r1, r3, #4
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	9103      	str	r1, [sp, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	bfbb      	ittet	lt
 800ba60:	425b      	neglt	r3, r3
 800ba62:	f042 0202 	orrlt.w	r2, r2, #2
 800ba66:	9307      	strge	r3, [sp, #28]
 800ba68:	9307      	strlt	r3, [sp, #28]
 800ba6a:	bfb8      	it	lt
 800ba6c:	9204      	strlt	r2, [sp, #16]
 800ba6e:	7823      	ldrb	r3, [r4, #0]
 800ba70:	2b2e      	cmp	r3, #46	; 0x2e
 800ba72:	d10c      	bne.n	800ba8e <_vfiprintf_r+0x176>
 800ba74:	7863      	ldrb	r3, [r4, #1]
 800ba76:	2b2a      	cmp	r3, #42	; 0x2a
 800ba78:	d135      	bne.n	800bae6 <_vfiprintf_r+0x1ce>
 800ba7a:	9b03      	ldr	r3, [sp, #12]
 800ba7c:	1d1a      	adds	r2, r3, #4
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	9203      	str	r2, [sp, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	bfb8      	it	lt
 800ba86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba8a:	3402      	adds	r4, #2
 800ba8c:	9305      	str	r3, [sp, #20]
 800ba8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb74 <_vfiprintf_r+0x25c>
 800ba92:	7821      	ldrb	r1, [r4, #0]
 800ba94:	2203      	movs	r2, #3
 800ba96:	4650      	mov	r0, sl
 800ba98:	f7f4 fbb2 	bl	8000200 <memchr>
 800ba9c:	b140      	cbz	r0, 800bab0 <_vfiprintf_r+0x198>
 800ba9e:	2340      	movs	r3, #64	; 0x40
 800baa0:	eba0 000a 	sub.w	r0, r0, sl
 800baa4:	fa03 f000 	lsl.w	r0, r3, r0
 800baa8:	9b04      	ldr	r3, [sp, #16]
 800baaa:	4303      	orrs	r3, r0
 800baac:	3401      	adds	r4, #1
 800baae:	9304      	str	r3, [sp, #16]
 800bab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab4:	482c      	ldr	r0, [pc, #176]	; (800bb68 <_vfiprintf_r+0x250>)
 800bab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baba:	2206      	movs	r2, #6
 800babc:	f7f4 fba0 	bl	8000200 <memchr>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d03f      	beq.n	800bb44 <_vfiprintf_r+0x22c>
 800bac4:	4b29      	ldr	r3, [pc, #164]	; (800bb6c <_vfiprintf_r+0x254>)
 800bac6:	bb1b      	cbnz	r3, 800bb10 <_vfiprintf_r+0x1f8>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	3307      	adds	r3, #7
 800bacc:	f023 0307 	bic.w	r3, r3, #7
 800bad0:	3308      	adds	r3, #8
 800bad2:	9303      	str	r3, [sp, #12]
 800bad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad6:	443b      	add	r3, r7
 800bad8:	9309      	str	r3, [sp, #36]	; 0x24
 800bada:	e767      	b.n	800b9ac <_vfiprintf_r+0x94>
 800badc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bae0:	460c      	mov	r4, r1
 800bae2:	2001      	movs	r0, #1
 800bae4:	e7a5      	b.n	800ba32 <_vfiprintf_r+0x11a>
 800bae6:	2300      	movs	r3, #0
 800bae8:	3401      	adds	r4, #1
 800baea:	9305      	str	r3, [sp, #20]
 800baec:	4619      	mov	r1, r3
 800baee:	f04f 0c0a 	mov.w	ip, #10
 800baf2:	4620      	mov	r0, r4
 800baf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf8:	3a30      	subs	r2, #48	; 0x30
 800bafa:	2a09      	cmp	r2, #9
 800bafc:	d903      	bls.n	800bb06 <_vfiprintf_r+0x1ee>
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d0c5      	beq.n	800ba8e <_vfiprintf_r+0x176>
 800bb02:	9105      	str	r1, [sp, #20]
 800bb04:	e7c3      	b.n	800ba8e <_vfiprintf_r+0x176>
 800bb06:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e7f0      	b.n	800baf2 <_vfiprintf_r+0x1da>
 800bb10:	ab03      	add	r3, sp, #12
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	462a      	mov	r2, r5
 800bb16:	4b16      	ldr	r3, [pc, #88]	; (800bb70 <_vfiprintf_r+0x258>)
 800bb18:	a904      	add	r1, sp, #16
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f7fb fd86 	bl	800762c <_printf_float>
 800bb20:	4607      	mov	r7, r0
 800bb22:	1c78      	adds	r0, r7, #1
 800bb24:	d1d6      	bne.n	800bad4 <_vfiprintf_r+0x1bc>
 800bb26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb28:	07d9      	lsls	r1, r3, #31
 800bb2a:	d405      	bmi.n	800bb38 <_vfiprintf_r+0x220>
 800bb2c:	89ab      	ldrh	r3, [r5, #12]
 800bb2e:	059a      	lsls	r2, r3, #22
 800bb30:	d402      	bmi.n	800bb38 <_vfiprintf_r+0x220>
 800bb32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb34:	f7fe ff32 	bl	800a99c <__retarget_lock_release_recursive>
 800bb38:	89ab      	ldrh	r3, [r5, #12]
 800bb3a:	065b      	lsls	r3, r3, #25
 800bb3c:	f53f af12 	bmi.w	800b964 <_vfiprintf_r+0x4c>
 800bb40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb42:	e711      	b.n	800b968 <_vfiprintf_r+0x50>
 800bb44:	ab03      	add	r3, sp, #12
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	462a      	mov	r2, r5
 800bb4a:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <_vfiprintf_r+0x258>)
 800bb4c:	a904      	add	r1, sp, #16
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7fc f810 	bl	8007b74 <_printf_i>
 800bb54:	e7e4      	b.n	800bb20 <_vfiprintf_r+0x208>
 800bb56:	bf00      	nop
 800bb58:	0800c364 	.word	0x0800c364
 800bb5c:	0800c384 	.word	0x0800c384
 800bb60:	0800c344 	.word	0x0800c344
 800bb64:	0800c57c 	.word	0x0800c57c
 800bb68:	0800c586 	.word	0x0800c586
 800bb6c:	0800762d 	.word	0x0800762d
 800bb70:	0800b8f3 	.word	0x0800b8f3
 800bb74:	0800c582 	.word	0x0800c582

0800bb78 <_putc_r>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	4606      	mov	r6, r0
 800bb80:	b118      	cbz	r0, 800bb8a <_putc_r+0x12>
 800bb82:	6983      	ldr	r3, [r0, #24]
 800bb84:	b90b      	cbnz	r3, 800bb8a <_putc_r+0x12>
 800bb86:	f7fe faf7 	bl	800a178 <__sinit>
 800bb8a:	4b1c      	ldr	r3, [pc, #112]	; (800bbfc <_putc_r+0x84>)
 800bb8c:	429c      	cmp	r4, r3
 800bb8e:	d124      	bne.n	800bbda <_putc_r+0x62>
 800bb90:	6874      	ldr	r4, [r6, #4]
 800bb92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb94:	07d8      	lsls	r0, r3, #31
 800bb96:	d405      	bmi.n	800bba4 <_putc_r+0x2c>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	0599      	lsls	r1, r3, #22
 800bb9c:	d402      	bmi.n	800bba4 <_putc_r+0x2c>
 800bb9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bba0:	f7fe fefb 	bl	800a99a <__retarget_lock_acquire_recursive>
 800bba4:	68a3      	ldr	r3, [r4, #8]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	60a3      	str	r3, [r4, #8]
 800bbac:	da05      	bge.n	800bbba <_putc_r+0x42>
 800bbae:	69a2      	ldr	r2, [r4, #24]
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	db1c      	blt.n	800bbee <_putc_r+0x76>
 800bbb4:	b2eb      	uxtb	r3, r5
 800bbb6:	2b0a      	cmp	r3, #10
 800bbb8:	d019      	beq.n	800bbee <_putc_r+0x76>
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	1c5a      	adds	r2, r3, #1
 800bbbe:	6022      	str	r2, [r4, #0]
 800bbc0:	701d      	strb	r5, [r3, #0]
 800bbc2:	b2ed      	uxtb	r5, r5
 800bbc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbc6:	07da      	lsls	r2, r3, #31
 800bbc8:	d405      	bmi.n	800bbd6 <_putc_r+0x5e>
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	059b      	lsls	r3, r3, #22
 800bbce:	d402      	bmi.n	800bbd6 <_putc_r+0x5e>
 800bbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbd2:	f7fe fee3 	bl	800a99c <__retarget_lock_release_recursive>
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <_putc_r+0x88>)
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	d101      	bne.n	800bbe4 <_putc_r+0x6c>
 800bbe0:	68b4      	ldr	r4, [r6, #8]
 800bbe2:	e7d6      	b.n	800bb92 <_putc_r+0x1a>
 800bbe4:	4b07      	ldr	r3, [pc, #28]	; (800bc04 <_putc_r+0x8c>)
 800bbe6:	429c      	cmp	r4, r3
 800bbe8:	bf08      	it	eq
 800bbea:	68f4      	ldreq	r4, [r6, #12]
 800bbec:	e7d1      	b.n	800bb92 <_putc_r+0x1a>
 800bbee:	4629      	mov	r1, r5
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7fd fa6c 	bl	80090d0 <__swbuf_r>
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	e7e3      	b.n	800bbc4 <_putc_r+0x4c>
 800bbfc:	0800c364 	.word	0x0800c364
 800bc00:	0800c384 	.word	0x0800c384
 800bc04:	0800c344 	.word	0x0800c344

0800bc08 <nan>:
 800bc08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bc10 <nan+0x8>
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	00000000 	.word	0x00000000
 800bc14:	7ff80000 	.word	0x7ff80000

0800bc18 <_sbrk_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4d06      	ldr	r5, [pc, #24]	; (800bc34 <_sbrk_r+0x1c>)
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	4604      	mov	r4, r0
 800bc20:	4608      	mov	r0, r1
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	f7f5 fd2c 	bl	8001680 <_sbrk>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d102      	bne.n	800bc32 <_sbrk_r+0x1a>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	b103      	cbz	r3, 800bc32 <_sbrk_r+0x1a>
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	200003d8 	.word	0x200003d8

0800bc38 <__sread>:
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	f000 f93a 	bl	800beb8 <_read_r>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	bfab      	itete	ge
 800bc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc4a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc4c:	181b      	addge	r3, r3, r0
 800bc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc52:	bfac      	ite	ge
 800bc54:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc56:	81a3      	strhlt	r3, [r4, #12]
 800bc58:	bd10      	pop	{r4, pc}

0800bc5a <__swrite>:
 800bc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5e:	461f      	mov	r7, r3
 800bc60:	898b      	ldrh	r3, [r1, #12]
 800bc62:	05db      	lsls	r3, r3, #23
 800bc64:	4605      	mov	r5, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	4616      	mov	r6, r2
 800bc6a:	d505      	bpl.n	800bc78 <__swrite+0x1e>
 800bc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc70:	2302      	movs	r3, #2
 800bc72:	2200      	movs	r2, #0
 800bc74:	f000 f8b8 	bl	800bde8 <_lseek_r>
 800bc78:	89a3      	ldrh	r3, [r4, #12]
 800bc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc82:	81a3      	strh	r3, [r4, #12]
 800bc84:	4632      	mov	r2, r6
 800bc86:	463b      	mov	r3, r7
 800bc88:	4628      	mov	r0, r5
 800bc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8e:	f000 b837 	b.w	800bd00 <_write_r>

0800bc92 <__sseek>:
 800bc92:	b510      	push	{r4, lr}
 800bc94:	460c      	mov	r4, r1
 800bc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc9a:	f000 f8a5 	bl	800bde8 <_lseek_r>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	bf15      	itete	ne
 800bca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcae:	81a3      	strheq	r3, [r4, #12]
 800bcb0:	bf18      	it	ne
 800bcb2:	81a3      	strhne	r3, [r4, #12]
 800bcb4:	bd10      	pop	{r4, pc}

0800bcb6 <__sclose>:
 800bcb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcba:	f000 b851 	b.w	800bd60 <_close_r>

0800bcbe <strncmp>:
 800bcbe:	b510      	push	{r4, lr}
 800bcc0:	b17a      	cbz	r2, 800bce2 <strncmp+0x24>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	3901      	subs	r1, #1
 800bcc6:	1884      	adds	r4, r0, r2
 800bcc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bccc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bcd0:	4290      	cmp	r0, r2
 800bcd2:	d101      	bne.n	800bcd8 <strncmp+0x1a>
 800bcd4:	42a3      	cmp	r3, r4
 800bcd6:	d101      	bne.n	800bcdc <strncmp+0x1e>
 800bcd8:	1a80      	subs	r0, r0, r2
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d1f3      	bne.n	800bcc8 <strncmp+0xa>
 800bce0:	e7fa      	b.n	800bcd8 <strncmp+0x1a>
 800bce2:	4610      	mov	r0, r2
 800bce4:	e7f9      	b.n	800bcda <strncmp+0x1c>

0800bce6 <__ascii_wctomb>:
 800bce6:	b149      	cbz	r1, 800bcfc <__ascii_wctomb+0x16>
 800bce8:	2aff      	cmp	r2, #255	; 0xff
 800bcea:	bf85      	ittet	hi
 800bcec:	238a      	movhi	r3, #138	; 0x8a
 800bcee:	6003      	strhi	r3, [r0, #0]
 800bcf0:	700a      	strbls	r2, [r1, #0]
 800bcf2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bcf6:	bf98      	it	ls
 800bcf8:	2001      	movls	r0, #1
 800bcfa:	4770      	bx	lr
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	4770      	bx	lr

0800bd00 <_write_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4d07      	ldr	r5, [pc, #28]	; (800bd20 <_write_r+0x20>)
 800bd04:	4604      	mov	r4, r0
 800bd06:	4608      	mov	r0, r1
 800bd08:	4611      	mov	r1, r2
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	602a      	str	r2, [r5, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	f7f5 fc6c 	bl	80015ec <_write>
 800bd14:	1c43      	adds	r3, r0, #1
 800bd16:	d102      	bne.n	800bd1e <_write_r+0x1e>
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	b103      	cbz	r3, 800bd1e <_write_r+0x1e>
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	bd38      	pop	{r3, r4, r5, pc}
 800bd20:	200003d8 	.word	0x200003d8

0800bd24 <__assert_func>:
 800bd24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd26:	4614      	mov	r4, r2
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4b09      	ldr	r3, [pc, #36]	; (800bd50 <__assert_func+0x2c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4605      	mov	r5, r0
 800bd30:	68d8      	ldr	r0, [r3, #12]
 800bd32:	b14c      	cbz	r4, 800bd48 <__assert_func+0x24>
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <__assert_func+0x30>)
 800bd36:	9100      	str	r1, [sp, #0]
 800bd38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd3c:	4906      	ldr	r1, [pc, #24]	; (800bd58 <__assert_func+0x34>)
 800bd3e:	462b      	mov	r3, r5
 800bd40:	f000 f81e 	bl	800bd80 <fiprintf>
 800bd44:	f000 f8ca 	bl	800bedc <abort>
 800bd48:	4b04      	ldr	r3, [pc, #16]	; (800bd5c <__assert_func+0x38>)
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	e7f3      	b.n	800bd36 <__assert_func+0x12>
 800bd4e:	bf00      	nop
 800bd50:	20000020 	.word	0x20000020
 800bd54:	0800c58d 	.word	0x0800c58d
 800bd58:	0800c59a 	.word	0x0800c59a
 800bd5c:	0800c5c8 	.word	0x0800c5c8

0800bd60 <_close_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	; (800bd7c <_close_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f5 fc54 	bl	8001618 <_close>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_close_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_close_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	200003d8 	.word	0x200003d8

0800bd80 <fiprintf>:
 800bd80:	b40e      	push	{r1, r2, r3}
 800bd82:	b503      	push	{r0, r1, lr}
 800bd84:	4601      	mov	r1, r0
 800bd86:	ab03      	add	r3, sp, #12
 800bd88:	4805      	ldr	r0, [pc, #20]	; (800bda0 <fiprintf+0x20>)
 800bd8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8e:	6800      	ldr	r0, [r0, #0]
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	f7ff fdc1 	bl	800b918 <_vfiprintf_r>
 800bd96:	b002      	add	sp, #8
 800bd98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd9c:	b003      	add	sp, #12
 800bd9e:	4770      	bx	lr
 800bda0:	20000020 	.word	0x20000020

0800bda4 <_fstat_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	; (800bdc4 <_fstat_r+0x20>)
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4604      	mov	r4, r0
 800bdac:	4608      	mov	r0, r1
 800bdae:	4611      	mov	r1, r2
 800bdb0:	602b      	str	r3, [r5, #0]
 800bdb2:	f7f5 fc3d 	bl	8001630 <_fstat>
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	d102      	bne.n	800bdc0 <_fstat_r+0x1c>
 800bdba:	682b      	ldr	r3, [r5, #0]
 800bdbc:	b103      	cbz	r3, 800bdc0 <_fstat_r+0x1c>
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	bd38      	pop	{r3, r4, r5, pc}
 800bdc2:	bf00      	nop
 800bdc4:	200003d8 	.word	0x200003d8

0800bdc8 <_isatty_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	; (800bde4 <_isatty_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f5 fc3c 	bl	8001650 <_isatty>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_isatty_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_isatty_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	200003d8 	.word	0x200003d8

0800bde8 <_lseek_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d07      	ldr	r5, [pc, #28]	; (800be08 <_lseek_r+0x20>)
 800bdec:	4604      	mov	r4, r0
 800bdee:	4608      	mov	r0, r1
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	602a      	str	r2, [r5, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f7f5 fc35 	bl	8001666 <_lseek>
 800bdfc:	1c43      	adds	r3, r0, #1
 800bdfe:	d102      	bne.n	800be06 <_lseek_r+0x1e>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	b103      	cbz	r3, 800be06 <_lseek_r+0x1e>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	200003d8 	.word	0x200003d8

0800be0c <memmove>:
 800be0c:	4288      	cmp	r0, r1
 800be0e:	b510      	push	{r4, lr}
 800be10:	eb01 0402 	add.w	r4, r1, r2
 800be14:	d902      	bls.n	800be1c <memmove+0x10>
 800be16:	4284      	cmp	r4, r0
 800be18:	4623      	mov	r3, r4
 800be1a:	d807      	bhi.n	800be2c <memmove+0x20>
 800be1c:	1e43      	subs	r3, r0, #1
 800be1e:	42a1      	cmp	r1, r4
 800be20:	d008      	beq.n	800be34 <memmove+0x28>
 800be22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be2a:	e7f8      	b.n	800be1e <memmove+0x12>
 800be2c:	4402      	add	r2, r0
 800be2e:	4601      	mov	r1, r0
 800be30:	428a      	cmp	r2, r1
 800be32:	d100      	bne.n	800be36 <memmove+0x2a>
 800be34:	bd10      	pop	{r4, pc}
 800be36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be3e:	e7f7      	b.n	800be30 <memmove+0x24>

0800be40 <__malloc_lock>:
 800be40:	4801      	ldr	r0, [pc, #4]	; (800be48 <__malloc_lock+0x8>)
 800be42:	f7fe bdaa 	b.w	800a99a <__retarget_lock_acquire_recursive>
 800be46:	bf00      	nop
 800be48:	200003cc 	.word	0x200003cc

0800be4c <__malloc_unlock>:
 800be4c:	4801      	ldr	r0, [pc, #4]	; (800be54 <__malloc_unlock+0x8>)
 800be4e:	f7fe bda5 	b.w	800a99c <__retarget_lock_release_recursive>
 800be52:	bf00      	nop
 800be54:	200003cc 	.word	0x200003cc

0800be58 <_realloc_r>:
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	4680      	mov	r8, r0
 800be5e:	4614      	mov	r4, r2
 800be60:	460e      	mov	r6, r1
 800be62:	b921      	cbnz	r1, 800be6e <_realloc_r+0x16>
 800be64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be68:	4611      	mov	r1, r2
 800be6a:	f7ff bb5b 	b.w	800b524 <_malloc_r>
 800be6e:	b92a      	cbnz	r2, 800be7c <_realloc_r+0x24>
 800be70:	f7ff faec 	bl	800b44c <_free_r>
 800be74:	4625      	mov	r5, r4
 800be76:	4628      	mov	r0, r5
 800be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be7c:	f000 f835 	bl	800beea <_malloc_usable_size_r>
 800be80:	4284      	cmp	r4, r0
 800be82:	4607      	mov	r7, r0
 800be84:	d802      	bhi.n	800be8c <_realloc_r+0x34>
 800be86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be8a:	d812      	bhi.n	800beb2 <_realloc_r+0x5a>
 800be8c:	4621      	mov	r1, r4
 800be8e:	4640      	mov	r0, r8
 800be90:	f7ff fb48 	bl	800b524 <_malloc_r>
 800be94:	4605      	mov	r5, r0
 800be96:	2800      	cmp	r0, #0
 800be98:	d0ed      	beq.n	800be76 <_realloc_r+0x1e>
 800be9a:	42bc      	cmp	r4, r7
 800be9c:	4622      	mov	r2, r4
 800be9e:	4631      	mov	r1, r6
 800bea0:	bf28      	it	cs
 800bea2:	463a      	movcs	r2, r7
 800bea4:	f7fb fb0c 	bl	80074c0 <memcpy>
 800bea8:	4631      	mov	r1, r6
 800beaa:	4640      	mov	r0, r8
 800beac:	f7ff face 	bl	800b44c <_free_r>
 800beb0:	e7e1      	b.n	800be76 <_realloc_r+0x1e>
 800beb2:	4635      	mov	r5, r6
 800beb4:	e7df      	b.n	800be76 <_realloc_r+0x1e>
	...

0800beb8 <_read_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d07      	ldr	r5, [pc, #28]	; (800bed8 <_read_r+0x20>)
 800bebc:	4604      	mov	r4, r0
 800bebe:	4608      	mov	r0, r1
 800bec0:	4611      	mov	r1, r2
 800bec2:	2200      	movs	r2, #0
 800bec4:	602a      	str	r2, [r5, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	f7f5 fb72 	bl	80015b0 <_read>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_read_r+0x1e>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_read_r+0x1e>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	200003d8 	.word	0x200003d8

0800bedc <abort>:
 800bedc:	b508      	push	{r3, lr}
 800bede:	2006      	movs	r0, #6
 800bee0:	f000 f834 	bl	800bf4c <raise>
 800bee4:	2001      	movs	r0, #1
 800bee6:	f7f5 fb59 	bl	800159c <_exit>

0800beea <_malloc_usable_size_r>:
 800beea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beee:	1f18      	subs	r0, r3, #4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	bfbc      	itt	lt
 800bef4:	580b      	ldrlt	r3, [r1, r0]
 800bef6:	18c0      	addlt	r0, r0, r3
 800bef8:	4770      	bx	lr

0800befa <_raise_r>:
 800befa:	291f      	cmp	r1, #31
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	d904      	bls.n	800bf0e <_raise_r+0x14>
 800bf04:	2316      	movs	r3, #22
 800bf06:	6003      	str	r3, [r0, #0]
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf0c:	bd38      	pop	{r3, r4, r5, pc}
 800bf0e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf10:	b112      	cbz	r2, 800bf18 <_raise_r+0x1e>
 800bf12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf16:	b94b      	cbnz	r3, 800bf2c <_raise_r+0x32>
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 f831 	bl	800bf80 <_getpid_r>
 800bf1e:	462a      	mov	r2, r5
 800bf20:	4601      	mov	r1, r0
 800bf22:	4620      	mov	r0, r4
 800bf24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf28:	f000 b818 	b.w	800bf5c <_kill_r>
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d00a      	beq.n	800bf46 <_raise_r+0x4c>
 800bf30:	1c59      	adds	r1, r3, #1
 800bf32:	d103      	bne.n	800bf3c <_raise_r+0x42>
 800bf34:	2316      	movs	r3, #22
 800bf36:	6003      	str	r3, [r0, #0]
 800bf38:	2001      	movs	r0, #1
 800bf3a:	e7e7      	b.n	800bf0c <_raise_r+0x12>
 800bf3c:	2400      	movs	r4, #0
 800bf3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf42:	4628      	mov	r0, r5
 800bf44:	4798      	blx	r3
 800bf46:	2000      	movs	r0, #0
 800bf48:	e7e0      	b.n	800bf0c <_raise_r+0x12>
	...

0800bf4c <raise>:
 800bf4c:	4b02      	ldr	r3, [pc, #8]	; (800bf58 <raise+0xc>)
 800bf4e:	4601      	mov	r1, r0
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	f7ff bfd2 	b.w	800befa <_raise_r>
 800bf56:	bf00      	nop
 800bf58:	20000020 	.word	0x20000020

0800bf5c <_kill_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4d07      	ldr	r5, [pc, #28]	; (800bf7c <_kill_r+0x20>)
 800bf60:	2300      	movs	r3, #0
 800bf62:	4604      	mov	r4, r0
 800bf64:	4608      	mov	r0, r1
 800bf66:	4611      	mov	r1, r2
 800bf68:	602b      	str	r3, [r5, #0]
 800bf6a:	f7f5 fb07 	bl	800157c <_kill>
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	d102      	bne.n	800bf78 <_kill_r+0x1c>
 800bf72:	682b      	ldr	r3, [r5, #0]
 800bf74:	b103      	cbz	r3, 800bf78 <_kill_r+0x1c>
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	bd38      	pop	{r3, r4, r5, pc}
 800bf7a:	bf00      	nop
 800bf7c:	200003d8 	.word	0x200003d8

0800bf80 <_getpid_r>:
 800bf80:	f7f5 baf4 	b.w	800156c <_getpid>

0800bf84 <_init>:
 800bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf86:	bf00      	nop
 800bf88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf8a:	bc08      	pop	{r3}
 800bf8c:	469e      	mov	lr, r3
 800bf8e:	4770      	bx	lr

0800bf90 <_fini>:
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf92:	bf00      	nop
 800bf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf96:	bc08      	pop	{r3}
 800bf98:	469e      	mov	lr, r3
 800bf9a:	4770      	bx	lr
