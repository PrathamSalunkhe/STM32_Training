
SHT21_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006074  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006378  08006378  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006380  08006380  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  080063f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080063f8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f672  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002096  00000000  00000000  0002f712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000317a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  000324c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0b3  00000000  00000000  00033100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe7b  00000000  00000000  0005d1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7cd  00000000  00000000  0006d02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001697fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004130  00000000  00000000  0016984c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800620c 	.word	0x0800620c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800620c 	.word	0x0800620c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de4:	b0a7      	sub	sp, #156	; 0x9c
 8000de6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de8:	f000 fd37 	bl	800185a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dec:	f000 f882 	bl	8000ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df0:	f000 f934 	bl	800105c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000df4:	f000 f8c6 	bl	8000f84 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000df8:	f000 f904 	bl	8001004 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scanner();
 8000dfc:	f000 f95e 	bl	80010bc <I2C_Scanner>

	/* Initializes SHT2x temperature/humidity sensor and sets the resolution. */
	SHT2x_Init(&hi2c1);
 8000e00:	4839      	ldr	r0, [pc, #228]	; (8000ee8 <main+0x108>)
 8000e02:	f000 fb83 	bl	800150c <SHT2x_Init>
	SHT2x_SetResolution(RES_14_12);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 fc68 	bl	80016dc <SHT2x_SetResolution>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		unsigned char buffer[100] = { 0 };
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	2260      	movs	r2, #96	; 0x60
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 ffb1 	bl	8004d80 <memset>
		/* Gets current temperature & relative humidity. */
		float cel = SHT2x_GetTemperature(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fbd6 	bl	80015d0 <SHT2x_GetTemperature>
 8000e24:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
		/* Converts temperature to degrees Fahrenheit and Kelvin */
		float fah = SHT2x_CelsiusToFahrenheit(cel);
 8000e28:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000e2c:	f000 fc80 	bl	8001730 <SHT2x_CelsiusToFahrenheit>
 8000e30:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
		float kel = SHT2x_CelsiusToKelvin(cel);
 8000e34:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000e38:	f000 fca4 	bl	8001784 <SHT2x_CelsiusToKelvin>
 8000e3c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		float rh = SHT2x_GetRelativeHumidity(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 fc0b 	bl	800165c <SHT2x_GetRelativeHumidity>
 8000e46:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
		/* May show warning below. Ignore and proceed. */
		sprintf(buffer,
 8000e4a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000e4e:	f000 fcad 	bl	80017ac <SHT2x_GetInteger>
 8000e52:	4680      	mov	r8, r0
 8000e54:	2001      	movs	r0, #1
 8000e56:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000e5a:	f000 fcb8 	bl	80017ce <SHT2x_GetDecimal>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8000e64:	f000 fca2 	bl	80017ac <SHT2x_GetInteger>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8000e70:	f000 fcad 	bl	80017ce <SHT2x_GetDecimal>
 8000e74:	4605      	mov	r5, r0
 8000e76:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8000e7a:	f000 fc97 	bl	80017ac <SHT2x_GetInteger>
 8000e7e:	4606      	mov	r6, r0
 8000e80:	2001      	movs	r0, #1
 8000e82:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8000e86:	f000 fca2 	bl	80017ce <SHT2x_GetDecimal>
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000e90:	f000 fc8c 	bl	80017ac <SHT2x_GetInteger>
 8000e94:	6038      	str	r0, [r7, #0]
 8000e96:	2001      	movs	r0, #1
 8000e98:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8000e9c:	f000 fc97 	bl	80017ce <SHT2x_GetDecimal>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f107 000c 	add.w	r0, r7, #12
 8000ea6:	9305      	str	r3, [sp, #20]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	9304      	str	r3, [sp, #16]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	9602      	str	r6, [sp, #8]
 8000eb2:	9501      	str	r5, [sp, #4]
 8000eb4:	9400      	str	r4, [sp, #0]
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	4642      	mov	r2, r8
 8000eba:	490c      	ldr	r1, [pc, #48]	; (8000eec <main+0x10c>)
 8000ebc:	f004 f80c 	bl	8004ed8 <siprintf>
				"Temperature: %d.%d C, %d.%d F, %d.%d K, Humidity: %d.%d%% RH\n",
				SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
				SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
				SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
				SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
		HAL_UART_Transmit(&hlpuart1, buffer, strlen(buffer), 1000);
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f993 	bl	80001f0 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f107 010c 	add.w	r1, r7, #12
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <main+0x110>)
 8000ed8:	f003 fa2c 	bl	8004334 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8000edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee0:	f000 fd30 	bl	8001944 <HAL_Delay>
  {
 8000ee4:	e792      	b.n	8000e0c <main+0x2c>
 8000ee6:	bf00      	nop
 8000ee8:	2000008c 	.word	0x2000008c
 8000eec:	08006224 	.word	0x08006224
 8000ef0:	200000e0 	.word	0x200000e0

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b096      	sub	sp, #88	; 0x58
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2244      	movs	r2, #68	; 0x44
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 ff3c 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f1a:	f001 fe4f 	bl	8002bbc <HAL_PWREx_ControlVoltageScaling>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f24:	f000 f906 	bl	8001134 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000f34:	23b0      	movs	r3, #176	; 0xb0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 fea1 	bl	8002c88 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f4c:	f000 f8f2 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 faa6 	bl	80034bc <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f76:	f000 f8dd 	bl	8001134 <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3758      	adds	r7, #88	; 0x58
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <MX_I2C1_Init+0x78>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <MX_I2C1_Init+0x7c>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fc0:	f000 ff5c 	bl	8001e7c <HAL_I2C_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fca:	f000 f8b3 	bl	8001134 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fd2:	f001 fd4d 	bl	8002a70 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f000 f8aa 	bl	8001134 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_I2C1_Init+0x74>)
 8000fe4:	f001 fd8f 	bl	8002b06 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f000 f8a1 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000008c 	.word	0x2000008c
 8000ffc:	40005400 	.word	0x40005400
 8001000:	00506682 	.word	0x00506682

08001004 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <MX_LPUART1_UART_Init+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_LPUART1_UART_Init+0x50>)
 8001042:	f003 f929 	bl	8004298 <HAL_UART_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800104c:	f000 f872 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200000e0 	.word	0x200000e0
 8001058:	40008000 	.word	0x40008000

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_GPIO_Init+0x5c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <MX_GPIO_Init+0x5c>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_GPIO_Init+0x5c>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_GPIO_Init+0x5c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <MX_GPIO_Init+0x5c>)
 8001080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_GPIO_Init+0x5c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001092:	f001 fde9 	bl	8002c68 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_GPIO_Init+0x5c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <MX_GPIO_Init+0x5c>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <MX_GPIO_Init+0x5c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <I2C_Scanner>:

/* USER CODE BEGIN 4 */

void I2C_Scanner(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	printf("\r\n");
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <I2C_Scanner+0x68>)
 80010c4:	f003 ff00 	bl	8004ec8 <puts>

	 	printf("Scanning I2C bus:\r\n");
 80010c8:	4817      	ldr	r0, [pc, #92]	; (8001128 <I2C_Scanner+0x6c>)
 80010ca:	f003 fefd 	bl	8004ec8 <puts>
		HAL_StatusTypeDef result;
	 	uint8_t i;
	 	for (i=1; i<128; i++)
 80010ce:	2301      	movs	r3, #1
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	e01b      	b.n	800110c <I2C_Scanner+0x50>
	 	   * &hi2c1 is the handle
	 	   * (uint16_t)(i<<1) is the i2c address left aligned
	 	   * retries 2
	 	   * timeout 2
	 	   */
	 	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b299      	uxth	r1, r3
 80010dc:	2302      	movs	r3, #2
 80010de:	2202      	movs	r2, #2
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <I2C_Scanner+0x70>)
 80010e2:	f001 f945 	bl	8002370 <HAL_I2C_IsDeviceReady>
 80010e6:	4603      	mov	r3, r0
 80010e8:	71bb      	strb	r3, [r7, #6]
	 	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <I2C_Scanner+0x3a>
	 	  {
	 		  printf("."); // No ACK received at that address
 80010f0:	202e      	movs	r0, #46	; 0x2e
 80010f2:	f003 fe65 	bl	8004dc0 <putchar>
	 	  }
	 	  if (result == HAL_OK)
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <I2C_Scanner+0x4a>
	 	  {
	 		  printf("\r\nSlave Address: 0x%X\r\n", i); // Received an ACK at that address
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	4619      	mov	r1, r3
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <I2C_Scanner+0x74>)
 8001102:	f003 fe45 	bl	8004d90 <iprintf>
	 	for (i=1; i<128; i++)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	3301      	adds	r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dadf      	bge.n	80010d4 <I2C_Scanner+0x18>
	 	  }
	 	}
	 	printf("\r\n");
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <I2C_Scanner+0x68>)
 8001116:	f003 fed7 	bl	8004ec8 <puts>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	08006264 	.word	0x08006264
 8001128:	08006268 	.word	0x08006268
 800112c:	2000008c 	.word	0x2000008c
 8001130:	0800627c 	.word	0x0800627c

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_MspInit+0x44>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_MspInit+0x44>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6613      	str	r3, [r2, #96]	; 0x60
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_MspInit+0x44>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_MspInit+0x44>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_MspInit+0x44>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6593      	str	r3, [r2, #88]	; 0x58
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_MspInit+0x44>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0ac      	sub	sp, #176	; 0xb0
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	228c      	movs	r2, #140	; 0x8c
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 fde9 	bl	8004d80 <memset>
  if(hi2c->Instance==I2C1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a21      	ldr	r2, [pc, #132]	; (8001238 <HAL_I2C_MspInit+0xb0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d13b      	bne.n	8001230 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011bc:	2300      	movs	r3, #0
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fb9d 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011d0:	f7ff ffb0 	bl	8001134 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_I2C_MspInit+0xb4>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	4a18      	ldr	r2, [pc, #96]	; (800123c <HAL_I2C_MspInit+0xb4>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_I2C_MspInit+0xb4>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001206:	2304      	movs	r3, #4
 8001208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <HAL_I2C_MspInit+0xb8>)
 8001214:	f000 fca0 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_I2C_MspInit+0xb4>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_I2C_MspInit+0xb4>)
 800121e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001222:	6593      	str	r3, [r2, #88]	; 0x58
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_I2C_MspInit+0xb4>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	37b0      	adds	r7, #176	; 0xb0
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40005400 	.word	0x40005400
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ac      	sub	sp, #176	; 0xb0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	228c      	movs	r2, #140	; 0x8c
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fd8b 	bl	8004d80 <memset>
  if(huart->Instance==LPUART1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <HAL_UART_MspInit+0xb4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d13d      	bne.n	80012f0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001274:	2320      	movs	r3, #32
 8001276:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fb3f 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800128c:	f7ff ff52 	bl	8001134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_MspInit+0xb8>)
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80012c0:	f001 fcd2 	bl	8002c68 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80012c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80012de:	2308      	movs	r3, #8
 80012e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0xbc>)
 80012ec:	f000 fc34 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	37b0      	adds	r7, #176	; 0xb0
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40008000 	.word	0x40008000
 80012fc:	40021000 	.word	0x40021000
 8001300:	48001800 	.word	0x48001800

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 fad8 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
  }

  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <_write+0x28>)
 80013ac:	f002 ffc2 	bl	8004334 <HAL_UART_Transmit>
  return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000e0 	.word	0x200000e0

080013c0 <_close>:

int _close(int file)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_isatty>:

int _isatty(int file)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f003 fc68 	bl	8004d2c <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20050000 	.word	0x20050000
 8001488:	00000400 	.word	0x00000400
 800148c:	20000164 	.word	0x20000164
 8001490:	20000180 	.word	0x20000180

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ffea 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f003 fc27 	bl	8004d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff fc79 	bl	8000de0 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014fc:	08006388 	.word	0x08006388
  ldr r2, =_sbss
 8001500:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001504:	20000180 	.word	0x20000180

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>
	...

0800150c <SHT2x_Init>:
	
/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <SHT2x_Init+0x1c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000168 	.word	0x20000168

0800152c <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8001532:	23e7      	movs	r3, #231	; 0xe7
 8001534:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <SHT2x_ReadUserReg+0x3c>)
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	1dba      	adds	r2, r7, #6
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	f000 fd29 	bl	8001f9c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <SHT2x_ReadUserReg+0x3c>)
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	1dfa      	adds	r2, r7, #7
 8001550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2301      	movs	r3, #1
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	f000 fe13 	bl	8002184 <HAL_I2C_Master_Receive>
	return val;
 800155e:	79fb      	ldrb	r3, [r7, #7]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000168 	.word	0x20000168

0800156c <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <SHT2x_GetRaw+0x58>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	81bb      	strh	r3, [r7, #12]
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <SHT2x_GetRaw+0x5c>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	1dfa      	adds	r2, r7, #7
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	f000 fd04 	bl	8001f9c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <SHT2x_GetRaw+0x5c>)
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	f107 020c 	add.w	r2, r7, #12
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2303      	movs	r3, #3
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	f000 fded 	bl	8002184 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	b29b      	uxth	r3, r3
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08006294 	.word	0x08006294
 80015c8:	20000168 	.word	0x20000168
 80015cc:	00000000 	.word	0x00000000

080015d0 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SHT2x_GetTemperature+0x14>
 80015e0:	23e3      	movs	r3, #227	; 0xe3
 80015e2:	e000      	b.n	80015e6 <SHT2x_GetTemperature+0x16>
 80015e4:	23f3      	movs	r3, #243	; 0xf3
 80015e6:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ffbe 	bl	800156c <SHT2x_GetRaw>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffa6 	bl	8000544 <__aeabi_i2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <SHT2x_GetTemperature+0x88>)
 80015fe:	f7ff f935 	bl	800086c <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	a30f      	add	r3, pc, #60	; (adr r3, 8001648 <SHT2x_GetTemperature+0x78>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f802 	bl	8000618 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	a30c      	add	r3, pc, #48	; (adr r3, 8001650 <SHT2x_GetTemperature+0x80>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe fe41 	bl	80002a8 <__aeabi_dsub>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fa05 	bl	8000a3c <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	ee07 3a90 	vmov	s15, r3
}
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	f3af 8000 	nop.w
 8001648:	3d70a3d7 	.word	0x3d70a3d7
 800164c:	4065f70a 	.word	0x4065f70a
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40476ccc 	.word	0x40476ccc
 8001658:	40f00000 	.word	0x40f00000

0800165c <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SHT2x_GetRelativeHumidity+0x14>
 800166c:	23e5      	movs	r3, #229	; 0xe5
 800166e:	e000      	b.n	8001672 <SHT2x_GetRelativeHumidity+0x16>
 8001670:	23f5      	movs	r3, #245	; 0xf5
 8001672:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff78 	bl	800156c <SHT2x_GetRaw>
 800167c:	4603      	mov	r3, r0
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff60 	bl	8000544 <__aeabi_i2d>
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <SHT2x_GetRelativeHumidity+0x74>)
 800168a:	f7ff f8ef 	bl	800086c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <SHT2x_GetRelativeHumidity+0x78>)
 800169c:	f7fe ffbc 	bl	8000618 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <SHT2x_GetRelativeHumidity+0x7c>)
 80016ae:	f7fe fdfb 	bl	80002a8 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff f9bf 	bl	8000a3c <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	ee07 3a90 	vmov	s15, r3
}
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40f00000 	.word	0x40f00000
 80016d4:	405f4000 	.word	0x405f4000
 80016d8:	40180000 	.word	0x40180000

080016dc <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 80016e6:	f7ff ff21 	bl	800152c <SHT2x_ReadUserReg>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8001702:	23e6      	movs	r3, #230	; 0xe6
 8001704:	733b      	strb	r3, [r7, #12]
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <SHT2x_SetResolution+0x4c>)
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	f107 020c 	add.w	r2, r7, #12
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2302      	movs	r3, #2
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	f000 fc3e 	bl	8001f9c <HAL_I2C_Master_Transmit>
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000168 	.word	0x20000168
 800172c:	00000000 	.word	0x00000000

08001730 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	ed87 0a01 	vstr	s0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe ff14 	bl	8000568 <__aeabi_f2d>
 8001740:	a30e      	add	r3, pc, #56	; (adr r3, 800177c <SHT2x_CelsiusToFahrenheit+0x4c>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff67 	bl	8000618 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <SHT2x_CelsiusToFahrenheit+0x48>)
 8001758:	f7fe fda8 	bl	80002ac <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff f96a 	bl	8000a3c <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	ee07 3a90 	vmov	s15, r3
}
 800176e:	eeb0 0a67 	vmov.f32	s0, s15
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40400000 	.word	0x40400000
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	3ffccccc 	.word	0x3ffccccc

08001784 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	ed87 0a01 	vstr	s0, [r7, #4]
	return celsius + 273;
 800178e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001792:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017a8 <SHT2x_CelsiusToKelvin+0x24>
 8001796:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	43888000 	.word	0x43888000

080017ac <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	ed87 0a01 	vstr	s0, [r7, #4]
	return num / 1;
 80017b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017be:	ee17 3a90 	vmov	r3, s15
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	ed87 0a01 	vstr	s0, [r7, #4]
 80017d8:	6038      	str	r0, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 80017da:	ed97 0a01 	vldr	s0, [r7, #4]
 80017de:	f7ff ffe5 	bl	80017ac <SHT2x_GetInteger>
 80017e2:	ee07 0a90 	vmov	s15, r0
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	edc7 7a03 	vstr	s15, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	200a      	movs	r0, #10
 80017fc:	f000 f810 	bl	8001820 <SHT2x_Ipow>
 8001800:	ee07 0a90 	vmov	s15, r0
 8001804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001808:	edd7 7a03 	vldr	s15, [r7, #12]
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001814:	ee17 3a90 	vmov	r3, s15
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 800182e:	2301      	movs	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	e007      	b.n	8001844 <SHT2x_Ipow+0x24>
		temp *= base;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3f3      	bcc.n	8001834 <SHT2x_Ipow+0x14>
	return temp;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f943 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f80e 	bl	800188c <HAL_InitTick>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	e001      	b.n	8001880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187c:	f7ff fc60 	bl	8001140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001880:	79fb      	ldrb	r3, [r7, #7]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_InitTick+0x6c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d023      	beq.n	80018e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_InitTick+0x70>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_InitTick+0x6c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f941 	bl	8001b3e <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d809      	bhi.n	80018dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d0:	f000 f919 	bl	8001b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_InitTick+0x74>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e007      	b.n	80018ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e004      	b.n	80018ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e001      	b.n	80018ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008
 8001928:	2000016c 	.word	0x2000016c

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	2000016c 	.word	0x2000016c

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_Delay+0x44>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff47 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff5c 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffb0 	bl	8001aac <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	e166      	b.n	8001e36 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8158 	beq.w	8001e30 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d005      	beq.n	8001b98 <HAL_GPIO_Init+0x40>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d130      	bne.n	8001bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 0201 	and.w	r2, r3, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d017      	beq.n	8001c36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d123      	bne.n	8001c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	6939      	ldr	r1, [r7, #16]
 8001c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0203 	and.w	r2, r3, #3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80b2 	beq.w	8001e30 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ccc:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <HAL_GPIO_Init+0x2fc>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_GPIO_Init+0x2fc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_GPIO_Init+0x2fc>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d0e:	d02b      	beq.n	8001d68 <HAL_GPIO_Init+0x210>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_GPIO_Init+0x304>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d025      	beq.n	8001d64 <HAL_GPIO_Init+0x20c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <HAL_GPIO_Init+0x308>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d01f      	beq.n	8001d60 <HAL_GPIO_Init+0x208>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a50      	ldr	r2, [pc, #320]	; (8001e64 <HAL_GPIO_Init+0x30c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d019      	beq.n	8001d5c <HAL_GPIO_Init+0x204>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4f      	ldr	r2, [pc, #316]	; (8001e68 <HAL_GPIO_Init+0x310>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_GPIO_Init+0x200>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a4e      	ldr	r2, [pc, #312]	; (8001e6c <HAL_GPIO_Init+0x314>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_Init+0x1fc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a4d      	ldr	r2, [pc, #308]	; (8001e70 <HAL_GPIO_Init+0x318>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1f8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a4c      	ldr	r2, [pc, #304]	; (8001e74 <HAL_GPIO_Init+0x31c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_Init+0x1f4>
 8001d48:	2307      	movs	r3, #7
 8001d4a:	e00e      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	e00c      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d50:	2306      	movs	r3, #6
 8001d52:	e00a      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d54:	2305      	movs	r3, #5
 8001d56:	e008      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7a:	4937      	ldr	r1, [pc, #220]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dac:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd6:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e2a:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <HAL_GPIO_Init+0x320>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f ae91 	bne.w	8001b68 <HAL_GPIO_Init+0x10>
  }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	48000800 	.word	0x48000800
 8001e64:	48000c00 	.word	0x48000c00
 8001e68:	48001000 	.word	0x48001000
 8001e6c:	48001400 	.word	0x48001400
 8001e70:	48001800 	.word	0x48001800
 8001e74:	48001c00 	.word	0x48001c00
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e081      	b.n	8001f92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff f970 	bl	8001188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d107      	bne.n	8001ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e006      	b.n	8001f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d104      	bne.n	8001f16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69d9      	ldr	r1, [r3, #28]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	817b      	strh	r3, [r7, #10]
 8001fac:	4613      	mov	r3, r2
 8001fae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	f040 80da 	bne.w	8002172 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2C_Master_Transmit+0x30>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0d3      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1d8>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd4:	f7ff fcaa 	bl	800192c <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2319      	movs	r3, #25
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 faed 	bl	80025c6 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0be      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2210      	movs	r2, #16
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	893a      	ldrh	r2, [r7, #8]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d90e      	bls.n	8002046 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	b2da      	uxtb	r2, r3
 8002034:	8979      	ldrh	r1, [r7, #10]
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_I2C_Master_Transmit+0x1e0>)
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fce4 	bl	8002a0c <I2C_TransferConfig>
 8002044:	e06c      	b.n	8002120 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	b2da      	uxtb	r2, r3
 8002056:	8979      	ldrh	r1, [r7, #10]
 8002058:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_I2C_Master_Transmit+0x1e0>)
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fcd3 	bl	8002a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002066:	e05b      	b.n	8002120 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	6a39      	ldr	r1, [r7, #32]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 faea 	bl	8002646 <I2C_WaitOnTXISFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e07b      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d034      	beq.n	8002120 <HAL_I2C_Master_Transmit+0x184>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d130      	bne.n	8002120 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	2200      	movs	r2, #0
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fa7c 	bl	80025c6 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e04d      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2bff      	cmp	r3, #255	; 0xff
 80020e0:	d90e      	bls.n	8002100 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	22ff      	movs	r2, #255	; 0xff
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	8979      	ldrh	r1, [r7, #10]
 80020f0:	2300      	movs	r3, #0
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fc87 	bl	8002a0c <I2C_TransferConfig>
 80020fe:	e00f      	b.n	8002120 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	b2da      	uxtb	r2, r3
 8002110:	8979      	ldrh	r1, [r7, #10]
 8002112:	2300      	movs	r3, #0
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fc76 	bl	8002a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d19e      	bne.n	8002068 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	6a39      	ldr	r1, [r7, #32]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fac9 	bl	80026c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e01a      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2220      	movs	r2, #32
 8002144:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_I2C_Master_Transmit+0x1e4>)
 8002152:	400b      	ands	r3, r1
 8002154:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	80002000 	.word	0x80002000
 8002180:	fe00e800 	.word	0xfe00e800

08002184 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	817b      	strh	r3, [r7, #10]
 8002194:	4613      	mov	r3, r2
 8002196:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	f040 80db 	bne.w	800235c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2C_Master_Receive+0x30>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e0d4      	b.n	800235e <HAL_I2C_Master_Receive+0x1da>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021bc:	f7ff fbb6 	bl	800192c <HAL_GetTick>
 80021c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2319      	movs	r3, #25
 80021c8:	2201      	movs	r2, #1
 80021ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f9f9 	bl	80025c6 <I2C_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0bf      	b.n	800235e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2222      	movs	r2, #34	; 0x22
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2210      	movs	r2, #16
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	893a      	ldrh	r2, [r7, #8]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	2bff      	cmp	r3, #255	; 0xff
 800220e:	d90e      	bls.n	800222e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	b2da      	uxtb	r2, r3
 800221c:	8979      	ldrh	r1, [r7, #10]
 800221e:	4b52      	ldr	r3, [pc, #328]	; (8002368 <HAL_I2C_Master_Receive+0x1e4>)
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fbf0 	bl	8002a0c <I2C_TransferConfig>
 800222c:	e06d      	b.n	800230a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	b2da      	uxtb	r2, r3
 800223e:	8979      	ldrh	r1, [r7, #10]
 8002240:	4b49      	ldr	r3, [pc, #292]	; (8002368 <HAL_I2C_Master_Receive+0x1e4>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fbdf 	bl	8002a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800224e:	e05c      	b.n	800230a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6a39      	ldr	r1, [r7, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa73 	bl	8002740 <I2C_WaitOnRXNEFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e07c      	b.n	800235e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d034      	beq.n	800230a <HAL_I2C_Master_Receive+0x186>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d130      	bne.n	800230a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	2200      	movs	r2, #0
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f987 	bl	80025c6 <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e04d      	b.n	800235e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2bff      	cmp	r3, #255	; 0xff
 80022ca:	d90e      	bls.n	80022ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	2300      	movs	r3, #0
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fb92 	bl	8002a0c <I2C_TransferConfig>
 80022e8:	e00f      	b.n	800230a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	8979      	ldrh	r1, [r7, #10]
 80022fc:	2300      	movs	r3, #0
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fb81 	bl	8002a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d19d      	bne.n	8002250 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	6a39      	ldr	r1, [r7, #32]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f9d4 	bl	80026c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e01a      	b.n	800235e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2220      	movs	r2, #32
 800232e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_I2C_Master_Receive+0x1e8>)
 800233c:	400b      	ands	r3, r1
 800233e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	80002400 	.word	0x80002400
 800236c:	fe00e800 	.word	0xfe00e800

08002370 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	460b      	mov	r3, r1
 800237e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	f040 80f1 	bne.w	8002574 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0e7      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_IsDeviceReady+0x44>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e0e0      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_I2C_IsDeviceReady+0x72>
 80023d2:	897b      	ldrh	r3, [r7, #10]
 80023d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023e0:	e004      	b.n	80023ec <HAL_I2C_IsDeviceReady+0x7c>
 80023e2:	897b      	ldrh	r3, [r7, #10]
 80023e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80023f2:	f7ff fa9b 	bl	800192c <HAL_GetTick>
 80023f6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b20      	cmp	r3, #32
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002424:	e034      	b.n	8002490 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242c:	d01a      	beq.n	8002464 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7ff fa7d 	bl	800192c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <HAL_I2C_IsDeviceReady+0xd4>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e088      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b10      	cmp	r3, #16
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002490:	7ffb      	ldrb	r3, [r7, #31]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <HAL_I2C_IsDeviceReady+0x12c>
 8002496:	7fbb      	ldrb	r3, [r7, #30]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0c4      	beq.n	8002426 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b10      	cmp	r3, #16
 80024a8:	d01a      	beq.n	80024e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2120      	movs	r1, #32
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f886 	bl	80025c6 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e058      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2220      	movs	r2, #32
 80024ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e04a      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2120      	movs	r1, #32
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f86b 	bl	80025c6 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e03d      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2210      	movs	r2, #16
 8002500:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2220      	movs	r2, #32
 8002508:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d118      	bne.n	8002544 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002520:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2120      	movs	r1, #32
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f84a 	bl	80025c6 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e01c      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2220      	movs	r2, #32
 8002542:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3301      	adds	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	f63f af3b 	bhi.w	80023ca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	d103      	bne.n	800259c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d007      	beq.n	80025ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0201 	orr.w	r2, r2, #1
 80025b8:	619a      	str	r2, [r3, #24]
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d6:	e022      	b.n	800261e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025de:	d01e      	beq.n	800261e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7ff f9a4 	bl	800192c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d113      	bne.n	800261e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4013      	ands	r3, r2
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	bf0c      	ite	eq
 800262e:	2301      	moveq	r3, #1
 8002630:	2300      	movne	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	429a      	cmp	r2, r3
 800263a:	d0cd      	beq.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002652:	e02c      	b.n	80026ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f8eb 	bl	8002834 <I2C_IsErrorOccurred>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e02a      	b.n	80026be <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800266e:	d01e      	beq.n	80026ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002670:	f7ff f95c 	bl	800192c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	429a      	cmp	r2, r3
 800267e:	d302      	bcc.n	8002686 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d113      	bne.n	80026ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e007      	b.n	80026be <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d1cb      	bne.n	8002654 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d2:	e028      	b.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f8ab 	bl	8002834 <I2C_IsErrorOccurred>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e026      	b.n	8002736 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e8:	f7ff f920 	bl	800192c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d302      	bcc.n	80026fe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d113      	bne.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f043 0220 	orr.w	r2, r3, #32
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e007      	b.n	8002736 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b20      	cmp	r3, #32
 8002732:	d1cf      	bne.n	80026d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800274c:	e064      	b.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f86e 	bl	8002834 <I2C_IsErrorOccurred>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e062      	b.n	8002828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b20      	cmp	r3, #32
 800276e:	d138      	bne.n	80027e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d105      	bne.n	800278a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e04e      	b.n	8002828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d107      	bne.n	80027a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2204      	movs	r2, #4
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
 80027a6:	e002      	b.n	80027ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2220      	movs	r2, #32
 80027b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e022      	b.n	8002828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7ff f8a3 	bl	800192c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10f      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e007      	b.n	8002828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b04      	cmp	r3, #4
 8002824:	d193      	bne.n	800274e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	fe00e800 	.word	0xfe00e800

08002834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d075      	beq.n	800294c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2210      	movs	r2, #16
 8002866:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002868:	e056      	b.n	8002918 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002870:	d052      	beq.n	8002918 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002872:	f7ff f85b 	bl	800192c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	d302      	bcc.n	8002888 <I2C_IsErrorOccurred+0x54>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d147      	bne.n	8002918 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800289a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028aa:	d12e      	bne.n	800290a <I2C_IsErrorOccurred+0xd6>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b2:	d02a      	beq.n	800290a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d027      	beq.n	800290a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028ca:	f7ff f82f 	bl	800192c <HAL_GetTick>
 80028ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d0:	e01b      	b.n	800290a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028d2:	f7ff f82b 	bl	800192c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b19      	cmp	r3, #25
 80028de:	d914      	bls.n	800290a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b20      	cmp	r3, #32
 8002916:	d1dc      	bne.n	80028d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b20      	cmp	r3, #32
 8002924:	d003      	beq.n	800292e <I2C_IsErrorOccurred+0xfa>
 8002926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292a:	2b00      	cmp	r3, #0
 800292c:	d09d      	beq.n	800286a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800292e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2220      	movs	r2, #32
 800293c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01c      	beq.n	80029fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7ff fddb 	bl	800257e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <I2C_IsErrorOccurred+0x1d4>)
 80029d4:	400b      	ands	r3, r1
 80029d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	fe00e800 	.word	0xfe00e800

08002a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a24:	7a7b      	ldrb	r3, [r7, #9]
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	0d5b      	lsrs	r3, r3, #21
 8002a46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <I2C_TransferConfig+0x60>)
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	ea02 0103 	and.w	r1, r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	03ff63ff 	.word	0x03ff63ff

08002a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d138      	bne.n	8002af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e032      	b.n	8002afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d139      	bne.n	8002b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e033      	b.n	8002b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2224      	movs	r2, #36	; 0x24
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40007000 	.word	0x40007000

08002bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bca:	d130      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd8:	d038      	beq.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bda:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be2:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2232      	movs	r2, #50	; 0x32
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c00:	e002      	b.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c14:	d102      	bne.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f2      	bne.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c28:	d110      	bne.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e00f      	b.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d007      	beq.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	20000000 	.word	0x20000000
 8002c64:	431bde83 	.word	0x431bde83

08002c68 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c76:	6053      	str	r3, [r2, #4]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40007000 	.word	0x40007000

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f000 bc08 	b.w	80034ac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9c:	4b96      	ldr	r3, [pc, #600]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca6:	4b94      	ldr	r3, [pc, #592]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80e4 	beq.w	8002e86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4c>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	f040 808b 	bne.w	8002de2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	f040 8087 	bne.w	8002de2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cd4:	4b88      	ldr	r3, [pc, #544]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_OscConfig+0x64>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e3df      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	4b81      	ldr	r3, [pc, #516]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <HAL_RCC_OscConfig+0x7e>
 8002cfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d04:	e005      	b.n	8002d12 <HAL_RCC_OscConfig+0x8a>
 8002d06:	4b7c      	ldr	r3, [pc, #496]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d223      	bcs.n	8002d5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fd92 	bl	8003844 <RCC_SetFlashLatencyFromMSIRange>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e3c0      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d2a:	4b73      	ldr	r3, [pc, #460]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	496d      	ldr	r1, [pc, #436]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d48:	4b6b      	ldr	r3, [pc, #428]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	4968      	ldr	r1, [pc, #416]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	e025      	b.n	8002daa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5e:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b63      	ldr	r3, [pc, #396]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4960      	ldr	r1, [pc, #384]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	495b      	ldr	r1, [pc, #364]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fd52 	bl	8003844 <RCC_SetFlashLatencyFromMSIRange>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e380      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002daa:	f000 fc87 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	4950      	ldr	r1, [pc, #320]	; (8002efc <HAL_RCC_OscConfig+0x274>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc6:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dca:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fd5c 	bl	800188c <HAL_InitTick>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d052      	beq.n	8002e84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	e364      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d032      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dea:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a42      	ldr	r2, [pc, #264]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fd99 	bl	800192c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fd95 	bl	800192c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e34d      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e10:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1c:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4930      	ldr	r1, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	492b      	ldr	r1, [pc, #172]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
 8002e4e:	e01a      	b.n	8002e86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e50:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fd66 	bl	800192c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e64:	f7fe fd62 	bl	800192c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e31a      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1dc>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d073      	beq.n	8002f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x21c>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d10e      	bne.n	8002ebc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d063      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2f0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15f      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e2f7      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e025      	b.n	8002f20 <HAL_RCC_OscConfig+0x298>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002edc:	d114      	bne.n	8002f08 <HAL_RCC_OscConfig+0x280>
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a02      	ldr	r2, [pc, #8]	; (8002ef8 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e013      	b.n	8002f20 <HAL_RCC_OscConfig+0x298>
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08006298 	.word	0x08006298
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000004 	.word	0x20000004
 8002f08:	4ba0      	ldr	r3, [pc, #640]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a9f      	ldr	r2, [pc, #636]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a9c      	ldr	r2, [pc, #624]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fd00 	bl	800192c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fcfc 	bl	800192c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e2b4      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f42:	4b92      	ldr	r3, [pc, #584]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x2a8>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fcec 	bl	800192c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fce8 	bl	800192c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e2a0      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2d0>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d060      	beq.n	8003048 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_OscConfig+0x310>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d119      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d116      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f98:	4b7c      	ldr	r3, [pc, #496]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x328>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e27d      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	4973      	ldr	r1, [pc, #460]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc4:	e040      	b.n	8003048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d023      	beq.n	8003016 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fce:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7fe fca7 	bl	800192c <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7fe fca3 	bl	800192c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e25b      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff4:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b62      	ldr	r3, [pc, #392]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	495f      	ldr	r1, [pc, #380]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
 8003014:	e018      	b.n	8003048 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003016:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x504>)
 800301c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fe fc83 	bl	800192c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7fe fc7f 	bl	800192c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e237      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_OscConfig+0x504>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d03c      	beq.n	80030ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01c      	beq.n	8003096 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305c:	4b4b      	ldr	r3, [pc, #300]	; (800318c <HAL_RCC_OscConfig+0x504>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	4a4a      	ldr	r2, [pc, #296]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe fc5e 	bl	800192c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fe fc5a 	bl	800192c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e212      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003086:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ef      	beq.n	8003074 <HAL_RCC_OscConfig+0x3ec>
 8003094:	e01b      	b.n	80030ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309c:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_RCC_OscConfig+0x504>)
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fe fc41 	bl	800192c <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fe fc3d 	bl	800192c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e1f5      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCC_OscConfig+0x504>)
 80030c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ef      	bne.n	80030ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80a6 	beq.w	8003228 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCC_OscConfig+0x504>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_OscConfig+0x504>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <HAL_RCC_OscConfig+0x504>)
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f6:	6593      	str	r3, [r2, #88]	; 0x58
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_OscConfig+0x504>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003104:	2301      	movs	r3, #1
 8003106:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_RCC_OscConfig+0x508>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d118      	bne.n	8003146 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_RCC_OscConfig+0x508>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <HAL_RCC_OscConfig+0x508>)
 800311a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003120:	f7fe fc04 	bl	800192c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003128:	f7fe fc00 	bl	800192c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1b8      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_RCC_OscConfig+0x508>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d108      	bne.n	8003160 <HAL_RCC_OscConfig+0x4d8>
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	4a0d      	ldr	r2, [pc, #52]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800315e:	e029      	b.n	80031b4 <HAL_RCC_OscConfig+0x52c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b05      	cmp	r3, #5
 8003166:	d115      	bne.n	8003194 <HAL_RCC_OscConfig+0x50c>
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <HAL_RCC_OscConfig+0x504>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	4a07      	ldr	r2, [pc, #28]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_OscConfig+0x504>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	4a03      	ldr	r2, [pc, #12]	; (800318c <HAL_RCC_OscConfig+0x504>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003188:	e014      	b.n	80031b4 <HAL_RCC_OscConfig+0x52c>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	4b9d      	ldr	r3, [pc, #628]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a9c      	ldr	r2, [pc, #624]	; (800340c <HAL_RCC_OscConfig+0x784>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a4:	4b99      	ldr	r3, [pc, #612]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	4a98      	ldr	r2, [pc, #608]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d016      	beq.n	80031ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fe fbb6 	bl	800192c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fe fbb2 	bl	800192c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e168      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031da:	4b8c      	ldr	r3, [pc, #560]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ed      	beq.n	80031c4 <HAL_RCC_OscConfig+0x53c>
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe fb9f 	bl	800192c <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fb9b 	bl	800192c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e151      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003208:	4b80      	ldr	r3, [pc, #512]	; (800340c <HAL_RCC_OscConfig+0x784>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ed      	bne.n	80031f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003216:	7ffb      	ldrb	r3, [r7, #31]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321c:	4b7b      	ldr	r3, [pc, #492]	; (800340c <HAL_RCC_OscConfig+0x784>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	4a7a      	ldr	r2, [pc, #488]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003226:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d03c      	beq.n	80032ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01c      	beq.n	8003276 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800323c:	4b73      	ldr	r3, [pc, #460]	; (800340c <HAL_RCC_OscConfig+0x784>)
 800323e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003242:	4a72      	ldr	r2, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324c:	f7fe fb6e 	bl	800192c <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003254:	f7fe fb6a 	bl	800192c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e122      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003266:	4b69      	ldr	r3, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ef      	beq.n	8003254 <HAL_RCC_OscConfig+0x5cc>
 8003274:	e01b      	b.n	80032ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327c:	4a63      	ldr	r2, [pc, #396]	; (800340c <HAL_RCC_OscConfig+0x784>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003286:	f7fe fb51 	bl	800192c <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328e:	f7fe fb4d 	bl	800192c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e105      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a0:	4b5a      	ldr	r3, [pc, #360]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80032a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1ef      	bne.n	800328e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80f9 	beq.w	80034aa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	2b02      	cmp	r3, #2
 80032be:	f040 80cf 	bne.w	8003460 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032c2:	4b52      	ldr	r3, [pc, #328]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 0203 	and.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d12c      	bne.n	8003330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	3b01      	subs	r3, #1
 80032e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d123      	bne.n	8003330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d11b      	bne.n	8003330 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d113      	bne.n	8003330 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	3b01      	subs	r3, #1
 8003316:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d109      	bne.n	8003330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d071      	beq.n	8003414 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d068      	beq.n	8003408 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003336:	4b35      	ldr	r3, [pc, #212]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003342:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0ac      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2d      	ldr	r2, [pc, #180]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800335e:	f7fe fae5 	bl	800192c <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fe fae1 	bl	800192c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e099      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x784>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_RCC_OscConfig+0x784>)
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_RCC_OscConfig+0x788>)
 800338a:	4013      	ands	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003394:	3a01      	subs	r2, #1
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	4311      	orrs	r1, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800339e:	0212      	lsls	r2, r2, #8
 80033a0:	4311      	orrs	r1, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033a6:	0852      	lsrs	r2, r2, #1
 80033a8:	3a01      	subs	r2, #1
 80033aa:	0552      	lsls	r2, r2, #21
 80033ac:	4311      	orrs	r1, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033b2:	0852      	lsrs	r2, r2, #1
 80033b4:	3a01      	subs	r2, #1
 80033b6:	0652      	lsls	r2, r2, #25
 80033b8:	4311      	orrs	r1, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033be:	06d2      	lsls	r2, r2, #27
 80033c0:	430a      	orrs	r2, r1
 80033c2:	4912      	ldr	r1, [pc, #72]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0f      	ldr	r2, [pc, #60]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80033ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80033da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e0:	f7fe faa4 	bl	800192c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe faa0 	bl	800192c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e058      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fa:	4b04      	ldr	r3, [pc, #16]	; (800340c <HAL_RCC_OscConfig+0x784>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003406:	e050      	b.n	80034aa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e04f      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
 800340c:	40021000 	.word	0x40021000
 8003410:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d144      	bne.n	80034aa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a23      	ldr	r2, [pc, #140]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800342c:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a20      	ldr	r2, [pc, #128]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003438:	f7fe fa78 	bl	800192c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003440:	f7fe fa74 	bl	800192c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e02c      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x7b8>
 800345e:	e024      	b.n	80034aa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d01f      	beq.n	80034a6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 800346c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe fa5b 	bl	800192c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fa57 	bl	800192c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4905      	ldr	r1, [pc, #20]	; (80034b4 <HAL_RCC_OscConfig+0x82c>)
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_OscConfig+0x830>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
 80034a4:	e001      	b.n	80034aa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	feeefffc 	.word	0xfeeefffc

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0e7      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d910      	bls.n	8003500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0207 	bic.w	r2, r3, #7
 80034e6:	4970      	ldr	r1, [pc, #448]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0cf      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003518:	429a      	cmp	r2, r3
 800351a:	d908      	bls.n	800352e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4960      	ldr	r1, [pc, #384]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d04c      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4b5a      	ldr	r3, [pc, #360]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d121      	bne.n	8003592 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e0a6      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355a:	4b54      	ldr	r3, [pc, #336]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d115      	bne.n	8003592 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e09a      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003572:	4b4e      	ldr	r3, [pc, #312]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e08e      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003582:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e086      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003592:	4b46      	ldr	r3, [pc, #280]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 0203 	bic.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4943      	ldr	r1, [pc, #268]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a4:	f7fe f9c2 	bl	800192c <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ac:	f7fe f9be 	bl	800192c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e06e      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 020c 	and.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1eb      	bne.n	80035ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d208      	bcs.n	8003602 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b2e      	ldr	r3, [pc, #184]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	492b      	ldr	r1, [pc, #172]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003602:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d210      	bcs.n	8003632 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 0207 	bic.w	r2, r3, #7
 8003618:	4923      	ldr	r1, [pc, #140]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e036      	b.n	80036a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363e:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4918      	ldr	r1, [pc, #96]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4910      	ldr	r1, [pc, #64]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003670:	f000 f824 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	490b      	ldr	r1, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
 800368c:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1f8>)
 800368e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe f8f9 	bl	800188c <HAL_InitTick>
 800369a:	4603      	mov	r3, r0
 800369c:	72fb      	strb	r3, [r7, #11]

  return status;
 800369e:	7afb      	ldrb	r3, [r7, #11]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40022000 	.word	0x40022000
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08006298 	.word	0x08006298
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x34>
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d121      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d11e      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036f0:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036fc:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e005      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003718:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003720:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10d      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b04      	cmp	r3, #4
 8003732:	d102      	bne.n	800373a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e004      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d101      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003740:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003742:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d134      	bne.n	80037b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0xa6>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d003      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0xac>
 8003760:	e005      	b.n	800376e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003764:	617b      	str	r3, [r7, #20]
      break;
 8003766:	e005      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800376a:	617b      	str	r3, [r7, #20]
      break;
 800376c:	e002      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	617b      	str	r3, [r7, #20]
      break;
 8003772:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	3301      	adds	r3, #1
 8003780:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	fb03 f202 	mul.w	r2, r3, r2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	0e5b      	lsrs	r3, r3, #25
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	3301      	adds	r3, #1
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037b4:	69bb      	ldr	r3, [r7, #24]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
 80037c8:	080062b0 	.word	0x080062b0
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	007a1200 	.word	0x007a1200

080037d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000000 	.word	0x20000000

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037f0:	f7ff fff0 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4904      	ldr	r1, [pc, #16]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	080062a8 	.word	0x080062a8

08003818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800381c:	f7ff ffda 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0adb      	lsrs	r3, r3, #11
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	080062a8 	.word	0x080062a8

08003844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800385c:	f7ff f9a0 	bl	8002ba0 <HAL_PWREx_GetVoltageRange>
 8003860:	6178      	str	r0, [r7, #20]
 8003862:	e014      	b.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	4a24      	ldr	r2, [pc, #144]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386e:	6593      	str	r3, [r2, #88]	; 0x58
 8003870:	4b22      	ldr	r3, [pc, #136]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800387c:	f7ff f990 	bl	8002ba0 <HAL_PWREx_GetVoltageRange>
 8003880:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	4a1d      	ldr	r2, [pc, #116]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003894:	d10b      	bne.n	80038ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d919      	bls.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2ba0      	cmp	r3, #160	; 0xa0
 80038a0:	d902      	bls.n	80038a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038a2:	2302      	movs	r3, #2
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e013      	b.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a8:	2301      	movs	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	e010      	b.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b80      	cmp	r3, #128	; 0x80
 80038b2:	d902      	bls.n	80038ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038b4:	2303      	movs	r3, #3
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	e00a      	b.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d102      	bne.n	80038c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038c0:	2302      	movs	r3, #2
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	e004      	b.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b70      	cmp	r3, #112	; 0x70
 80038ca:	d101      	bne.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038cc:	2301      	movs	r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 0207 	bic.w	r2, r3, #7
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d001      	beq.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	40022000 	.word	0x40022000

08003904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800390c:	2300      	movs	r3, #0
 800390e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003910:	2300      	movs	r3, #0
 8003912:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391c:	2b00      	cmp	r3, #0
 800391e:	d041      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003924:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003928:	d02a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800392a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800392e:	d824      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003934:	d008      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003936:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800393a:	d81e      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003944:	d010      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003946:	e018      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003948:	4b86      	ldr	r3, [pc, #536]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a85      	ldr	r2, [pc, #532]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003952:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003954:	e015      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f000 facd 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003966:	e00c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3320      	adds	r3, #32
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fbb6 	bl	80040e0 <RCCEx_PLLSAI2_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003978:	e003      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	74fb      	strb	r3, [r7, #19]
      break;
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003988:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003996:	4973      	ldr	r1, [pc, #460]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800399e:	e001      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d041      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039b8:	d02a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039be:	d824      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c4:	d008      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ca:	d81e      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d4:	d010      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039d6:	e018      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d8:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a61      	ldr	r2, [pc, #388]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e4:	e015      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fa85 	bl	8003efc <RCCEx_PLLSAI1_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039f6:	e00c      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3320      	adds	r3, #32
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fb6e 	bl	80040e0 <RCCEx_PLLSAI2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a0e:	e000      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a18:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a26:	494f      	ldr	r1, [pc, #316]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a2e:	e001      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a0 	beq.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a42:	2300      	movs	r3, #0
 8003a44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a40      	ldr	r2, [pc, #256]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
 8003a68:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a74:	2301      	movs	r3, #1
 8003a76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a78:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a84:	f7fd ff52 	bl	800192c <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a8a:	e009      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8c:	f7fd ff4e 	bl	800192c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d902      	bls.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a9e:	e005      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aa0:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ef      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d15c      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01f      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d019      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003afc:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d016      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd ff0d 	bl	800192c <HAL_GetTick>
 8003b12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b14:	e00b      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fd ff09 	bl	800192c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d902      	bls.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ec      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	4904      	ldr	r1, [pc, #16]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b5a:	e009      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	74bb      	strb	r3, [r7, #18]
 8003b60:	e006      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b70:	7c7b      	ldrb	r3, [r7, #17]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4ba6      	ldr	r3, [pc, #664]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	4aa5      	ldr	r2, [pc, #660]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8e:	4ba0      	ldr	r3, [pc, #640]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	499c      	ldr	r1, [pc, #624]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb0:	4b97      	ldr	r3, [pc, #604]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 020c 	bic.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	4994      	ldr	r1, [pc, #592]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd2:	4b8f      	ldr	r3, [pc, #572]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	498b      	ldr	r1, [pc, #556]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf4:	4b86      	ldr	r3, [pc, #536]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4983      	ldr	r1, [pc, #524]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c16:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	497a      	ldr	r1, [pc, #488]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c38:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	4972      	ldr	r1, [pc, #456]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	4969      	ldr	r1, [pc, #420]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c8a:	4961      	ldr	r1, [pc, #388]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	4958      	ldr	r1, [pc, #352]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	4950      	ldr	r1, [pc, #320]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce2:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4947      	ldr	r1, [pc, #284]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d04:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	493f      	ldr	r1, [pc, #252]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d26:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4936      	ldr	r1, [pc, #216]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d44:	d106      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d50:	60d3      	str	r3, [r2, #12]
 8003d52:	e011      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2101      	movs	r1, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f8c9 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d028      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	491f      	ldr	r1, [pc, #124]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da2:	d106      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dae:	60d3      	str	r3, [r2, #12]
 8003db0:	e011      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dba:	d10c      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f89a 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003dd2:	7cfb      	ldrb	r3, [r7, #19]
 8003dd4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df0:	4907      	ldr	r1, [pc, #28]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e00:	d108      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e02:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4a02      	ldr	r2, [pc, #8]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0c:	60d3      	str	r3, [r2, #12]
 8003e0e:	e013      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003e10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f869 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003e34:	7cfb      	ldrb	r3, [r7, #19]
 8003e36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d02f      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e52:	4929      	ldr	r1, [pc, #164]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e62:	d10d      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	2102      	movs	r1, #2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f846 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d014      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	74bb      	strb	r3, [r7, #18]
 8003e7e:	e011      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3320      	adds	r3, #32
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f925 	bl	80040e0 <RCCEx_PLLSAI2_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9a:	7cfb      	ldrb	r3, [r7, #19]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec0:	490d      	ldr	r1, [pc, #52]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee4:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000

08003efc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f0a:	4b74      	ldr	r3, [pc, #464]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d018      	beq.n	8003f48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f16:	4b71      	ldr	r3, [pc, #452]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d10d      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
       ||
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f2e:	4b6b      	ldr	r3, [pc, #428]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d047      	beq.n	8003fd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	e044      	b.n	8003fd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d018      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0x86>
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d825      	bhi.n	8003fa0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d002      	beq.n	8003f5e <RCCEx_PLLSAI1_Config+0x62>
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d009      	beq.n	8003f70 <RCCEx_PLLSAI1_Config+0x74>
 8003f5c:	e020      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11d      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6e:	e01a      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f70:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d116      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f80:	e013      	b.n	8003faa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f82:	4b56      	ldr	r3, [pc, #344]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f8e:	4b53      	ldr	r3, [pc, #332]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f9e:	e006      	b.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e004      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fb6:	4b49      	ldr	r3, [pc, #292]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	4943      	ldr	r1, [pc, #268]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d17c      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fd8:	4b40      	ldr	r3, [pc, #256]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3f      	ldr	r2, [pc, #252]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fca2 	bl	800192c <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fea:	e009      	b.n	8004000 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fec:	f7fd fc9e 	bl	800192c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ffe:	e005      	b.n	800400c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ef      	bne.n	8003fec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d15f      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d110      	bne.n	800403a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004018:	4b30      	ldr	r3, [pc, #192]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004020:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6892      	ldr	r2, [r2, #8]
 8004028:	0211      	lsls	r1, r2, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68d2      	ldr	r2, [r2, #12]
 800402e:	06d2      	lsls	r2, r2, #27
 8004030:	430a      	orrs	r2, r1
 8004032:	492a      	ldr	r1, [pc, #168]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	610b      	str	r3, [r1, #16]
 8004038:	e027      	b.n	800408a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d112      	bne.n	8004066 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004040:	4b26      	ldr	r3, [pc, #152]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004048:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6892      	ldr	r2, [r2, #8]
 8004050:	0211      	lsls	r1, r2, #8
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6912      	ldr	r2, [r2, #16]
 8004056:	0852      	lsrs	r2, r2, #1
 8004058:	3a01      	subs	r2, #1
 800405a:	0552      	lsls	r2, r2, #21
 800405c:	430a      	orrs	r2, r1
 800405e:	491f      	ldr	r1, [pc, #124]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004060:	4313      	orrs	r3, r2
 8004062:	610b      	str	r3, [r1, #16]
 8004064:	e011      	b.n	800408a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800406e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6892      	ldr	r2, [r2, #8]
 8004076:	0211      	lsls	r1, r2, #8
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6952      	ldr	r2, [r2, #20]
 800407c:	0852      	lsrs	r2, r2, #1
 800407e:	3a01      	subs	r2, #1
 8004080:	0652      	lsls	r2, r2, #25
 8004082:	430a      	orrs	r2, r1
 8004084:	4915      	ldr	r1, [pc, #84]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a13      	ldr	r2, [pc, #76]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004090:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004094:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fd fc49 	bl	800192c <HAL_GetTick>
 800409a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800409c:	e009      	b.n	80040b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800409e:	f7fd fc45 	bl	800192c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d902      	bls.n	80040b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	73fb      	strb	r3, [r7, #15]
          break;
 80040b0:	e005      	b.n	80040be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ef      	beq.n	800409e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	4903      	ldr	r1, [pc, #12]	; (80040dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000

080040e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ee:	4b69      	ldr	r3, [pc, #420]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d018      	beq.n	800412c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040fa:	4b66      	ldr	r3, [pc, #408]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0203 	and.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d10d      	bne.n	8004126 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
       ||
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004112:	4b60      	ldr	r3, [pc, #384]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
       ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d047      	beq.n	80041b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	e044      	b.n	80041b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d018      	beq.n	8004166 <RCCEx_PLLSAI2_Config+0x86>
 8004134:	2b03      	cmp	r3, #3
 8004136:	d825      	bhi.n	8004184 <RCCEx_PLLSAI2_Config+0xa4>
 8004138:	2b01      	cmp	r3, #1
 800413a:	d002      	beq.n	8004142 <RCCEx_PLLSAI2_Config+0x62>
 800413c:	2b02      	cmp	r3, #2
 800413e:	d009      	beq.n	8004154 <RCCEx_PLLSAI2_Config+0x74>
 8004140:	e020      	b.n	8004184 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004142:	4b54      	ldr	r3, [pc, #336]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11d      	bne.n	800418a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004152:	e01a      	b.n	800418a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d116      	bne.n	800418e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004164:	e013      	b.n	800418e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004166:	4b4b      	ldr	r3, [pc, #300]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004172:	4b48      	ldr	r3, [pc, #288]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004182:	e006      	b.n	8004192 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      break;
 8004188:	e004      	b.n	8004194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004192:	bf00      	nop
    }

    if(status == HAL_OK)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	430b      	orrs	r3, r1
 80041b0:	4938      	ldr	r1, [pc, #224]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d166      	bne.n	800428a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041bc:	4b35      	ldr	r3, [pc, #212]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a34      	ldr	r2, [pc, #208]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fd fbb0 	bl	800192c <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d0:	f7fd fbac 	bl	800192c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
        break;
 80041e2:	e005      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ef      	bne.n	80041d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d149      	bne.n	800428a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d110      	bne.n	800421e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004204:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	0211      	lsls	r1, r2, #8
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	06d2      	lsls	r2, r2, #27
 8004214:	430a      	orrs	r2, r1
 8004216:	491f      	ldr	r1, [pc, #124]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	614b      	str	r3, [r1, #20]
 800421c:	e011      	b.n	8004242 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	0211      	lsls	r1, r2, #8
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6912      	ldr	r2, [r2, #16]
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	3a01      	subs	r2, #1
 8004238:	0652      	lsls	r2, r2, #25
 800423a:	430a      	orrs	r2, r1
 800423c:	4915      	ldr	r1, [pc, #84]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a13      	ldr	r2, [pc, #76]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fd fb6d 	bl	800192c <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004254:	e009      	b.n	800426a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004256:	f7fd fb69 	bl	800192c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d902      	bls.n	800426a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	73fb      	strb	r3, [r7, #15]
          break;
 8004268:	e005      	b.n	8004276 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ef      	beq.n	8004256 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4903      	ldr	r1, [pc, #12]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e040      	b.n	800432c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc ffc2 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8c0 	bl	800445c <UART_SetConfig>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e022      	b.n	800432c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fb6c 	bl	80049cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fbf3 	bl	8004b10 <UART_CheckIdleState>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004348:	2b20      	cmp	r3, #32
 800434a:	f040 8082 	bne.w	8004452 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_UART_Transmit+0x26>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07a      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x38>
 8004368:	2302      	movs	r3, #2
 800436a:	e073      	b.n	8004454 <HAL_UART_Transmit+0x120>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fd fad3 	bl	800192c <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d108      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e003      	b.n	80043bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043c4:	e02d      	b.n	8004422 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fbe6 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e039      	b.n	8004454 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f2:	b292      	uxth	r2, r2
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3302      	adds	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e008      	b.n	8004410 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cb      	bne.n	80043c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fbb2 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e005      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b08a      	sub	sp, #40	; 0x28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	431a      	orrs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4313      	orrs	r3, r2
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4ba4      	ldr	r3, [pc, #656]	; (800471c <UART_SetConfig+0x2c0>)
 800448c:	4013      	ands	r3, r2
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004494:	430b      	orrs	r3, r1
 8004496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a99      	ldr	r2, [pc, #612]	; (8004720 <UART_SetConfig+0x2c4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	4313      	orrs	r3, r2
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a90      	ldr	r2, [pc, #576]	; (8004724 <UART_SetConfig+0x2c8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d126      	bne.n	8004534 <UART_SetConfig+0xd8>
 80044e6:	4b90      	ldr	r3, [pc, #576]	; (8004728 <UART_SetConfig+0x2cc>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d81b      	bhi.n	800452c <UART_SetConfig+0xd0>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <UART_SetConfig+0xa0>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	0800451d 	.word	0x0800451d
 8004504:	08004515 	.word	0x08004515
 8004508:	08004525 	.word	0x08004525
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e116      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004514:	2302      	movs	r3, #2
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e112      	b.n	8004742 <UART_SetConfig+0x2e6>
 800451c:	2304      	movs	r3, #4
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e10e      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004524:	2308      	movs	r3, #8
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e10a      	b.n	8004742 <UART_SetConfig+0x2e6>
 800452c:	2310      	movs	r3, #16
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e106      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a7c      	ldr	r2, [pc, #496]	; (800472c <UART_SetConfig+0x2d0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d138      	bne.n	80045b0 <UART_SetConfig+0x154>
 800453e:	4b7a      	ldr	r3, [pc, #488]	; (8004728 <UART_SetConfig+0x2cc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d82d      	bhi.n	80045a8 <UART_SetConfig+0x14c>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0xf8>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004589 	.word	0x08004589
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080045a9 	.word	0x080045a9
 8004560:	080045a9 	.word	0x080045a9
 8004564:	08004599 	.word	0x08004599
 8004568:	080045a9 	.word	0x080045a9
 800456c:	080045a9 	.word	0x080045a9
 8004570:	080045a9 	.word	0x080045a9
 8004574:	08004591 	.word	0x08004591
 8004578:	080045a9 	.word	0x080045a9
 800457c:	080045a9 	.word	0x080045a9
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045a1 	.word	0x080045a1
 8004588:	2300      	movs	r3, #0
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e0d8      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004590:	2302      	movs	r3, #2
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	e0d4      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004598:	2304      	movs	r3, #4
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459e:	e0d0      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e0cc      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e0c8      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5e      	ldr	r2, [pc, #376]	; (8004730 <UART_SetConfig+0x2d4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d125      	bne.n	8004606 <UART_SetConfig+0x1aa>
 80045ba:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <UART_SetConfig+0x2cc>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d016      	beq.n	80045f6 <UART_SetConfig+0x19a>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d818      	bhi.n	80045fe <UART_SetConfig+0x1a2>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d00a      	beq.n	80045e6 <UART_SetConfig+0x18a>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d814      	bhi.n	80045fe <UART_SetConfig+0x1a2>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <UART_SetConfig+0x182>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d008      	beq.n	80045ee <UART_SetConfig+0x192>
 80045dc:	e00f      	b.n	80045fe <UART_SetConfig+0x1a2>
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e4:	e0ad      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045e6:	2302      	movs	r3, #2
 80045e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ec:	e0a9      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045ee:	2304      	movs	r3, #4
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f4:	e0a5      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045f6:	2308      	movs	r3, #8
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fc:	e0a1      	b.n	8004742 <UART_SetConfig+0x2e6>
 80045fe:	2310      	movs	r3, #16
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004604:	e09d      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a4a      	ldr	r2, [pc, #296]	; (8004734 <UART_SetConfig+0x2d8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d125      	bne.n	800465c <UART_SetConfig+0x200>
 8004610:	4b45      	ldr	r3, [pc, #276]	; (8004728 <UART_SetConfig+0x2cc>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800461a:	2bc0      	cmp	r3, #192	; 0xc0
 800461c:	d016      	beq.n	800464c <UART_SetConfig+0x1f0>
 800461e:	2bc0      	cmp	r3, #192	; 0xc0
 8004620:	d818      	bhi.n	8004654 <UART_SetConfig+0x1f8>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d00a      	beq.n	800463c <UART_SetConfig+0x1e0>
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d814      	bhi.n	8004654 <UART_SetConfig+0x1f8>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <UART_SetConfig+0x1d8>
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d008      	beq.n	8004644 <UART_SetConfig+0x1e8>
 8004632:	e00f      	b.n	8004654 <UART_SetConfig+0x1f8>
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e082      	b.n	8004742 <UART_SetConfig+0x2e6>
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e07e      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004644:	2304      	movs	r3, #4
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e07a      	b.n	8004742 <UART_SetConfig+0x2e6>
 800464c:	2308      	movs	r3, #8
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e076      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e072      	b.n	8004742 <UART_SetConfig+0x2e6>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a35      	ldr	r2, [pc, #212]	; (8004738 <UART_SetConfig+0x2dc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d12a      	bne.n	80046bc <UART_SetConfig+0x260>
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <UART_SetConfig+0x2cc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004674:	d01a      	beq.n	80046ac <UART_SetConfig+0x250>
 8004676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467a:	d81b      	bhi.n	80046b4 <UART_SetConfig+0x258>
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d00c      	beq.n	800469c <UART_SetConfig+0x240>
 8004682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004686:	d815      	bhi.n	80046b4 <UART_SetConfig+0x258>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <UART_SetConfig+0x238>
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d008      	beq.n	80046a4 <UART_SetConfig+0x248>
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x258>
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e052      	b.n	8004742 <UART_SetConfig+0x2e6>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e04e      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e04a      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e046      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e042      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <UART_SetConfig+0x2c4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d13a      	bne.n	800473c <UART_SetConfig+0x2e0>
 80046c6:	4b18      	ldr	r3, [pc, #96]	; (8004728 <UART_SetConfig+0x2cc>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d4:	d01a      	beq.n	800470c <UART_SetConfig+0x2b0>
 80046d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046da:	d81b      	bhi.n	8004714 <UART_SetConfig+0x2b8>
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e0:	d00c      	beq.n	80046fc <UART_SetConfig+0x2a0>
 80046e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e6:	d815      	bhi.n	8004714 <UART_SetConfig+0x2b8>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <UART_SetConfig+0x298>
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d008      	beq.n	8004704 <UART_SetConfig+0x2a8>
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x2b8>
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e022      	b.n	8004742 <UART_SetConfig+0x2e6>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e01e      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e01a      	b.n	8004742 <UART_SetConfig+0x2e6>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e016      	b.n	8004742 <UART_SetConfig+0x2e6>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e012      	b.n	8004742 <UART_SetConfig+0x2e6>
 800471c:	efff69f3 	.word	0xefff69f3
 8004720:	40008000 	.word	0x40008000
 8004724:	40013800 	.word	0x40013800
 8004728:	40021000 	.word	0x40021000
 800472c:	40004400 	.word	0x40004400
 8004730:	40004800 	.word	0x40004800
 8004734:	40004c00 	.word	0x40004c00
 8004738:	40005000 	.word	0x40005000
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a9f      	ldr	r2, [pc, #636]	; (80049c4 <UART_SetConfig+0x568>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d17a      	bne.n	8004842 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800474c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004750:	2b08      	cmp	r3, #8
 8004752:	d824      	bhi.n	800479e <UART_SetConfig+0x342>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <UART_SetConfig+0x300>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004781 	.word	0x08004781
 8004760:	0800479f 	.word	0x0800479f
 8004764:	08004789 	.word	0x08004789
 8004768:	0800479f 	.word	0x0800479f
 800476c:	0800478f 	.word	0x0800478f
 8004770:	0800479f 	.word	0x0800479f
 8004774:	0800479f 	.word	0x0800479f
 8004778:	0800479f 	.word	0x0800479f
 800477c:	08004797 	.word	0x08004797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7ff f834 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004784:	61f8      	str	r0, [r7, #28]
        break;
 8004786:	e010      	b.n	80047aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004788:	4b8f      	ldr	r3, [pc, #572]	; (80049c8 <UART_SetConfig+0x56c>)
 800478a:	61fb      	str	r3, [r7, #28]
        break;
 800478c:	e00d      	b.n	80047aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478e:	f7fe ff95 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8004792:	61f8      	str	r0, [r7, #28]
        break;
 8004794:	e009      	b.n	80047aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479a:	61fb      	str	r3, [r7, #28]
        break;
 800479c:	e005      	b.n	80047aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80fb 	beq.w	80049a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	4413      	add	r3, r2
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d305      	bcc.n	80047ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d903      	bls.n	80047d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047d4:	e0e8      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2200      	movs	r2, #0
 80047da:	461c      	mov	r4, r3
 80047dc:	4615      	mov	r5, r2
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	022b      	lsls	r3, r5, #8
 80047e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047ec:	0222      	lsls	r2, r4, #8
 80047ee:	68f9      	ldr	r1, [r7, #12]
 80047f0:	6849      	ldr	r1, [r1, #4]
 80047f2:	0849      	lsrs	r1, r1, #1
 80047f4:	2000      	movs	r0, #0
 80047f6:	4688      	mov	r8, r1
 80047f8:	4681      	mov	r9, r0
 80047fa:	eb12 0a08 	adds.w	sl, r2, r8
 80047fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004810:	4650      	mov	r0, sl
 8004812:	4659      	mov	r1, fp
 8004814:	f7fc f962 	bl	8000adc <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004826:	d308      	bcc.n	800483a <UART_SetConfig+0x3de>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d204      	bcs.n	800483a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e0b6      	b.n	80049a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004840:	e0b2      	b.n	80049a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484a:	d15e      	bne.n	800490a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800484c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004850:	2b08      	cmp	r3, #8
 8004852:	d828      	bhi.n	80048a6 <UART_SetConfig+0x44a>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0x400>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004881 	.word	0x08004881
 8004860:	08004889 	.word	0x08004889
 8004864:	08004891 	.word	0x08004891
 8004868:	080048a7 	.word	0x080048a7
 800486c:	08004897 	.word	0x08004897
 8004870:	080048a7 	.word	0x080048a7
 8004874:	080048a7 	.word	0x080048a7
 8004878:	080048a7 	.word	0x080048a7
 800487c:	0800489f 	.word	0x0800489f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7fe ffb4 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004884:	61f8      	str	r0, [r7, #28]
        break;
 8004886:	e014      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004888:	f7fe ffc6 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 800488c:	61f8      	str	r0, [r7, #28]
        break;
 800488e:	e010      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004890:	4b4d      	ldr	r3, [pc, #308]	; (80049c8 <UART_SetConfig+0x56c>)
 8004892:	61fb      	str	r3, [r7, #28]
        break;
 8004894:	e00d      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004896:	f7fe ff11 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800489a:	61f8      	str	r0, [r7, #28]
        break;
 800489c:	e009      	b.n	80048b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a2:	61fb      	str	r3, [r7, #28]
        break;
 80048a4:	e005      	b.n	80048b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d077      	beq.n	80049a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	005a      	lsls	r2, r3, #1
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d916      	bls.n	8004902 <UART_SetConfig+0x4a6>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d212      	bcs.n	8004902 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f023 030f 	bic.w	r3, r3, #15
 80048e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	8afa      	ldrh	r2, [r7, #22]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	e052      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004908:	e04e      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800490e:	2b08      	cmp	r3, #8
 8004910:	d827      	bhi.n	8004962 <UART_SetConfig+0x506>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x4bc>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe ff56 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004940:	61f8      	str	r0, [r7, #28]
        break;
 8004942:	e014      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe ff68 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 8004948:	61f8      	str	r0, [r7, #28]
        break;
 800494a:	e010      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <UART_SetConfig+0x56c>)
 800494e:	61fb      	str	r3, [r7, #28]
        break;
 8004950:	e00d      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7fe feb3 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8004956:	61f8      	str	r0, [r7, #28]
        break;
 8004958:	e009      	b.n	800496e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61fb      	str	r3, [r7, #28]
        break;
 8004960:	e005      	b.n	800496e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800496c:	bf00      	nop
    }

    if (pclk != 0U)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	085a      	lsrs	r2, r3, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	441a      	add	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	d909      	bls.n	80049a2 <UART_SetConfig+0x546>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d205      	bcs.n	80049a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	e002      	b.n	80049a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c2:	bf00      	nop
 80049c4:	40008000 	.word	0x40008000
 80049c8:	00f42400 	.word	0x00f42400

080049cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d10a      	bne.n	8004ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b20:	f7fc ff04 	bl	800192c <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d10e      	bne.n	8004b52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f82d 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e023      	b.n	8004b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d10e      	bne.n	8004b7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f817 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e00d      	b.n	8004b9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b09c      	sub	sp, #112	; 0x70
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb2:	e0a5      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bba:	f000 80a1 	beq.w	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fc feb5 	bl	800192c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d13e      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be8:	667b      	str	r3, [r7, #100]	; 0x64
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e6      	bne.n	8004bd4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3308      	adds	r3, #8
 8004c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e5      	bne.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e067      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d04f      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6e:	d147      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e6      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ccc:	623a      	str	r2, [r7, #32]
 8004cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69f9      	ldr	r1, [r7, #28]
 8004cd2:	6a3a      	ldr	r2, [r7, #32]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e5      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e010      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f43f af4a 	beq.w	8004bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3770      	adds	r7, #112	; 0x70
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <__errno>:
 8004d2c:	4b01      	ldr	r3, [pc, #4]	; (8004d34 <__errno+0x8>)
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000000c 	.word	0x2000000c

08004d38 <__libc_init_array>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	4d0d      	ldr	r5, [pc, #52]	; (8004d70 <__libc_init_array+0x38>)
 8004d3c:	4c0d      	ldr	r4, [pc, #52]	; (8004d74 <__libc_init_array+0x3c>)
 8004d3e:	1b64      	subs	r4, r4, r5
 8004d40:	10a4      	asrs	r4, r4, #2
 8004d42:	2600      	movs	r6, #0
 8004d44:	42a6      	cmp	r6, r4
 8004d46:	d109      	bne.n	8004d5c <__libc_init_array+0x24>
 8004d48:	4d0b      	ldr	r5, [pc, #44]	; (8004d78 <__libc_init_array+0x40>)
 8004d4a:	4c0c      	ldr	r4, [pc, #48]	; (8004d7c <__libc_init_array+0x44>)
 8004d4c:	f001 fa5e 	bl	800620c <_init>
 8004d50:	1b64      	subs	r4, r4, r5
 8004d52:	10a4      	asrs	r4, r4, #2
 8004d54:	2600      	movs	r6, #0
 8004d56:	42a6      	cmp	r6, r4
 8004d58:	d105      	bne.n	8004d66 <__libc_init_array+0x2e>
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
 8004d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d60:	4798      	blx	r3
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7ee      	b.n	8004d44 <__libc_init_array+0xc>
 8004d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6a:	4798      	blx	r3
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	e7f2      	b.n	8004d56 <__libc_init_array+0x1e>
 8004d70:	08006380 	.word	0x08006380
 8004d74:	08006380 	.word	0x08006380
 8004d78:	08006380 	.word	0x08006380
 8004d7c:	08006384 	.word	0x08006384

08004d80 <memset>:
 8004d80:	4402      	add	r2, r0
 8004d82:	4603      	mov	r3, r0
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <iprintf>:
 8004d90:	b40f      	push	{r0, r1, r2, r3}
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <iprintf+0x2c>)
 8004d94:	b513      	push	{r0, r1, r4, lr}
 8004d96:	681c      	ldr	r4, [r3, #0]
 8004d98:	b124      	cbz	r4, 8004da4 <iprintf+0x14>
 8004d9a:	69a3      	ldr	r3, [r4, #24]
 8004d9c:	b913      	cbnz	r3, 8004da4 <iprintf+0x14>
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 fa94 	bl	80052cc <__sinit>
 8004da4:	ab05      	add	r3, sp, #20
 8004da6:	9a04      	ldr	r2, [sp, #16]
 8004da8:	68a1      	ldr	r1, [r4, #8]
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 fdf9 	bl	80059a4 <_vfiprintf_r>
 8004db2:	b002      	add	sp, #8
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <putchar>:
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <putchar+0x28>)
 8004dc2:	b513      	push	{r0, r1, r4, lr}
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	b134      	cbz	r4, 8004dd8 <putchar+0x18>
 8004dca:	69a3      	ldr	r3, [r4, #24]
 8004dcc:	b923      	cbnz	r3, 8004dd8 <putchar+0x18>
 8004dce:	9001      	str	r0, [sp, #4]
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 fa7b 	bl	80052cc <__sinit>
 8004dd6:	9901      	ldr	r1, [sp, #4]
 8004dd8:	68a2      	ldr	r2, [r4, #8]
 8004dda:	4620      	mov	r0, r4
 8004ddc:	b002      	add	sp, #8
 8004dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de2:	f001 b8a3 	b.w	8005f2c <_putc_r>
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c

08004dec <_puts_r>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	460e      	mov	r6, r1
 8004df0:	4605      	mov	r5, r0
 8004df2:	b118      	cbz	r0, 8004dfc <_puts_r+0x10>
 8004df4:	6983      	ldr	r3, [r0, #24]
 8004df6:	b90b      	cbnz	r3, 8004dfc <_puts_r+0x10>
 8004df8:	f000 fa68 	bl	80052cc <__sinit>
 8004dfc:	69ab      	ldr	r3, [r5, #24]
 8004dfe:	68ac      	ldr	r4, [r5, #8]
 8004e00:	b913      	cbnz	r3, 8004e08 <_puts_r+0x1c>
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 fa62 	bl	80052cc <__sinit>
 8004e08:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <_puts_r+0xd0>)
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	d120      	bne.n	8004e50 <_puts_r+0x64>
 8004e0e:	686c      	ldr	r4, [r5, #4]
 8004e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e12:	07db      	lsls	r3, r3, #31
 8004e14:	d405      	bmi.n	8004e22 <_puts_r+0x36>
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	0598      	lsls	r0, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_puts_r+0x36>
 8004e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e1e:	f000 faf3 	bl	8005408 <__retarget_lock_acquire_recursive>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	0719      	lsls	r1, r3, #28
 8004e26:	d51d      	bpl.n	8004e64 <_puts_r+0x78>
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	b1db      	cbz	r3, 8004e64 <_puts_r+0x78>
 8004e2c:	3e01      	subs	r6, #1
 8004e2e:	68a3      	ldr	r3, [r4, #8]
 8004e30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60a3      	str	r3, [r4, #8]
 8004e38:	bb39      	cbnz	r1, 8004e8a <_puts_r+0x9e>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da38      	bge.n	8004eb0 <_puts_r+0xc4>
 8004e3e:	4622      	mov	r2, r4
 8004e40:	210a      	movs	r1, #10
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 f868 	bl	8004f18 <__swbuf_r>
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d011      	beq.n	8004e70 <_puts_r+0x84>
 8004e4c:	250a      	movs	r5, #10
 8004e4e:	e011      	b.n	8004e74 <_puts_r+0x88>
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <_puts_r+0xd4>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d101      	bne.n	8004e5a <_puts_r+0x6e>
 8004e56:	68ac      	ldr	r4, [r5, #8]
 8004e58:	e7da      	b.n	8004e10 <_puts_r+0x24>
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <_puts_r+0xd8>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	bf08      	it	eq
 8004e60:	68ec      	ldreq	r4, [r5, #12]
 8004e62:	e7d5      	b.n	8004e10 <_puts_r+0x24>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f8a8 	bl	8004fbc <__swsetup_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d0dd      	beq.n	8004e2c <_puts_r+0x40>
 8004e70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e76:	07da      	lsls	r2, r3, #31
 8004e78:	d405      	bmi.n	8004e86 <_puts_r+0x9a>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <_puts_r+0x9a>
 8004e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e82:	f000 fac2 	bl	800540a <__retarget_lock_release_recursive>
 8004e86:	4628      	mov	r0, r5
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da04      	bge.n	8004e98 <_puts_r+0xac>
 8004e8e:	69a2      	ldr	r2, [r4, #24]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	dc06      	bgt.n	8004ea2 <_puts_r+0xb6>
 8004e94:	290a      	cmp	r1, #10
 8004e96:	d004      	beq.n	8004ea2 <_puts_r+0xb6>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	6022      	str	r2, [r4, #0]
 8004e9e:	7019      	strb	r1, [r3, #0]
 8004ea0:	e7c5      	b.n	8004e2e <_puts_r+0x42>
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 f837 	bl	8004f18 <__swbuf_r>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d1bf      	bne.n	8004e2e <_puts_r+0x42>
 8004eae:	e7df      	b.n	8004e70 <_puts_r+0x84>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	250a      	movs	r5, #10
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	701d      	strb	r5, [r3, #0]
 8004eba:	e7db      	b.n	8004e74 <_puts_r+0x88>
 8004ebc:	08006304 	.word	0x08006304
 8004ec0:	08006324 	.word	0x08006324
 8004ec4:	080062e4 	.word	0x080062e4

08004ec8 <puts>:
 8004ec8:	4b02      	ldr	r3, [pc, #8]	; (8004ed4 <puts+0xc>)
 8004eca:	4601      	mov	r1, r0
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f7ff bf8d 	b.w	8004dec <_puts_r>
 8004ed2:	bf00      	nop
 8004ed4:	2000000c 	.word	0x2000000c

08004ed8 <siprintf>:
 8004ed8:	b40e      	push	{r1, r2, r3}
 8004eda:	b500      	push	{lr}
 8004edc:	b09c      	sub	sp, #112	; 0x70
 8004ede:	ab1d      	add	r3, sp, #116	; 0x74
 8004ee0:	9002      	str	r0, [sp, #8]
 8004ee2:	9006      	str	r0, [sp, #24]
 8004ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ee8:	4809      	ldr	r0, [pc, #36]	; (8004f10 <siprintf+0x38>)
 8004eea:	9107      	str	r1, [sp, #28]
 8004eec:	9104      	str	r1, [sp, #16]
 8004eee:	4909      	ldr	r1, [pc, #36]	; (8004f14 <siprintf+0x3c>)
 8004ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef4:	9105      	str	r1, [sp, #20]
 8004ef6:	6800      	ldr	r0, [r0, #0]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	a902      	add	r1, sp, #8
 8004efc:	f000 fc28 	bl	8005750 <_svfiprintf_r>
 8004f00:	9b02      	ldr	r3, [sp, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	b01c      	add	sp, #112	; 0x70
 8004f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f0c:	b003      	add	sp, #12
 8004f0e:	4770      	bx	lr
 8004f10:	2000000c 	.word	0x2000000c
 8004f14:	ffff0208 	.word	0xffff0208

08004f18 <__swbuf_r>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	460e      	mov	r6, r1
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	4605      	mov	r5, r0
 8004f20:	b118      	cbz	r0, 8004f2a <__swbuf_r+0x12>
 8004f22:	6983      	ldr	r3, [r0, #24]
 8004f24:	b90b      	cbnz	r3, 8004f2a <__swbuf_r+0x12>
 8004f26:	f000 f9d1 	bl	80052cc <__sinit>
 8004f2a:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <__swbuf_r+0x98>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d12b      	bne.n	8004f88 <__swbuf_r+0x70>
 8004f30:	686c      	ldr	r4, [r5, #4]
 8004f32:	69a3      	ldr	r3, [r4, #24]
 8004f34:	60a3      	str	r3, [r4, #8]
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	071a      	lsls	r2, r3, #28
 8004f3a:	d52f      	bpl.n	8004f9c <__swbuf_r+0x84>
 8004f3c:	6923      	ldr	r3, [r4, #16]
 8004f3e:	b36b      	cbz	r3, 8004f9c <__swbuf_r+0x84>
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	1ac0      	subs	r0, r0, r3
 8004f46:	6963      	ldr	r3, [r4, #20]
 8004f48:	b2f6      	uxtb	r6, r6
 8004f4a:	4283      	cmp	r3, r0
 8004f4c:	4637      	mov	r7, r6
 8004f4e:	dc04      	bgt.n	8004f5a <__swbuf_r+0x42>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 f926 	bl	80051a4 <_fflush_r>
 8004f58:	bb30      	cbnz	r0, 8004fa8 <__swbuf_r+0x90>
 8004f5a:	68a3      	ldr	r3, [r4, #8]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	60a3      	str	r3, [r4, #8]
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	6022      	str	r2, [r4, #0]
 8004f66:	701e      	strb	r6, [r3, #0]
 8004f68:	6963      	ldr	r3, [r4, #20]
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	4283      	cmp	r3, r0
 8004f6e:	d004      	beq.n	8004f7a <__swbuf_r+0x62>
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	07db      	lsls	r3, r3, #31
 8004f74:	d506      	bpl.n	8004f84 <__swbuf_r+0x6c>
 8004f76:	2e0a      	cmp	r6, #10
 8004f78:	d104      	bne.n	8004f84 <__swbuf_r+0x6c>
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 f911 	bl	80051a4 <_fflush_r>
 8004f82:	b988      	cbnz	r0, 8004fa8 <__swbuf_r+0x90>
 8004f84:	4638      	mov	r0, r7
 8004f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <__swbuf_r+0x9c>)
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	d101      	bne.n	8004f92 <__swbuf_r+0x7a>
 8004f8e:	68ac      	ldr	r4, [r5, #8]
 8004f90:	e7cf      	b.n	8004f32 <__swbuf_r+0x1a>
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <__swbuf_r+0xa0>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	bf08      	it	eq
 8004f98:	68ec      	ldreq	r4, [r5, #12]
 8004f9a:	e7ca      	b.n	8004f32 <__swbuf_r+0x1a>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 f80c 	bl	8004fbc <__swsetup_r>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d0cb      	beq.n	8004f40 <__swbuf_r+0x28>
 8004fa8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004fac:	e7ea      	b.n	8004f84 <__swbuf_r+0x6c>
 8004fae:	bf00      	nop
 8004fb0:	08006304 	.word	0x08006304
 8004fb4:	08006324 	.word	0x08006324
 8004fb8:	080062e4 	.word	0x080062e4

08004fbc <__swsetup_r>:
 8004fbc:	4b32      	ldr	r3, [pc, #200]	; (8005088 <__swsetup_r+0xcc>)
 8004fbe:	b570      	push	{r4, r5, r6, lr}
 8004fc0:	681d      	ldr	r5, [r3, #0]
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	b125      	cbz	r5, 8004fd2 <__swsetup_r+0x16>
 8004fc8:	69ab      	ldr	r3, [r5, #24]
 8004fca:	b913      	cbnz	r3, 8004fd2 <__swsetup_r+0x16>
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f97d 	bl	80052cc <__sinit>
 8004fd2:	4b2e      	ldr	r3, [pc, #184]	; (800508c <__swsetup_r+0xd0>)
 8004fd4:	429c      	cmp	r4, r3
 8004fd6:	d10f      	bne.n	8004ff8 <__swsetup_r+0x3c>
 8004fd8:	686c      	ldr	r4, [r5, #4]
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fe0:	0719      	lsls	r1, r3, #28
 8004fe2:	d42c      	bmi.n	800503e <__swsetup_r+0x82>
 8004fe4:	06dd      	lsls	r5, r3, #27
 8004fe6:	d411      	bmi.n	800500c <__swsetup_r+0x50>
 8004fe8:	2309      	movs	r3, #9
 8004fea:	6033      	str	r3, [r6, #0]
 8004fec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ff6:	e03e      	b.n	8005076 <__swsetup_r+0xba>
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <__swsetup_r+0xd4>)
 8004ffa:	429c      	cmp	r4, r3
 8004ffc:	d101      	bne.n	8005002 <__swsetup_r+0x46>
 8004ffe:	68ac      	ldr	r4, [r5, #8]
 8005000:	e7eb      	b.n	8004fda <__swsetup_r+0x1e>
 8005002:	4b24      	ldr	r3, [pc, #144]	; (8005094 <__swsetup_r+0xd8>)
 8005004:	429c      	cmp	r4, r3
 8005006:	bf08      	it	eq
 8005008:	68ec      	ldreq	r4, [r5, #12]
 800500a:	e7e6      	b.n	8004fda <__swsetup_r+0x1e>
 800500c:	0758      	lsls	r0, r3, #29
 800500e:	d512      	bpl.n	8005036 <__swsetup_r+0x7a>
 8005010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005012:	b141      	cbz	r1, 8005026 <__swsetup_r+0x6a>
 8005014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005018:	4299      	cmp	r1, r3
 800501a:	d002      	beq.n	8005022 <__swsetup_r+0x66>
 800501c:	4630      	mov	r0, r6
 800501e:	f000 fa5b 	bl	80054d8 <_free_r>
 8005022:	2300      	movs	r3, #0
 8005024:	6363      	str	r3, [r4, #52]	; 0x34
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800502c:	81a3      	strh	r3, [r4, #12]
 800502e:	2300      	movs	r3, #0
 8005030:	6063      	str	r3, [r4, #4]
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f043 0308 	orr.w	r3, r3, #8
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	b94b      	cbnz	r3, 8005056 <__swsetup_r+0x9a>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504c:	d003      	beq.n	8005056 <__swsetup_r+0x9a>
 800504e:	4621      	mov	r1, r4
 8005050:	4630      	mov	r0, r6
 8005052:	f000 fa01 	bl	8005458 <__smakebuf_r>
 8005056:	89a0      	ldrh	r0, [r4, #12]
 8005058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800505c:	f010 0301 	ands.w	r3, r0, #1
 8005060:	d00a      	beq.n	8005078 <__swsetup_r+0xbc>
 8005062:	2300      	movs	r3, #0
 8005064:	60a3      	str	r3, [r4, #8]
 8005066:	6963      	ldr	r3, [r4, #20]
 8005068:	425b      	negs	r3, r3
 800506a:	61a3      	str	r3, [r4, #24]
 800506c:	6923      	ldr	r3, [r4, #16]
 800506e:	b943      	cbnz	r3, 8005082 <__swsetup_r+0xc6>
 8005070:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005074:	d1ba      	bne.n	8004fec <__swsetup_r+0x30>
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	0781      	lsls	r1, r0, #30
 800507a:	bf58      	it	pl
 800507c:	6963      	ldrpl	r3, [r4, #20]
 800507e:	60a3      	str	r3, [r4, #8]
 8005080:	e7f4      	b.n	800506c <__swsetup_r+0xb0>
 8005082:	2000      	movs	r0, #0
 8005084:	e7f7      	b.n	8005076 <__swsetup_r+0xba>
 8005086:	bf00      	nop
 8005088:	2000000c 	.word	0x2000000c
 800508c:	08006304 	.word	0x08006304
 8005090:	08006324 	.word	0x08006324
 8005094:	080062e4 	.word	0x080062e4

08005098 <__sflush_r>:
 8005098:	898a      	ldrh	r2, [r1, #12]
 800509a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509e:	4605      	mov	r5, r0
 80050a0:	0710      	lsls	r0, r2, #28
 80050a2:	460c      	mov	r4, r1
 80050a4:	d458      	bmi.n	8005158 <__sflush_r+0xc0>
 80050a6:	684b      	ldr	r3, [r1, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dc05      	bgt.n	80050b8 <__sflush_r+0x20>
 80050ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	dc02      	bgt.n	80050b8 <__sflush_r+0x20>
 80050b2:	2000      	movs	r0, #0
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ba:	2e00      	cmp	r6, #0
 80050bc:	d0f9      	beq.n	80050b2 <__sflush_r+0x1a>
 80050be:	2300      	movs	r3, #0
 80050c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050c4:	682f      	ldr	r7, [r5, #0]
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	d032      	beq.n	8005130 <__sflush_r+0x98>
 80050ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	075a      	lsls	r2, r3, #29
 80050d0:	d505      	bpl.n	80050de <__sflush_r+0x46>
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	1ac0      	subs	r0, r0, r3
 80050d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050d8:	b10b      	cbz	r3, 80050de <__sflush_r+0x46>
 80050da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050dc:	1ac0      	subs	r0, r0, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	4602      	mov	r2, r0
 80050e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050e4:	6a21      	ldr	r1, [r4, #32]
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b0      	blx	r6
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	d106      	bne.n	80050fe <__sflush_r+0x66>
 80050f0:	6829      	ldr	r1, [r5, #0]
 80050f2:	291d      	cmp	r1, #29
 80050f4:	d82c      	bhi.n	8005150 <__sflush_r+0xb8>
 80050f6:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <__sflush_r+0x108>)
 80050f8:	40ca      	lsrs	r2, r1
 80050fa:	07d6      	lsls	r6, r2, #31
 80050fc:	d528      	bpl.n	8005150 <__sflush_r+0xb8>
 80050fe:	2200      	movs	r2, #0
 8005100:	6062      	str	r2, [r4, #4]
 8005102:	04d9      	lsls	r1, r3, #19
 8005104:	6922      	ldr	r2, [r4, #16]
 8005106:	6022      	str	r2, [r4, #0]
 8005108:	d504      	bpl.n	8005114 <__sflush_r+0x7c>
 800510a:	1c42      	adds	r2, r0, #1
 800510c:	d101      	bne.n	8005112 <__sflush_r+0x7a>
 800510e:	682b      	ldr	r3, [r5, #0]
 8005110:	b903      	cbnz	r3, 8005114 <__sflush_r+0x7c>
 8005112:	6560      	str	r0, [r4, #84]	; 0x54
 8005114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005116:	602f      	str	r7, [r5, #0]
 8005118:	2900      	cmp	r1, #0
 800511a:	d0ca      	beq.n	80050b2 <__sflush_r+0x1a>
 800511c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005120:	4299      	cmp	r1, r3
 8005122:	d002      	beq.n	800512a <__sflush_r+0x92>
 8005124:	4628      	mov	r0, r5
 8005126:	f000 f9d7 	bl	80054d8 <_free_r>
 800512a:	2000      	movs	r0, #0
 800512c:	6360      	str	r0, [r4, #52]	; 0x34
 800512e:	e7c1      	b.n	80050b4 <__sflush_r+0x1c>
 8005130:	6a21      	ldr	r1, [r4, #32]
 8005132:	2301      	movs	r3, #1
 8005134:	4628      	mov	r0, r5
 8005136:	47b0      	blx	r6
 8005138:	1c41      	adds	r1, r0, #1
 800513a:	d1c7      	bne.n	80050cc <__sflush_r+0x34>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0c4      	beq.n	80050cc <__sflush_r+0x34>
 8005142:	2b1d      	cmp	r3, #29
 8005144:	d001      	beq.n	800514a <__sflush_r+0xb2>
 8005146:	2b16      	cmp	r3, #22
 8005148:	d101      	bne.n	800514e <__sflush_r+0xb6>
 800514a:	602f      	str	r7, [r5, #0]
 800514c:	e7b1      	b.n	80050b2 <__sflush_r+0x1a>
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	e7ad      	b.n	80050b4 <__sflush_r+0x1c>
 8005158:	690f      	ldr	r7, [r1, #16]
 800515a:	2f00      	cmp	r7, #0
 800515c:	d0a9      	beq.n	80050b2 <__sflush_r+0x1a>
 800515e:	0793      	lsls	r3, r2, #30
 8005160:	680e      	ldr	r6, [r1, #0]
 8005162:	bf08      	it	eq
 8005164:	694b      	ldreq	r3, [r1, #20]
 8005166:	600f      	str	r7, [r1, #0]
 8005168:	bf18      	it	ne
 800516a:	2300      	movne	r3, #0
 800516c:	eba6 0807 	sub.w	r8, r6, r7
 8005170:	608b      	str	r3, [r1, #8]
 8005172:	f1b8 0f00 	cmp.w	r8, #0
 8005176:	dd9c      	ble.n	80050b2 <__sflush_r+0x1a>
 8005178:	6a21      	ldr	r1, [r4, #32]
 800517a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800517c:	4643      	mov	r3, r8
 800517e:	463a      	mov	r2, r7
 8005180:	4628      	mov	r0, r5
 8005182:	47b0      	blx	r6
 8005184:	2800      	cmp	r0, #0
 8005186:	dc06      	bgt.n	8005196 <__sflush_r+0xfe>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800518e:	81a3      	strh	r3, [r4, #12]
 8005190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005194:	e78e      	b.n	80050b4 <__sflush_r+0x1c>
 8005196:	4407      	add	r7, r0
 8005198:	eba8 0800 	sub.w	r8, r8, r0
 800519c:	e7e9      	b.n	8005172 <__sflush_r+0xda>
 800519e:	bf00      	nop
 80051a0:	20400001 	.word	0x20400001

080051a4 <_fflush_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	690b      	ldr	r3, [r1, #16]
 80051a8:	4605      	mov	r5, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b913      	cbnz	r3, 80051b4 <_fflush_r+0x10>
 80051ae:	2500      	movs	r5, #0
 80051b0:	4628      	mov	r0, r5
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	b118      	cbz	r0, 80051be <_fflush_r+0x1a>
 80051b6:	6983      	ldr	r3, [r0, #24]
 80051b8:	b90b      	cbnz	r3, 80051be <_fflush_r+0x1a>
 80051ba:	f000 f887 	bl	80052cc <__sinit>
 80051be:	4b14      	ldr	r3, [pc, #80]	; (8005210 <_fflush_r+0x6c>)
 80051c0:	429c      	cmp	r4, r3
 80051c2:	d11b      	bne.n	80051fc <_fflush_r+0x58>
 80051c4:	686c      	ldr	r4, [r5, #4]
 80051c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0ef      	beq.n	80051ae <_fflush_r+0xa>
 80051ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051d0:	07d0      	lsls	r0, r2, #31
 80051d2:	d404      	bmi.n	80051de <_fflush_r+0x3a>
 80051d4:	0599      	lsls	r1, r3, #22
 80051d6:	d402      	bmi.n	80051de <_fflush_r+0x3a>
 80051d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051da:	f000 f915 	bl	8005408 <__retarget_lock_acquire_recursive>
 80051de:	4628      	mov	r0, r5
 80051e0:	4621      	mov	r1, r4
 80051e2:	f7ff ff59 	bl	8005098 <__sflush_r>
 80051e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051e8:	07da      	lsls	r2, r3, #31
 80051ea:	4605      	mov	r5, r0
 80051ec:	d4e0      	bmi.n	80051b0 <_fflush_r+0xc>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	059b      	lsls	r3, r3, #22
 80051f2:	d4dd      	bmi.n	80051b0 <_fflush_r+0xc>
 80051f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051f6:	f000 f908 	bl	800540a <__retarget_lock_release_recursive>
 80051fa:	e7d9      	b.n	80051b0 <_fflush_r+0xc>
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <_fflush_r+0x70>)
 80051fe:	429c      	cmp	r4, r3
 8005200:	d101      	bne.n	8005206 <_fflush_r+0x62>
 8005202:	68ac      	ldr	r4, [r5, #8]
 8005204:	e7df      	b.n	80051c6 <_fflush_r+0x22>
 8005206:	4b04      	ldr	r3, [pc, #16]	; (8005218 <_fflush_r+0x74>)
 8005208:	429c      	cmp	r4, r3
 800520a:	bf08      	it	eq
 800520c:	68ec      	ldreq	r4, [r5, #12]
 800520e:	e7da      	b.n	80051c6 <_fflush_r+0x22>
 8005210:	08006304 	.word	0x08006304
 8005214:	08006324 	.word	0x08006324
 8005218:	080062e4 	.word	0x080062e4

0800521c <std>:
 800521c:	2300      	movs	r3, #0
 800521e:	b510      	push	{r4, lr}
 8005220:	4604      	mov	r4, r0
 8005222:	e9c0 3300 	strd	r3, r3, [r0]
 8005226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800522a:	6083      	str	r3, [r0, #8]
 800522c:	8181      	strh	r1, [r0, #12]
 800522e:	6643      	str	r3, [r0, #100]	; 0x64
 8005230:	81c2      	strh	r2, [r0, #14]
 8005232:	6183      	str	r3, [r0, #24]
 8005234:	4619      	mov	r1, r3
 8005236:	2208      	movs	r2, #8
 8005238:	305c      	adds	r0, #92	; 0x5c
 800523a:	f7ff fda1 	bl	8004d80 <memset>
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <std+0x38>)
 8005240:	6263      	str	r3, [r4, #36]	; 0x24
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <std+0x3c>)
 8005244:	62a3      	str	r3, [r4, #40]	; 0x28
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <std+0x40>)
 8005248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <std+0x44>)
 800524c:	6224      	str	r4, [r4, #32]
 800524e:	6323      	str	r3, [r4, #48]	; 0x30
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	08005fdd 	.word	0x08005fdd
 8005258:	08005fff 	.word	0x08005fff
 800525c:	08006037 	.word	0x08006037
 8005260:	0800605b 	.word	0x0800605b

08005264 <_cleanup_r>:
 8005264:	4901      	ldr	r1, [pc, #4]	; (800526c <_cleanup_r+0x8>)
 8005266:	f000 b8af 	b.w	80053c8 <_fwalk_reent>
 800526a:	bf00      	nop
 800526c:	080051a5 	.word	0x080051a5

08005270 <__sfmoreglue>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	2268      	movs	r2, #104	; 0x68
 8005274:	1e4d      	subs	r5, r1, #1
 8005276:	4355      	muls	r5, r2
 8005278:	460e      	mov	r6, r1
 800527a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800527e:	f000 f997 	bl	80055b0 <_malloc_r>
 8005282:	4604      	mov	r4, r0
 8005284:	b140      	cbz	r0, 8005298 <__sfmoreglue+0x28>
 8005286:	2100      	movs	r1, #0
 8005288:	e9c0 1600 	strd	r1, r6, [r0]
 800528c:	300c      	adds	r0, #12
 800528e:	60a0      	str	r0, [r4, #8]
 8005290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005294:	f7ff fd74 	bl	8004d80 <memset>
 8005298:	4620      	mov	r0, r4
 800529a:	bd70      	pop	{r4, r5, r6, pc}

0800529c <__sfp_lock_acquire>:
 800529c:	4801      	ldr	r0, [pc, #4]	; (80052a4 <__sfp_lock_acquire+0x8>)
 800529e:	f000 b8b3 	b.w	8005408 <__retarget_lock_acquire_recursive>
 80052a2:	bf00      	nop
 80052a4:	20000171 	.word	0x20000171

080052a8 <__sfp_lock_release>:
 80052a8:	4801      	ldr	r0, [pc, #4]	; (80052b0 <__sfp_lock_release+0x8>)
 80052aa:	f000 b8ae 	b.w	800540a <__retarget_lock_release_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000171 	.word	0x20000171

080052b4 <__sinit_lock_acquire>:
 80052b4:	4801      	ldr	r0, [pc, #4]	; (80052bc <__sinit_lock_acquire+0x8>)
 80052b6:	f000 b8a7 	b.w	8005408 <__retarget_lock_acquire_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000172 	.word	0x20000172

080052c0 <__sinit_lock_release>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__sinit_lock_release+0x8>)
 80052c2:	f000 b8a2 	b.w	800540a <__retarget_lock_release_recursive>
 80052c6:	bf00      	nop
 80052c8:	20000172 	.word	0x20000172

080052cc <__sinit>:
 80052cc:	b510      	push	{r4, lr}
 80052ce:	4604      	mov	r4, r0
 80052d0:	f7ff fff0 	bl	80052b4 <__sinit_lock_acquire>
 80052d4:	69a3      	ldr	r3, [r4, #24]
 80052d6:	b11b      	cbz	r3, 80052e0 <__sinit+0x14>
 80052d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052dc:	f7ff bff0 	b.w	80052c0 <__sinit_lock_release>
 80052e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052e4:	6523      	str	r3, [r4, #80]	; 0x50
 80052e6:	4b13      	ldr	r3, [pc, #76]	; (8005334 <__sinit+0x68>)
 80052e8:	4a13      	ldr	r2, [pc, #76]	; (8005338 <__sinit+0x6c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	bf04      	itt	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	61a3      	streq	r3, [r4, #24]
 80052f6:	4620      	mov	r0, r4
 80052f8:	f000 f820 	bl	800533c <__sfp>
 80052fc:	6060      	str	r0, [r4, #4]
 80052fe:	4620      	mov	r0, r4
 8005300:	f000 f81c 	bl	800533c <__sfp>
 8005304:	60a0      	str	r0, [r4, #8]
 8005306:	4620      	mov	r0, r4
 8005308:	f000 f818 	bl	800533c <__sfp>
 800530c:	2200      	movs	r2, #0
 800530e:	60e0      	str	r0, [r4, #12]
 8005310:	2104      	movs	r1, #4
 8005312:	6860      	ldr	r0, [r4, #4]
 8005314:	f7ff ff82 	bl	800521c <std>
 8005318:	68a0      	ldr	r0, [r4, #8]
 800531a:	2201      	movs	r2, #1
 800531c:	2109      	movs	r1, #9
 800531e:	f7ff ff7d 	bl	800521c <std>
 8005322:	68e0      	ldr	r0, [r4, #12]
 8005324:	2202      	movs	r2, #2
 8005326:	2112      	movs	r1, #18
 8005328:	f7ff ff78 	bl	800521c <std>
 800532c:	2301      	movs	r3, #1
 800532e:	61a3      	str	r3, [r4, #24]
 8005330:	e7d2      	b.n	80052d8 <__sinit+0xc>
 8005332:	bf00      	nop
 8005334:	080062e0 	.word	0x080062e0
 8005338:	08005265 	.word	0x08005265

0800533c <__sfp>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	4607      	mov	r7, r0
 8005340:	f7ff ffac 	bl	800529c <__sfp_lock_acquire>
 8005344:	4b1e      	ldr	r3, [pc, #120]	; (80053c0 <__sfp+0x84>)
 8005346:	681e      	ldr	r6, [r3, #0]
 8005348:	69b3      	ldr	r3, [r6, #24]
 800534a:	b913      	cbnz	r3, 8005352 <__sfp+0x16>
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff ffbd 	bl	80052cc <__sinit>
 8005352:	3648      	adds	r6, #72	; 0x48
 8005354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005358:	3b01      	subs	r3, #1
 800535a:	d503      	bpl.n	8005364 <__sfp+0x28>
 800535c:	6833      	ldr	r3, [r6, #0]
 800535e:	b30b      	cbz	r3, 80053a4 <__sfp+0x68>
 8005360:	6836      	ldr	r6, [r6, #0]
 8005362:	e7f7      	b.n	8005354 <__sfp+0x18>
 8005364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005368:	b9d5      	cbnz	r5, 80053a0 <__sfp+0x64>
 800536a:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <__sfp+0x88>)
 800536c:	60e3      	str	r3, [r4, #12]
 800536e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005372:	6665      	str	r5, [r4, #100]	; 0x64
 8005374:	f000 f847 	bl	8005406 <__retarget_lock_init_recursive>
 8005378:	f7ff ff96 	bl	80052a8 <__sfp_lock_release>
 800537c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005380:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005384:	6025      	str	r5, [r4, #0]
 8005386:	61a5      	str	r5, [r4, #24]
 8005388:	2208      	movs	r2, #8
 800538a:	4629      	mov	r1, r5
 800538c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005390:	f7ff fcf6 	bl	8004d80 <memset>
 8005394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800539c:	4620      	mov	r0, r4
 800539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a0:	3468      	adds	r4, #104	; 0x68
 80053a2:	e7d9      	b.n	8005358 <__sfp+0x1c>
 80053a4:	2104      	movs	r1, #4
 80053a6:	4638      	mov	r0, r7
 80053a8:	f7ff ff62 	bl	8005270 <__sfmoreglue>
 80053ac:	4604      	mov	r4, r0
 80053ae:	6030      	str	r0, [r6, #0]
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d1d5      	bne.n	8005360 <__sfp+0x24>
 80053b4:	f7ff ff78 	bl	80052a8 <__sfp_lock_release>
 80053b8:	230c      	movs	r3, #12
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	e7ee      	b.n	800539c <__sfp+0x60>
 80053be:	bf00      	nop
 80053c0:	080062e0 	.word	0x080062e0
 80053c4:	ffff0001 	.word	0xffff0001

080053c8 <_fwalk_reent>:
 80053c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053cc:	4606      	mov	r6, r0
 80053ce:	4688      	mov	r8, r1
 80053d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053d4:	2700      	movs	r7, #0
 80053d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053da:	f1b9 0901 	subs.w	r9, r9, #1
 80053de:	d505      	bpl.n	80053ec <_fwalk_reent+0x24>
 80053e0:	6824      	ldr	r4, [r4, #0]
 80053e2:	2c00      	cmp	r4, #0
 80053e4:	d1f7      	bne.n	80053d6 <_fwalk_reent+0xe>
 80053e6:	4638      	mov	r0, r7
 80053e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ec:	89ab      	ldrh	r3, [r5, #12]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d907      	bls.n	8005402 <_fwalk_reent+0x3a>
 80053f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053f6:	3301      	adds	r3, #1
 80053f8:	d003      	beq.n	8005402 <_fwalk_reent+0x3a>
 80053fa:	4629      	mov	r1, r5
 80053fc:	4630      	mov	r0, r6
 80053fe:	47c0      	blx	r8
 8005400:	4307      	orrs	r7, r0
 8005402:	3568      	adds	r5, #104	; 0x68
 8005404:	e7e9      	b.n	80053da <_fwalk_reent+0x12>

08005406 <__retarget_lock_init_recursive>:
 8005406:	4770      	bx	lr

08005408 <__retarget_lock_acquire_recursive>:
 8005408:	4770      	bx	lr

0800540a <__retarget_lock_release_recursive>:
 800540a:	4770      	bx	lr

0800540c <__swhatbuf_r>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	460e      	mov	r6, r1
 8005410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005414:	2900      	cmp	r1, #0
 8005416:	b096      	sub	sp, #88	; 0x58
 8005418:	4614      	mov	r4, r2
 800541a:	461d      	mov	r5, r3
 800541c:	da08      	bge.n	8005430 <__swhatbuf_r+0x24>
 800541e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	602a      	str	r2, [r5, #0]
 8005426:	061a      	lsls	r2, r3, #24
 8005428:	d410      	bmi.n	800544c <__swhatbuf_r+0x40>
 800542a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800542e:	e00e      	b.n	800544e <__swhatbuf_r+0x42>
 8005430:	466a      	mov	r2, sp
 8005432:	f000 fe39 	bl	80060a8 <_fstat_r>
 8005436:	2800      	cmp	r0, #0
 8005438:	dbf1      	blt.n	800541e <__swhatbuf_r+0x12>
 800543a:	9a01      	ldr	r2, [sp, #4]
 800543c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005440:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005444:	425a      	negs	r2, r3
 8005446:	415a      	adcs	r2, r3
 8005448:	602a      	str	r2, [r5, #0]
 800544a:	e7ee      	b.n	800542a <__swhatbuf_r+0x1e>
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	2000      	movs	r0, #0
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	b016      	add	sp, #88	; 0x58
 8005454:	bd70      	pop	{r4, r5, r6, pc}
	...

08005458 <__smakebuf_r>:
 8005458:	898b      	ldrh	r3, [r1, #12]
 800545a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800545c:	079d      	lsls	r5, r3, #30
 800545e:	4606      	mov	r6, r0
 8005460:	460c      	mov	r4, r1
 8005462:	d507      	bpl.n	8005474 <__smakebuf_r+0x1c>
 8005464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	2301      	movs	r3, #1
 800546e:	6163      	str	r3, [r4, #20]
 8005470:	b002      	add	sp, #8
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	ab01      	add	r3, sp, #4
 8005476:	466a      	mov	r2, sp
 8005478:	f7ff ffc8 	bl	800540c <__swhatbuf_r>
 800547c:	9900      	ldr	r1, [sp, #0]
 800547e:	4605      	mov	r5, r0
 8005480:	4630      	mov	r0, r6
 8005482:	f000 f895 	bl	80055b0 <_malloc_r>
 8005486:	b948      	cbnz	r0, 800549c <__smakebuf_r+0x44>
 8005488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548c:	059a      	lsls	r2, r3, #22
 800548e:	d4ef      	bmi.n	8005470 <__smakebuf_r+0x18>
 8005490:	f023 0303 	bic.w	r3, r3, #3
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	e7e3      	b.n	8005464 <__smakebuf_r+0xc>
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <__smakebuf_r+0x7c>)
 800549e:	62b3      	str	r3, [r6, #40]	; 0x28
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	6020      	str	r0, [r4, #0]
 80054a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	6163      	str	r3, [r4, #20]
 80054ae:	9b01      	ldr	r3, [sp, #4]
 80054b0:	6120      	str	r0, [r4, #16]
 80054b2:	b15b      	cbz	r3, 80054cc <__smakebuf_r+0x74>
 80054b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 fe07 	bl	80060cc <_isatty_r>
 80054be:	b128      	cbz	r0, 80054cc <__smakebuf_r+0x74>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	89a0      	ldrh	r0, [r4, #12]
 80054ce:	4305      	orrs	r5, r0
 80054d0:	81a5      	strh	r5, [r4, #12]
 80054d2:	e7cd      	b.n	8005470 <__smakebuf_r+0x18>
 80054d4:	08005265 	.word	0x08005265

080054d8 <_free_r>:
 80054d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054da:	2900      	cmp	r1, #0
 80054dc:	d044      	beq.n	8005568 <_free_r+0x90>
 80054de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e2:	9001      	str	r0, [sp, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f1a1 0404 	sub.w	r4, r1, #4
 80054ea:	bfb8      	it	lt
 80054ec:	18e4      	addlt	r4, r4, r3
 80054ee:	f000 fe37 	bl	8006160 <__malloc_lock>
 80054f2:	4a1e      	ldr	r2, [pc, #120]	; (800556c <_free_r+0x94>)
 80054f4:	9801      	ldr	r0, [sp, #4]
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	b933      	cbnz	r3, 8005508 <_free_r+0x30>
 80054fa:	6063      	str	r3, [r4, #4]
 80054fc:	6014      	str	r4, [r2, #0]
 80054fe:	b003      	add	sp, #12
 8005500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005504:	f000 be32 	b.w	800616c <__malloc_unlock>
 8005508:	42a3      	cmp	r3, r4
 800550a:	d908      	bls.n	800551e <_free_r+0x46>
 800550c:	6825      	ldr	r5, [r4, #0]
 800550e:	1961      	adds	r1, r4, r5
 8005510:	428b      	cmp	r3, r1
 8005512:	bf01      	itttt	eq
 8005514:	6819      	ldreq	r1, [r3, #0]
 8005516:	685b      	ldreq	r3, [r3, #4]
 8005518:	1949      	addeq	r1, r1, r5
 800551a:	6021      	streq	r1, [r4, #0]
 800551c:	e7ed      	b.n	80054fa <_free_r+0x22>
 800551e:	461a      	mov	r2, r3
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	b10b      	cbz	r3, 8005528 <_free_r+0x50>
 8005524:	42a3      	cmp	r3, r4
 8005526:	d9fa      	bls.n	800551e <_free_r+0x46>
 8005528:	6811      	ldr	r1, [r2, #0]
 800552a:	1855      	adds	r5, r2, r1
 800552c:	42a5      	cmp	r5, r4
 800552e:	d10b      	bne.n	8005548 <_free_r+0x70>
 8005530:	6824      	ldr	r4, [r4, #0]
 8005532:	4421      	add	r1, r4
 8005534:	1854      	adds	r4, r2, r1
 8005536:	42a3      	cmp	r3, r4
 8005538:	6011      	str	r1, [r2, #0]
 800553a:	d1e0      	bne.n	80054fe <_free_r+0x26>
 800553c:	681c      	ldr	r4, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	6053      	str	r3, [r2, #4]
 8005542:	4421      	add	r1, r4
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	e7da      	b.n	80054fe <_free_r+0x26>
 8005548:	d902      	bls.n	8005550 <_free_r+0x78>
 800554a:	230c      	movs	r3, #12
 800554c:	6003      	str	r3, [r0, #0]
 800554e:	e7d6      	b.n	80054fe <_free_r+0x26>
 8005550:	6825      	ldr	r5, [r4, #0]
 8005552:	1961      	adds	r1, r4, r5
 8005554:	428b      	cmp	r3, r1
 8005556:	bf04      	itt	eq
 8005558:	6819      	ldreq	r1, [r3, #0]
 800555a:	685b      	ldreq	r3, [r3, #4]
 800555c:	6063      	str	r3, [r4, #4]
 800555e:	bf04      	itt	eq
 8005560:	1949      	addeq	r1, r1, r5
 8005562:	6021      	streq	r1, [r4, #0]
 8005564:	6054      	str	r4, [r2, #4]
 8005566:	e7ca      	b.n	80054fe <_free_r+0x26>
 8005568:	b003      	add	sp, #12
 800556a:	bd30      	pop	{r4, r5, pc}
 800556c:	20000174 	.word	0x20000174

08005570 <sbrk_aligned>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4e0e      	ldr	r6, [pc, #56]	; (80055ac <sbrk_aligned+0x3c>)
 8005574:	460c      	mov	r4, r1
 8005576:	6831      	ldr	r1, [r6, #0]
 8005578:	4605      	mov	r5, r0
 800557a:	b911      	cbnz	r1, 8005582 <sbrk_aligned+0x12>
 800557c:	f000 fd1e 	bl	8005fbc <_sbrk_r>
 8005580:	6030      	str	r0, [r6, #0]
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f000 fd19 	bl	8005fbc <_sbrk_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d00a      	beq.n	80055a4 <sbrk_aligned+0x34>
 800558e:	1cc4      	adds	r4, r0, #3
 8005590:	f024 0403 	bic.w	r4, r4, #3
 8005594:	42a0      	cmp	r0, r4
 8005596:	d007      	beq.n	80055a8 <sbrk_aligned+0x38>
 8005598:	1a21      	subs	r1, r4, r0
 800559a:	4628      	mov	r0, r5
 800559c:	f000 fd0e 	bl	8005fbc <_sbrk_r>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d101      	bne.n	80055a8 <sbrk_aligned+0x38>
 80055a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055a8:	4620      	mov	r0, r4
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	20000178 	.word	0x20000178

080055b0 <_malloc_r>:
 80055b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b4:	1ccd      	adds	r5, r1, #3
 80055b6:	f025 0503 	bic.w	r5, r5, #3
 80055ba:	3508      	adds	r5, #8
 80055bc:	2d0c      	cmp	r5, #12
 80055be:	bf38      	it	cc
 80055c0:	250c      	movcc	r5, #12
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	4607      	mov	r7, r0
 80055c6:	db01      	blt.n	80055cc <_malloc_r+0x1c>
 80055c8:	42a9      	cmp	r1, r5
 80055ca:	d905      	bls.n	80055d8 <_malloc_r+0x28>
 80055cc:	230c      	movs	r3, #12
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	2600      	movs	r6, #0
 80055d2:	4630      	mov	r0, r6
 80055d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d8:	4e2e      	ldr	r6, [pc, #184]	; (8005694 <_malloc_r+0xe4>)
 80055da:	f000 fdc1 	bl	8006160 <__malloc_lock>
 80055de:	6833      	ldr	r3, [r6, #0]
 80055e0:	461c      	mov	r4, r3
 80055e2:	bb34      	cbnz	r4, 8005632 <_malloc_r+0x82>
 80055e4:	4629      	mov	r1, r5
 80055e6:	4638      	mov	r0, r7
 80055e8:	f7ff ffc2 	bl	8005570 <sbrk_aligned>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	4604      	mov	r4, r0
 80055f0:	d14d      	bne.n	800568e <_malloc_r+0xde>
 80055f2:	6834      	ldr	r4, [r6, #0]
 80055f4:	4626      	mov	r6, r4
 80055f6:	2e00      	cmp	r6, #0
 80055f8:	d140      	bne.n	800567c <_malloc_r+0xcc>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	4631      	mov	r1, r6
 80055fe:	4638      	mov	r0, r7
 8005600:	eb04 0803 	add.w	r8, r4, r3
 8005604:	f000 fcda 	bl	8005fbc <_sbrk_r>
 8005608:	4580      	cmp	r8, r0
 800560a:	d13a      	bne.n	8005682 <_malloc_r+0xd2>
 800560c:	6821      	ldr	r1, [r4, #0]
 800560e:	3503      	adds	r5, #3
 8005610:	1a6d      	subs	r5, r5, r1
 8005612:	f025 0503 	bic.w	r5, r5, #3
 8005616:	3508      	adds	r5, #8
 8005618:	2d0c      	cmp	r5, #12
 800561a:	bf38      	it	cc
 800561c:	250c      	movcc	r5, #12
 800561e:	4629      	mov	r1, r5
 8005620:	4638      	mov	r0, r7
 8005622:	f7ff ffa5 	bl	8005570 <sbrk_aligned>
 8005626:	3001      	adds	r0, #1
 8005628:	d02b      	beq.n	8005682 <_malloc_r+0xd2>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	442b      	add	r3, r5
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	e00e      	b.n	8005650 <_malloc_r+0xa0>
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	1b52      	subs	r2, r2, r5
 8005636:	d41e      	bmi.n	8005676 <_malloc_r+0xc6>
 8005638:	2a0b      	cmp	r2, #11
 800563a:	d916      	bls.n	800566a <_malloc_r+0xba>
 800563c:	1961      	adds	r1, r4, r5
 800563e:	42a3      	cmp	r3, r4
 8005640:	6025      	str	r5, [r4, #0]
 8005642:	bf18      	it	ne
 8005644:	6059      	strne	r1, [r3, #4]
 8005646:	6863      	ldr	r3, [r4, #4]
 8005648:	bf08      	it	eq
 800564a:	6031      	streq	r1, [r6, #0]
 800564c:	5162      	str	r2, [r4, r5]
 800564e:	604b      	str	r3, [r1, #4]
 8005650:	4638      	mov	r0, r7
 8005652:	f104 060b 	add.w	r6, r4, #11
 8005656:	f000 fd89 	bl	800616c <__malloc_unlock>
 800565a:	f026 0607 	bic.w	r6, r6, #7
 800565e:	1d23      	adds	r3, r4, #4
 8005660:	1af2      	subs	r2, r6, r3
 8005662:	d0b6      	beq.n	80055d2 <_malloc_r+0x22>
 8005664:	1b9b      	subs	r3, r3, r6
 8005666:	50a3      	str	r3, [r4, r2]
 8005668:	e7b3      	b.n	80055d2 <_malloc_r+0x22>
 800566a:	6862      	ldr	r2, [r4, #4]
 800566c:	42a3      	cmp	r3, r4
 800566e:	bf0c      	ite	eq
 8005670:	6032      	streq	r2, [r6, #0]
 8005672:	605a      	strne	r2, [r3, #4]
 8005674:	e7ec      	b.n	8005650 <_malloc_r+0xa0>
 8005676:	4623      	mov	r3, r4
 8005678:	6864      	ldr	r4, [r4, #4]
 800567a:	e7b2      	b.n	80055e2 <_malloc_r+0x32>
 800567c:	4634      	mov	r4, r6
 800567e:	6876      	ldr	r6, [r6, #4]
 8005680:	e7b9      	b.n	80055f6 <_malloc_r+0x46>
 8005682:	230c      	movs	r3, #12
 8005684:	603b      	str	r3, [r7, #0]
 8005686:	4638      	mov	r0, r7
 8005688:	f000 fd70 	bl	800616c <__malloc_unlock>
 800568c:	e7a1      	b.n	80055d2 <_malloc_r+0x22>
 800568e:	6025      	str	r5, [r4, #0]
 8005690:	e7de      	b.n	8005650 <_malloc_r+0xa0>
 8005692:	bf00      	nop
 8005694:	20000174 	.word	0x20000174

08005698 <__ssputs_r>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	688e      	ldr	r6, [r1, #8]
 800569e:	429e      	cmp	r6, r3
 80056a0:	4682      	mov	sl, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	4690      	mov	r8, r2
 80056a6:	461f      	mov	r7, r3
 80056a8:	d838      	bhi.n	800571c <__ssputs_r+0x84>
 80056aa:	898a      	ldrh	r2, [r1, #12]
 80056ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056b0:	d032      	beq.n	8005718 <__ssputs_r+0x80>
 80056b2:	6825      	ldr	r5, [r4, #0]
 80056b4:	6909      	ldr	r1, [r1, #16]
 80056b6:	eba5 0901 	sub.w	r9, r5, r1
 80056ba:	6965      	ldr	r5, [r4, #20]
 80056bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056c4:	3301      	adds	r3, #1
 80056c6:	444b      	add	r3, r9
 80056c8:	106d      	asrs	r5, r5, #1
 80056ca:	429d      	cmp	r5, r3
 80056cc:	bf38      	it	cc
 80056ce:	461d      	movcc	r5, r3
 80056d0:	0553      	lsls	r3, r2, #21
 80056d2:	d531      	bpl.n	8005738 <__ssputs_r+0xa0>
 80056d4:	4629      	mov	r1, r5
 80056d6:	f7ff ff6b 	bl	80055b0 <_malloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	b950      	cbnz	r0, 80056f4 <__ssputs_r+0x5c>
 80056de:	230c      	movs	r3, #12
 80056e0:	f8ca 3000 	str.w	r3, [sl]
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f4:	6921      	ldr	r1, [r4, #16]
 80056f6:	464a      	mov	r2, r9
 80056f8:	f000 fd0a 	bl	8006110 <memcpy>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	6126      	str	r6, [r4, #16]
 800570a:	6165      	str	r5, [r4, #20]
 800570c:	444e      	add	r6, r9
 800570e:	eba5 0509 	sub.w	r5, r5, r9
 8005712:	6026      	str	r6, [r4, #0]
 8005714:	60a5      	str	r5, [r4, #8]
 8005716:	463e      	mov	r6, r7
 8005718:	42be      	cmp	r6, r7
 800571a:	d900      	bls.n	800571e <__ssputs_r+0x86>
 800571c:	463e      	mov	r6, r7
 800571e:	6820      	ldr	r0, [r4, #0]
 8005720:	4632      	mov	r2, r6
 8005722:	4641      	mov	r1, r8
 8005724:	f000 fd02 	bl	800612c <memmove>
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	1b9b      	subs	r3, r3, r6
 800572c:	60a3      	str	r3, [r4, #8]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	4433      	add	r3, r6
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	2000      	movs	r0, #0
 8005736:	e7db      	b.n	80056f0 <__ssputs_r+0x58>
 8005738:	462a      	mov	r2, r5
 800573a:	f000 fd1d 	bl	8006178 <_realloc_r>
 800573e:	4606      	mov	r6, r0
 8005740:	2800      	cmp	r0, #0
 8005742:	d1e1      	bne.n	8005708 <__ssputs_r+0x70>
 8005744:	6921      	ldr	r1, [r4, #16]
 8005746:	4650      	mov	r0, sl
 8005748:	f7ff fec6 	bl	80054d8 <_free_r>
 800574c:	e7c7      	b.n	80056de <__ssputs_r+0x46>
	...

08005750 <_svfiprintf_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	4698      	mov	r8, r3
 8005756:	898b      	ldrh	r3, [r1, #12]
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	b09d      	sub	sp, #116	; 0x74
 800575c:	4607      	mov	r7, r0
 800575e:	460d      	mov	r5, r1
 8005760:	4614      	mov	r4, r2
 8005762:	d50e      	bpl.n	8005782 <_svfiprintf_r+0x32>
 8005764:	690b      	ldr	r3, [r1, #16]
 8005766:	b963      	cbnz	r3, 8005782 <_svfiprintf_r+0x32>
 8005768:	2140      	movs	r1, #64	; 0x40
 800576a:	f7ff ff21 	bl	80055b0 <_malloc_r>
 800576e:	6028      	str	r0, [r5, #0]
 8005770:	6128      	str	r0, [r5, #16]
 8005772:	b920      	cbnz	r0, 800577e <_svfiprintf_r+0x2e>
 8005774:	230c      	movs	r3, #12
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800577c:	e0d1      	b.n	8005922 <_svfiprintf_r+0x1d2>
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	616b      	str	r3, [r5, #20]
 8005782:	2300      	movs	r3, #0
 8005784:	9309      	str	r3, [sp, #36]	; 0x24
 8005786:	2320      	movs	r3, #32
 8005788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800578c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005790:	2330      	movs	r3, #48	; 0x30
 8005792:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800593c <_svfiprintf_r+0x1ec>
 8005796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800579a:	f04f 0901 	mov.w	r9, #1
 800579e:	4623      	mov	r3, r4
 80057a0:	469a      	mov	sl, r3
 80057a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a6:	b10a      	cbz	r2, 80057ac <_svfiprintf_r+0x5c>
 80057a8:	2a25      	cmp	r2, #37	; 0x25
 80057aa:	d1f9      	bne.n	80057a0 <_svfiprintf_r+0x50>
 80057ac:	ebba 0b04 	subs.w	fp, sl, r4
 80057b0:	d00b      	beq.n	80057ca <_svfiprintf_r+0x7a>
 80057b2:	465b      	mov	r3, fp
 80057b4:	4622      	mov	r2, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	4638      	mov	r0, r7
 80057ba:	f7ff ff6d 	bl	8005698 <__ssputs_r>
 80057be:	3001      	adds	r0, #1
 80057c0:	f000 80aa 	beq.w	8005918 <_svfiprintf_r+0x1c8>
 80057c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057c6:	445a      	add	r2, fp
 80057c8:	9209      	str	r2, [sp, #36]	; 0x24
 80057ca:	f89a 3000 	ldrb.w	r3, [sl]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80a2 	beq.w	8005918 <_svfiprintf_r+0x1c8>
 80057d4:	2300      	movs	r3, #0
 80057d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057de:	f10a 0a01 	add.w	sl, sl, #1
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	9307      	str	r3, [sp, #28]
 80057e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ea:	931a      	str	r3, [sp, #104]	; 0x68
 80057ec:	4654      	mov	r4, sl
 80057ee:	2205      	movs	r2, #5
 80057f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f4:	4851      	ldr	r0, [pc, #324]	; (800593c <_svfiprintf_r+0x1ec>)
 80057f6:	f7fa fd03 	bl	8000200 <memchr>
 80057fa:	9a04      	ldr	r2, [sp, #16]
 80057fc:	b9d8      	cbnz	r0, 8005836 <_svfiprintf_r+0xe6>
 80057fe:	06d0      	lsls	r0, r2, #27
 8005800:	bf44      	itt	mi
 8005802:	2320      	movmi	r3, #32
 8005804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005808:	0711      	lsls	r1, r2, #28
 800580a:	bf44      	itt	mi
 800580c:	232b      	movmi	r3, #43	; 0x2b
 800580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005812:	f89a 3000 	ldrb.w	r3, [sl]
 8005816:	2b2a      	cmp	r3, #42	; 0x2a
 8005818:	d015      	beq.n	8005846 <_svfiprintf_r+0xf6>
 800581a:	9a07      	ldr	r2, [sp, #28]
 800581c:	4654      	mov	r4, sl
 800581e:	2000      	movs	r0, #0
 8005820:	f04f 0c0a 	mov.w	ip, #10
 8005824:	4621      	mov	r1, r4
 8005826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800582a:	3b30      	subs	r3, #48	; 0x30
 800582c:	2b09      	cmp	r3, #9
 800582e:	d94e      	bls.n	80058ce <_svfiprintf_r+0x17e>
 8005830:	b1b0      	cbz	r0, 8005860 <_svfiprintf_r+0x110>
 8005832:	9207      	str	r2, [sp, #28]
 8005834:	e014      	b.n	8005860 <_svfiprintf_r+0x110>
 8005836:	eba0 0308 	sub.w	r3, r0, r8
 800583a:	fa09 f303 	lsl.w	r3, r9, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	46a2      	mov	sl, r4
 8005844:	e7d2      	b.n	80057ec <_svfiprintf_r+0x9c>
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	1d19      	adds	r1, r3, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	9103      	str	r1, [sp, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	bfbb      	ittet	lt
 8005852:	425b      	neglt	r3, r3
 8005854:	f042 0202 	orrlt.w	r2, r2, #2
 8005858:	9307      	strge	r3, [sp, #28]
 800585a:	9307      	strlt	r3, [sp, #28]
 800585c:	bfb8      	it	lt
 800585e:	9204      	strlt	r2, [sp, #16]
 8005860:	7823      	ldrb	r3, [r4, #0]
 8005862:	2b2e      	cmp	r3, #46	; 0x2e
 8005864:	d10c      	bne.n	8005880 <_svfiprintf_r+0x130>
 8005866:	7863      	ldrb	r3, [r4, #1]
 8005868:	2b2a      	cmp	r3, #42	; 0x2a
 800586a:	d135      	bne.n	80058d8 <_svfiprintf_r+0x188>
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	9203      	str	r2, [sp, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	bfb8      	it	lt
 8005878:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800587c:	3402      	adds	r4, #2
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800594c <_svfiprintf_r+0x1fc>
 8005884:	7821      	ldrb	r1, [r4, #0]
 8005886:	2203      	movs	r2, #3
 8005888:	4650      	mov	r0, sl
 800588a:	f7fa fcb9 	bl	8000200 <memchr>
 800588e:	b140      	cbz	r0, 80058a2 <_svfiprintf_r+0x152>
 8005890:	2340      	movs	r3, #64	; 0x40
 8005892:	eba0 000a 	sub.w	r0, r0, sl
 8005896:	fa03 f000 	lsl.w	r0, r3, r0
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	4303      	orrs	r3, r0
 800589e:	3401      	adds	r4, #1
 80058a0:	9304      	str	r3, [sp, #16]
 80058a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a6:	4826      	ldr	r0, [pc, #152]	; (8005940 <_svfiprintf_r+0x1f0>)
 80058a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058ac:	2206      	movs	r2, #6
 80058ae:	f7fa fca7 	bl	8000200 <memchr>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d038      	beq.n	8005928 <_svfiprintf_r+0x1d8>
 80058b6:	4b23      	ldr	r3, [pc, #140]	; (8005944 <_svfiprintf_r+0x1f4>)
 80058b8:	bb1b      	cbnz	r3, 8005902 <_svfiprintf_r+0x1b2>
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	3307      	adds	r3, #7
 80058be:	f023 0307 	bic.w	r3, r3, #7
 80058c2:	3308      	adds	r3, #8
 80058c4:	9303      	str	r3, [sp, #12]
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	4433      	add	r3, r6
 80058ca:	9309      	str	r3, [sp, #36]	; 0x24
 80058cc:	e767      	b.n	800579e <_svfiprintf_r+0x4e>
 80058ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d2:	460c      	mov	r4, r1
 80058d4:	2001      	movs	r0, #1
 80058d6:	e7a5      	b.n	8005824 <_svfiprintf_r+0xd4>
 80058d8:	2300      	movs	r3, #0
 80058da:	3401      	adds	r4, #1
 80058dc:	9305      	str	r3, [sp, #20]
 80058de:	4619      	mov	r1, r3
 80058e0:	f04f 0c0a 	mov.w	ip, #10
 80058e4:	4620      	mov	r0, r4
 80058e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ea:	3a30      	subs	r2, #48	; 0x30
 80058ec:	2a09      	cmp	r2, #9
 80058ee:	d903      	bls.n	80058f8 <_svfiprintf_r+0x1a8>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0c5      	beq.n	8005880 <_svfiprintf_r+0x130>
 80058f4:	9105      	str	r1, [sp, #20]
 80058f6:	e7c3      	b.n	8005880 <_svfiprintf_r+0x130>
 80058f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80058fc:	4604      	mov	r4, r0
 80058fe:	2301      	movs	r3, #1
 8005900:	e7f0      	b.n	80058e4 <_svfiprintf_r+0x194>
 8005902:	ab03      	add	r3, sp, #12
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	462a      	mov	r2, r5
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <_svfiprintf_r+0x1f8>)
 800590a:	a904      	add	r1, sp, #16
 800590c:	4638      	mov	r0, r7
 800590e:	f3af 8000 	nop.w
 8005912:	1c42      	adds	r2, r0, #1
 8005914:	4606      	mov	r6, r0
 8005916:	d1d6      	bne.n	80058c6 <_svfiprintf_r+0x176>
 8005918:	89ab      	ldrh	r3, [r5, #12]
 800591a:	065b      	lsls	r3, r3, #25
 800591c:	f53f af2c 	bmi.w	8005778 <_svfiprintf_r+0x28>
 8005920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005922:	b01d      	add	sp, #116	; 0x74
 8005924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005928:	ab03      	add	r3, sp, #12
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	462a      	mov	r2, r5
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <_svfiprintf_r+0x1f8>)
 8005930:	a904      	add	r1, sp, #16
 8005932:	4638      	mov	r0, r7
 8005934:	f000 f9d4 	bl	8005ce0 <_printf_i>
 8005938:	e7eb      	b.n	8005912 <_svfiprintf_r+0x1c2>
 800593a:	bf00      	nop
 800593c:	08006344 	.word	0x08006344
 8005940:	0800634e 	.word	0x0800634e
 8005944:	00000000 	.word	0x00000000
 8005948:	08005699 	.word	0x08005699
 800594c:	0800634a 	.word	0x0800634a

08005950 <__sfputc_r>:
 8005950:	6893      	ldr	r3, [r2, #8]
 8005952:	3b01      	subs	r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	b410      	push	{r4}
 8005958:	6093      	str	r3, [r2, #8]
 800595a:	da08      	bge.n	800596e <__sfputc_r+0x1e>
 800595c:	6994      	ldr	r4, [r2, #24]
 800595e:	42a3      	cmp	r3, r4
 8005960:	db01      	blt.n	8005966 <__sfputc_r+0x16>
 8005962:	290a      	cmp	r1, #10
 8005964:	d103      	bne.n	800596e <__sfputc_r+0x1e>
 8005966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800596a:	f7ff bad5 	b.w	8004f18 <__swbuf_r>
 800596e:	6813      	ldr	r3, [r2, #0]
 8005970:	1c58      	adds	r0, r3, #1
 8005972:	6010      	str	r0, [r2, #0]
 8005974:	7019      	strb	r1, [r3, #0]
 8005976:	4608      	mov	r0, r1
 8005978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597c:	4770      	bx	lr

0800597e <__sfputs_r>:
 800597e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005980:	4606      	mov	r6, r0
 8005982:	460f      	mov	r7, r1
 8005984:	4614      	mov	r4, r2
 8005986:	18d5      	adds	r5, r2, r3
 8005988:	42ac      	cmp	r4, r5
 800598a:	d101      	bne.n	8005990 <__sfputs_r+0x12>
 800598c:	2000      	movs	r0, #0
 800598e:	e007      	b.n	80059a0 <__sfputs_r+0x22>
 8005990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005994:	463a      	mov	r2, r7
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff ffda 	bl	8005950 <__sfputc_r>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d1f3      	bne.n	8005988 <__sfputs_r+0xa>
 80059a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059a4 <_vfiprintf_r>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	460d      	mov	r5, r1
 80059aa:	b09d      	sub	sp, #116	; 0x74
 80059ac:	4614      	mov	r4, r2
 80059ae:	4698      	mov	r8, r3
 80059b0:	4606      	mov	r6, r0
 80059b2:	b118      	cbz	r0, 80059bc <_vfiprintf_r+0x18>
 80059b4:	6983      	ldr	r3, [r0, #24]
 80059b6:	b90b      	cbnz	r3, 80059bc <_vfiprintf_r+0x18>
 80059b8:	f7ff fc88 	bl	80052cc <__sinit>
 80059bc:	4b89      	ldr	r3, [pc, #548]	; (8005be4 <_vfiprintf_r+0x240>)
 80059be:	429d      	cmp	r5, r3
 80059c0:	d11b      	bne.n	80059fa <_vfiprintf_r+0x56>
 80059c2:	6875      	ldr	r5, [r6, #4]
 80059c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059c6:	07d9      	lsls	r1, r3, #31
 80059c8:	d405      	bmi.n	80059d6 <_vfiprintf_r+0x32>
 80059ca:	89ab      	ldrh	r3, [r5, #12]
 80059cc:	059a      	lsls	r2, r3, #22
 80059ce:	d402      	bmi.n	80059d6 <_vfiprintf_r+0x32>
 80059d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059d2:	f7ff fd19 	bl	8005408 <__retarget_lock_acquire_recursive>
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	d501      	bpl.n	80059e0 <_vfiprintf_r+0x3c>
 80059dc:	692b      	ldr	r3, [r5, #16]
 80059de:	b9eb      	cbnz	r3, 8005a1c <_vfiprintf_r+0x78>
 80059e0:	4629      	mov	r1, r5
 80059e2:	4630      	mov	r0, r6
 80059e4:	f7ff faea 	bl	8004fbc <__swsetup_r>
 80059e8:	b1c0      	cbz	r0, 8005a1c <_vfiprintf_r+0x78>
 80059ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059ec:	07dc      	lsls	r4, r3, #31
 80059ee:	d50e      	bpl.n	8005a0e <_vfiprintf_r+0x6a>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f4:	b01d      	add	sp, #116	; 0x74
 80059f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fa:	4b7b      	ldr	r3, [pc, #492]	; (8005be8 <_vfiprintf_r+0x244>)
 80059fc:	429d      	cmp	r5, r3
 80059fe:	d101      	bne.n	8005a04 <_vfiprintf_r+0x60>
 8005a00:	68b5      	ldr	r5, [r6, #8]
 8005a02:	e7df      	b.n	80059c4 <_vfiprintf_r+0x20>
 8005a04:	4b79      	ldr	r3, [pc, #484]	; (8005bec <_vfiprintf_r+0x248>)
 8005a06:	429d      	cmp	r5, r3
 8005a08:	bf08      	it	eq
 8005a0a:	68f5      	ldreq	r5, [r6, #12]
 8005a0c:	e7da      	b.n	80059c4 <_vfiprintf_r+0x20>
 8005a0e:	89ab      	ldrh	r3, [r5, #12]
 8005a10:	0598      	lsls	r0, r3, #22
 8005a12:	d4ed      	bmi.n	80059f0 <_vfiprintf_r+0x4c>
 8005a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a16:	f7ff fcf8 	bl	800540a <__retarget_lock_release_recursive>
 8005a1a:	e7e9      	b.n	80059f0 <_vfiprintf_r+0x4c>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a20:	2320      	movs	r3, #32
 8005a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a2a:	2330      	movs	r3, #48	; 0x30
 8005a2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005bf0 <_vfiprintf_r+0x24c>
 8005a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a34:	f04f 0901 	mov.w	r9, #1
 8005a38:	4623      	mov	r3, r4
 8005a3a:	469a      	mov	sl, r3
 8005a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a40:	b10a      	cbz	r2, 8005a46 <_vfiprintf_r+0xa2>
 8005a42:	2a25      	cmp	r2, #37	; 0x25
 8005a44:	d1f9      	bne.n	8005a3a <_vfiprintf_r+0x96>
 8005a46:	ebba 0b04 	subs.w	fp, sl, r4
 8005a4a:	d00b      	beq.n	8005a64 <_vfiprintf_r+0xc0>
 8005a4c:	465b      	mov	r3, fp
 8005a4e:	4622      	mov	r2, r4
 8005a50:	4629      	mov	r1, r5
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7ff ff93 	bl	800597e <__sfputs_r>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	f000 80aa 	beq.w	8005bb2 <_vfiprintf_r+0x20e>
 8005a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a60:	445a      	add	r2, fp
 8005a62:	9209      	str	r2, [sp, #36]	; 0x24
 8005a64:	f89a 3000 	ldrb.w	r3, [sl]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a2 	beq.w	8005bb2 <_vfiprintf_r+0x20e>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a78:	f10a 0a01 	add.w	sl, sl, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	9307      	str	r3, [sp, #28]
 8005a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a84:	931a      	str	r3, [sp, #104]	; 0x68
 8005a86:	4654      	mov	r4, sl
 8005a88:	2205      	movs	r2, #5
 8005a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a8e:	4858      	ldr	r0, [pc, #352]	; (8005bf0 <_vfiprintf_r+0x24c>)
 8005a90:	f7fa fbb6 	bl	8000200 <memchr>
 8005a94:	9a04      	ldr	r2, [sp, #16]
 8005a96:	b9d8      	cbnz	r0, 8005ad0 <_vfiprintf_r+0x12c>
 8005a98:	06d1      	lsls	r1, r2, #27
 8005a9a:	bf44      	itt	mi
 8005a9c:	2320      	movmi	r3, #32
 8005a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa2:	0713      	lsls	r3, r2, #28
 8005aa4:	bf44      	itt	mi
 8005aa6:	232b      	movmi	r3, #43	; 0x2b
 8005aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aac:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab2:	d015      	beq.n	8005ae0 <_vfiprintf_r+0x13c>
 8005ab4:	9a07      	ldr	r2, [sp, #28]
 8005ab6:	4654      	mov	r4, sl
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f04f 0c0a 	mov.w	ip, #10
 8005abe:	4621      	mov	r1, r4
 8005ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ac4:	3b30      	subs	r3, #48	; 0x30
 8005ac6:	2b09      	cmp	r3, #9
 8005ac8:	d94e      	bls.n	8005b68 <_vfiprintf_r+0x1c4>
 8005aca:	b1b0      	cbz	r0, 8005afa <_vfiprintf_r+0x156>
 8005acc:	9207      	str	r2, [sp, #28]
 8005ace:	e014      	b.n	8005afa <_vfiprintf_r+0x156>
 8005ad0:	eba0 0308 	sub.w	r3, r0, r8
 8005ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	46a2      	mov	sl, r4
 8005ade:	e7d2      	b.n	8005a86 <_vfiprintf_r+0xe2>
 8005ae0:	9b03      	ldr	r3, [sp, #12]
 8005ae2:	1d19      	adds	r1, r3, #4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	9103      	str	r1, [sp, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bfbb      	ittet	lt
 8005aec:	425b      	neglt	r3, r3
 8005aee:	f042 0202 	orrlt.w	r2, r2, #2
 8005af2:	9307      	strge	r3, [sp, #28]
 8005af4:	9307      	strlt	r3, [sp, #28]
 8005af6:	bfb8      	it	lt
 8005af8:	9204      	strlt	r2, [sp, #16]
 8005afa:	7823      	ldrb	r3, [r4, #0]
 8005afc:	2b2e      	cmp	r3, #46	; 0x2e
 8005afe:	d10c      	bne.n	8005b1a <_vfiprintf_r+0x176>
 8005b00:	7863      	ldrb	r3, [r4, #1]
 8005b02:	2b2a      	cmp	r3, #42	; 0x2a
 8005b04:	d135      	bne.n	8005b72 <_vfiprintf_r+0x1ce>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	9203      	str	r2, [sp, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfb8      	it	lt
 8005b12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b16:	3402      	adds	r4, #2
 8005b18:	9305      	str	r3, [sp, #20]
 8005b1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c00 <_vfiprintf_r+0x25c>
 8005b1e:	7821      	ldrb	r1, [r4, #0]
 8005b20:	2203      	movs	r2, #3
 8005b22:	4650      	mov	r0, sl
 8005b24:	f7fa fb6c 	bl	8000200 <memchr>
 8005b28:	b140      	cbz	r0, 8005b3c <_vfiprintf_r+0x198>
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	eba0 000a 	sub.w	r0, r0, sl
 8005b30:	fa03 f000 	lsl.w	r0, r3, r0
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	4303      	orrs	r3, r0
 8005b38:	3401      	adds	r4, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b40:	482c      	ldr	r0, [pc, #176]	; (8005bf4 <_vfiprintf_r+0x250>)
 8005b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b46:	2206      	movs	r2, #6
 8005b48:	f7fa fb5a 	bl	8000200 <memchr>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d03f      	beq.n	8005bd0 <_vfiprintf_r+0x22c>
 8005b50:	4b29      	ldr	r3, [pc, #164]	; (8005bf8 <_vfiprintf_r+0x254>)
 8005b52:	bb1b      	cbnz	r3, 8005b9c <_vfiprintf_r+0x1f8>
 8005b54:	9b03      	ldr	r3, [sp, #12]
 8005b56:	3307      	adds	r3, #7
 8005b58:	f023 0307 	bic.w	r3, r3, #7
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b62:	443b      	add	r3, r7
 8005b64:	9309      	str	r3, [sp, #36]	; 0x24
 8005b66:	e767      	b.n	8005a38 <_vfiprintf_r+0x94>
 8005b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	2001      	movs	r0, #1
 8005b70:	e7a5      	b.n	8005abe <_vfiprintf_r+0x11a>
 8005b72:	2300      	movs	r3, #0
 8005b74:	3401      	adds	r4, #1
 8005b76:	9305      	str	r3, [sp, #20]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f04f 0c0a 	mov.w	ip, #10
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b84:	3a30      	subs	r2, #48	; 0x30
 8005b86:	2a09      	cmp	r2, #9
 8005b88:	d903      	bls.n	8005b92 <_vfiprintf_r+0x1ee>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0c5      	beq.n	8005b1a <_vfiprintf_r+0x176>
 8005b8e:	9105      	str	r1, [sp, #20]
 8005b90:	e7c3      	b.n	8005b1a <_vfiprintf_r+0x176>
 8005b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b96:	4604      	mov	r4, r0
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f0      	b.n	8005b7e <_vfiprintf_r+0x1da>
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <_vfiprintf_r+0x258>)
 8005ba4:	a904      	add	r1, sp, #16
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f3af 8000 	nop.w
 8005bac:	4607      	mov	r7, r0
 8005bae:	1c78      	adds	r0, r7, #1
 8005bb0:	d1d6      	bne.n	8005b60 <_vfiprintf_r+0x1bc>
 8005bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bb4:	07d9      	lsls	r1, r3, #31
 8005bb6:	d405      	bmi.n	8005bc4 <_vfiprintf_r+0x220>
 8005bb8:	89ab      	ldrh	r3, [r5, #12]
 8005bba:	059a      	lsls	r2, r3, #22
 8005bbc:	d402      	bmi.n	8005bc4 <_vfiprintf_r+0x220>
 8005bbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bc0:	f7ff fc23 	bl	800540a <__retarget_lock_release_recursive>
 8005bc4:	89ab      	ldrh	r3, [r5, #12]
 8005bc6:	065b      	lsls	r3, r3, #25
 8005bc8:	f53f af12 	bmi.w	80059f0 <_vfiprintf_r+0x4c>
 8005bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bce:	e711      	b.n	80059f4 <_vfiprintf_r+0x50>
 8005bd0:	ab03      	add	r3, sp, #12
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	462a      	mov	r2, r5
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <_vfiprintf_r+0x258>)
 8005bd8:	a904      	add	r1, sp, #16
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f880 	bl	8005ce0 <_printf_i>
 8005be0:	e7e4      	b.n	8005bac <_vfiprintf_r+0x208>
 8005be2:	bf00      	nop
 8005be4:	08006304 	.word	0x08006304
 8005be8:	08006324 	.word	0x08006324
 8005bec:	080062e4 	.word	0x080062e4
 8005bf0:	08006344 	.word	0x08006344
 8005bf4:	0800634e 	.word	0x0800634e
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	0800597f 	.word	0x0800597f
 8005c00:	0800634a 	.word	0x0800634a

08005c04 <_printf_common>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	4616      	mov	r6, r2
 8005c0a:	4699      	mov	r9, r3
 8005c0c:	688a      	ldr	r2, [r1, #8]
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bfb8      	it	lt
 8005c18:	4613      	movlt	r3, r2
 8005c1a:	6033      	str	r3, [r6, #0]
 8005c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c20:	4607      	mov	r7, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	b10a      	cbz	r2, 8005c2a <_printf_common+0x26>
 8005c26:	3301      	adds	r3, #1
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	0699      	lsls	r1, r3, #26
 8005c2e:	bf42      	ittt	mi
 8005c30:	6833      	ldrmi	r3, [r6, #0]
 8005c32:	3302      	addmi	r3, #2
 8005c34:	6033      	strmi	r3, [r6, #0]
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	f015 0506 	ands.w	r5, r5, #6
 8005c3c:	d106      	bne.n	8005c4c <_printf_common+0x48>
 8005c3e:	f104 0a19 	add.w	sl, r4, #25
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	6832      	ldr	r2, [r6, #0]
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	dc26      	bgt.n	8005c9a <_printf_common+0x96>
 8005c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c50:	1e13      	subs	r3, r2, #0
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	bf18      	it	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	0692      	lsls	r2, r2, #26
 8005c5a:	d42b      	bmi.n	8005cb4 <_printf_common+0xb0>
 8005c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d01e      	beq.n	8005ca8 <_printf_common+0xa4>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	68e5      	ldr	r5, [r4, #12]
 8005c6e:	6832      	ldr	r2, [r6, #0]
 8005c70:	f003 0306 	and.w	r3, r3, #6
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	bf08      	it	eq
 8005c78:	1aad      	subeq	r5, r5, r2
 8005c7a:	68a3      	ldr	r3, [r4, #8]
 8005c7c:	6922      	ldr	r2, [r4, #16]
 8005c7e:	bf0c      	ite	eq
 8005c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c84:	2500      	movne	r5, #0
 8005c86:	4293      	cmp	r3, r2
 8005c88:	bfc4      	itt	gt
 8005c8a:	1a9b      	subgt	r3, r3, r2
 8005c8c:	18ed      	addgt	r5, r5, r3
 8005c8e:	2600      	movs	r6, #0
 8005c90:	341a      	adds	r4, #26
 8005c92:	42b5      	cmp	r5, r6
 8005c94:	d11a      	bne.n	8005ccc <_printf_common+0xc8>
 8005c96:	2000      	movs	r0, #0
 8005c98:	e008      	b.n	8005cac <_printf_common+0xa8>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	47c0      	blx	r8
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d103      	bne.n	8005cb0 <_printf_common+0xac>
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb0:	3501      	adds	r5, #1
 8005cb2:	e7c6      	b.n	8005c42 <_printf_common+0x3e>
 8005cb4:	18e1      	adds	r1, r4, r3
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	2030      	movs	r0, #48	; 0x30
 8005cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cbe:	4422      	add	r2, r4
 8005cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc8:	3302      	adds	r3, #2
 8005cca:	e7c7      	b.n	8005c5c <_printf_common+0x58>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4622      	mov	r2, r4
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	47c0      	blx	r8
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d0e6      	beq.n	8005ca8 <_printf_common+0xa4>
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7d9      	b.n	8005c92 <_printf_common+0x8e>
	...

08005ce0 <_printf_i>:
 8005ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	7e0f      	ldrb	r7, [r1, #24]
 8005ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce8:	2f78      	cmp	r7, #120	; 0x78
 8005cea:	4691      	mov	r9, r2
 8005cec:	4680      	mov	r8, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	469a      	mov	sl, r3
 8005cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cf6:	d807      	bhi.n	8005d08 <_printf_i+0x28>
 8005cf8:	2f62      	cmp	r7, #98	; 0x62
 8005cfa:	d80a      	bhi.n	8005d12 <_printf_i+0x32>
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	f000 80d8 	beq.w	8005eb2 <_printf_i+0x1d2>
 8005d02:	2f58      	cmp	r7, #88	; 0x58
 8005d04:	f000 80a3 	beq.w	8005e4e <_printf_i+0x16e>
 8005d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d10:	e03a      	b.n	8005d88 <_printf_i+0xa8>
 8005d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d16:	2b15      	cmp	r3, #21
 8005d18:	d8f6      	bhi.n	8005d08 <_printf_i+0x28>
 8005d1a:	a101      	add	r1, pc, #4	; (adr r1, 8005d20 <_printf_i+0x40>)
 8005d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d20:	08005d79 	.word	0x08005d79
 8005d24:	08005d8d 	.word	0x08005d8d
 8005d28:	08005d09 	.word	0x08005d09
 8005d2c:	08005d09 	.word	0x08005d09
 8005d30:	08005d09 	.word	0x08005d09
 8005d34:	08005d09 	.word	0x08005d09
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005d09 	.word	0x08005d09
 8005d40:	08005d09 	.word	0x08005d09
 8005d44:	08005d09 	.word	0x08005d09
 8005d48:	08005d09 	.word	0x08005d09
 8005d4c:	08005e99 	.word	0x08005e99
 8005d50:	08005dbd 	.word	0x08005dbd
 8005d54:	08005e7b 	.word	0x08005e7b
 8005d58:	08005d09 	.word	0x08005d09
 8005d5c:	08005d09 	.word	0x08005d09
 8005d60:	08005ebb 	.word	0x08005ebb
 8005d64:	08005d09 	.word	0x08005d09
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005d09 	.word	0x08005d09
 8005d70:	08005d09 	.word	0x08005d09
 8005d74:	08005e83 	.word	0x08005e83
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	1d1a      	adds	r2, r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	602a      	str	r2, [r5, #0]
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0a3      	b.n	8005ed4 <_printf_i+0x1f4>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	6829      	ldr	r1, [r5, #0]
 8005d90:	0606      	lsls	r6, r0, #24
 8005d92:	f101 0304 	add.w	r3, r1, #4
 8005d96:	d50a      	bpl.n	8005dae <_printf_i+0xce>
 8005d98:	680e      	ldr	r6, [r1, #0]
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	2e00      	cmp	r6, #0
 8005d9e:	da03      	bge.n	8005da8 <_printf_i+0xc8>
 8005da0:	232d      	movs	r3, #45	; 0x2d
 8005da2:	4276      	negs	r6, r6
 8005da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da8:	485e      	ldr	r0, [pc, #376]	; (8005f24 <_printf_i+0x244>)
 8005daa:	230a      	movs	r3, #10
 8005dac:	e019      	b.n	8005de2 <_printf_i+0x102>
 8005dae:	680e      	ldr	r6, [r1, #0]
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005db6:	bf18      	it	ne
 8005db8:	b236      	sxthne	r6, r6
 8005dba:	e7ef      	b.n	8005d9c <_printf_i+0xbc>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	1d19      	adds	r1, r3, #4
 8005dc2:	6029      	str	r1, [r5, #0]
 8005dc4:	0601      	lsls	r1, r0, #24
 8005dc6:	d501      	bpl.n	8005dcc <_printf_i+0xec>
 8005dc8:	681e      	ldr	r6, [r3, #0]
 8005dca:	e002      	b.n	8005dd2 <_printf_i+0xf2>
 8005dcc:	0646      	lsls	r6, r0, #25
 8005dce:	d5fb      	bpl.n	8005dc8 <_printf_i+0xe8>
 8005dd0:	881e      	ldrh	r6, [r3, #0]
 8005dd2:	4854      	ldr	r0, [pc, #336]	; (8005f24 <_printf_i+0x244>)
 8005dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2308      	moveq	r3, #8
 8005dda:	230a      	movne	r3, #10
 8005ddc:	2100      	movs	r1, #0
 8005dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005de2:	6865      	ldr	r5, [r4, #4]
 8005de4:	60a5      	str	r5, [r4, #8]
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	bfa2      	ittt	ge
 8005dea:	6821      	ldrge	r1, [r4, #0]
 8005dec:	f021 0104 	bicge.w	r1, r1, #4
 8005df0:	6021      	strge	r1, [r4, #0]
 8005df2:	b90e      	cbnz	r6, 8005df8 <_printf_i+0x118>
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	d04d      	beq.n	8005e94 <_printf_i+0x1b4>
 8005df8:	4615      	mov	r5, r2
 8005dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8005e02:	5dc7      	ldrb	r7, [r0, r7]
 8005e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e08:	4637      	mov	r7, r6
 8005e0a:	42bb      	cmp	r3, r7
 8005e0c:	460e      	mov	r6, r1
 8005e0e:	d9f4      	bls.n	8005dfa <_printf_i+0x11a>
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d10b      	bne.n	8005e2c <_printf_i+0x14c>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	07de      	lsls	r6, r3, #31
 8005e18:	d508      	bpl.n	8005e2c <_printf_i+0x14c>
 8005e1a:	6923      	ldr	r3, [r4, #16]
 8005e1c:	6861      	ldr	r1, [r4, #4]
 8005e1e:	4299      	cmp	r1, r3
 8005e20:	bfde      	ittt	le
 8005e22:	2330      	movle	r3, #48	; 0x30
 8005e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e2c:	1b52      	subs	r2, r2, r5
 8005e2e:	6122      	str	r2, [r4, #16]
 8005e30:	f8cd a000 	str.w	sl, [sp]
 8005e34:	464b      	mov	r3, r9
 8005e36:	aa03      	add	r2, sp, #12
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	f7ff fee2 	bl	8005c04 <_printf_common>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d14c      	bne.n	8005ede <_printf_i+0x1fe>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e48:	b004      	add	sp, #16
 8005e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4e:	4835      	ldr	r0, [pc, #212]	; (8005f24 <_printf_i+0x244>)
 8005e50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e54:	6829      	ldr	r1, [r5, #0]
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e5c:	6029      	str	r1, [r5, #0]
 8005e5e:	061d      	lsls	r5, r3, #24
 8005e60:	d514      	bpl.n	8005e8c <_printf_i+0x1ac>
 8005e62:	07df      	lsls	r7, r3, #31
 8005e64:	bf44      	itt	mi
 8005e66:	f043 0320 	orrmi.w	r3, r3, #32
 8005e6a:	6023      	strmi	r3, [r4, #0]
 8005e6c:	b91e      	cbnz	r6, 8005e76 <_printf_i+0x196>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	f023 0320 	bic.w	r3, r3, #32
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	2310      	movs	r3, #16
 8005e78:	e7b0      	b.n	8005ddc <_printf_i+0xfc>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	2378      	movs	r3, #120	; 0x78
 8005e84:	4828      	ldr	r0, [pc, #160]	; (8005f28 <_printf_i+0x248>)
 8005e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e8a:	e7e3      	b.n	8005e54 <_printf_i+0x174>
 8005e8c:	0659      	lsls	r1, r3, #25
 8005e8e:	bf48      	it	mi
 8005e90:	b2b6      	uxthmi	r6, r6
 8005e92:	e7e6      	b.n	8005e62 <_printf_i+0x182>
 8005e94:	4615      	mov	r5, r2
 8005e96:	e7bb      	b.n	8005e10 <_printf_i+0x130>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	6826      	ldr	r6, [r4, #0]
 8005e9c:	6961      	ldr	r1, [r4, #20]
 8005e9e:	1d18      	adds	r0, r3, #4
 8005ea0:	6028      	str	r0, [r5, #0]
 8005ea2:	0635      	lsls	r5, r6, #24
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	d501      	bpl.n	8005eac <_printf_i+0x1cc>
 8005ea8:	6019      	str	r1, [r3, #0]
 8005eaa:	e002      	b.n	8005eb2 <_printf_i+0x1d2>
 8005eac:	0670      	lsls	r0, r6, #25
 8005eae:	d5fb      	bpl.n	8005ea8 <_printf_i+0x1c8>
 8005eb0:	8019      	strh	r1, [r3, #0]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	4615      	mov	r5, r2
 8005eb8:	e7ba      	b.n	8005e30 <_printf_i+0x150>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	1d1a      	adds	r2, r3, #4
 8005ebe:	602a      	str	r2, [r5, #0]
 8005ec0:	681d      	ldr	r5, [r3, #0]
 8005ec2:	6862      	ldr	r2, [r4, #4]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7fa f99a 	bl	8000200 <memchr>
 8005ecc:	b108      	cbz	r0, 8005ed2 <_printf_i+0x1f2>
 8005ece:	1b40      	subs	r0, r0, r5
 8005ed0:	6060      	str	r0, [r4, #4]
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	6123      	str	r3, [r4, #16]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005edc:	e7a8      	b.n	8005e30 <_printf_i+0x150>
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	47d0      	blx	sl
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d0ab      	beq.n	8005e44 <_printf_i+0x164>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	079b      	lsls	r3, r3, #30
 8005ef0:	d413      	bmi.n	8005f1a <_printf_i+0x23a>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	4298      	cmp	r0, r3
 8005ef8:	bfb8      	it	lt
 8005efa:	4618      	movlt	r0, r3
 8005efc:	e7a4      	b.n	8005e48 <_printf_i+0x168>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4632      	mov	r2, r6
 8005f02:	4649      	mov	r1, r9
 8005f04:	4640      	mov	r0, r8
 8005f06:	47d0      	blx	sl
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d09b      	beq.n	8005e44 <_printf_i+0x164>
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	9903      	ldr	r1, [sp, #12]
 8005f12:	1a5b      	subs	r3, r3, r1
 8005f14:	42ab      	cmp	r3, r5
 8005f16:	dcf2      	bgt.n	8005efe <_printf_i+0x21e>
 8005f18:	e7eb      	b.n	8005ef2 <_printf_i+0x212>
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	f104 0619 	add.w	r6, r4, #25
 8005f20:	e7f5      	b.n	8005f0e <_printf_i+0x22e>
 8005f22:	bf00      	nop
 8005f24:	08006355 	.word	0x08006355
 8005f28:	08006366 	.word	0x08006366

08005f2c <_putc_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	460d      	mov	r5, r1
 8005f30:	4614      	mov	r4, r2
 8005f32:	4606      	mov	r6, r0
 8005f34:	b118      	cbz	r0, 8005f3e <_putc_r+0x12>
 8005f36:	6983      	ldr	r3, [r0, #24]
 8005f38:	b90b      	cbnz	r3, 8005f3e <_putc_r+0x12>
 8005f3a:	f7ff f9c7 	bl	80052cc <__sinit>
 8005f3e:	4b1c      	ldr	r3, [pc, #112]	; (8005fb0 <_putc_r+0x84>)
 8005f40:	429c      	cmp	r4, r3
 8005f42:	d124      	bne.n	8005f8e <_putc_r+0x62>
 8005f44:	6874      	ldr	r4, [r6, #4]
 8005f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f48:	07d8      	lsls	r0, r3, #31
 8005f4a:	d405      	bmi.n	8005f58 <_putc_r+0x2c>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	0599      	lsls	r1, r3, #22
 8005f50:	d402      	bmi.n	8005f58 <_putc_r+0x2c>
 8005f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f54:	f7ff fa58 	bl	8005408 <__retarget_lock_acquire_recursive>
 8005f58:	68a3      	ldr	r3, [r4, #8]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	60a3      	str	r3, [r4, #8]
 8005f60:	da05      	bge.n	8005f6e <_putc_r+0x42>
 8005f62:	69a2      	ldr	r2, [r4, #24]
 8005f64:	4293      	cmp	r3, r2
 8005f66:	db1c      	blt.n	8005fa2 <_putc_r+0x76>
 8005f68:	b2eb      	uxtb	r3, r5
 8005f6a:	2b0a      	cmp	r3, #10
 8005f6c:	d019      	beq.n	8005fa2 <_putc_r+0x76>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	701d      	strb	r5, [r3, #0]
 8005f76:	b2ed      	uxtb	r5, r5
 8005f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f7a:	07da      	lsls	r2, r3, #31
 8005f7c:	d405      	bmi.n	8005f8a <_putc_r+0x5e>
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	059b      	lsls	r3, r3, #22
 8005f82:	d402      	bmi.n	8005f8a <_putc_r+0x5e>
 8005f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f86:	f7ff fa40 	bl	800540a <__retarget_lock_release_recursive>
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <_putc_r+0x88>)
 8005f90:	429c      	cmp	r4, r3
 8005f92:	d101      	bne.n	8005f98 <_putc_r+0x6c>
 8005f94:	68b4      	ldr	r4, [r6, #8]
 8005f96:	e7d6      	b.n	8005f46 <_putc_r+0x1a>
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <_putc_r+0x8c>)
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	bf08      	it	eq
 8005f9e:	68f4      	ldreq	r4, [r6, #12]
 8005fa0:	e7d1      	b.n	8005f46 <_putc_r+0x1a>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7fe ffb6 	bl	8004f18 <__swbuf_r>
 8005fac:	4605      	mov	r5, r0
 8005fae:	e7e3      	b.n	8005f78 <_putc_r+0x4c>
 8005fb0:	08006304 	.word	0x08006304
 8005fb4:	08006324 	.word	0x08006324
 8005fb8:	080062e4 	.word	0x080062e4

08005fbc <_sbrk_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4d06      	ldr	r5, [pc, #24]	; (8005fd8 <_sbrk_r+0x1c>)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	602b      	str	r3, [r5, #0]
 8005fc8:	f7fb fa2e 	bl	8001428 <_sbrk>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_sbrk_r+0x1a>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_sbrk_r+0x1a>
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	2000017c 	.word	0x2000017c

08005fdc <__sread>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	460c      	mov	r4, r1
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f000 f8f8 	bl	80061d8 <_read_r>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	bfab      	itete	ge
 8005fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fee:	89a3      	ldrhlt	r3, [r4, #12]
 8005ff0:	181b      	addge	r3, r3, r0
 8005ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ff6:	bfac      	ite	ge
 8005ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ffa:	81a3      	strhlt	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__swrite>:
 8005ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006002:	461f      	mov	r7, r3
 8006004:	898b      	ldrh	r3, [r1, #12]
 8006006:	05db      	lsls	r3, r3, #23
 8006008:	4605      	mov	r5, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4616      	mov	r6, r2
 800600e:	d505      	bpl.n	800601c <__swrite+0x1e>
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	2302      	movs	r3, #2
 8006016:	2200      	movs	r2, #0
 8006018:	f000 f868 	bl	80060ec <_lseek_r>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	4628      	mov	r0, r5
 800602e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	f000 b817 	b.w	8006064 <_write_r>

08006036 <__sseek>:
 8006036:	b510      	push	{r4, lr}
 8006038:	460c      	mov	r4, r1
 800603a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603e:	f000 f855 	bl	80060ec <_lseek_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	89a3      	ldrh	r3, [r4, #12]
 8006046:	bf15      	itete	ne
 8006048:	6560      	strne	r0, [r4, #84]	; 0x54
 800604a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800604e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006052:	81a3      	strheq	r3, [r4, #12]
 8006054:	bf18      	it	ne
 8006056:	81a3      	strhne	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__sclose>:
 800605a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605e:	f000 b813 	b.w	8006088 <_close_r>
	...

08006064 <_write_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d07      	ldr	r5, [pc, #28]	; (8006084 <_write_r+0x20>)
 8006068:	4604      	mov	r4, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	2200      	movs	r2, #0
 8006070:	602a      	str	r2, [r5, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fb f98e 	bl	8001394 <_write>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_write_r+0x1e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_write_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	2000017c 	.word	0x2000017c

08006088 <_close_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_close_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fb f994 	bl	80013c0 <_close>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_close_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_close_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	2000017c 	.word	0x2000017c

080060a8 <_fstat_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d07      	ldr	r5, [pc, #28]	; (80060c8 <_fstat_r+0x20>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	602b      	str	r3, [r5, #0]
 80060b6:	f7fb f98f 	bl	80013d8 <_fstat>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d102      	bne.n	80060c4 <_fstat_r+0x1c>
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	b103      	cbz	r3, 80060c4 <_fstat_r+0x1c>
 80060c2:	6023      	str	r3, [r4, #0]
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	bf00      	nop
 80060c8:	2000017c 	.word	0x2000017c

080060cc <_isatty_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4d06      	ldr	r5, [pc, #24]	; (80060e8 <_isatty_r+0x1c>)
 80060d0:	2300      	movs	r3, #0
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	602b      	str	r3, [r5, #0]
 80060d8:	f7fb f98e 	bl	80013f8 <_isatty>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_isatty_r+0x1a>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_isatty_r+0x1a>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	2000017c 	.word	0x2000017c

080060ec <_lseek_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d07      	ldr	r5, [pc, #28]	; (800610c <_lseek_r+0x20>)
 80060f0:	4604      	mov	r4, r0
 80060f2:	4608      	mov	r0, r1
 80060f4:	4611      	mov	r1, r2
 80060f6:	2200      	movs	r2, #0
 80060f8:	602a      	str	r2, [r5, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fb f987 	bl	800140e <_lseek>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_lseek_r+0x1e>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_lseek_r+0x1e>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	2000017c 	.word	0x2000017c

08006110 <memcpy>:
 8006110:	440a      	add	r2, r1
 8006112:	4291      	cmp	r1, r2
 8006114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006118:	d100      	bne.n	800611c <memcpy+0xc>
 800611a:	4770      	bx	lr
 800611c:	b510      	push	{r4, lr}
 800611e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006126:	4291      	cmp	r1, r2
 8006128:	d1f9      	bne.n	800611e <memcpy+0xe>
 800612a:	bd10      	pop	{r4, pc}

0800612c <memmove>:
 800612c:	4288      	cmp	r0, r1
 800612e:	b510      	push	{r4, lr}
 8006130:	eb01 0402 	add.w	r4, r1, r2
 8006134:	d902      	bls.n	800613c <memmove+0x10>
 8006136:	4284      	cmp	r4, r0
 8006138:	4623      	mov	r3, r4
 800613a:	d807      	bhi.n	800614c <memmove+0x20>
 800613c:	1e43      	subs	r3, r0, #1
 800613e:	42a1      	cmp	r1, r4
 8006140:	d008      	beq.n	8006154 <memmove+0x28>
 8006142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800614a:	e7f8      	b.n	800613e <memmove+0x12>
 800614c:	4402      	add	r2, r0
 800614e:	4601      	mov	r1, r0
 8006150:	428a      	cmp	r2, r1
 8006152:	d100      	bne.n	8006156 <memmove+0x2a>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800615a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800615e:	e7f7      	b.n	8006150 <memmove+0x24>

08006160 <__malloc_lock>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__malloc_lock+0x8>)
 8006162:	f7ff b951 	b.w	8005408 <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	20000170 	.word	0x20000170

0800616c <__malloc_unlock>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__malloc_unlock+0x8>)
 800616e:	f7ff b94c 	b.w	800540a <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	20000170 	.word	0x20000170

08006178 <_realloc_r>:
 8006178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617c:	4680      	mov	r8, r0
 800617e:	4614      	mov	r4, r2
 8006180:	460e      	mov	r6, r1
 8006182:	b921      	cbnz	r1, 800618e <_realloc_r+0x16>
 8006184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	4611      	mov	r1, r2
 800618a:	f7ff ba11 	b.w	80055b0 <_malloc_r>
 800618e:	b92a      	cbnz	r2, 800619c <_realloc_r+0x24>
 8006190:	f7ff f9a2 	bl	80054d8 <_free_r>
 8006194:	4625      	mov	r5, r4
 8006196:	4628      	mov	r0, r5
 8006198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800619c:	f000 f82e 	bl	80061fc <_malloc_usable_size_r>
 80061a0:	4284      	cmp	r4, r0
 80061a2:	4607      	mov	r7, r0
 80061a4:	d802      	bhi.n	80061ac <_realloc_r+0x34>
 80061a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061aa:	d812      	bhi.n	80061d2 <_realloc_r+0x5a>
 80061ac:	4621      	mov	r1, r4
 80061ae:	4640      	mov	r0, r8
 80061b0:	f7ff f9fe 	bl	80055b0 <_malloc_r>
 80061b4:	4605      	mov	r5, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0ed      	beq.n	8006196 <_realloc_r+0x1e>
 80061ba:	42bc      	cmp	r4, r7
 80061bc:	4622      	mov	r2, r4
 80061be:	4631      	mov	r1, r6
 80061c0:	bf28      	it	cs
 80061c2:	463a      	movcs	r2, r7
 80061c4:	f7ff ffa4 	bl	8006110 <memcpy>
 80061c8:	4631      	mov	r1, r6
 80061ca:	4640      	mov	r0, r8
 80061cc:	f7ff f984 	bl	80054d8 <_free_r>
 80061d0:	e7e1      	b.n	8006196 <_realloc_r+0x1e>
 80061d2:	4635      	mov	r5, r6
 80061d4:	e7df      	b.n	8006196 <_realloc_r+0x1e>
	...

080061d8 <_read_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	; (80061f8 <_read_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fb f8b6 	bl	8001358 <_read>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_read_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_read_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	2000017c 	.word	0x2000017c

080061fc <_malloc_usable_size_r>:
 80061fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006200:	1f18      	subs	r0, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	bfbc      	itt	lt
 8006206:	580b      	ldrlt	r3, [r1, r0]
 8006208:	18c0      	addlt	r0, r0, r3
 800620a:	4770      	bx	lr

0800620c <_init>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr

08006218 <_fini>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr
