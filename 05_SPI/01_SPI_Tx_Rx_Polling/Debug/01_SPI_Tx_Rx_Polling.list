
01_SPI_Tx_Rx_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003858  08003858  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003860  08003860  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000018  08003880  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003880  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5e9  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001911  00000000  00000000  0002c631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f87  00000000  00000000  0002f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2fb  00000000  00000000  000573b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f63d2  00000000  00000000  000636b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c08  00000000  00000000  00159ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080037f8 	.word	0x080037f8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080037f8 	.word	0x080037f8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fa1c 	bl	8000932 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f815 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f8c3 	bl	8000688 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000502:	f000 f857 	bl	80005b4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000506:	f000 f881 	bl	800060c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_TransmitReceive(&hspi1, buffer_tx, buffer_rx, 10, 100);
 800050a:	2364      	movs	r3, #100	; 0x64
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	230a      	movs	r3, #10
 8000510:	4a02      	ldr	r2, [pc, #8]	; (800051c <main+0x2c>)
 8000512:	4903      	ldr	r1, [pc, #12]	; (8000520 <main+0x30>)
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <main+0x34>)
 8000516:	f002 f916 	bl	8002746 <HAL_SPI_TransmitReceive>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x2a>
 800051c:	2000011c 	.word	0x2000011c
 8000520:	20000000 	.word	0x20000000
 8000524:	200000b8 	.word	0x200000b8

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 f956 	bl	80037e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f000 fceb 	bl	8000f28 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f8ba 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800055c:	2310      	movs	r3, #16
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000568:	23b0      	movs	r3, #176	; 0xb0
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fd3d 	bl	8000ff4 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000580:	f000 f8a6 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	2102      	movs	r1, #2
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f943 	bl	8001828 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a8:	f000 f892 	bl	80006d0 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <MX_LPUART1_UART_Init+0x54>)
 80005bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005f2:	f002 fc1f 	bl	8002e34 <HAL_UART_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 f868 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000034 	.word	0x20000034
 8000608:	40008000 	.word	0x40008000

0800060c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_SPI1_Init+0x74>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <MX_SPI1_Init+0x78>)
 8000614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_SPI1_Init+0x74>)
 8000618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800061c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_SPI1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_SPI1_Init+0x74>)
 8000626:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800062a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_SPI1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_SPI1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_SPI1_Init+0x74>)
 800063a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_SPI1_Init+0x74>)
 8000642:	2210      	movs	r2, #16
 8000644:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_SPI1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_SPI1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SPI1_Init+0x74>)
 800065a:	2207      	movs	r2, #7
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_SPI1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SPI1_Init+0x74>)
 8000666:	2208      	movs	r2, #8
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_SPI1_Init+0x74>)
 800066c:	f001 ffc8 	bl	8002600 <HAL_SPI_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 f82b 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000b8 	.word	0x200000b8
 8000684:	40013000 	.word	0x40013000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_GPIO_Init+0x44>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <MX_GPIO_Init+0x44>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_GPIO_Init+0x44>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x44>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x44>)
 80006ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x44>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80006be:	f000 fc89 	bl	8000fd4 <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x44>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6613      	str	r3, [r2, #96]	; 0x60
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x44>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x44>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6593      	str	r3, [r2, #88]	; 0x58
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0ac      	sub	sp, #176	; 0xb0
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	228c      	movs	r2, #140	; 0x8c
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f003 f84f 	bl	80037e8 <memset>
  if(huart->Instance==LPUART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d13d      	bne.n	80007d0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000754:	2320      	movs	r3, #32
 8000756:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000758:	2300      	movs	r3, #0
 800075a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fa83 	bl	8001c6c <HAL_RCCEx_PeriphCLKConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800076c:	f7ff ffb0 	bl	80006d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <HAL_UART_MspInit+0xb8>)
 8000772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_UART_MspInit+0xb8>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_UART_MspInit+0xb8>)
 800077e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <HAL_UART_MspInit+0xb8>)
 800078a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078c:	4a13      	ldr	r2, [pc, #76]	; (80007dc <HAL_UART_MspInit+0xb8>)
 800078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_UART_MspInit+0xb8>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80007a0:	f000 fc18 	bl	8000fd4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80007a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80007be:	2308      	movs	r3, #8
 80007c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_UART_MspInit+0xbc>)
 80007cc:	f000 fa0c 	bl	8000be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	37b0      	adds	r7, #176	; 0xb0
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40008000 	.word	0x40008000
 80007dc:	40021000 	.word	0x40021000
 80007e0:	48001800 	.word	0x48001800

080007e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_SPI_MspInit+0x7c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d128      	bne.n	8000858 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_SPI_MspInit+0x80>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <HAL_SPI_MspInit+0x80>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000810:	6613      	str	r3, [r2, #96]	; 0x60
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_SPI_MspInit+0x80>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_SPI_MspInit+0x80>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_SPI_MspInit+0x80>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_SPI_MspInit+0x80>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000836:	23c2      	movs	r3, #194	; 0xc2
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000846:	2305      	movs	r3, #5
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f000 f9c8 	bl	8000be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40013000 	.word	0x40013000
 8000864:	40021000 	.word	0x40021000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f892 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <SystemInit+0x20>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <SystemInit+0x20>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000918 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f7ff ffea 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	; (8000920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f002 ff47 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000912:	f7ff fded 	bl	80004f0 <main>

08000916 <LoopForever>:

LoopForever:
    b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000918:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000924:	08003868 	.word	0x08003868
  ldr r2, =_sbss
 8000928:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800092c:	2000012c 	.word	0x2000012c

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>

08000932 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f91f 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f80e 	bl	8000964 <HAL_InitTick>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000954:	f7ff fec2 	bl	80006dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	79fb      	ldrb	r3, [r7, #7]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d023      	beq.n	80009c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_InitTick+0x70>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f91d 	bl	8000bce <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10f      	bne.n	80009ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d809      	bhi.n	80009b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a8:	f000 f8f5 	bl	8000b96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_InitTick+0x74>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e007      	b.n	80009c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e004      	b.n	80009c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e001      	b.n	80009c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000014 	.word	0x20000014
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	20000010 	.word	0x20000010

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000014 	.word	0x20000014
 8000a00:	20000128 	.word	0x20000128

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000128 	.word	0x20000128

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff47 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff5c 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff8e 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffb0 	bl	8000b3c <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e166      	b.n	8000ec6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8158 	beq.w	8000ec0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d005      	beq.n	8000c28 <HAL_GPIO_Init+0x40>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	f003 0201 	and.w	r2, r3, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d017      	beq.n	8000cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d123      	bne.n	8000d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	6939      	ldr	r1, [r7, #16]
 8000d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0203 	and.w	r2, r3, #3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80b2 	beq.w	8000ec0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b61      	ldr	r3, [pc, #388]	; (8000ee4 <HAL_GPIO_Init+0x2fc>)
 8000d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d60:	4a60      	ldr	r2, [pc, #384]	; (8000ee4 <HAL_GPIO_Init+0x2fc>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6613      	str	r3, [r2, #96]	; 0x60
 8000d68:	4b5e      	ldr	r3, [pc, #376]	; (8000ee4 <HAL_GPIO_Init+0x2fc>)
 8000d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d74:	4a5c      	ldr	r2, [pc, #368]	; (8000ee8 <HAL_GPIO_Init+0x300>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d9e:	d02b      	beq.n	8000df8 <HAL_GPIO_Init+0x210>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a52      	ldr	r2, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d025      	beq.n	8000df4 <HAL_GPIO_Init+0x20c>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a51      	ldr	r2, [pc, #324]	; (8000ef0 <HAL_GPIO_Init+0x308>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d01f      	beq.n	8000df0 <HAL_GPIO_Init+0x208>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a50      	ldr	r2, [pc, #320]	; (8000ef4 <HAL_GPIO_Init+0x30c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d019      	beq.n	8000dec <HAL_GPIO_Init+0x204>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x310>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d013      	beq.n	8000de8 <HAL_GPIO_Init+0x200>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <HAL_GPIO_Init+0x314>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d00d      	beq.n	8000de4 <HAL_GPIO_Init+0x1fc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a4d      	ldr	r2, [pc, #308]	; (8000f00 <HAL_GPIO_Init+0x318>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d007      	beq.n	8000de0 <HAL_GPIO_Init+0x1f8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a4c      	ldr	r2, [pc, #304]	; (8000f04 <HAL_GPIO_Init+0x31c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d101      	bne.n	8000ddc <HAL_GPIO_Init+0x1f4>
 8000dd8:	2307      	movs	r3, #7
 8000dda:	e00e      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000ddc:	2308      	movs	r3, #8
 8000dde:	e00c      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000de0:	2306      	movs	r3, #6
 8000de2:	e00a      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000de4:	2305      	movs	r3, #5
 8000de6:	e008      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000de8:	2304      	movs	r3, #4
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000dec:	2303      	movs	r3, #3
 8000dee:	e004      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <HAL_GPIO_Init+0x212>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	f002 0203 	and.w	r2, r2, #3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4093      	lsls	r3, r2
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e0a:	4937      	ldr	r1, [pc, #220]	; (8000ee8 <HAL_GPIO_Init+0x300>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e3c:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e42:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e66:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_GPIO_Init+0x320>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f ae91 	bne.w	8000bf8 <HAL_GPIO_Init+0x10>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	48000c00 	.word	0x48000c00
 8000ef8:	48001000 	.word	0x48001000
 8000efc:	48001400 	.word	0x48001400
 8000f00:	48001800 	.word	0x48001800
 8000f04:	48001c00 	.word	0x48001c00
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40007000 	.word	0x40007000

08000f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f36:	d130      	bne.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f44:	d038      	beq.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2232      	movs	r2, #50	; 0x32
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f6c:	e002      	b.n	8000f74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f80:	d102      	bne.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f2      	bne.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f94:	d110      	bne.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e00f      	b.n	8000fba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa6:	d007      	beq.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40007000 	.word	0x40007000
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	431bde83 	.word	0x431bde83

08000fd4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	6053      	str	r3, [r2, #4]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f000 bc08 	b.w	8001818 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001008:	4b96      	ldr	r3, [pc, #600]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001012:	4b94      	ldr	r3, [pc, #592]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80e4 	beq.w	80011f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <HAL_RCC_OscConfig+0x4c>
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2b0c      	cmp	r3, #12
 8001034:	f040 808b 	bne.w	800114e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b01      	cmp	r3, #1
 800103c:	f040 8087 	bne.w	800114e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001040:	4b88      	ldr	r3, [pc, #544]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <HAL_RCC_OscConfig+0x64>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e3df      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4b81      	ldr	r3, [pc, #516]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <HAL_RCC_OscConfig+0x7e>
 8001068:	4b7e      	ldr	r3, [pc, #504]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001070:	e005      	b.n	800107e <HAL_RCC_OscConfig+0x8a>
 8001072:	4b7c      	ldr	r3, [pc, #496]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800107e:	4293      	cmp	r3, r2
 8001080:	d223      	bcs.n	80010ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fd90 	bl	8001bac <RCC_SetFlashLatencyFromMSIRange>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e3c0      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001096:	4b73      	ldr	r3, [pc, #460]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a72      	ldr	r2, [pc, #456]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b70      	ldr	r3, [pc, #448]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	496d      	ldr	r1, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b4:	4b6b      	ldr	r3, [pc, #428]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	4968      	ldr	r1, [pc, #416]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	604b      	str	r3, [r1, #4]
 80010c8:	e025      	b.n	8001116 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ca:	4b66      	ldr	r3, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a65      	ldr	r2, [pc, #404]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b63      	ldr	r3, [pc, #396]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4960      	ldr	r1, [pc, #384]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e8:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	495b      	ldr	r1, [pc, #364]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fd50 	bl	8001bac <RCC_SetFlashLatencyFromMSIRange>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e380      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001116:	f000 fc87 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 800111a:	4602      	mov	r2, r0
 800111c:	4b51      	ldr	r3, [pc, #324]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	4950      	ldr	r1, [pc, #320]	; (8001268 <HAL_RCC_OscConfig+0x274>)
 8001128:	5ccb      	ldrb	r3, [r1, r3]
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	fa22 f303 	lsr.w	r3, r2, r3
 8001132:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_RCC_OscConfig+0x278>)
 8001134:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001136:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <HAL_RCC_OscConfig+0x27c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fc12 	bl	8000964 <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d052      	beq.n	80011f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	e364      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d032      	beq.n	80011bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001162:	f7ff fc4f 	bl	8000a04 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116a:	f7ff fc4b 	bl	8000a04 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e34d      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800117c:	4b39      	ldr	r3, [pc, #228]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a35      	ldr	r2, [pc, #212]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4930      	ldr	r1, [pc, #192]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	492b      	ldr	r1, [pc, #172]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e01a      	b.n	80011f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80011c2:	f023 0301 	bic.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc1c 	bl	8000a04 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc18 	bl	8000a04 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e31a      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1dc>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d073      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x21c>
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d10e      	bne.n	8001228 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d10b      	bne.n	8001228 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d063      	beq.n	80012e4 <HAL_RCC_OscConfig+0x2f0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d15f      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2f7      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x24c>
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e025      	b.n	800128c <HAL_RCC_OscConfig+0x298>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001248:	d114      	bne.n	8001274 <HAL_RCC_OscConfig+0x280>
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a02      	ldr	r2, [pc, #8]	; (8001264 <HAL_RCC_OscConfig+0x270>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e013      	b.n	800128c <HAL_RCC_OscConfig+0x298>
 8001264:	40021000 	.word	0x40021000
 8001268:	08003810 	.word	0x08003810
 800126c:	2000000c 	.word	0x2000000c
 8001270:	20000010 	.word	0x20000010
 8001274:	4ba0      	ldr	r3, [pc, #640]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a9f      	ldr	r2, [pc, #636]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b9d      	ldr	r3, [pc, #628]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a9c      	ldr	r2, [pc, #624]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fbb6 	bl	8000a04 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fbb2 	bl	8000a04 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e2b4      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ae:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x2a8>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fba2 	bl	8000a04 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb9e 	bl	8000a04 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e2a0      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d6:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2d0>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d060      	beq.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x310>
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b0c      	cmp	r3, #12
 80012fc:	d119      	bne.n	8001332 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d116      	bne.n	8001332 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001304:	4b7c      	ldr	r3, [pc, #496]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_OscConfig+0x328>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e27d      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	061b      	lsls	r3, r3, #24
 800132a:	4973      	ldr	r1, [pc, #460]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001330:	e040      	b.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d023      	beq.n	8001382 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133a:	4b6f      	ldr	r3, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6e      	ldr	r2, [pc, #440]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fb5d 	bl	8000a04 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fb59 	bl	8000a04 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e25b      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001360:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	061b      	lsls	r3, r3, #24
 800137a:	495f      	ldr	r1, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e018      	b.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800138c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fb39 	bl	8000a04 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff fb35 	bl	8000a04 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e237      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d03c      	beq.n	800143a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01c      	beq.n	8001402 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ce:	4a4a      	ldr	r2, [pc, #296]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fb14 	bl	8000a04 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fb10 	bl	8000a04 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e212      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ef      	beq.n	80013e0 <HAL_RCC_OscConfig+0x3ec>
 8001400:	e01b      	b.n	800143a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001408:	4a3b      	ldr	r2, [pc, #236]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff faf7 	bl	8000a04 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff faf3 	bl	8000a04 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1f5      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ef      	bne.n	800141a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80a6 	beq.w	8001594 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10d      	bne.n	8001474 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6593      	str	r3, [r2, #88]	; 0x58
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001470:	2301      	movs	r3, #1
 8001472:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_RCC_OscConfig+0x508>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d118      	bne.n	80014b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_RCC_OscConfig+0x508>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_RCC_OscConfig+0x508>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148c:	f7ff faba 	bl	8000a04 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001494:	f7ff fab6 	bl	8000a04 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1b8      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_RCC_OscConfig+0x508>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <HAL_RCC_OscConfig+0x4d8>
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ca:	e029      	b.n	8001520 <HAL_RCC_OscConfig+0x52c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d115      	bne.n	8001500 <HAL_RCC_OscConfig+0x50c>
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ea:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_RCC_OscConfig+0x504>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f4:	e014      	b.n	8001520 <HAL_RCC_OscConfig+0x52c>
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40007000 	.word	0x40007000
 8001500:	4b9d      	ldr	r3, [pc, #628]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001506:	4a9c      	ldr	r2, [pc, #624]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001510:	4b99      	ldr	r3, [pc, #612]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001516:	4a98      	ldr	r2, [pc, #608]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d016      	beq.n	8001556 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff fa6c 	bl	8000a04 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fa68 	bl	8000a04 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e168      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001546:	4b8c      	ldr	r3, [pc, #560]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0ed      	beq.n	8001530 <HAL_RCC_OscConfig+0x53c>
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fa55 	bl	8000a04 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff fa51 	bl	8000a04 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f241 3288 	movw	r2, #5000	; 0x1388
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e151      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001574:	4b80      	ldr	r3, [pc, #512]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ed      	bne.n	800155e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001582:	7ffb      	ldrb	r3, [r7, #31]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001588:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 800158e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001592:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03c      	beq.n	800161a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015a8:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80015aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ae:	4a72      	ldr	r2, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fa24 	bl	8000a04 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff fa20 	bl	8000a04 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e122      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015d2:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80015d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ef      	beq.n	80015c0 <HAL_RCC_OscConfig+0x5cc>
 80015e0:	e01b      	b.n	800161a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80015e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e8:	4a63      	ldr	r2, [pc, #396]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa07 	bl	8000a04 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fa:	f7ff fa03 	bl	8000a04 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e105      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800160c:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 800160e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ef      	bne.n	80015fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80f9 	beq.w	8001816 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	2b02      	cmp	r3, #2
 800162a:	f040 80cf 	bne.w	80017cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f003 0203 	and.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	429a      	cmp	r2, r3
 8001640:	d12c      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	3b01      	subs	r3, #1
 800164e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d123      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d11b      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d113      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167e:	085b      	lsrs	r3, r3, #1
 8001680:	3b01      	subs	r3, #1
 8001682:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d109      	bne.n	800169c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d071      	beq.n	8001780 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d068      	beq.n	8001774 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d105      	bne.n	80016ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0ac      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80016c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ca:	f7ff f99b 	bl	8000a04 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f997 	bl	8000a04 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e099      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_OscConfig+0x788>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001700:	3a01      	subs	r2, #1
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800170a:	0212      	lsls	r2, r2, #8
 800170c:	4311      	orrs	r1, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001712:	0852      	lsrs	r2, r2, #1
 8001714:	3a01      	subs	r2, #1
 8001716:	0552      	lsls	r2, r2, #21
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800171e:	0852      	lsrs	r2, r2, #1
 8001720:	3a01      	subs	r2, #1
 8001722:	0652      	lsls	r2, r2, #25
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800172a:	06d2      	lsls	r2, r2, #27
 800172c:	430a      	orrs	r2, r1
 800172e:	4912      	ldr	r1, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 800173a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800174c:	f7ff f95a 	bl	8000a04 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff f956 	bl	8000a04 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e058      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_RCC_OscConfig+0x784>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001772:	e050      	b.n	8001816 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e04f      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
 8001778:	40021000 	.word	0x40021000
 800177c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d144      	bne.n	8001816 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a23      	ldr	r2, [pc, #140]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017a4:	f7ff f92e 	bl	8000a04 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f92a 	bl	8000a04 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e02c      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x7b8>
 80017ca:	e024      	b.n	8001816 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d01f      	beq.n	8001812 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff f911 	bl	8000a04 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff f90d 	bl	8000a04 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	4905      	ldr	r1, [pc, #20]	; (8001820 <HAL_RCC_OscConfig+0x82c>)
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RCC_OscConfig+0x830>)
 800180c:	4013      	ands	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
 8001810:	e001      	b.n	8001816 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	feeefffc 	.word	0xfeeefffc

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0e7      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b75      	ldr	r3, [pc, #468]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d910      	bls.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b72      	ldr	r3, [pc, #456]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4970      	ldr	r1, [pc, #448]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b6e      	ldr	r3, [pc, #440]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0cf      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d010      	beq.n	800189a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001884:	429a      	cmp	r2, r3
 8001886:	d908      	bls.n	800189a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001888:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4960      	ldr	r1, [pc, #384]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d04c      	beq.n	8001940 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	4b5a      	ldr	r3, [pc, #360]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d121      	bne.n	80018fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0a6      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c6:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d115      	bne.n	80018fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e09a      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018de:	4b4e      	ldr	r3, [pc, #312]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d109      	bne.n	80018fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e08e      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e086      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018fe:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f023 0203 	bic.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4943      	ldr	r1, [pc, #268]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001910:	f7ff f878 	bl	8000a04 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	e00a      	b.n	800192e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001918:	f7ff f874 	bl	8000a04 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	; 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e06e      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 020c 	and.w	r2, r3, #12
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1eb      	bne.n	8001918 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d010      	beq.n	800196e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001958:	429a      	cmp	r2, r3
 800195a:	d208      	bcs.n	800196e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	492b      	ldr	r1, [pc, #172]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d210      	bcs.n	800199e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0207 	bic.w	r2, r3, #7
 8001984:	4923      	ldr	r1, [pc, #140]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_RCC_ClockConfig+0x1ec>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e036      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	4918      	ldr	r1, [pc, #96]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d009      	beq.n	80019dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4910      	ldr	r1, [pc, #64]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019dc:	f000 f824 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	490b      	ldr	r1, [pc, #44]	; (8001a1c <HAL_RCC_ClockConfig+0x1f4>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1f8>)
 80019fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1fc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe ffaf 	bl	8000964 <HAL_InitTick>
 8001a06:	4603      	mov	r3, r0
 8001a08:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08003810 	.word	0x08003810
 8001a20:	2000000c 	.word	0x2000000c
 8001a24:	20000010 	.word	0x20000010

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x34>
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d121      	bne.n	8001a9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d11e      	bne.n	8001a9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a5c:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a68:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e005      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a84:	4a2b      	ldr	r2, [pc, #172]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10d      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	e004      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d134      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0xa6>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d003      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xac>
 8001acc:	e005      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad0:	617b      	str	r3, [r7, #20]
      break;
 8001ad2:	e005      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad6:	617b      	str	r3, [r7, #20]
      break;
 8001ad8:	e002      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	617b      	str	r3, [r7, #20]
      break;
 8001ade:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	fb03 f202 	mul.w	r2, r3, r2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	0e5b      	lsrs	r3, r3, #25
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	3301      	adds	r3, #1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b20:	69bb      	ldr	r3, [r7, #24]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08003828 	.word	0x08003828
 8001b38:	00f42400 	.word	0x00f42400

08001b3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	2000000c 	.word	0x2000000c

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4904      	ldr	r1, [pc, #16]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	08003820 	.word	0x08003820

08001b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b84:	f7ff ffda 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0adb      	lsrs	r3, r3, #11
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08003820 	.word	0x08003820

08001bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc4:	f7ff f9a2 	bl	8000f0c <HAL_PWREx_GetVoltageRange>
 8001bc8:	6178      	str	r0, [r7, #20]
 8001bca:	e014      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001be4:	f7ff f992 	bl	8000f0c <HAL_PWREx_GetVoltageRange>
 8001be8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bfc:	d10b      	bne.n	8001c16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b80      	cmp	r3, #128	; 0x80
 8001c02:	d919      	bls.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2ba0      	cmp	r3, #160	; 0xa0
 8001c08:	d902      	bls.n	8001c10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e013      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e010      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d902      	bls.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e00a      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b80      	cmp	r3, #128	; 0x80
 8001c26:	d102      	bne.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c28:	2302      	movs	r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e004      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b70      	cmp	r3, #112	; 0x70
 8001c32:	d101      	bne.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c34:	2301      	movs	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 0207 	bic.w	r2, r3, #7
 8001c40:	4909      	ldr	r1, [pc, #36]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c74:	2300      	movs	r3, #0
 8001c76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c78:	2300      	movs	r3, #0
 8001c7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d041      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c90:	d02a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c96:	d824      	bhi.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c9c:	d008      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ca2:	d81e      	bhi.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00a      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cac:	d010      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001cb0:	4b86      	ldr	r3, [pc, #536]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a85      	ldr	r2, [pc, #532]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cbc:	e015      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 facd 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cce:	e00c      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3320      	adds	r3, #32
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fbb6 	bl	8002448 <RCCEx_PLLSAI2_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ce0:	e003      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ce6:	e000      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cea:	7cfb      	ldrb	r3, [r7, #19]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10b      	bne.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf0:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cfe:	4973      	ldr	r1, [pc, #460]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d06:	e001      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d08:	7cfb      	ldrb	r3, [r7, #19]
 8001d0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d041      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d20:	d02a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d26:	d824      	bhi.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d32:	d81e      	bhi.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d010      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d3e:	e018      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d40:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a61      	ldr	r2, [pc, #388]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d4c:	e015      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fa85 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d5e:	e00c      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3320      	adds	r3, #32
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fb6e 	bl	8002448 <RCCEx_PLLSAI2_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d70:	e003      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	74fb      	strb	r3, [r7, #19]
      break;
 8001d76:	e000      	b.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d80:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d8e:	494f      	ldr	r1, [pc, #316]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d96:	e001      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a0 	beq.w	8001eea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dec:	f7fe fe0a 	bl	8000a04 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001df2:	e009      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df4:	f7fe fe06 	bl	8000a04 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d902      	bls.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	74fb      	strb	r3, [r7, #19]
        break;
 8001e06:	e005      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ef      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d15c      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01f      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d019      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe fdc5 	bl	8000a04 <HAL_GetTick>
 8001e7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7c:	e00b      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7fe fdc1 	bl	8000a04 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d902      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	74fb      	strb	r3, [r7, #19]
            break;
 8001e94:	e006      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ec      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4904      	ldr	r1, [pc, #16]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ec2:	e009      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
 8001ec8:	e006      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed8:	7c7b      	ldrb	r3, [r7, #17]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4ba6      	ldr	r3, [pc, #664]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4aa5      	ldr	r2, [pc, #660]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef6:	4ba0      	ldr	r3, [pc, #640]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efc:	f023 0203 	bic.w	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	499c      	ldr	r1, [pc, #624]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f18:	4b97      	ldr	r3, [pc, #604]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1e:	f023 020c 	bic.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	4994      	ldr	r1, [pc, #592]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f3a:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	498b      	ldr	r1, [pc, #556]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f5c:	4b86      	ldr	r3, [pc, #536]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4983      	ldr	r1, [pc, #524]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f7e:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	497a      	ldr	r1, [pc, #488]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4972      	ldr	r1, [pc, #456]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc2:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd0:	4969      	ldr	r1, [pc, #420]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fe4:	4b64      	ldr	r3, [pc, #400]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff2:	4961      	ldr	r1, [pc, #388]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002006:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002014:	4958      	ldr	r1, [pc, #352]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	4950      	ldr	r1, [pc, #320]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4947      	ldr	r1, [pc, #284]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800206c:	4b42      	ldr	r3, [pc, #264]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800206e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	493f      	ldr	r1, [pc, #252]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d028      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800208e:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002094:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4936      	ldr	r1, [pc, #216]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ac:	d106      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ae:	4b32      	ldr	r3, [pc, #200]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	4a31      	ldr	r2, [pc, #196]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b8:	60d3      	str	r3, [r2, #12]
 80020ba:	e011      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f8c9 	bl	8002264 <RCCEx_PLLSAI1_Config>
 80020d2:	4603      	mov	r3, r0
 80020d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d028      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fa:	491f      	ldr	r1, [pc, #124]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800210a:	d106      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002116:	60d3      	str	r3, [r2, #12]
 8002118:	e011      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002122:	d10c      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	2101      	movs	r1, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f89a 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002168:	d108      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4a02      	ldr	r2, [pc, #8]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002174:	60d3      	str	r3, [r2, #12]
 8002176:	e013      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002178:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f869 	bl	8002264 <RCCEx_PLLSAI1_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02f      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ba:	4929      	ldr	r1, [pc, #164]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ca:	d10d      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	2102      	movs	r1, #2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f846 	bl	8002264 <RCCEx_PLLSAI1_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d014      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	74bb      	strb	r3, [r7, #18]
 80021e6:	e011      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021f0:	d10c      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3320      	adds	r3, #32
 80021f6:	2102      	movs	r1, #2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 f925 	bl	8002448 <RCCEx_PLLSAI2_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002202:	7cfb      	ldrb	r3, [r7, #19]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00b      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002228:	490d      	ldr	r1, [pc, #52]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800224c:	4904      	ldr	r1, [pc, #16]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002254:	7cbb      	ldrb	r3, [r7, #18]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000

08002264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002272:	4b74      	ldr	r3, [pc, #464]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d018      	beq.n	80022b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800227e:	4b71      	ldr	r3, [pc, #452]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d10d      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
       ||
 8002292:	2b00      	cmp	r3, #0
 8002294:	d009      	beq.n	80022aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002296:	4b6b      	ldr	r3, [pc, #428]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
       ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d047      	beq.n	800233a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e044      	b.n	800233a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d018      	beq.n	80022ea <RCCEx_PLLSAI1_Config+0x86>
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d825      	bhi.n	8002308 <RCCEx_PLLSAI1_Config+0xa4>
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d002      	beq.n	80022c6 <RCCEx_PLLSAI1_Config+0x62>
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d009      	beq.n	80022d8 <RCCEx_PLLSAI1_Config+0x74>
 80022c4:	e020      	b.n	8002308 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11d      	bne.n	800230e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d6:	e01a      	b.n	800230e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022d8:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d116      	bne.n	8002312 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e8:	e013      	b.n	8002312 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022ea:	4b56      	ldr	r3, [pc, #344]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002306:	e006      	b.n	8002316 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      break;
 800230c:	e004      	b.n	8002318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800230e:	bf00      	nop
 8002310:	e002      	b.n	8002318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002312:	bf00      	nop
 8002314:	e000      	b.n	8002318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002316:	bf00      	nop
    }

    if(status == HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6819      	ldr	r1, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	430b      	orrs	r3, r1
 8002334:	4943      	ldr	r1, [pc, #268]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	4313      	orrs	r3, r2
 8002338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d17c      	bne.n	800243a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800234a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234c:	f7fe fb5a 	bl	8000a04 <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002352:	e009      	b.n	8002368 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002354:	f7fe fb56 	bl	8000a04 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d902      	bls.n	8002368 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	73fb      	strb	r3, [r7, #15]
        break;
 8002366:	e005      	b.n	8002374 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ef      	bne.n	8002354 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d15f      	bne.n	800243a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d110      	bne.n	80023a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002388:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6892      	ldr	r2, [r2, #8]
 8002390:	0211      	lsls	r1, r2, #8
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	06d2      	lsls	r2, r2, #27
 8002398:	430a      	orrs	r2, r1
 800239a:	492a      	ldr	r1, [pc, #168]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	610b      	str	r3, [r1, #16]
 80023a0:	e027      	b.n	80023f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d112      	bne.n	80023ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6892      	ldr	r2, [r2, #8]
 80023b8:	0211      	lsls	r1, r2, #8
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6912      	ldr	r2, [r2, #16]
 80023be:	0852      	lsrs	r2, r2, #1
 80023c0:	3a01      	subs	r2, #1
 80023c2:	0552      	lsls	r2, r2, #21
 80023c4:	430a      	orrs	r2, r1
 80023c6:	491f      	ldr	r1, [pc, #124]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	610b      	str	r3, [r1, #16]
 80023cc:	e011      	b.n	80023f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6892      	ldr	r2, [r2, #8]
 80023de:	0211      	lsls	r1, r2, #8
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6952      	ldr	r2, [r2, #20]
 80023e4:	0852      	lsrs	r2, r2, #1
 80023e6:	3a01      	subs	r2, #1
 80023e8:	0652      	lsls	r2, r2, #25
 80023ea:	430a      	orrs	r2, r1
 80023ec:	4915      	ldr	r1, [pc, #84]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe fb01 	bl	8000a04 <HAL_GetTick>
 8002402:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002404:	e009      	b.n	800241a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002406:	f7fe fafd 	bl	8000a04 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d902      	bls.n	800241a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	73fb      	strb	r3, [r7, #15]
          break;
 8002418:	e005      	b.n	8002426 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0ef      	beq.n	8002406 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4903      	ldr	r1, [pc, #12]	; (8002444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000

08002448 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002456:	4b69      	ldr	r3, [pc, #420]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d018      	beq.n	8002494 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002462:	4b66      	ldr	r3, [pc, #408]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0203 	and.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d10d      	bne.n	800248e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
       ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800247a:	4b60      	ldr	r3, [pc, #384]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
       ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d047      	beq.n	800251e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e044      	b.n	800251e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d018      	beq.n	80024ce <RCCEx_PLLSAI2_Config+0x86>
 800249c:	2b03      	cmp	r3, #3
 800249e:	d825      	bhi.n	80024ec <RCCEx_PLLSAI2_Config+0xa4>
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d002      	beq.n	80024aa <RCCEx_PLLSAI2_Config+0x62>
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d009      	beq.n	80024bc <RCCEx_PLLSAI2_Config+0x74>
 80024a8:	e020      	b.n	80024ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024aa:	4b54      	ldr	r3, [pc, #336]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d11d      	bne.n	80024f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ba:	e01a      	b.n	80024f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024cc:	e013      	b.n	80024f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ce:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024da:	4b48      	ldr	r3, [pc, #288]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ea:	e006      	b.n	80024fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      break;
 80024f0:	e004      	b.n	80024fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024f2:	bf00      	nop
 80024f4:	e002      	b.n	80024fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024f6:	bf00      	nop
 80024f8:	e000      	b.n	80024fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	430b      	orrs	r3, r1
 8002518:	4938      	ldr	r1, [pc, #224]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d166      	bne.n	80025f2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002530:	f7fe fa68 	bl	8000a04 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002536:	e009      	b.n	800254c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002538:	f7fe fa64 	bl	8000a04 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	73fb      	strb	r3, [r7, #15]
        break;
 800254a:	e005      	b.n	8002558 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ef      	bne.n	8002538 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d149      	bne.n	80025f2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d110      	bne.n	8002586 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800256c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6892      	ldr	r2, [r2, #8]
 8002574:	0211      	lsls	r1, r2, #8
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	06d2      	lsls	r2, r2, #27
 800257c:	430a      	orrs	r2, r1
 800257e:	491f      	ldr	r1, [pc, #124]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	614b      	str	r3, [r1, #20]
 8002584:	e011      	b.n	80025aa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800258e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6892      	ldr	r2, [r2, #8]
 8002596:	0211      	lsls	r1, r2, #8
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6912      	ldr	r2, [r2, #16]
 800259c:	0852      	lsrs	r2, r2, #1
 800259e:	3a01      	subs	r2, #1
 80025a0:	0652      	lsls	r2, r2, #25
 80025a2:	430a      	orrs	r2, r1
 80025a4:	4915      	ldr	r1, [pc, #84]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fe fa25 	bl	8000a04 <HAL_GetTick>
 80025ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025bc:	e009      	b.n	80025d2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025be:	f7fe fa21 	bl	8000a04 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d902      	bls.n	80025d2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	73fb      	strb	r3, [r7, #15]
          break;
 80025d0:	e005      	b.n	80025de <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ef      	beq.n	80025be <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d106      	bne.n	80025f2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000

08002600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e095      	b.n	800273e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	d108      	bne.n	800262c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002622:	d009      	beq.n	8002638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
 800262a:	e005      	b.n	8002638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe f8c6 	bl	80007e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002678:	d902      	bls.n	8002680 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e002      	b.n	8002686 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002684:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800268e:	d007      	beq.n	80026a0 <HAL_SPI_Init+0xa0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002698:	d002      	beq.n	80026a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	0c1b      	lsrs	r3, r3, #16
 80026fc:	f003 0204 	and.w	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800271c:	ea42 0103 	orr.w	r1, r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b08a      	sub	sp, #40	; 0x28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002754:	2301      	movs	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_SPI_TransmitReceive+0x26>
 8002768:	2302      	movs	r3, #2
 800276a:	e1fb      	b.n	8002b64 <HAL_SPI_TransmitReceive+0x41e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002774:	f7fe f946 	bl	8000a04 <HAL_GetTick>
 8002778:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002780:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002790:	7efb      	ldrb	r3, [r7, #27]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d00e      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x6e>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279c:	d106      	bne.n	80027ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_SPI_TransmitReceive+0x66>
 80027a6:	7efb      	ldrb	r3, [r7, #27]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d003      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
 80027ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80027b2:	e1cd      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x80>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x80>
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80027cc:	e1c0      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d003      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2205      	movs	r2, #5
 80027de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	887a      	ldrh	r2, [r7, #2]
 80027f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002824:	d802      	bhi.n	800282c <HAL_SPI_TransmitReceive+0xe6>
 8002826:	8a3b      	ldrh	r3, [r7, #16]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d908      	bls.n	800283e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	e007      	b.n	800284e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800284c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d007      	beq.n	800286c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002874:	d97c      	bls.n	8002970 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_SPI_TransmitReceive+0x13e>
 800287e:	8a7b      	ldrh	r3, [r7, #18]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d169      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a8:	e056      	b.n	8002958 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d11b      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x1aa>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x1aa>
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d113      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	1c9a      	adds	r2, r3, #2
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d11c      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x1f2>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	b292      	uxth	r2, r2
 8002916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	1c9a      	adds	r2, r3, #2
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002934:	2301      	movs	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002938:	f7fe f864 	bl	8000a04 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002944:	429a      	cmp	r2, r3
 8002946:	d807      	bhi.n	8002958 <HAL_SPI_TransmitReceive+0x212>
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294e:	d003      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002956:	e0fb      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1a3      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x164>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d19d      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x164>
 800296e:	e0df      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_SPI_TransmitReceive+0x23a>
 8002978:	8a7b      	ldrh	r3, [r7, #18]
 800297a:	2b01      	cmp	r3, #1
 800297c:	f040 80cb 	bne.w	8002b16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d912      	bls.n	80029b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	881a      	ldrh	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	1c9a      	adds	r2, r3, #2
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b02      	subs	r3, #2
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029ae:	e0b2      	b.n	8002b16 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d6:	e09e      	b.n	8002b16 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d134      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x30a>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02f      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x30a>
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d12c      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d912      	bls.n	8002a26 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	1c9a      	adds	r2, r3, #2
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b02      	subs	r3, #2
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a24:	e012      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d148      	bne.n	8002af0 <HAL_SPI_TransmitReceive+0x3aa>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d042      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d923      	bls.n	8002abe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	b292      	uxth	r2, r2
 8002a82:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	1c9a      	adds	r2, r3, #2
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b02      	subs	r3, #2
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d81f      	bhi.n	8002aec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	e016      	b.n	8002aec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f103 020c 	add.w	r2, r3, #12
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aec:	2301      	movs	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002af0:	f7fd ff88 	bl	8000a04 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d803      	bhi.n	8002b08 <HAL_SPI_TransmitReceive+0x3c2>
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b06:	d102      	bne.n	8002b0e <HAL_SPI_TransmitReceive+0x3c8>
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b14:	e01c      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f af5b 	bne.w	80029d8 <HAL_SPI_TransmitReceive+0x292>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f47f af54 	bne.w	80029d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f937 	bl	8002da8 <SPI_EndRxTxTransaction>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
 8002b4c:	e000      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002b4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b7c:	f7fd ff42 	bl	8000a04 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b8c:	f7fd ff3a 	bl	8000a04 <HAL_GetTick>
 8002b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b92:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	015b      	lsls	r3, r3, #5
 8002b98:	0d1b      	lsrs	r3, r3, #20
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba2:	e054      	b.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002baa:	d050      	beq.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bac:	f7fd ff2a 	bl	8000a04 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d902      	bls.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d13d      	bne.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bda:	d111      	bne.n	8002c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be4:	d004      	beq.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d107      	bne.n	8002c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	d10f      	bne.n	8002c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e017      	b.n	8002c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4013      	ands	r3, r2
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	2300      	movne	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d19b      	bne.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c8e:	f7fd feb9 	bl	8000a04 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002c9e:	f7fd feb1 	bl	8000a04 <HAL_GetTick>
 8002ca2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00da      	lsls	r2, r3, #3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	0d1b      	lsrs	r3, r3, #20
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cc4:	e060      	b.n	8002d88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ccc:	d107      	bne.n	8002cde <SPI_WaitFifoStateUntilTimeout+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce4:	d050      	beq.n	8002d88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ce6:	f7fd fe8d 	bl	8000a04 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d902      	bls.n	8002cfc <SPI_WaitFifoStateUntilTimeout+0x80>
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d13d      	bne.n	8002d78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d14:	d111      	bne.n	8002d3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1e:	d004      	beq.n	8002d2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d107      	bne.n	8002d3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d42:	d10f      	bne.n	8002d64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e010      	b.n	8002d9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d196      	bne.n	8002cc6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000000c 	.word	0x2000000c

08002da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff ff5b 	bl	8002c7c <SPI_WaitFifoStateUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e027      	b.n	8002e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff fec0 	bl	8002b6c <SPI_WaitFlagStateUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e014      	b.n	8002e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff ff34 	bl	8002c7c <SPI_WaitFifoStateUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e000      	b.n	8002e2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e040      	b.n	8002ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fc64 	bl	8000724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f82c 	bl	8002ed0 <UART_SetConfig>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e022      	b.n	8002ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fad8 	bl	8003440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb5f 	bl	8003584 <UART_CheckIdleState>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b08a      	sub	sp, #40	; 0x28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4ba4      	ldr	r3, [pc, #656]	; (8003190 <UART_SetConfig+0x2c0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a99      	ldr	r2, [pc, #612]	; (8003194 <UART_SetConfig+0x2c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a90      	ldr	r2, [pc, #576]	; (8003198 <UART_SetConfig+0x2c8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d126      	bne.n	8002fa8 <UART_SetConfig+0xd8>
 8002f5a:	4b90      	ldr	r3, [pc, #576]	; (800319c <UART_SetConfig+0x2cc>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d81b      	bhi.n	8002fa0 <UART_SetConfig+0xd0>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <UART_SetConfig+0xa0>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f91 	.word	0x08002f91
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f99 	.word	0x08002f99
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f86:	e116      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	e112      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002f90:	2304      	movs	r3, #4
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e10e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002f98:	2308      	movs	r3, #8
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e10a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e106      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7c      	ldr	r2, [pc, #496]	; (80031a0 <UART_SetConfig+0x2d0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d138      	bne.n	8003024 <UART_SetConfig+0x154>
 8002fb2:	4b7a      	ldr	r3, [pc, #488]	; (800319c <UART_SetConfig+0x2cc>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d82d      	bhi.n	800301c <UART_SetConfig+0x14c>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <UART_SetConfig+0xf8>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	0800301d 	.word	0x0800301d
 8002fd0:	0800301d 	.word	0x0800301d
 8002fd4:	0800301d 	.word	0x0800301d
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	0800301d 	.word	0x0800301d
 8002fe0:	0800301d 	.word	0x0800301d
 8002fe4:	0800301d 	.word	0x0800301d
 8002fe8:	08003005 	.word	0x08003005
 8002fec:	0800301d 	.word	0x0800301d
 8002ff0:	0800301d 	.word	0x0800301d
 8002ff4:	0800301d 	.word	0x0800301d
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003002:	e0d8      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003004:	2302      	movs	r3, #2
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	e0d4      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800300c:	2304      	movs	r3, #4
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e0d0      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003014:	2308      	movs	r3, #8
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e0cc      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800301c:	2310      	movs	r3, #16
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003022:	e0c8      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a5e      	ldr	r2, [pc, #376]	; (80031a4 <UART_SetConfig+0x2d4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d125      	bne.n	800307a <UART_SetConfig+0x1aa>
 800302e:	4b5b      	ldr	r3, [pc, #364]	; (800319c <UART_SetConfig+0x2cc>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003038:	2b30      	cmp	r3, #48	; 0x30
 800303a:	d016      	beq.n	800306a <UART_SetConfig+0x19a>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d818      	bhi.n	8003072 <UART_SetConfig+0x1a2>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d00a      	beq.n	800305a <UART_SetConfig+0x18a>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d814      	bhi.n	8003072 <UART_SetConfig+0x1a2>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <UART_SetConfig+0x182>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d008      	beq.n	8003062 <UART_SetConfig+0x192>
 8003050:	e00f      	b.n	8003072 <UART_SetConfig+0x1a2>
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003058:	e0ad      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800305a:	2302      	movs	r3, #2
 800305c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003060:	e0a9      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003062:	2304      	movs	r3, #4
 8003064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003068:	e0a5      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800306a:	2308      	movs	r3, #8
 800306c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003070:	e0a1      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003072:	2310      	movs	r3, #16
 8003074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003078:	e09d      	b.n	80031b6 <UART_SetConfig+0x2e6>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <UART_SetConfig+0x2d8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d125      	bne.n	80030d0 <UART_SetConfig+0x200>
 8003084:	4b45      	ldr	r3, [pc, #276]	; (800319c <UART_SetConfig+0x2cc>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800308e:	2bc0      	cmp	r3, #192	; 0xc0
 8003090:	d016      	beq.n	80030c0 <UART_SetConfig+0x1f0>
 8003092:	2bc0      	cmp	r3, #192	; 0xc0
 8003094:	d818      	bhi.n	80030c8 <UART_SetConfig+0x1f8>
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d00a      	beq.n	80030b0 <UART_SetConfig+0x1e0>
 800309a:	2b80      	cmp	r3, #128	; 0x80
 800309c:	d814      	bhi.n	80030c8 <UART_SetConfig+0x1f8>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <UART_SetConfig+0x1d8>
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d008      	beq.n	80030b8 <UART_SetConfig+0x1e8>
 80030a6:	e00f      	b.n	80030c8 <UART_SetConfig+0x1f8>
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ae:	e082      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b6:	e07e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030b8:	2304      	movs	r3, #4
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030be:	e07a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030c0:	2308      	movs	r3, #8
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e076      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030c8:	2310      	movs	r3, #16
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e072      	b.n	80031b6 <UART_SetConfig+0x2e6>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a35      	ldr	r2, [pc, #212]	; (80031ac <UART_SetConfig+0x2dc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d12a      	bne.n	8003130 <UART_SetConfig+0x260>
 80030da:	4b30      	ldr	r3, [pc, #192]	; (800319c <UART_SetConfig+0x2cc>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e8:	d01a      	beq.n	8003120 <UART_SetConfig+0x250>
 80030ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ee:	d81b      	bhi.n	8003128 <UART_SetConfig+0x258>
 80030f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f4:	d00c      	beq.n	8003110 <UART_SetConfig+0x240>
 80030f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fa:	d815      	bhi.n	8003128 <UART_SetConfig+0x258>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <UART_SetConfig+0x238>
 8003100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003104:	d008      	beq.n	8003118 <UART_SetConfig+0x248>
 8003106:	e00f      	b.n	8003128 <UART_SetConfig+0x258>
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310e:	e052      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003110:	2302      	movs	r3, #2
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e04e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003118:	2304      	movs	r3, #4
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e04a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003120:	2308      	movs	r3, #8
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e046      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003128:	2310      	movs	r3, #16
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e042      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a17      	ldr	r2, [pc, #92]	; (8003194 <UART_SetConfig+0x2c4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d13a      	bne.n	80031b0 <UART_SetConfig+0x2e0>
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <UART_SetConfig+0x2cc>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003148:	d01a      	beq.n	8003180 <UART_SetConfig+0x2b0>
 800314a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800314e:	d81b      	bhi.n	8003188 <UART_SetConfig+0x2b8>
 8003150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003154:	d00c      	beq.n	8003170 <UART_SetConfig+0x2a0>
 8003156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315a:	d815      	bhi.n	8003188 <UART_SetConfig+0x2b8>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <UART_SetConfig+0x298>
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003164:	d008      	beq.n	8003178 <UART_SetConfig+0x2a8>
 8003166:	e00f      	b.n	8003188 <UART_SetConfig+0x2b8>
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316e:	e022      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003170:	2302      	movs	r3, #2
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e01e      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003178:	2304      	movs	r3, #4
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e01a      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003180:	2308      	movs	r3, #8
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e016      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003188:	2310      	movs	r3, #16
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e012      	b.n	80031b6 <UART_SetConfig+0x2e6>
 8003190:	efff69f3 	.word	0xefff69f3
 8003194:	40008000 	.word	0x40008000
 8003198:	40013800 	.word	0x40013800
 800319c:	40021000 	.word	0x40021000
 80031a0:	40004400 	.word	0x40004400
 80031a4:	40004800 	.word	0x40004800
 80031a8:	40004c00 	.word	0x40004c00
 80031ac:	40005000 	.word	0x40005000
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a9f      	ldr	r2, [pc, #636]	; (8003438 <UART_SetConfig+0x568>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d17a      	bne.n	80032b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d824      	bhi.n	8003212 <UART_SetConfig+0x342>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x300>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	08003213 	.word	0x08003213
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	08003213 	.word	0x08003213
 80031e0:	08003203 	.word	0x08003203
 80031e4:	08003213 	.word	0x08003213
 80031e8:	08003213 	.word	0x08003213
 80031ec:	08003213 	.word	0x08003213
 80031f0:	0800320b 	.word	0x0800320b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7fe fcae 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80031f8:	61f8      	str	r0, [r7, #28]
        break;
 80031fa:	e010      	b.n	800321e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031fc:	4b8f      	ldr	r3, [pc, #572]	; (800343c <UART_SetConfig+0x56c>)
 80031fe:	61fb      	str	r3, [r7, #28]
        break;
 8003200:	e00d      	b.n	800321e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003202:	f7fe fc11 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 8003206:	61f8      	str	r0, [r7, #28]
        break;
 8003208:	e009      	b.n	800321e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320e:	61fb      	str	r3, [r7, #28]
        break;
 8003210:	e005      	b.n	800321e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800321c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80fb 	beq.w	800341c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	429a      	cmp	r2, r3
 8003234:	d305      	bcc.n	8003242 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	429a      	cmp	r2, r3
 8003240:	d903      	bls.n	800324a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003248:	e0e8      	b.n	800341c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	2200      	movs	r2, #0
 800324e:	461c      	mov	r4, r3
 8003250:	4615      	mov	r5, r2
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	022b      	lsls	r3, r5, #8
 800325c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003260:	0222      	lsls	r2, r4, #8
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	6849      	ldr	r1, [r1, #4]
 8003266:	0849      	lsrs	r1, r1, #1
 8003268:	2000      	movs	r0, #0
 800326a:	4688      	mov	r8, r1
 800326c:	4681      	mov	r9, r0
 800326e:	eb12 0a08 	adds.w	sl, r2, r8
 8003272:	eb43 0b09 	adc.w	fp, r3, r9
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003284:	4650      	mov	r0, sl
 8003286:	4659      	mov	r1, fp
 8003288:	f7fc ffb0 	bl	80001ec <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4613      	mov	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329a:	d308      	bcc.n	80032ae <UART_SetConfig+0x3de>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a2:	d204      	bcs.n	80032ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e0b6      	b.n	800341c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032b4:	e0b2      	b.n	800341c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032be:	d15e      	bne.n	800337e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80032c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d828      	bhi.n	800331a <UART_SetConfig+0x44a>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x400>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7fe fc2e 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80032f8:	61f8      	str	r0, [r7, #28]
        break;
 80032fa:	e014      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe fc40 	bl	8001b80 <HAL_RCC_GetPCLK2Freq>
 8003300:	61f8      	str	r0, [r7, #28]
        break;
 8003302:	e010      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <UART_SetConfig+0x56c>)
 8003306:	61fb      	str	r3, [r7, #28]
        break;
 8003308:	e00d      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7fe fb8d 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 800330e:	61f8      	str	r0, [r7, #28]
        break;
 8003310:	e009      	b.n	8003326 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	61fb      	str	r3, [r7, #28]
        break;
 8003318:	e005      	b.n	8003326 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d077      	beq.n	800341c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005a      	lsls	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	441a      	add	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d916      	bls.n	8003376 <UART_SetConfig+0x4a6>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d212      	bcs.n	8003376 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f023 030f 	bic.w	r3, r3, #15
 8003358:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	b29a      	uxth	r2, r3
 8003366:	8afb      	ldrh	r3, [r7, #22]
 8003368:	4313      	orrs	r3, r2
 800336a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	8afa      	ldrh	r2, [r7, #22]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	e052      	b.n	800341c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800337c:	e04e      	b.n	800341c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800337e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003382:	2b08      	cmp	r3, #8
 8003384:	d827      	bhi.n	80033d6 <UART_SetConfig+0x506>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <UART_SetConfig+0x4bc>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c7 	.word	0x080033c7
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033d7 	.word	0x080033d7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7fe fbd0 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80033b4:	61f8      	str	r0, [r7, #28]
        break;
 80033b6:	e014      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b8:	f7fe fbe2 	bl	8001b80 <HAL_RCC_GetPCLK2Freq>
 80033bc:	61f8      	str	r0, [r7, #28]
        break;
 80033be:	e010      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <UART_SetConfig+0x56c>)
 80033c2:	61fb      	str	r3, [r7, #28]
        break;
 80033c4:	e00d      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7fe fb2f 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80033ca:	61f8      	str	r0, [r7, #28]
        break;
 80033cc:	e009      	b.n	80033e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	61fb      	str	r3, [r7, #28]
        break;
 80033d4:	e005      	b.n	80033e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033e0:	bf00      	nop
    }

    if (pclk != 0U)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d019      	beq.n	800341c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	085a      	lsrs	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	441a      	add	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	d909      	bls.n	8003416 <UART_SetConfig+0x546>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d205      	bcs.n	8003416 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	e002      	b.n	800341c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003428:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800342c:	4618      	mov	r0, r3
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003436:	bf00      	nop
 8003438:	40008000 	.word	0x40008000
 800343c:	00f42400 	.word	0x00f42400

08003440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01a      	beq.n	8003556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353e:	d10a      	bne.n	8003556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003594:	f7fd fa36 	bl	8000a04 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d10e      	bne.n	80035c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f82d 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e023      	b.n	800360e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d10e      	bne.n	80035f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f817 	bl	8003616 <UART_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e00d      	b.n	800360e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b09c      	sub	sp, #112	; 0x70
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003626:	e0a5      	b.n	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362e:	f000 80a1 	beq.w	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fd f9e7 	bl	8000a04 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <UART_WaitOnFlagUntilTimeout+0x32>
 8003642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003644:	2b00      	cmp	r3, #0
 8003646:	d13e      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800365c:	667b      	str	r3, [r7, #100]	; 0x64
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003668:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800366c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e6      	bne.n	8003648 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3308      	adds	r3, #8
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	663b      	str	r3, [r7, #96]	; 0x60
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3308      	adds	r3, #8
 8003698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800369a:	64ba      	str	r2, [r7, #72]	; 0x48
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e5      	bne.n	800367a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e067      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d04f      	beq.n	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d147      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
 800370e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e6      	bne.n	80036ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	613b      	str	r3, [r7, #16]
   return(result);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	66bb      	str	r3, [r7, #104]	; 0x68
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3308      	adds	r3, #8
 800373e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003740:	623a      	str	r2, [r7, #32]
 8003742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	69f9      	ldr	r1, [r7, #28]
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	61bb      	str	r3, [r7, #24]
   return(result);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e010      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4013      	ands	r3, r2
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	429a      	cmp	r2, r3
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	429a      	cmp	r2, r3
 8003790:	f43f af4a 	beq.w	8003628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3770      	adds	r7, #112	; 0x70
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4d0d      	ldr	r5, [pc, #52]	; (80037d8 <__libc_init_array+0x38>)
 80037a4:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	2600      	movs	r6, #0
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	4d0b      	ldr	r5, [pc, #44]	; (80037e0 <__libc_init_array+0x40>)
 80037b2:	4c0c      	ldr	r4, [pc, #48]	; (80037e4 <__libc_init_array+0x44>)
 80037b4:	f000 f820 	bl	80037f8 <_init>
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	2600      	movs	r6, #0
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	08003860 	.word	0x08003860
 80037dc:	08003860 	.word	0x08003860
 80037e0:	08003860 	.word	0x08003860
 80037e4:	08003864 	.word	0x08003864

080037e8 <memset>:
 80037e8:	4402      	add	r2, r0
 80037ea:	4603      	mov	r3, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d100      	bne.n	80037f2 <memset+0xa>
 80037f0:	4770      	bx	lr
 80037f2:	f803 1b01 	strb.w	r1, [r3], #1
 80037f6:	e7f9      	b.n	80037ec <memset+0x4>

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
