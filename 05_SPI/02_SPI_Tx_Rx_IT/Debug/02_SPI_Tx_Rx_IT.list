
02_SPI_Tx_Rx_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d0c  08005d0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000070  08005d84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005d84  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f898  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002218  00000000  00000000  0002f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00031b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  000327f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f0c  00000000  00000000  000333b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edd5  00000000  00000000  0005d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbddd  00000000  00000000  0006c099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167e76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b24  00000000  00000000  00167ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c04 	.word	0x08005c04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005c04 	.word	0x08005c04

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb87 	bl	8000caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f83a 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8ea 	bl	8000778 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005a4:	f000 f87e 	bl	80006a4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80005a8:	f000 f8a8 	bl	80006fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&hlpuart1, rx_buffer, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	4910      	ldr	r1, [pc, #64]	; (80005f0 <main+0x5c>)
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <main+0x60>)
 80005b2:	f003 f8cf 	bl	8003754 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(uart_cplt == 1)
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <main+0x64>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d10a      	bne.n	80005d6 <main+0x42>
	  {
		  /* transmit and received the data through spi in interrupt mode */
		  HAL_SPI_TransmitReceive_IT(&hspi1, uart_buffer, buffer_print, received_length);
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <main+0x68>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0x6c>)
 80005c8:	490e      	ldr	r1, [pc, #56]	; (8000604 <main+0x70>)
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x74>)
 80005cc:	f002 fb56 	bl	8002c7c <HAL_SPI_TransmitReceive_IT>
		  uart_cplt = 0; //Clear flag for next uart send payload.
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <main+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	  }

	  if(spi_cplt == 1)			//if spi tx-rx completes
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <main+0x78>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d1ea      	bne.n	80005b6 <main+0x22>
	  {
		  /* continuous process */
		  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <main+0x7c>)
 80005e4:	f000 ff10 	bl	8001408 <HAL_GPIO_TogglePin>
		  spi_cplt = 0; //Clear flag for next spi tx-rx payload.
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <main+0x78>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	  if(uart_cplt == 1)
 80005ee:	e7e2      	b.n	80005b6 <main+0x22>
 80005f0:	2000023c 	.word	0x2000023c
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	200002a1 	.word	0x200002a1
 80005fc:	200002a2 	.word	0x200002a2
 8000600:	20000174 	.word	0x20000174
 8000604:	200001d8 	.word	0x200001d8
 8000608:	20000110 	.word	0x20000110
 800060c:	200002a0 	.word	0x200002a0
 8000610:	48000400 	.word	0x48000400

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b096      	sub	sp, #88	; 0x58
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2244      	movs	r2, #68	; 0x44
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f004 fb58 	bl	8004cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063a:	f000 ff0d 	bl	8001458 <HAL_PWREx_ControlVoltageScaling>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000644:	f000 f93e 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000648:	2310      	movs	r3, #16
 800064a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000654:	23b0      	movs	r3, #176	; 0xb0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f000 ff5f 	bl	8001524 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800066c:	f000 f92a 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fb64 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000696:	f000 f915 	bl	80008c4 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3758      	adds	r7, #88	; 0x58
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MX_LPUART1_UART_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_LPUART1_UART_Init+0x50>)
 80006e2:	f002 ff55 	bl	8003590 <HAL_UART_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f8ea 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	40008000 	.word	0x40008000

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_SPI1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_SPI1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_SPI1_Init+0x74>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI1_Init+0x74>)
 8000716:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800071a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI1_Init+0x74>)
 800072a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI1_Init+0x74>)
 8000732:	2238      	movs	r2, #56	; 0x38
 8000734:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI1_Init+0x74>)
 800074a:	2207      	movs	r2, #7
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI1_Init+0x74>)
 8000756:	2208      	movs	r2, #8
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_SPI1_Init+0x74>)
 800075c:	f002 f9ea 	bl	8002b34 <HAL_SPI_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f8ad 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000110 	.word	0x20000110
 8000774:	40013000 	.word	0x40013000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_GPIO_Init+0x90>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <MX_GPIO_Init+0x90>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_GPIO_Init+0x90>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_GPIO_Init+0x90>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_GPIO_Init+0x90>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_GPIO_Init+0x90>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007be:	f000 fea1 	bl	8001504 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_GPIO_Init+0x90>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <MX_GPIO_Init+0x90>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_GPIO_Init+0x90>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0x94>)
 80007e0:	f000 fdfa 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0x94>)
 80007fc:	f000 fc5a 	bl	80010b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	/* start the reception of data in interrupt mode again */
	HAL_UART_Receive_IT(&hlpuart1, rx_buffer, 1);
 8000818:	2201      	movs	r2, #1
 800081a:	4917      	ldr	r1, [pc, #92]	; (8000878 <HAL_UART_RxCpltCallback+0x68>)
 800081c:	4817      	ldr	r0, [pc, #92]	; (800087c <HAL_UART_RxCpltCallback+0x6c>)
 800081e:	f002 ff99 	bl	8003754 <HAL_UART_Receive_IT>

	/* store the received data into buffer */
	if(rx_buffer[0]!= RETURN_CHAR && rx_buffer[0] != NEWLINE_CHAR)
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_UART_RxCpltCallback+0x68>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b0d      	cmp	r3, #13
 8000828:	d013      	beq.n	8000852 <HAL_UART_RxCpltCallback+0x42>
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <HAL_UART_RxCpltCallback+0x68>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b0a      	cmp	r3, #10
 8000830:	d00f      	beq.n	8000852 <HAL_UART_RxCpltCallback+0x42>
	{
		uart_buffer[Index] = rx_buffer[0];
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_UART_RxCpltCallback+0x70>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b29b      	uxth	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_UART_RxCpltCallback+0x68>)
 800083c:	7819      	ldrb	r1, [r3, #0]
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_UART_RxCpltCallback+0x74>)
 8000840:	5499      	strb	r1, [r3, r2]
		Index++;							//increment length
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_UART_RxCpltCallback+0x70>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	3301      	adds	r3, #1
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_UART_RxCpltCallback+0x70>)
 800084e:	801a      	strh	r2, [r3, #0]
	{
		uart_cplt = 1;				//data reception complete
		received_length = Index;	//store length in another variable
		Index = 0;					//clear the length
	}
}
 8000850:	e00e      	b.n	8000870 <HAL_UART_RxCpltCallback+0x60>
	else if (rx_buffer[0] == NEWLINE_CHAR)
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_UART_RxCpltCallback+0x68>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b0a      	cmp	r3, #10
 8000858:	d10a      	bne.n	8000870 <HAL_UART_RxCpltCallback+0x60>
		uart_cplt = 1;				//data reception complete
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_UART_RxCpltCallback+0x78>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
		received_length = Index;	//store length in another variable
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <HAL_UART_RxCpltCallback+0x70>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_UART_RxCpltCallback+0x7c>)
 8000868:	801a      	strh	r2, [r3, #0]
		Index = 0;					//clear the length
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_UART_RxCpltCallback+0x70>)
 800086c:	2200      	movs	r2, #0
 800086e:	801a      	strh	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000023c 	.word	0x2000023c
 800087c:	2000008c 	.word	0x2000008c
 8000880:	200002a4 	.word	0x200002a4
 8000884:	200001d8 	.word	0x200001d8
 8000888:	200002a1 	.word	0x200002a1
 800088c:	200002a2 	.word	0x200002a2

08000890 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	/* print the received data on terminal */
	printf("%s\r\n", buffer_print);			//print the buffer
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <HAL_SPI_TxRxCpltCallback+0x28>)
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <HAL_SPI_TxRxCpltCallback+0x2c>)
 800089c:	f004 fa24 	bl	8004ce8 <iprintf>
	spi_cplt = 1;							//enable the flag
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_SPI_TxRxCpltCallback+0x30>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
	memset(buffer_print, 0, MAX_SIZE);		//clear buffer
 80008a6:	2264      	movs	r2, #100	; 0x64
 80008a8:	2100      	movs	r1, #0
 80008aa:	4803      	ldr	r0, [pc, #12]	; (80008b8 <HAL_SPI_TxRxCpltCallback+0x28>)
 80008ac:	f004 fa14 	bl	8004cd8 <memset>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000174 	.word	0x20000174
 80008bc:	08005c1c 	.word	0x08005c1c
 80008c0:	200002a0 	.word	0x200002a0

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0ac      	sub	sp, #176	; 0xb0
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	228c      	movs	r2, #140	; 0x8c
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f004 f9cd 	bl	8004cd8 <memset>
  if(huart->Instance==LPUART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a26      	ldr	r2, [pc, #152]	; (80009dc <HAL_UART_MspInit+0xc4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d145      	bne.n	80009d4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000948:	2320      	movs	r3, #32
 800094a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fc23 	bl	80021a0 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000960:	f7ff ffb0 	bl	80008c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <HAL_UART_MspInit+0xc8>)
 8000966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000968:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <HAL_UART_MspInit+0xc8>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_UART_MspInit+0xc8>)
 8000972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_UART_MspInit+0xc8>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0xc8>)
 8000982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_UART_MspInit+0xc8>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000994:	f000 fdb6 	bl	8001504 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000998:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800099c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009b2:	2308      	movs	r3, #8
 80009b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009bc:	4619      	mov	r1, r3
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <HAL_UART_MspInit+0xcc>)
 80009c0:	f000 fb78 	bl	80010b4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2046      	movs	r0, #70	; 0x46
 80009ca:	f000 fabe 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80009ce:	2046      	movs	r0, #70	; 0x46
 80009d0:	f000 fad7 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	37b0      	adds	r7, #176	; 0xb0
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40008000 	.word	0x40008000
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48001800 	.word	0x48001800

080009e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <HAL_SPI_MspInit+0x8c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d130      	bne.n	8000a6c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a14:	6613      	str	r3, [r2, #96]	; 0x60
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_SPI_MspInit+0x90>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a3a:	23c2      	movs	r3, #194	; 0xc2
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fb2c 	bl	80010b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2023      	movs	r0, #35	; 0x23
 8000a62:	f000 fa72 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a66:	2023      	movs	r0, #35	; 0x23
 8000a68:	f000 fa8b 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40013000 	.word	0x40013000
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f944 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <SPI1_IRQHandler+0x10>)
 8000ad6:	f002 f981 	bl	8002ddc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000110 	.word	0x20000110

08000ae4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <LPUART1_IRQHandler+0x10>)
 8000aea:	f002 fe89 	bl	8003800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000008c 	.word	0x2000008c

08000af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
  }

  return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	4804      	ldr	r0, [pc, #16]	; (8000b5c <_write+0x28>)
 8000b4c:	f002 fd6e 	bl	800362c <HAL_UART_Transmit>
  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000008c 	.word	0x2000008c

08000b60 <_close>:

int _close(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b88:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_isatty>:

int _isatty(int file)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f004 f844 	bl	8004c84 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20050000 	.word	0x20050000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	200002a8 	.word	0x200002a8
 8000c30:	200002c0 	.word	0x200002c0

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f004 f803 	bl	8004c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fc83 	bl	8000594 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c9c:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 8000ca0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca4:	200002c0 	.word	0x200002c0

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>

08000caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f93d 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f80e 	bl	8000cdc <HAL_InitTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e001      	b.n	8000cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ccc:	f7ff fe00 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d023      	beq.n	8000d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_InitTick+0x70>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_InitTick+0x6c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f949 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10f      	bne.n	8000d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d809      	bhi.n	8000d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d20:	f000 f913 	bl	8000f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_InitTick+0x74>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e004      	b.n	8000d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e001      	b.n	8000d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200002ac 	.word	0x200002ac

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200002ac 	.word	0x200002ac

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff29 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff3e 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff8e 	bl	8000e88 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5d 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff31 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa2 	bl	8000ef0 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d008      	beq.n	8000fe0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e022      	b.n	8001026 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 020e 	bic.w	r2, r2, #14
 8000fee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	f003 021c 	and.w	r2, r3, #28
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d005      	beq.n	8001056 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2204      	movs	r2, #4
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e029      	b.n	80010aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 020e 	bic.w	r2, r2, #14
 8001064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f003 021c 	and.w	r2, r3, #28
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	4798      	blx	r3
    }
  }
  return status;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c2:	e166      	b.n	8001392 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8158 	beq.w	800138c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_GPIO_Init+0x40>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d130      	bne.n	8001156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112a:	2201      	movs	r2, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 0201 	and.w	r2, r3, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b03      	cmp	r3, #3
 8001160:	d017      	beq.n	8001192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d123      	bne.n	80011e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691a      	ldr	r2, [r3, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	6939      	ldr	r1, [r7, #16]
 80011e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0203 	and.w	r2, r3, #3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 80b2 	beq.w	800138c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001228:	4b61      	ldr	r3, [pc, #388]	; (80013b0 <HAL_GPIO_Init+0x2fc>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122c:	4a60      	ldr	r2, [pc, #384]	; (80013b0 <HAL_GPIO_Init+0x2fc>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6613      	str	r3, [r2, #96]	; 0x60
 8001234:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <HAL_GPIO_Init+0x2fc>)
 8001236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001240:	4a5c      	ldr	r2, [pc, #368]	; (80013b4 <HAL_GPIO_Init+0x300>)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800126a:	d02b      	beq.n	80012c4 <HAL_GPIO_Init+0x210>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_GPIO_Init+0x304>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d025      	beq.n	80012c0 <HAL_GPIO_Init+0x20c>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_GPIO_Init+0x308>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d01f      	beq.n	80012bc <HAL_GPIO_Init+0x208>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a50      	ldr	r2, [pc, #320]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d019      	beq.n	80012b8 <HAL_GPIO_Init+0x204>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x310>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d013      	beq.n	80012b4 <HAL_GPIO_Init+0x200>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <HAL_GPIO_Init+0x314>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d00d      	beq.n	80012b0 <HAL_GPIO_Init+0x1fc>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <HAL_GPIO_Init+0x318>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x1f8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_GPIO_Init+0x31c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_GPIO_Init+0x1f4>
 80012a4:	2307      	movs	r3, #7
 80012a6:	e00e      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012a8:	2308      	movs	r3, #8
 80012aa:	e00c      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012ac:	2306      	movs	r3, #6
 80012ae:	e00a      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012b0:	2305      	movs	r3, #5
 80012b2:	e008      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012b8:	2303      	movs	r3, #3
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x212>
 80012c4:	2300      	movs	r3, #0
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012d6:	4937      	ldr	r1, [pc, #220]	; (80013b4 <HAL_GPIO_Init+0x300>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012e4:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_GPIO_Init+0x320>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001308:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_GPIO_Init+0x320>)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001332:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x320>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_GPIO_Init+0x320>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	f47f ae91 	bne.w	80010c4 <HAL_GPIO_Init+0x10>
  }
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	48000400 	.word	0x48000400
 80013bc:	48000800 	.word	0x48000800
 80013c0:	48000c00 	.word	0x48000c00
 80013c4:	48001000 	.word	0x48001000
 80013c8:	48001400 	.word	0x48001400
 80013cc:	48001800 	.word	0x48001800
 80013d0:	48001c00 	.word	0x48001c00
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43d9      	mvns	r1, r3
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	400b      	ands	r3, r1
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <HAL_PWREx_GetVoltageRange+0x18>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40007000 	.word	0x40007000

08001458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001466:	d130      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001474:	d038      	beq.n	80014e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2232      	movs	r2, #50	; 0x32
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9b      	lsrs	r3, r3, #18
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149c:	e002      	b.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b0:	d102      	bne.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f2      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c4:	d110      	bne.n	80014e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e00f      	b.n	80014ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d6:	d007      	beq.n	80014e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e0:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40007000 	.word	0x40007000
 80014fc:	20000000 	.word	0x20000000
 8001500:	431bde83 	.word	0x431bde83

08001504 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_PWREx_EnableVddIO2+0x1c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_PWREx_EnableVddIO2+0x1c>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001512:	6053      	str	r3, [r2, #4]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40007000 	.word	0x40007000

08001524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	f000 bc08 	b.w	8001d48 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001538:	4b96      	ldr	r3, [pc, #600]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001542:	4b94      	ldr	r3, [pc, #592]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80e4 	beq.w	8001722 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_RCC_OscConfig+0x4c>
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b0c      	cmp	r3, #12
 8001564:	f040 808b 	bne.w	800167e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b01      	cmp	r3, #1
 800156c:	f040 8087 	bne.w	800167e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001570:	4b88      	ldr	r3, [pc, #544]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x64>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e3df      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	4b81      	ldr	r3, [pc, #516]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <HAL_RCC_OscConfig+0x7e>
 8001598:	4b7e      	ldr	r3, [pc, #504]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a0:	e005      	b.n	80015ae <HAL_RCC_OscConfig+0x8a>
 80015a2:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d223      	bcs.n	80015fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fd92 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e3c0      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4b73      	ldr	r3, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a72      	ldr	r2, [pc, #456]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b70      	ldr	r3, [pc, #448]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	496d      	ldr	r1, [pc, #436]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e4:	4b6b      	ldr	r3, [pc, #428]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	4968      	ldr	r1, [pc, #416]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
 80015f8:	e025      	b.n	8001646 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fa:	4b66      	ldr	r3, [pc, #408]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a65      	ldr	r2, [pc, #404]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b63      	ldr	r3, [pc, #396]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4960      	ldr	r1, [pc, #384]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001618:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	495b      	ldr	r1, [pc, #364]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fd52 	bl	80020e0 <RCC_SetFlashLatencyFromMSIRange>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e380      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001646:	f000 fc87 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800164a:	4602      	mov	r2, r0
 800164c:	4b51      	ldr	r3, [pc, #324]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	4950      	ldr	r1, [pc, #320]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001658:	5ccb      	ldrb	r3, [r1, r3]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	4a4e      	ldr	r2, [pc, #312]	; (800179c <HAL_RCC_OscConfig+0x278>)
 8001664:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001666:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <HAL_RCC_OscConfig+0x27c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fb36 	bl	8000cdc <HAL_InitTick>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d052      	beq.n	8001720 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	e364      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d032      	beq.n	80016ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001692:	f7ff fb73 	bl	8000d7c <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169a:	f7ff fb6f 	bl	8000d7c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e34d      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ac:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a35      	ldr	r2, [pc, #212]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4930      	ldr	r1, [pc, #192]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	492b      	ldr	r1, [pc, #172]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
 80016ea:	e01a      	b.n	8001722 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a28      	ldr	r2, [pc, #160]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb40 	bl	8000d7c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001700:	f7ff fb3c 	bl	8000d7c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e31a      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x1dc>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001720:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d073      	beq.n	8001816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d005      	beq.n	8001740 <HAL_RCC_OscConfig+0x21c>
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b0c      	cmp	r3, #12
 8001738:	d10e      	bne.n	8001758 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d10b      	bne.n	8001758 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d063      	beq.n	8001814 <HAL_RCC_OscConfig+0x2f0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d15f      	bne.n	8001814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e2f7      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x24c>
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e025      	b.n	80017bc <HAL_RCC_OscConfig+0x298>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d114      	bne.n	80017a4 <HAL_RCC_OscConfig+0x280>
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a02      	ldr	r2, [pc, #8]	; (8001794 <HAL_RCC_OscConfig+0x270>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e013      	b.n	80017bc <HAL_RCC_OscConfig+0x298>
 8001794:	40021000 	.word	0x40021000
 8001798:	08005c24 	.word	0x08005c24
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000004 	.word	0x20000004
 80017a4:	4ba0      	ldr	r3, [pc, #640]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a9f      	ldr	r2, [pc, #636]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b9d      	ldr	r3, [pc, #628]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a9c      	ldr	r2, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fada 	bl	8000d7c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fad6 	bl	8000d7c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e2b4      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017de:	4b92      	ldr	r3, [pc, #584]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x2a8>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fac6 	bl	8000d7c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fac2 	bl	8000d7c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e2a0      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001806:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x2d0>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d060      	beq.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d005      	beq.n	8001834 <HAL_RCC_OscConfig+0x310>
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d119      	bne.n	8001862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d116      	bne.n	8001862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001834:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_OscConfig+0x328>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e27d      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b76      	ldr	r3, [pc, #472]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	4973      	ldr	r1, [pc, #460]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001860:	e040      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d023      	beq.n	80018b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186a:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fa81 	bl	8000d7c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fa7d 	bl	8000d7c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e25b      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	495f      	ldr	r1, [pc, #380]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e018      	b.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a5c      	ldr	r2, [pc, #368]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80018b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff fa5d 	bl	8000d7c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff fa59 	bl	8000d7c <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e237      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03c      	beq.n	800196a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01c      	beq.n	8001932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f8:	4b4b      	ldr	r3, [pc, #300]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fe:	4a4a      	ldr	r2, [pc, #296]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff fa38 	bl	8000d7c <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fa34 	bl	8000d7c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e212      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ef      	beq.n	8001910 <HAL_RCC_OscConfig+0x3ec>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001938:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fa1b 	bl	8000d7c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fa17 	bl	8000d7c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1f5      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800195c:	4b32      	ldr	r3, [pc, #200]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800195e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ef      	bne.n	800194a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80a6 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10d      	bne.n	80019a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001992:	6593      	str	r3, [r2, #88]	; 0x58
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a0:	2301      	movs	r3, #1
 80019a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_RCC_OscConfig+0x508>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d118      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_RCC_OscConfig+0x508>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_RCC_OscConfig+0x508>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019bc:	f7ff f9de 	bl	8000d7c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c4:	f7ff f9da 	bl	8000d7c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1b8      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_RCC_OscConfig+0x508>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_OscConfig+0x4d8>
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80019ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fa:	e029      	b.n	8001a50 <HAL_RCC_OscConfig+0x52c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d115      	bne.n	8001a30 <HAL_RCC_OscConfig+0x50c>
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x52c>
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	4b9d      	ldr	r3, [pc, #628]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a9c      	ldr	r2, [pc, #624]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	4b99      	ldr	r3, [pc, #612]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a46:	4a98      	ldr	r2, [pc, #608]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d016      	beq.n	8001a86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f990 	bl	8000d7c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff f98c 	bl	8000d7c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e168      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a76:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ed      	beq.n	8001a60 <HAL_RCC_OscConfig+0x53c>
 8001a84:	e015      	b.n	8001ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7ff f979 	bl	8000d7c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f975 	bl	8000d7c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e151      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa4:	4b80      	ldr	r3, [pc, #512]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ed      	bne.n	8001a8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab2:	7ffb      	ldrb	r3, [r7, #31]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab8:	4b7b      	ldr	r3, [pc, #492]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	4a7a      	ldr	r2, [pc, #488]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d03c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ad8:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ade:	4a72      	ldr	r2, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae8:	f7ff f948 	bl	8000d7c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af0:	f7ff f944 	bl	8000d7c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e122      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b02:	4b69      	ldr	r3, [pc, #420]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ef      	beq.n	8001af0 <HAL_RCC_OscConfig+0x5cc>
 8001b10:	e01b      	b.n	8001b4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b12:	4b65      	ldr	r3, [pc, #404]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b18:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f92b 	bl	8000d7c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2a:	f7ff f927 	bl	8000d7c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e105      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ef      	bne.n	8001b2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80f9 	beq.w	8001d46 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	f040 80cf 	bne.w	8001cfc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0203 	and.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d12c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d123      	bne.n	8001bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d11b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d113      	bne.n	8001bcc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d109      	bne.n	8001bcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d071      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d068      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bde:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0ac      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bfa:	f7ff f8bf 	bl	8000d7c <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f8bb 	bl	8000d7c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e099      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x788>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c3a:	0212      	lsls	r2, r2, #8
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c42:	0852      	lsrs	r2, r2, #1
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0552      	lsls	r2, r2, #21
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	3a01      	subs	r2, #1
 8001c52:	0652      	lsls	r2, r2, #25
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c5a:	06d2      	lsls	r2, r2, #27
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	4912      	ldr	r1, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7c:	f7ff f87e 	bl	8000d7c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f87a 	bl	8000d7c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_OscConfig+0x784>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca2:	e050      	b.n	8001d46 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e04f      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d144      	bne.n	8001d46 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd4:	f7ff f852 	bl	8000d7c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f84e 	bl	8000d7c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e02c      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x7b8>
 8001cfa:	e024      	b.n	8001d46 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d01f      	beq.n	8001d42 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f835 	bl	8000d7c <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff f831 	bl	8000d7c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4905      	ldr	r1, [pc, #20]	; (8001d50 <HAL_RCC_OscConfig+0x82c>)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x830>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
 8001d40:	e001      	b.n	8001d46 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	feeefffc 	.word	0xfeeefffc

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0e7      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b75      	ldr	r3, [pc, #468]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d910      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 0207 	bic.w	r2, r3, #7
 8001d82:	4970      	ldr	r1, [pc, #448]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b6e      	ldr	r3, [pc, #440]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cf      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b66      	ldr	r3, [pc, #408]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d908      	bls.n	8001dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4960      	ldr	r1, [pc, #384]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04c      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0a6      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	4b54      	ldr	r3, [pc, #336]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e09a      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e08e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e086      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4943      	ldr	r1, [pc, #268]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7fe ff9c 	bl	8000d7c <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe ff98 	bl	8000d7c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e06e      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d208      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	492b      	ldr	r1, [pc, #172]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d210      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 0207 	bic.w	r2, r3, #7
 8001eb4:	4923      	ldr	r1, [pc, #140]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e036      	b.n	8001f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4918      	ldr	r1, [pc, #96]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4910      	ldr	r1, [pc, #64]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0c:	f000 f824 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	490b      	ldr	r1, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x1f4>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1f8>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x1fc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fed3 	bl	8000cdc <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08005c24 	.word	0x08005c24
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11e      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e004      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d134      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0xac>
 8001ffc:	e005      	b.n	800200a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_GetSysClockFreq+0x110>)
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	e005      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_GetSysClockFreq+0x114>)
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e002      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	617b      	str	r3, [r7, #20]
      break;
 800200e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	3301      	adds	r3, #1
 800201c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	fb03 f202 	mul.w	r2, r3, r2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	fbb2 f3f3 	udiv	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	0e5b      	lsrs	r3, r3, #25
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	3301      	adds	r3, #1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002050:	69bb      	ldr	r3, [r7, #24]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	08005c3c 	.word	0x08005c3c
 8002068:	00f42400 	.word	0x00f42400
 800206c:	007a1200 	.word	0x007a1200

08002070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCC_GetHCLKFreq+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800208c:	f7ff fff0 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08005c34 	.word	0x08005c34

080020b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020b8:	f7ff ffda 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0adb      	lsrs	r3, r3, #11
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08005c34 	.word	0x08005c34

080020e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ec:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9a0 	bl	800143c <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
 80020fe:	e014      	b.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002118:	f7ff f990 	bl	800143c <HAL_PWREx_GetVoltageRange>
 800211c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d10b      	bne.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d919      	bls.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2ba0      	cmp	r3, #160	; 0xa0
 800213c:	d902      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	e013      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002144:	2301      	movs	r3, #1
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e010      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d902      	bls.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e00a      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d102      	bne.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e004      	b.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b70      	cmp	r3, #112	; 0x70
 8002166:	d101      	bne.n	800216c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 0207 	bic.w	r2, r3, #7
 8002174:	4909      	ldr	r1, [pc, #36]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ac:	2300      	movs	r3, #0
 80021ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d041      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021c4:	d02a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ca:	d824      	bhi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021d0:	d008      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021d6:	d81e      	bhi.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e0:	d010      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021e2:	e018      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021e4:	4b86      	ldr	r3, [pc, #536]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a85      	ldr	r2, [pc, #532]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f0:	e015      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 facd 	bl	8002798 <RCCEx_PLLSAI1_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002202:	e00c      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3320      	adds	r3, #32
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fbb6 	bl	800297c <RCCEx_PLLSAI2_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002214:	e003      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	74fb      	strb	r3, [r7, #19]
      break;
 800221a:	e000      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800221c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002224:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002232:	4973      	ldr	r1, [pc, #460]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800223a:	e001      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d041      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002250:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002254:	d02a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002256:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800225a:	d824      	bhi.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800225c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002260:	d008      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002266:	d81e      	bhi.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d010      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002272:	e018      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002274:	4b62      	ldr	r3, [pc, #392]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a61      	ldr	r2, [pc, #388]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002280:	e015      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa85 	bl	8002798 <RCCEx_PLLSAI1_Config>
 800228e:	4603      	mov	r3, r0
 8002290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002292:	e00c      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3320      	adds	r3, #32
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fb6e 	bl	800297c <RCCEx_PLLSAI2_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a4:	e003      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	74fb      	strb	r3, [r7, #19]
      break;
 80022aa:	e000      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022b4:	4b52      	ldr	r3, [pc, #328]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c2:	494f      	ldr	r1, [pc, #316]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ca:	e001      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a0 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	4a40      	ldr	r2, [pc, #256]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	; 0x58
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002320:	f7fe fd2c 	bl	8000d7c <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002326:	e009      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe fd28 	bl	8000d7c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d902      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	74fb      	strb	r3, [r7, #19]
        break;
 800233a:	e005      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d15c      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002358:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01f      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	d019      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fce7 	bl	8000d7c <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b0:	e00b      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fce3 	bl	8000d7c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d902      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	74fb      	strb	r3, [r7, #19]
            break;
 80023c8:	e006      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ec      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023f6:	e009      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
 80023fc:	e006      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240c:	7c7b      	ldrb	r3, [r7, #17]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4ba6      	ldr	r3, [pc, #664]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4aa5      	ldr	r2, [pc, #660]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242a:	4ba0      	ldr	r3, [pc, #640]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f023 0203 	bic.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	499c      	ldr	r1, [pc, #624]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800244c:	4b97      	ldr	r3, [pc, #604]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	f023 020c 	bic.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	4994      	ldr	r1, [pc, #592]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800246e:	4b8f      	ldr	r3, [pc, #572]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	498b      	ldr	r1, [pc, #556]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002490:	4b86      	ldr	r3, [pc, #536]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4983      	ldr	r1, [pc, #524]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024b2:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	497a      	ldr	r1, [pc, #488]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024d4:	4b75      	ldr	r3, [pc, #468]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4972      	ldr	r1, [pc, #456]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002504:	4969      	ldr	r1, [pc, #420]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002526:	4961      	ldr	r1, [pc, #388]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800253a:	4b5c      	ldr	r3, [pc, #368]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	4958      	ldr	r1, [pc, #352]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	4950      	ldr	r1, [pc, #320]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800257e:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	4947      	ldr	r1, [pc, #284]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	493f      	ldr	r1, [pc, #252]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d028      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025c2:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4936      	ldr	r1, [pc, #216]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e0:	d106      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	4a31      	ldr	r2, [pc, #196]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ec:	60d3      	str	r3, [r2, #12]
 80025ee:	e011      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2101      	movs	r1, #1
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f8c9 	bl	8002798 <RCCEx_PLLSAI1_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d028      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	491f      	ldr	r1, [pc, #124]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800263e:	d106      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264a:	60d3      	str	r3, [r2, #12]
 800264c:	e011      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002652:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002656:	d10c      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3304      	adds	r3, #4
 800265c:	2101      	movs	r1, #1
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f89a 	bl	8002798 <RCCEx_PLLSAI1_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800266e:	7cfb      	ldrb	r3, [r7, #19]
 8002670:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d02a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800269c:	d108      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269e:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a02      	ldr	r2, [pc, #8]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a8:	60d3      	str	r3, [r2, #12]
 80026aa:	e013      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80026ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	2101      	movs	r1, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 f869 	bl	8002798 <RCCEx_PLLSAI1_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02f      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ee:	4929      	ldr	r1, [pc, #164]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026fe:	d10d      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	2102      	movs	r1, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f846 	bl	8002798 <RCCEx_PLLSAI1_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d014      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	74bb      	strb	r3, [r7, #18]
 800271a:	e011      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002724:	d10c      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3320      	adds	r3, #32
 800272a:	2102      	movs	r1, #2
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f925 	bl	800297c <RCCEx_PLLSAI2_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275c:	490d      	ldr	r1, [pc, #52]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002788:	7cbb      	ldrb	r3, [r7, #18]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027a6:	4b74      	ldr	r3, [pc, #464]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027b2:	4b71      	ldr	r3, [pc, #452]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d10d      	bne.n	80027de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
       ||
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027ca:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
       ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d047      	beq.n	800286e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e044      	b.n	800286e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d018      	beq.n	800281e <RCCEx_PLLSAI1_Config+0x86>
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d825      	bhi.n	800283c <RCCEx_PLLSAI1_Config+0xa4>
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d002      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x62>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d009      	beq.n	800280c <RCCEx_PLLSAI1_Config+0x74>
 80027f8:	e020      	b.n	800283c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027fa:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11d      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280a:	e01a      	b.n	8002842 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800280c:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281c:	e013      	b.n	8002846 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800281e:	4b56      	ldr	r3, [pc, #344]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800282a:	4b53      	ldr	r3, [pc, #332]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800283a:	e006      	b.n	800284a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
      break;
 8002840:	e004      	b.n	800284c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002842:	bf00      	nop
 8002844:	e002      	b.n	800284c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800284a:	bf00      	nop
    }

    if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002852:	4b49      	ldr	r3, [pc, #292]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	430b      	orrs	r3, r1
 8002868:	4943      	ldr	r1, [pc, #268]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d17c      	bne.n	800296e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002874:	4b40      	ldr	r3, [pc, #256]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3f      	ldr	r2, [pc, #252]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 800287a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800287e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe fa7c 	bl	8000d7c <HAL_GetTick>
 8002884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002886:	e009      	b.n	800289c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002888:	f7fe fa78 	bl	8000d7c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	73fb      	strb	r3, [r7, #15]
        break;
 800289a:	e005      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ef      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d15f      	bne.n	800296e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d110      	bne.n	80028d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b4:	4b30      	ldr	r3, [pc, #192]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	06d2      	lsls	r2, r2, #27
 80028cc:	430a      	orrs	r2, r1
 80028ce:	492a      	ldr	r1, [pc, #168]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	610b      	str	r3, [r1, #16]
 80028d4:	e027      	b.n	8002926 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d112      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6892      	ldr	r2, [r2, #8]
 80028ec:	0211      	lsls	r1, r2, #8
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6912      	ldr	r2, [r2, #16]
 80028f2:	0852      	lsrs	r2, r2, #1
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0552      	lsls	r2, r2, #21
 80028f8:	430a      	orrs	r2, r1
 80028fa:	491f      	ldr	r1, [pc, #124]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	610b      	str	r3, [r1, #16]
 8002900:	e011      	b.n	8002926 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800290a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6892      	ldr	r2, [r2, #8]
 8002912:	0211      	lsls	r1, r2, #8
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6952      	ldr	r2, [r2, #20]
 8002918:	0852      	lsrs	r2, r2, #1
 800291a:	3a01      	subs	r2, #1
 800291c:	0652      	lsls	r2, r2, #25
 800291e:	430a      	orrs	r2, r1
 8002920:	4915      	ldr	r1, [pc, #84]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002930:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002932:	f7fe fa23 	bl	8000d7c <HAL_GetTick>
 8002936:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002938:	e009      	b.n	800294e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800293a:	f7fe fa1f 	bl	8000d7c <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d902      	bls.n	800294e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	73fb      	strb	r3, [r7, #15]
          break;
 800294c:	e005      	b.n	800295a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ef      	beq.n	800293a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296a:	4313      	orrs	r3, r2
 800296c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000

0800297c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800298a:	4b69      	ldr	r3, [pc, #420]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002996:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d10d      	bne.n	80029c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
       ||
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ae:	4b60      	ldr	r3, [pc, #384]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
       ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d047      	beq.n	8002a52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e044      	b.n	8002a52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d018      	beq.n	8002a02 <RCCEx_PLLSAI2_Config+0x86>
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d825      	bhi.n	8002a20 <RCCEx_PLLSAI2_Config+0xa4>
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d002      	beq.n	80029de <RCCEx_PLLSAI2_Config+0x62>
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d009      	beq.n	80029f0 <RCCEx_PLLSAI2_Config+0x74>
 80029dc:	e020      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029de:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11d      	bne.n	8002a26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ee:	e01a      	b.n	8002a26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f0:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d116      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a00:	e013      	b.n	8002a2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a02:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a0e:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a1e:	e006      	b.n	8002a2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e004      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a26:	bf00      	nop
 8002a28:	e002      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a36:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	4938      	ldr	r1, [pc, #224]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d166      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a34      	ldr	r2, [pc, #208]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a64:	f7fe f98a 	bl	8000d7c <HAL_GetTick>
 8002a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a6a:	e009      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a6c:	f7fe f986 	bl	8000d7c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d902      	bls.n	8002a80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a7e:	e005      	b.n	8002a8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ef      	bne.n	8002a6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d149      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d110      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6892      	ldr	r2, [r2, #8]
 8002aa8:	0211      	lsls	r1, r2, #8
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	06d2      	lsls	r2, r2, #27
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	491f      	ldr	r1, [pc, #124]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	614b      	str	r3, [r1, #20]
 8002ab8:	e011      	b.n	8002ade <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ac2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	0211      	lsls	r1, r2, #8
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6912      	ldr	r2, [r2, #16]
 8002ad0:	0852      	lsrs	r2, r2, #1
 8002ad2:	3a01      	subs	r2, #1
 8002ad4:	0652      	lsls	r2, r2, #25
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	4915      	ldr	r1, [pc, #84]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe f947 	bl	8000d7c <HAL_GetTick>
 8002aee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002af0:	e009      	b.n	8002b06 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af2:	f7fe f943 	bl	8000d7c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d902      	bls.n	8002b06 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	73fb      	strb	r3, [r7, #15]
          break;
 8002b04:	e005      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ef      	beq.n	8002af2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	4903      	ldr	r1, [pc, #12]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e095      	b.n	8002c72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b56:	d009      	beq.n	8002b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
 8002b5e:	e005      	b.n	8002b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd ff2e 	bl	80009e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bac:	d902      	bls.n	8002bb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e002      	b.n	8002bba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bc2:	d007      	beq.n	8002bd4 <HAL_SPI_Init+0xa0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	f003 0204 	and.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c50:	ea42 0103 	orr.w	r1, r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_SPI_TransmitReceive_IT+0x20>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e091      	b.n	8002dc0 <HAL_SPI_TransmitReceive_IT+0x144>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002caa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cb2:	7dbb      	ldrb	r3, [r7, #22]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_SPI_TransmitReceive_IT+0x58>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cbe:	d106      	bne.n	8002cce <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <HAL_SPI_TransmitReceive_IT+0x52>
 8002cc8:	7dbb      	ldrb	r3, [r7, #22]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cd2:	e070      	b.n	8002db6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cea:	e064      	b.n	8002db6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d003      	beq.n	8002d00 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	887a      	ldrh	r2, [r7, #2]
 8002d16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	887a      	ldrh	r2, [r7, #2]
 8002d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d36:	d906      	bls.n	8002d46 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <HAL_SPI_TransmitReceive_IT+0x150>)
 8002d3c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
 8002d44:	e005      	b.n	8002d52 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002d4a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002d50:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d5a:	d802      	bhi.n	8002d62 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002d5c:	887b      	ldrh	r3, [r7, #2]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d908      	bls.n	8002d74 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	e007      	b.n	8002d84 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d82:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002d92:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d008      	beq.n	8002db4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e000      	b.n	8002db6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002db4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	0800317f 	.word	0x0800317f
 8002dd0:	080031e5 	.word	0x080031e5
 8002dd4:	0800302f 	.word	0x0800302f
 8002dd8:	080030ed 	.word	0x080030ed

08002ddc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10f      	bne.n	8002e20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
    return;
 8002e1e:	e0d7      	b.n	8002fd0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_SPI_IRQHandler+0x66>
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	09db      	lsrs	r3, r3, #7
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
    return;
 8002e40:	e0c6      	b.n	8002fd0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_SPI_IRQHandler+0x8c>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80b4 	beq.w	8002fd0 <HAL_SPI_IRQHandler+0x1f4>
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80ad 	beq.w	8002fd0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d023      	beq.n	8002eca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d011      	beq.n	8002eb2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	e00b      	b.n	8002eca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]
        return;
 8002ec8:	e082      	b.n	8002fd0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d014      	beq.n	8002f00 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00c      	beq.n	8002f26 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f10:	f043 0208 	orr.w	r2, r3, #8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d04f      	beq.n	8002fce <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_SPI_IRQHandler+0x17e>
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d034      	beq.n	8002fc4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0203 	bic.w	r2, r2, #3
 8002f68:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d011      	beq.n	8002f96 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <HAL_SPI_IRQHandler+0x1fc>)
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f857 	bl	8001032 <HAL_DMA_Abort_IT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_SPI_IRQHandler+0x1fc>)
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe f841 	bl	8001032 <HAL_DMA_Abort_IT>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002fc2:	e003      	b.n	8002fcc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f813 	bl	8002ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002fca:	e000      	b.n	8002fce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002fcc:	bf00      	nop
    return;
 8002fce:	bf00      	nop
  }
}
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	08003005 	.word	0x08003005

08002fdc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff ffe5 	bl	8002ff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d923      	bls.n	800308a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	b292      	uxth	r2, r2
 800304e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	1c9a      	adds	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b02      	subs	r3, #2
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d11f      	bne.n	80030b8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	e016      	b.n	80030b8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f103 020c 	add.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030d2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fa14 	bl	800350c <SPI_CloseRxTx_ISR>
    }
  }
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d912      	bls.n	8003124 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b02      	subs	r3, #2
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003122:	e012      	b.n	800314a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d110      	bne.n	8003176 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003162:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f9cb 	bl	800350c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	b292      	uxth	r2, r2
 8003192:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	1c9a      	adds	r2, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f998 	bl	800350c <SPI_CloseRxTx_ISR>
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d110      	bne.n	800323c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003228:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f968 	bl	800350c <SPI_CloseRxTx_ISR>
    }
  }
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003254:	f7fd fd92 	bl	8000d7c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	4413      	add	r3, r2
 8003262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003264:	f7fd fd8a 	bl	8000d7c <HAL_GetTick>
 8003268:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	015b      	lsls	r3, r3, #5
 8003270:	0d1b      	lsrs	r3, r3, #20
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	fb02 f303 	mul.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800327a:	e054      	b.n	8003326 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003282:	d050      	beq.n	8003326 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003284:	f7fd fd7a 	bl	8000d7c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	429a      	cmp	r2, r3
 8003292:	d902      	bls.n	800329a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d13d      	bne.n	8003316 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b2:	d111      	bne.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032bc:	d004      	beq.n	80032c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d107      	bne.n	80032d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e0:	d10f      	bne.n	8003302 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e017      	b.n	8003346 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3b01      	subs	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	bf0c      	ite	eq
 8003336:	2301      	moveq	r3, #1
 8003338:	2300      	movne	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	429a      	cmp	r2, r3
 8003342:	d19b      	bne.n	800327c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000000 	.word	0x20000000

08003354 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	; 0x28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003366:	f7fd fd09 	bl	8000d7c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	1a9b      	subs	r3, r3, r2
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003376:	f7fd fd01 	bl	8000d7c <HAL_GetTick>
 800337a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003384:	4b3d      	ldr	r3, [pc, #244]	; (800347c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00da      	lsls	r2, r3, #3
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	0d1b      	lsrs	r3, r3, #20
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800339c:	e060      	b.n	8003460 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033a4:	d107      	bne.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d104      	bne.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033bc:	d050      	beq.n	8003460 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033be:	f7fd fcdd 	bl	8000d7c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d902      	bls.n	80033d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d13d      	bne.n	8003450 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ec:	d111      	bne.n	8003412 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f6:	d004      	beq.n	8003402 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003400:	d107      	bne.n	8003412 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003410:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341a:	d10f      	bne.n	800343c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800343a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e010      	b.n	8003472 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	3b01      	subs	r3, #1
 800345e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d196      	bne.n	800339e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3728      	adds	r7, #40	; 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff ff5b 	bl	8003354 <SPI_WaitFifoStateUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e027      	b.n	8003504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fec0 	bl	8003244 <SPI_WaitFlagStateUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e014      	b.n	8003504 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff ff34 	bl	8003354 <SPI_WaitFifoStateUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e000      	b.n	8003504 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003514:	f7fd fc32 	bl	8000d7c <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0220 	bic.w	r2, r2, #32
 8003528:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	2164      	movs	r1, #100	; 0x64
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffa6 	bl	8003480 <SPI_EndRxTxTransaction>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353e:	f043 0220 	orr.w	r2, r3, #32
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b04      	cmp	r3, #4
 8003558:	d107      	bne.n	800356a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fd3a 	bl	8002fdc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003568:	e00e      	b.n	8003588 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd f98c 	bl	8000890 <HAL_SPI_TxRxCpltCallback>
}
 8003578:	e006      	b.n	8003588 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fd34 	bl	8002ff0 <HAL_SPI_ErrorCallback>
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e040      	b.n	8003624 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd f9b0 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0201 	bic.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fc18 	bl	8003e04 <UART_SetConfig>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e022      	b.n	8003624 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fec4 	bl	8004374 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800360a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 ff4b 	bl	80044b8 <UART_CheckIdleState>
 8003622:	4603      	mov	r3, r0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003640:	2b20      	cmp	r3, #32
 8003642:	f040 8082 	bne.w	800374a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_UART_Transmit+0x26>
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07a      	b.n	800374c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_UART_Transmit+0x38>
 8003660:	2302      	movs	r3, #2
 8003662:	e073      	b.n	800374c <HAL_UART_Transmit+0x120>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2221      	movs	r2, #33	; 0x21
 8003678:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367a:	f7fd fb7f 	bl	8000d7c <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003698:	d108      	bne.n	80036ac <HAL_UART_Transmit+0x80>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	e003      	b.n	80036b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036bc:	e02d      	b.n	800371a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2200      	movs	r2, #0
 80036c6:	2180      	movs	r1, #128	; 0x80
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 ff3e 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e039      	b.n	800374c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036ea:	b292      	uxth	r2, r2
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	3302      	adds	r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	e008      	b.n	8003708 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b292      	uxth	r2, r2
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1cb      	bne.n	80036be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2200      	movs	r2, #0
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 ff0a 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e005      	b.n	800374c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003766:	2b20      	cmp	r3, #32
 8003768:	d142      	bne.n	80037f0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Receive_IT+0x22>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e03b      	b.n	80037f2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Receive_IT+0x34>
 8003784:	2302      	movs	r3, #2
 8003786:	e034      	b.n	80037f2 <HAL_UART_Receive_IT+0x9e>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <HAL_UART_Receive_IT+0xa8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d01f      	beq.n	80037e0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	613b      	str	r3, [r7, #16]
   return(result);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	69f9      	ldr	r1, [r7, #28]
 80037d2:	6a3a      	ldr	r2, [r7, #32]
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	461a      	mov	r2, r3
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 ff74 	bl	80046d4 <UART_Start_Receive_IT>
 80037ec:	4603      	mov	r3, r0
 80037ee:	e000      	b.n	80037f2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3728      	adds	r7, #40	; 0x28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40008000 	.word	0x40008000

08003800 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b0ba      	sub	sp, #232	; 0xe8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003826:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800382a:	f640 030f 	movw	r3, #2063	; 0x80f
 800382e:	4013      	ands	r3, r2
 8003830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d115      	bne.n	8003868 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800383c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00f      	beq.n	8003868 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 82a6 	beq.w	8003daa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
      }
      return;
 8003866:	e2a0      	b.n	8003daa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8117 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800387e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003882:	4b85      	ldr	r3, [pc, #532]	; (8003a98 <HAL_UART_IRQHandler+0x298>)
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 810a 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800388c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d011      	beq.n	80038bc <HAL_UART_IRQHandler+0xbc>
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2201      	movs	r2, #1
 80038aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d011      	beq.n	80038ec <HAL_UART_IRQHandler+0xec>
 80038c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2202      	movs	r2, #2
 80038da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e2:	f043 0204 	orr.w	r2, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d011      	beq.n	800391c <HAL_UART_IRQHandler+0x11c>
 80038f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2204      	movs	r2, #4
 800390a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d017      	beq.n	8003958 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003938:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800394e:	f043 0208 	orr.w	r2, r3, #8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <HAL_UART_IRQHandler+0x18a>
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00c      	beq.n	800398a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 820c 	beq.w	8003dae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d005      	beq.n	80039e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d04f      	beq.n	8003a82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 ff40 	bl	8004868 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d141      	bne.n	8003a7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1d9      	bne.n	80039f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <HAL_UART_IRQHandler+0x29c>)
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd faeb 	bl	8001032 <HAL_DMA_Abort_IT>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d017      	beq.n	8003a92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a70:	e00f      	b.n	8003a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9b0 	bl	8003dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e00b      	b.n	8003a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9ac 	bl	8003dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e007      	b.n	8003a92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9a8 	bl	8003dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a90:	e18d      	b.n	8003dae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a92:	bf00      	nop
    return;
 8003a94:	e18b      	b.n	8003dae <HAL_UART_IRQHandler+0x5ae>
 8003a96:	bf00      	nop
 8003a98:	04000120 	.word	0x04000120
 8003a9c:	0800492f 	.word	0x0800492f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f040 8146 	bne.w	8003d36 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 813f 	beq.w	8003d36 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8138 	beq.w	8003d36 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2210      	movs	r2, #16
 8003acc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	f040 80b4 	bne.w	8003c46 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 815f 	beq.w	8003db2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003afe:	429a      	cmp	r2, r3
 8003b00:	f080 8157 	bcs.w	8003db2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 8085 	bne.w	8003c2a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1da      	bne.n	8003b20 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3308      	adds	r3, #8
 8003b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e1      	bne.n	8003b6a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfa:	f023 0310 	bic.w	r3, r3, #16
 8003bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e4      	bne.n	8003bea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fd f9c6 	bl	8000fb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8d4 	bl	8003dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c44:	e0b5      	b.n	8003db2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80a7 	beq.w	8003db6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a2 	beq.w	8003db6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c94:	647b      	str	r3, [r7, #68]	; 0x44
 8003c96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e4      	bne.n	8003c72 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ccc:	633a      	str	r2, [r7, #48]	; 0x30
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e3      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0310 	bic.w	r3, r3, #16
 8003d06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	69b9      	ldr	r1, [r7, #24]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	617b      	str	r3, [r7, #20]
   return(result);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e4      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f85c 	bl	8003dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d34:	e03f      	b.n	8003db6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00e      	beq.n	8003d60 <HAL_UART_IRQHandler+0x560>
 8003d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 ff88 	bl	8004c6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d5e:	e02d      	b.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01c      	beq.n	8003dba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
    }
    return;
 8003d88:	e017      	b.n	8003dba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d012      	beq.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
 8003d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00c      	beq.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fdd9 	bl	800495a <UART_EndTransmit_IT>
    return;
 8003da8:	e008      	b.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
      return;
 8003daa:	bf00      	nop
 8003dac:	e006      	b.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
    return;
 8003dae:	bf00      	nop
 8003db0:	e004      	b.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
      return;
 8003db2:	bf00      	nop
 8003db4:	e002      	b.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
      return;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <HAL_UART_IRQHandler+0x5bc>
    return;
 8003dba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003dbc:	37e8      	adds	r7, #232	; 0xe8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop

08003dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e08:	b08a      	sub	sp, #40	; 0x28
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4ba4      	ldr	r3, [pc, #656]	; (80040c4 <UART_SetConfig+0x2c0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a99      	ldr	r2, [pc, #612]	; (80040c8 <UART_SetConfig+0x2c4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a90      	ldr	r2, [pc, #576]	; (80040cc <UART_SetConfig+0x2c8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d126      	bne.n	8003edc <UART_SetConfig+0xd8>
 8003e8e:	4b90      	ldr	r3, [pc, #576]	; (80040d0 <UART_SetConfig+0x2cc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d81b      	bhi.n	8003ed4 <UART_SetConfig+0xd0>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0xa0>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003eb5 	.word	0x08003eb5
 8003ea8:	08003ec5 	.word	0x08003ec5
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ecd 	.word	0x08003ecd
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eba:	e116      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e112      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eca:	e10e      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003ecc:	2308      	movs	r3, #8
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e10a      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e106      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a7c      	ldr	r2, [pc, #496]	; (80040d4 <UART_SetConfig+0x2d0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d138      	bne.n	8003f58 <UART_SetConfig+0x154>
 8003ee6:	4b7a      	ldr	r3, [pc, #488]	; (80040d0 <UART_SetConfig+0x2cc>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d82d      	bhi.n	8003f50 <UART_SetConfig+0x14c>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <UART_SetConfig+0xf8>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f51 	.word	0x08003f51
 8003f04:	08003f51 	.word	0x08003f51
 8003f08:	08003f51 	.word	0x08003f51
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003f51 	.word	0x08003f51
 8003f14:	08003f51 	.word	0x08003f51
 8003f18:	08003f51 	.word	0x08003f51
 8003f1c:	08003f39 	.word	0x08003f39
 8003f20:	08003f51 	.word	0x08003f51
 8003f24:	08003f51 	.word	0x08003f51
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f49 	.word	0x08003f49
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f36:	e0d8      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3e:	e0d4      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f40:	2304      	movs	r3, #4
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f46:	e0d0      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f48:	2308      	movs	r3, #8
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4e:	e0cc      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f50:	2310      	movs	r3, #16
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e0c8      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a5e      	ldr	r2, [pc, #376]	; (80040d8 <UART_SetConfig+0x2d4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d125      	bne.n	8003fae <UART_SetConfig+0x1aa>
 8003f62:	4b5b      	ldr	r3, [pc, #364]	; (80040d0 <UART_SetConfig+0x2cc>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f6c:	2b30      	cmp	r3, #48	; 0x30
 8003f6e:	d016      	beq.n	8003f9e <UART_SetConfig+0x19a>
 8003f70:	2b30      	cmp	r3, #48	; 0x30
 8003f72:	d818      	bhi.n	8003fa6 <UART_SetConfig+0x1a2>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d00a      	beq.n	8003f8e <UART_SetConfig+0x18a>
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d814      	bhi.n	8003fa6 <UART_SetConfig+0x1a2>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <UART_SetConfig+0x182>
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d008      	beq.n	8003f96 <UART_SetConfig+0x192>
 8003f84:	e00f      	b.n	8003fa6 <UART_SetConfig+0x1a2>
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8c:	e0ad      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f94:	e0a9      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f96:	2304      	movs	r3, #4
 8003f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9c:	e0a5      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa4:	e0a1      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fac:	e09d      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a4a      	ldr	r2, [pc, #296]	; (80040dc <UART_SetConfig+0x2d8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d125      	bne.n	8004004 <UART_SetConfig+0x200>
 8003fb8:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <UART_SetConfig+0x2cc>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc4:	d016      	beq.n	8003ff4 <UART_SetConfig+0x1f0>
 8003fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc8:	d818      	bhi.n	8003ffc <UART_SetConfig+0x1f8>
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d00a      	beq.n	8003fe4 <UART_SetConfig+0x1e0>
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d814      	bhi.n	8003ffc <UART_SetConfig+0x1f8>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <UART_SetConfig+0x1d8>
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d008      	beq.n	8003fec <UART_SetConfig+0x1e8>
 8003fda:	e00f      	b.n	8003ffc <UART_SetConfig+0x1f8>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e082      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	e07e      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003fec:	2304      	movs	r3, #4
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff2:	e07a      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffa:	e076      	b.n	80040ea <UART_SetConfig+0x2e6>
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004002:	e072      	b.n	80040ea <UART_SetConfig+0x2e6>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a35      	ldr	r2, [pc, #212]	; (80040e0 <UART_SetConfig+0x2dc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d12a      	bne.n	8004064 <UART_SetConfig+0x260>
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <UART_SetConfig+0x2cc>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800401c:	d01a      	beq.n	8004054 <UART_SetConfig+0x250>
 800401e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004022:	d81b      	bhi.n	800405c <UART_SetConfig+0x258>
 8004024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004028:	d00c      	beq.n	8004044 <UART_SetConfig+0x240>
 800402a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402e:	d815      	bhi.n	800405c <UART_SetConfig+0x258>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <UART_SetConfig+0x238>
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d008      	beq.n	800404c <UART_SetConfig+0x248>
 800403a:	e00f      	b.n	800405c <UART_SetConfig+0x258>
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004042:	e052      	b.n	80040ea <UART_SetConfig+0x2e6>
 8004044:	2302      	movs	r3, #2
 8004046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404a:	e04e      	b.n	80040ea <UART_SetConfig+0x2e6>
 800404c:	2304      	movs	r3, #4
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004052:	e04a      	b.n	80040ea <UART_SetConfig+0x2e6>
 8004054:	2308      	movs	r3, #8
 8004056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405a:	e046      	b.n	80040ea <UART_SetConfig+0x2e6>
 800405c:	2310      	movs	r3, #16
 800405e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004062:	e042      	b.n	80040ea <UART_SetConfig+0x2e6>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <UART_SetConfig+0x2c4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d13a      	bne.n	80040e4 <UART_SetConfig+0x2e0>
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <UART_SetConfig+0x2cc>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004078:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800407c:	d01a      	beq.n	80040b4 <UART_SetConfig+0x2b0>
 800407e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004082:	d81b      	bhi.n	80040bc <UART_SetConfig+0x2b8>
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d00c      	beq.n	80040a4 <UART_SetConfig+0x2a0>
 800408a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408e:	d815      	bhi.n	80040bc <UART_SetConfig+0x2b8>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <UART_SetConfig+0x298>
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	d008      	beq.n	80040ac <UART_SetConfig+0x2a8>
 800409a:	e00f      	b.n	80040bc <UART_SetConfig+0x2b8>
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a2:	e022      	b.n	80040ea <UART_SetConfig+0x2e6>
 80040a4:	2302      	movs	r3, #2
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040aa:	e01e      	b.n	80040ea <UART_SetConfig+0x2e6>
 80040ac:	2304      	movs	r3, #4
 80040ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b2:	e01a      	b.n	80040ea <UART_SetConfig+0x2e6>
 80040b4:	2308      	movs	r3, #8
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ba:	e016      	b.n	80040ea <UART_SetConfig+0x2e6>
 80040bc:	2310      	movs	r3, #16
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c2:	e012      	b.n	80040ea <UART_SetConfig+0x2e6>
 80040c4:	efff69f3 	.word	0xefff69f3
 80040c8:	40008000 	.word	0x40008000
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40004400 	.word	0x40004400
 80040d8:	40004800 	.word	0x40004800
 80040dc:	40004c00 	.word	0x40004c00
 80040e0:	40005000 	.word	0x40005000
 80040e4:	2310      	movs	r3, #16
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a9f      	ldr	r2, [pc, #636]	; (800436c <UART_SetConfig+0x568>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d17a      	bne.n	80041ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d824      	bhi.n	8004146 <UART_SetConfig+0x342>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0x300>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004129 	.word	0x08004129
 8004108:	08004147 	.word	0x08004147
 800410c:	08004131 	.word	0x08004131
 8004110:	08004147 	.word	0x08004147
 8004114:	08004137 	.word	0x08004137
 8004118:	08004147 	.word	0x08004147
 800411c:	08004147 	.word	0x08004147
 8004120:	08004147 	.word	0x08004147
 8004124:	0800413f 	.word	0x0800413f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7fd ffae 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 800412c:	61f8      	str	r0, [r7, #28]
        break;
 800412e:	e010      	b.n	8004152 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004130:	4b8f      	ldr	r3, [pc, #572]	; (8004370 <UART_SetConfig+0x56c>)
 8004132:	61fb      	str	r3, [r7, #28]
        break;
 8004134:	e00d      	b.n	8004152 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004136:	f7fd ff0f 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800413a:	61f8      	str	r0, [r7, #28]
        break;
 800413c:	e009      	b.n	8004152 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004142:	61fb      	str	r3, [r7, #28]
        break;
 8004144:	e005      	b.n	8004152 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80fb 	beq.w	8004350 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	429a      	cmp	r2, r3
 8004168:	d305      	bcc.n	8004176 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	429a      	cmp	r2, r3
 8004174:	d903      	bls.n	800417e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800417c:	e0e8      	b.n	8004350 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2200      	movs	r2, #0
 8004182:	461c      	mov	r4, r3
 8004184:	4615      	mov	r5, r2
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	022b      	lsls	r3, r5, #8
 8004190:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004194:	0222      	lsls	r2, r4, #8
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	6849      	ldr	r1, [r1, #4]
 800419a:	0849      	lsrs	r1, r1, #1
 800419c:	2000      	movs	r0, #0
 800419e:	4688      	mov	r8, r1
 80041a0:	4681      	mov	r9, r0
 80041a2:	eb12 0a08 	adds.w	sl, r2, r8
 80041a6:	eb43 0b09 	adc.w	fp, r3, r9
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b8:	4650      	mov	r0, sl
 80041ba:	4659      	mov	r1, fp
 80041bc:	f7fc f868 	bl	8000290 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ce:	d308      	bcc.n	80041e2 <UART_SetConfig+0x3de>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d6:	d204      	bcs.n	80041e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	e0b6      	b.n	8004350 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041e8:	e0b2      	b.n	8004350 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f2:	d15e      	bne.n	80042b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d828      	bhi.n	800424e <UART_SetConfig+0x44a>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0x400>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004229 	.word	0x08004229
 8004208:	08004231 	.word	0x08004231
 800420c:	08004239 	.word	0x08004239
 8004210:	0800424f 	.word	0x0800424f
 8004214:	0800423f 	.word	0x0800423f
 8004218:	0800424f 	.word	0x0800424f
 800421c:	0800424f 	.word	0x0800424f
 8004220:	0800424f 	.word	0x0800424f
 8004224:	08004247 	.word	0x08004247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fd ff2e 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 800422c:	61f8      	str	r0, [r7, #28]
        break;
 800422e:	e014      	b.n	800425a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7fd ff40 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 8004234:	61f8      	str	r0, [r7, #28]
        break;
 8004236:	e010      	b.n	800425a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004238:	4b4d      	ldr	r3, [pc, #308]	; (8004370 <UART_SetConfig+0x56c>)
 800423a:	61fb      	str	r3, [r7, #28]
        break;
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800423e:	f7fd fe8b 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8004242:	61f8      	str	r0, [r7, #28]
        break;
 8004244:	e009      	b.n	800425a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424a:	61fb      	str	r3, [r7, #28]
        break;
 800424c:	e005      	b.n	800425a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d077      	beq.n	8004350 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005a      	lsls	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	441a      	add	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d916      	bls.n	80042aa <UART_SetConfig+0x4a6>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004282:	d212      	bcs.n	80042aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f023 030f 	bic.w	r3, r3, #15
 800428c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	b29b      	uxth	r3, r3
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	b29a      	uxth	r2, r3
 800429a:	8afb      	ldrh	r3, [r7, #22]
 800429c:	4313      	orrs	r3, r2
 800429e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	8afa      	ldrh	r2, [r7, #22]
 80042a6:	60da      	str	r2, [r3, #12]
 80042a8:	e052      	b.n	8004350 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042b0:	e04e      	b.n	8004350 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d827      	bhi.n	800430a <UART_SetConfig+0x506>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x4bc>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042ed 	.word	0x080042ed
 80042c8:	080042f5 	.word	0x080042f5
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	080042fb 	.word	0x080042fb
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	0800430b 	.word	0x0800430b
 80042dc:	0800430b 	.word	0x0800430b
 80042e0:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7fd fed0 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 80042e8:	61f8      	str	r0, [r7, #28]
        break;
 80042ea:	e014      	b.n	8004316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7fd fee2 	bl	80020b4 <HAL_RCC_GetPCLK2Freq>
 80042f0:	61f8      	str	r0, [r7, #28]
        break;
 80042f2:	e010      	b.n	8004316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <UART_SetConfig+0x56c>)
 80042f6:	61fb      	str	r3, [r7, #28]
        break;
 80042f8:	e00d      	b.n	8004316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fd fe2d 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80042fe:	61f8      	str	r0, [r7, #28]
        break;
 8004300:	e009      	b.n	8004316 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	61fb      	str	r3, [r7, #28]
        break;
 8004308:	e005      	b.n	8004316 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004314:	bf00      	nop
    }

    if (pclk != 0U)
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d019      	beq.n	8004350 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	085a      	lsrs	r2, r3, #1
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	441a      	add	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	2b0f      	cmp	r3, #15
 8004334:	d909      	bls.n	800434a <UART_SetConfig+0x546>
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d205      	bcs.n	800434a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	e002      	b.n	8004350 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800435c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004360:	4618      	mov	r0, r3
 8004362:	3728      	adds	r7, #40	; 0x28
 8004364:	46bd      	mov	sp, r7
 8004366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436a:	bf00      	nop
 800436c:	40008000 	.word	0x40008000
 8004370:	00f42400 	.word	0x00f42400

08004374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01a      	beq.n	800448a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004472:	d10a      	bne.n	800448a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	605a      	str	r2, [r3, #4]
  }
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044c8:	f7fc fc58 	bl	8000d7c <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d10e      	bne.n	80044fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f82d 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e023      	b.n	8004542 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b04      	cmp	r3, #4
 8004506:	d10e      	bne.n	8004526 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f817 	bl	800454a <UART_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e00d      	b.n	8004542 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b09c      	sub	sp, #112	; 0x70
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455a:	e0a5      	b.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004562:	f000 80a1 	beq.w	80046a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fc fc09 	bl	8000d7c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <UART_WaitOnFlagUntilTimeout+0x32>
 8004576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004578:	2b00      	cmp	r3, #0
 800457a:	d13e      	bne.n	80045fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004590:	667b      	str	r3, [r7, #100]	; 0x64
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800459a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800459c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e6      	bne.n	800457c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	663b      	str	r3, [r7, #96]	; 0x60
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80045d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e067      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d04f      	beq.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d147      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004620:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
 8004642:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	613b      	str	r3, [r7, #16]
   return(result);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	66bb      	str	r3, [r7, #104]	; 0x68
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004674:	623a      	str	r2, [r7, #32]
 8004676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	69f9      	ldr	r1, [r7, #28]
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	61bb      	str	r3, [r7, #24]
   return(result);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e010      	b.n	80046ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4013      	ands	r3, r2
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	461a      	mov	r2, r3
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	f43f af4a 	beq.w	800455c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3770      	adds	r7, #112	; 0x70
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b097      	sub	sp, #92	; 0x5c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	d10e      	bne.n	8004726 <UART_Start_Receive_IT+0x52>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <UART_Start_Receive_IT+0x48>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800471a:	e02d      	b.n	8004778 <UART_Start_Receive_IT+0xa4>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004724:	e028      	b.n	8004778 <UART_Start_Receive_IT+0xa4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <UART_Start_Receive_IT+0x76>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <UART_Start_Receive_IT+0x6c>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800473e:	e01b      	b.n	8004778 <UART_Start_Receive_IT+0xa4>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	227f      	movs	r2, #127	; 0x7f
 8004744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004748:	e016      	b.n	8004778 <UART_Start_Receive_IT+0xa4>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004752:	d10d      	bne.n	8004770 <UART_Start_Receive_IT+0x9c>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <UART_Start_Receive_IT+0x92>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	227f      	movs	r2, #127	; 0x7f
 8004760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004764:	e008      	b.n	8004778 <UART_Start_Receive_IT+0xa4>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	223f      	movs	r2, #63	; 0x3f
 800476a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800476e:	e003      	b.n	8004778 <UART_Start_Receive_IT+0xa4>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2222      	movs	r2, #34	; 0x22
 8004784:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3308      	adds	r3, #8
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	657b      	str	r3, [r7, #84]	; 0x54
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c2:	d107      	bne.n	80047d4 <UART_Start_Receive_IT+0x100>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a24      	ldr	r2, [pc, #144]	; (8004860 <UART_Start_Receive_IT+0x18c>)
 80047d0:	665a      	str	r2, [r3, #100]	; 0x64
 80047d2:	e002      	b.n	80047da <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4a23      	ldr	r2, [pc, #140]	; (8004864 <UART_Start_Receive_IT+0x190>)
 80047d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d019      	beq.n	800481e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
 800480a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800480e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e6      	bne.n	80047ea <UART_Start_Receive_IT+0x116>
 800481c:	e018      	b.n	8004850 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	613b      	str	r3, [r7, #16]
   return(result);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f043 0320 	orr.w	r3, r3, #32
 8004832:	653b      	str	r3, [r7, #80]	; 0x50
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	69f9      	ldr	r1, [r7, #28]
 8004842:	6a3a      	ldr	r2, [r7, #32]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	61bb      	str	r3, [r7, #24]
   return(result);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	375c      	adds	r7, #92	; 0x5c
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	08004b0f 	.word	0x08004b0f
 8004864:	080049af 	.word	0x080049af

08004868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b095      	sub	sp, #84	; 0x54
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004884:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
 8004890:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e6      	bne.n	8004870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3308      	adds	r3, #8
 80048c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d118      	bne.n	8004910 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f023 0310 	bic.w	r3, r3, #16
 80048f2:	647b      	str	r3, [r7, #68]	; 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6979      	ldr	r1, [r7, #20]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	613b      	str	r3, [r7, #16]
   return(result);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004922:	bf00      	nop
 8004924:	3754      	adds	r7, #84	; 0x54
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fa43 	bl	8003dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b088      	sub	sp, #32
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6979      	ldr	r1, [r7, #20]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	613b      	str	r3, [r7, #16]
   return(result);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e6      	bne.n	8004962 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fa0f 	bl	8003dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a6:	bf00      	nop
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b096      	sub	sp, #88	; 0x58
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c4:	2b22      	cmp	r3, #34	; 0x22
 80049c6:	f040 8094 	bne.w	8004af2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80049d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80049d8:	b2d9      	uxtb	r1, r3
 80049da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	400a      	ands	r2, r1
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d179      	bne.n	8004b06 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a26:	653b      	str	r3, [r7, #80]	; 0x50
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a30:	647b      	str	r3, [r7, #68]	; 0x44
 8004a32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e6      	bne.n	8004a12 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	623b      	str	r3, [r7, #32]
   return(result);
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3308      	adds	r3, #8
 8004a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a64:	633a      	str	r2, [r7, #48]	; 0x30
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d12e      	bne.n	8004aea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0310 	bic.w	r3, r3, #16
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	617b      	str	r3, [r7, #20]
   return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f003 0310 	and.w	r3, r3, #16
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d103      	bne.n	8004ada <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff f982 	bl	8003dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ae8:	e00d      	b.n	8004b06 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fb fe90 	bl	8000810 <HAL_UART_RxCpltCallback>
}
 8004af0:	e009      	b.n	8004b06 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	8b1b      	ldrh	r3, [r3, #24]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	b292      	uxth	r2, r2
 8004b04:	831a      	strh	r2, [r3, #24]
}
 8004b06:	bf00      	nop
 8004b08:	3758      	adds	r7, #88	; 0x58
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b096      	sub	sp, #88	; 0x58
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b24:	2b22      	cmp	r3, #34	; 0x22
 8004b26:	f040 8094 	bne.w	8004c52 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b3a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004b3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d179      	bne.n	8004c66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	643b      	str	r3, [r7, #64]	; 0x40
 8004b92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e6      	bne.n	8004b72 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f023 0301 	bic.w	r3, r3, #1
 8004bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e5      	bne.n	8004ba4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d12e      	bne.n	8004c4a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	647b      	str	r3, [r7, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d103      	bne.n	8004c3a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2210      	movs	r2, #16
 8004c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff f8d2 	bl	8003dec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c48:	e00d      	b.n	8004c66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fb fde0 	bl	8000810 <HAL_UART_RxCpltCallback>
}
 8004c50:	e009      	b.n	8004c66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	8b1b      	ldrh	r3, [r3, #24]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0208 	orr.w	r2, r2, #8
 8004c62:	b292      	uxth	r2, r2
 8004c64:	831a      	strh	r2, [r3, #24]
}
 8004c66:	bf00      	nop
 8004c68:	3758      	adds	r7, #88	; 0x58
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <__errno>:
 8004c84:	4b01      	ldr	r3, [pc, #4]	; (8004c8c <__errno+0x8>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2000000c 	.word	0x2000000c

08004c90 <__libc_init_array>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4d0d      	ldr	r5, [pc, #52]	; (8004cc8 <__libc_init_array+0x38>)
 8004c94:	4c0d      	ldr	r4, [pc, #52]	; (8004ccc <__libc_init_array+0x3c>)
 8004c96:	1b64      	subs	r4, r4, r5
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	2600      	movs	r6, #0
 8004c9c:	42a6      	cmp	r6, r4
 8004c9e:	d109      	bne.n	8004cb4 <__libc_init_array+0x24>
 8004ca0:	4d0b      	ldr	r5, [pc, #44]	; (8004cd0 <__libc_init_array+0x40>)
 8004ca2:	4c0c      	ldr	r4, [pc, #48]	; (8004cd4 <__libc_init_array+0x44>)
 8004ca4:	f000 ffae 	bl	8005c04 <_init>
 8004ca8:	1b64      	subs	r4, r4, r5
 8004caa:	10a4      	asrs	r4, r4, #2
 8004cac:	2600      	movs	r6, #0
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	d105      	bne.n	8004cbe <__libc_init_array+0x2e>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb8:	4798      	blx	r3
 8004cba:	3601      	adds	r6, #1
 8004cbc:	e7ee      	b.n	8004c9c <__libc_init_array+0xc>
 8004cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc2:	4798      	blx	r3
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	e7f2      	b.n	8004cae <__libc_init_array+0x1e>
 8004cc8:	08005d0c 	.word	0x08005d0c
 8004ccc:	08005d0c 	.word	0x08005d0c
 8004cd0:	08005d0c 	.word	0x08005d0c
 8004cd4:	08005d10 	.word	0x08005d10

08004cd8 <memset>:
 8004cd8:	4402      	add	r2, r0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <memset+0xa>
 8004ce0:	4770      	bx	lr
 8004ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce6:	e7f9      	b.n	8004cdc <memset+0x4>

08004ce8 <iprintf>:
 8004ce8:	b40f      	push	{r0, r1, r2, r3}
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <iprintf+0x2c>)
 8004cec:	b513      	push	{r0, r1, r4, lr}
 8004cee:	681c      	ldr	r4, [r3, #0]
 8004cf0:	b124      	cbz	r4, 8004cfc <iprintf+0x14>
 8004cf2:	69a3      	ldr	r3, [r4, #24]
 8004cf4:	b913      	cbnz	r3, 8004cfc <iprintf+0x14>
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f000 f866 	bl	8004dc8 <__sinit>
 8004cfc:	ab05      	add	r3, sp, #20
 8004cfe:	9a04      	ldr	r2, [sp, #16]
 8004d00:	68a1      	ldr	r1, [r4, #8]
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	4620      	mov	r0, r4
 8004d06:	f000 f9bd 	bl	8005084 <_vfiprintf_r>
 8004d0a:	b002      	add	sp, #8
 8004d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d10:	b004      	add	sp, #16
 8004d12:	4770      	bx	lr
 8004d14:	2000000c 	.word	0x2000000c

08004d18 <std>:
 8004d18:	2300      	movs	r3, #0
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d26:	6083      	str	r3, [r0, #8]
 8004d28:	8181      	strh	r1, [r0, #12]
 8004d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d2c:	81c2      	strh	r2, [r0, #14]
 8004d2e:	6183      	str	r3, [r0, #24]
 8004d30:	4619      	mov	r1, r3
 8004d32:	2208      	movs	r2, #8
 8004d34:	305c      	adds	r0, #92	; 0x5c
 8004d36:	f7ff ffcf 	bl	8004cd8 <memset>
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <std+0x38>)
 8004d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <std+0x3c>)
 8004d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <std+0x40>)
 8004d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d46:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <std+0x44>)
 8004d48:	6224      	str	r4, [r4, #32]
 8004d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d4c:	bd10      	pop	{r4, pc}
 8004d4e:	bf00      	nop
 8004d50:	0800562d 	.word	0x0800562d
 8004d54:	0800564f 	.word	0x0800564f
 8004d58:	08005687 	.word	0x08005687
 8004d5c:	080056ab 	.word	0x080056ab

08004d60 <_cleanup_r>:
 8004d60:	4901      	ldr	r1, [pc, #4]	; (8004d68 <_cleanup_r+0x8>)
 8004d62:	f000 b8af 	b.w	8004ec4 <_fwalk_reent>
 8004d66:	bf00      	nop
 8004d68:	08005985 	.word	0x08005985

08004d6c <__sfmoreglue>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	2268      	movs	r2, #104	; 0x68
 8004d70:	1e4d      	subs	r5, r1, #1
 8004d72:	4355      	muls	r5, r2
 8004d74:	460e      	mov	r6, r1
 8004d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d7a:	f000 f8e5 	bl	8004f48 <_malloc_r>
 8004d7e:	4604      	mov	r4, r0
 8004d80:	b140      	cbz	r0, 8004d94 <__sfmoreglue+0x28>
 8004d82:	2100      	movs	r1, #0
 8004d84:	e9c0 1600 	strd	r1, r6, [r0]
 8004d88:	300c      	adds	r0, #12
 8004d8a:	60a0      	str	r0, [r4, #8]
 8004d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d90:	f7ff ffa2 	bl	8004cd8 <memset>
 8004d94:	4620      	mov	r0, r4
 8004d96:	bd70      	pop	{r4, r5, r6, pc}

08004d98 <__sfp_lock_acquire>:
 8004d98:	4801      	ldr	r0, [pc, #4]	; (8004da0 <__sfp_lock_acquire+0x8>)
 8004d9a:	f000 b8b3 	b.w	8004f04 <__retarget_lock_acquire_recursive>
 8004d9e:	bf00      	nop
 8004da0:	200002b1 	.word	0x200002b1

08004da4 <__sfp_lock_release>:
 8004da4:	4801      	ldr	r0, [pc, #4]	; (8004dac <__sfp_lock_release+0x8>)
 8004da6:	f000 b8ae 	b.w	8004f06 <__retarget_lock_release_recursive>
 8004daa:	bf00      	nop
 8004dac:	200002b1 	.word	0x200002b1

08004db0 <__sinit_lock_acquire>:
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <__sinit_lock_acquire+0x8>)
 8004db2:	f000 b8a7 	b.w	8004f04 <__retarget_lock_acquire_recursive>
 8004db6:	bf00      	nop
 8004db8:	200002b2 	.word	0x200002b2

08004dbc <__sinit_lock_release>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	; (8004dc4 <__sinit_lock_release+0x8>)
 8004dbe:	f000 b8a2 	b.w	8004f06 <__retarget_lock_release_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	200002b2 	.word	0x200002b2

08004dc8 <__sinit>:
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	4604      	mov	r4, r0
 8004dcc:	f7ff fff0 	bl	8004db0 <__sinit_lock_acquire>
 8004dd0:	69a3      	ldr	r3, [r4, #24]
 8004dd2:	b11b      	cbz	r3, 8004ddc <__sinit+0x14>
 8004dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd8:	f7ff bff0 	b.w	8004dbc <__sinit_lock_release>
 8004ddc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004de0:	6523      	str	r3, [r4, #80]	; 0x50
 8004de2:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <__sinit+0x68>)
 8004de4:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <__sinit+0x6c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	bf04      	itt	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	61a3      	streq	r3, [r4, #24]
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 f820 	bl	8004e38 <__sfp>
 8004df8:	6060      	str	r0, [r4, #4]
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f000 f81c 	bl	8004e38 <__sfp>
 8004e00:	60a0      	str	r0, [r4, #8]
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 f818 	bl	8004e38 <__sfp>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	60e0      	str	r0, [r4, #12]
 8004e0c:	2104      	movs	r1, #4
 8004e0e:	6860      	ldr	r0, [r4, #4]
 8004e10:	f7ff ff82 	bl	8004d18 <std>
 8004e14:	68a0      	ldr	r0, [r4, #8]
 8004e16:	2201      	movs	r2, #1
 8004e18:	2109      	movs	r1, #9
 8004e1a:	f7ff ff7d 	bl	8004d18 <std>
 8004e1e:	68e0      	ldr	r0, [r4, #12]
 8004e20:	2202      	movs	r2, #2
 8004e22:	2112      	movs	r1, #18
 8004e24:	f7ff ff78 	bl	8004d18 <std>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	61a3      	str	r3, [r4, #24]
 8004e2c:	e7d2      	b.n	8004dd4 <__sinit+0xc>
 8004e2e:	bf00      	nop
 8004e30:	08005c6c 	.word	0x08005c6c
 8004e34:	08004d61 	.word	0x08004d61

08004e38 <__sfp>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	4607      	mov	r7, r0
 8004e3c:	f7ff ffac 	bl	8004d98 <__sfp_lock_acquire>
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <__sfp+0x84>)
 8004e42:	681e      	ldr	r6, [r3, #0]
 8004e44:	69b3      	ldr	r3, [r6, #24]
 8004e46:	b913      	cbnz	r3, 8004e4e <__sfp+0x16>
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f7ff ffbd 	bl	8004dc8 <__sinit>
 8004e4e:	3648      	adds	r6, #72	; 0x48
 8004e50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	d503      	bpl.n	8004e60 <__sfp+0x28>
 8004e58:	6833      	ldr	r3, [r6, #0]
 8004e5a:	b30b      	cbz	r3, 8004ea0 <__sfp+0x68>
 8004e5c:	6836      	ldr	r6, [r6, #0]
 8004e5e:	e7f7      	b.n	8004e50 <__sfp+0x18>
 8004e60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e64:	b9d5      	cbnz	r5, 8004e9c <__sfp+0x64>
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <__sfp+0x88>)
 8004e68:	60e3      	str	r3, [r4, #12]
 8004e6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e70:	f000 f847 	bl	8004f02 <__retarget_lock_init_recursive>
 8004e74:	f7ff ff96 	bl	8004da4 <__sfp_lock_release>
 8004e78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e80:	6025      	str	r5, [r4, #0]
 8004e82:	61a5      	str	r5, [r4, #24]
 8004e84:	2208      	movs	r2, #8
 8004e86:	4629      	mov	r1, r5
 8004e88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e8c:	f7ff ff24 	bl	8004cd8 <memset>
 8004e90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e98:	4620      	mov	r0, r4
 8004e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9c:	3468      	adds	r4, #104	; 0x68
 8004e9e:	e7d9      	b.n	8004e54 <__sfp+0x1c>
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f7ff ff62 	bl	8004d6c <__sfmoreglue>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	6030      	str	r0, [r6, #0]
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d1d5      	bne.n	8004e5c <__sfp+0x24>
 8004eb0:	f7ff ff78 	bl	8004da4 <__sfp_lock_release>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	e7ee      	b.n	8004e98 <__sfp+0x60>
 8004eba:	bf00      	nop
 8004ebc:	08005c6c 	.word	0x08005c6c
 8004ec0:	ffff0001 	.word	0xffff0001

08004ec4 <_fwalk_reent>:
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	4606      	mov	r6, r0
 8004eca:	4688      	mov	r8, r1
 8004ecc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ed0:	2700      	movs	r7, #0
 8004ed2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ed6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eda:	d505      	bpl.n	8004ee8 <_fwalk_reent+0x24>
 8004edc:	6824      	ldr	r4, [r4, #0]
 8004ede:	2c00      	cmp	r4, #0
 8004ee0:	d1f7      	bne.n	8004ed2 <_fwalk_reent+0xe>
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee8:	89ab      	ldrh	r3, [r5, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d907      	bls.n	8004efe <_fwalk_reent+0x3a>
 8004eee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	d003      	beq.n	8004efe <_fwalk_reent+0x3a>
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4630      	mov	r0, r6
 8004efa:	47c0      	blx	r8
 8004efc:	4307      	orrs	r7, r0
 8004efe:	3568      	adds	r5, #104	; 0x68
 8004f00:	e7e9      	b.n	8004ed6 <_fwalk_reent+0x12>

08004f02 <__retarget_lock_init_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <__retarget_lock_acquire_recursive>:
 8004f04:	4770      	bx	lr

08004f06 <__retarget_lock_release_recursive>:
 8004f06:	4770      	bx	lr

08004f08 <sbrk_aligned>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	4e0e      	ldr	r6, [pc, #56]	; (8004f44 <sbrk_aligned+0x3c>)
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	6831      	ldr	r1, [r6, #0]
 8004f10:	4605      	mov	r5, r0
 8004f12:	b911      	cbnz	r1, 8004f1a <sbrk_aligned+0x12>
 8004f14:	f000 fb7a 	bl	800560c <_sbrk_r>
 8004f18:	6030      	str	r0, [r6, #0]
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 fb75 	bl	800560c <_sbrk_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d00a      	beq.n	8004f3c <sbrk_aligned+0x34>
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d007      	beq.n	8004f40 <sbrk_aligned+0x38>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fb6a 	bl	800560c <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d101      	bne.n	8004f40 <sbrk_aligned+0x38>
 8004f3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f40:	4620      	mov	r0, r4
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	200002b8 	.word	0x200002b8

08004f48 <_malloc_r>:
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4c:	1ccd      	adds	r5, r1, #3
 8004f4e:	f025 0503 	bic.w	r5, r5, #3
 8004f52:	3508      	adds	r5, #8
 8004f54:	2d0c      	cmp	r5, #12
 8004f56:	bf38      	it	cc
 8004f58:	250c      	movcc	r5, #12
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	db01      	blt.n	8004f64 <_malloc_r+0x1c>
 8004f60:	42a9      	cmp	r1, r5
 8004f62:	d905      	bls.n	8004f70 <_malloc_r+0x28>
 8004f64:	230c      	movs	r3, #12
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	2600      	movs	r6, #0
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f70:	4e2e      	ldr	r6, [pc, #184]	; (800502c <_malloc_r+0xe4>)
 8004f72:	f000 fdbb 	bl	8005aec <__malloc_lock>
 8004f76:	6833      	ldr	r3, [r6, #0]
 8004f78:	461c      	mov	r4, r3
 8004f7a:	bb34      	cbnz	r4, 8004fca <_malloc_r+0x82>
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4638      	mov	r0, r7
 8004f80:	f7ff ffc2 	bl	8004f08 <sbrk_aligned>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	4604      	mov	r4, r0
 8004f88:	d14d      	bne.n	8005026 <_malloc_r+0xde>
 8004f8a:	6834      	ldr	r4, [r6, #0]
 8004f8c:	4626      	mov	r6, r4
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	d140      	bne.n	8005014 <_malloc_r+0xcc>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	4631      	mov	r1, r6
 8004f96:	4638      	mov	r0, r7
 8004f98:	eb04 0803 	add.w	r8, r4, r3
 8004f9c:	f000 fb36 	bl	800560c <_sbrk_r>
 8004fa0:	4580      	cmp	r8, r0
 8004fa2:	d13a      	bne.n	800501a <_malloc_r+0xd2>
 8004fa4:	6821      	ldr	r1, [r4, #0]
 8004fa6:	3503      	adds	r5, #3
 8004fa8:	1a6d      	subs	r5, r5, r1
 8004faa:	f025 0503 	bic.w	r5, r5, #3
 8004fae:	3508      	adds	r5, #8
 8004fb0:	2d0c      	cmp	r5, #12
 8004fb2:	bf38      	it	cc
 8004fb4:	250c      	movcc	r5, #12
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7ff ffa5 	bl	8004f08 <sbrk_aligned>
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d02b      	beq.n	800501a <_malloc_r+0xd2>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	442b      	add	r3, r5
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	e00e      	b.n	8004fe8 <_malloc_r+0xa0>
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	1b52      	subs	r2, r2, r5
 8004fce:	d41e      	bmi.n	800500e <_malloc_r+0xc6>
 8004fd0:	2a0b      	cmp	r2, #11
 8004fd2:	d916      	bls.n	8005002 <_malloc_r+0xba>
 8004fd4:	1961      	adds	r1, r4, r5
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	6025      	str	r5, [r4, #0]
 8004fda:	bf18      	it	ne
 8004fdc:	6059      	strne	r1, [r3, #4]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	bf08      	it	eq
 8004fe2:	6031      	streq	r1, [r6, #0]
 8004fe4:	5162      	str	r2, [r4, r5]
 8004fe6:	604b      	str	r3, [r1, #4]
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f104 060b 	add.w	r6, r4, #11
 8004fee:	f000 fd83 	bl	8005af8 <__malloc_unlock>
 8004ff2:	f026 0607 	bic.w	r6, r6, #7
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	1af2      	subs	r2, r6, r3
 8004ffa:	d0b6      	beq.n	8004f6a <_malloc_r+0x22>
 8004ffc:	1b9b      	subs	r3, r3, r6
 8004ffe:	50a3      	str	r3, [r4, r2]
 8005000:	e7b3      	b.n	8004f6a <_malloc_r+0x22>
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	42a3      	cmp	r3, r4
 8005006:	bf0c      	ite	eq
 8005008:	6032      	streq	r2, [r6, #0]
 800500a:	605a      	strne	r2, [r3, #4]
 800500c:	e7ec      	b.n	8004fe8 <_malloc_r+0xa0>
 800500e:	4623      	mov	r3, r4
 8005010:	6864      	ldr	r4, [r4, #4]
 8005012:	e7b2      	b.n	8004f7a <_malloc_r+0x32>
 8005014:	4634      	mov	r4, r6
 8005016:	6876      	ldr	r6, [r6, #4]
 8005018:	e7b9      	b.n	8004f8e <_malloc_r+0x46>
 800501a:	230c      	movs	r3, #12
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	4638      	mov	r0, r7
 8005020:	f000 fd6a 	bl	8005af8 <__malloc_unlock>
 8005024:	e7a1      	b.n	8004f6a <_malloc_r+0x22>
 8005026:	6025      	str	r5, [r4, #0]
 8005028:	e7de      	b.n	8004fe8 <_malloc_r+0xa0>
 800502a:	bf00      	nop
 800502c:	200002b4 	.word	0x200002b4

08005030 <__sfputc_r>:
 8005030:	6893      	ldr	r3, [r2, #8]
 8005032:	3b01      	subs	r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	b410      	push	{r4}
 8005038:	6093      	str	r3, [r2, #8]
 800503a:	da08      	bge.n	800504e <__sfputc_r+0x1e>
 800503c:	6994      	ldr	r4, [r2, #24]
 800503e:	42a3      	cmp	r3, r4
 8005040:	db01      	blt.n	8005046 <__sfputc_r+0x16>
 8005042:	290a      	cmp	r1, #10
 8005044:	d103      	bne.n	800504e <__sfputc_r+0x1e>
 8005046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800504a:	f000 bb33 	b.w	80056b4 <__swbuf_r>
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	1c58      	adds	r0, r3, #1
 8005052:	6010      	str	r0, [r2, #0]
 8005054:	7019      	strb	r1, [r3, #0]
 8005056:	4608      	mov	r0, r1
 8005058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800505c:	4770      	bx	lr

0800505e <__sfputs_r>:
 800505e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005060:	4606      	mov	r6, r0
 8005062:	460f      	mov	r7, r1
 8005064:	4614      	mov	r4, r2
 8005066:	18d5      	adds	r5, r2, r3
 8005068:	42ac      	cmp	r4, r5
 800506a:	d101      	bne.n	8005070 <__sfputs_r+0x12>
 800506c:	2000      	movs	r0, #0
 800506e:	e007      	b.n	8005080 <__sfputs_r+0x22>
 8005070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005074:	463a      	mov	r2, r7
 8005076:	4630      	mov	r0, r6
 8005078:	f7ff ffda 	bl	8005030 <__sfputc_r>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d1f3      	bne.n	8005068 <__sfputs_r+0xa>
 8005080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005084 <_vfiprintf_r>:
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	460d      	mov	r5, r1
 800508a:	b09d      	sub	sp, #116	; 0x74
 800508c:	4614      	mov	r4, r2
 800508e:	4698      	mov	r8, r3
 8005090:	4606      	mov	r6, r0
 8005092:	b118      	cbz	r0, 800509c <_vfiprintf_r+0x18>
 8005094:	6983      	ldr	r3, [r0, #24]
 8005096:	b90b      	cbnz	r3, 800509c <_vfiprintf_r+0x18>
 8005098:	f7ff fe96 	bl	8004dc8 <__sinit>
 800509c:	4b89      	ldr	r3, [pc, #548]	; (80052c4 <_vfiprintf_r+0x240>)
 800509e:	429d      	cmp	r5, r3
 80050a0:	d11b      	bne.n	80050da <_vfiprintf_r+0x56>
 80050a2:	6875      	ldr	r5, [r6, #4]
 80050a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050a6:	07d9      	lsls	r1, r3, #31
 80050a8:	d405      	bmi.n	80050b6 <_vfiprintf_r+0x32>
 80050aa:	89ab      	ldrh	r3, [r5, #12]
 80050ac:	059a      	lsls	r2, r3, #22
 80050ae:	d402      	bmi.n	80050b6 <_vfiprintf_r+0x32>
 80050b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050b2:	f7ff ff27 	bl	8004f04 <__retarget_lock_acquire_recursive>
 80050b6:	89ab      	ldrh	r3, [r5, #12]
 80050b8:	071b      	lsls	r3, r3, #28
 80050ba:	d501      	bpl.n	80050c0 <_vfiprintf_r+0x3c>
 80050bc:	692b      	ldr	r3, [r5, #16]
 80050be:	b9eb      	cbnz	r3, 80050fc <_vfiprintf_r+0x78>
 80050c0:	4629      	mov	r1, r5
 80050c2:	4630      	mov	r0, r6
 80050c4:	f000 fb5a 	bl	800577c <__swsetup_r>
 80050c8:	b1c0      	cbz	r0, 80050fc <_vfiprintf_r+0x78>
 80050ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050cc:	07dc      	lsls	r4, r3, #31
 80050ce:	d50e      	bpl.n	80050ee <_vfiprintf_r+0x6a>
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d4:	b01d      	add	sp, #116	; 0x74
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	4b7b      	ldr	r3, [pc, #492]	; (80052c8 <_vfiprintf_r+0x244>)
 80050dc:	429d      	cmp	r5, r3
 80050de:	d101      	bne.n	80050e4 <_vfiprintf_r+0x60>
 80050e0:	68b5      	ldr	r5, [r6, #8]
 80050e2:	e7df      	b.n	80050a4 <_vfiprintf_r+0x20>
 80050e4:	4b79      	ldr	r3, [pc, #484]	; (80052cc <_vfiprintf_r+0x248>)
 80050e6:	429d      	cmp	r5, r3
 80050e8:	bf08      	it	eq
 80050ea:	68f5      	ldreq	r5, [r6, #12]
 80050ec:	e7da      	b.n	80050a4 <_vfiprintf_r+0x20>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	0598      	lsls	r0, r3, #22
 80050f2:	d4ed      	bmi.n	80050d0 <_vfiprintf_r+0x4c>
 80050f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f6:	f7ff ff06 	bl	8004f06 <__retarget_lock_release_recursive>
 80050fa:	e7e9      	b.n	80050d0 <_vfiprintf_r+0x4c>
 80050fc:	2300      	movs	r3, #0
 80050fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005100:	2320      	movs	r3, #32
 8005102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005106:	f8cd 800c 	str.w	r8, [sp, #12]
 800510a:	2330      	movs	r3, #48	; 0x30
 800510c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052d0 <_vfiprintf_r+0x24c>
 8005110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005114:	f04f 0901 	mov.w	r9, #1
 8005118:	4623      	mov	r3, r4
 800511a:	469a      	mov	sl, r3
 800511c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005120:	b10a      	cbz	r2, 8005126 <_vfiprintf_r+0xa2>
 8005122:	2a25      	cmp	r2, #37	; 0x25
 8005124:	d1f9      	bne.n	800511a <_vfiprintf_r+0x96>
 8005126:	ebba 0b04 	subs.w	fp, sl, r4
 800512a:	d00b      	beq.n	8005144 <_vfiprintf_r+0xc0>
 800512c:	465b      	mov	r3, fp
 800512e:	4622      	mov	r2, r4
 8005130:	4629      	mov	r1, r5
 8005132:	4630      	mov	r0, r6
 8005134:	f7ff ff93 	bl	800505e <__sfputs_r>
 8005138:	3001      	adds	r0, #1
 800513a:	f000 80aa 	beq.w	8005292 <_vfiprintf_r+0x20e>
 800513e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005140:	445a      	add	r2, fp
 8005142:	9209      	str	r2, [sp, #36]	; 0x24
 8005144:	f89a 3000 	ldrb.w	r3, [sl]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80a2 	beq.w	8005292 <_vfiprintf_r+0x20e>
 800514e:	2300      	movs	r3, #0
 8005150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005158:	f10a 0a01 	add.w	sl, sl, #1
 800515c:	9304      	str	r3, [sp, #16]
 800515e:	9307      	str	r3, [sp, #28]
 8005160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005164:	931a      	str	r3, [sp, #104]	; 0x68
 8005166:	4654      	mov	r4, sl
 8005168:	2205      	movs	r2, #5
 800516a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516e:	4858      	ldr	r0, [pc, #352]	; (80052d0 <_vfiprintf_r+0x24c>)
 8005170:	f7fb f83e 	bl	80001f0 <memchr>
 8005174:	9a04      	ldr	r2, [sp, #16]
 8005176:	b9d8      	cbnz	r0, 80051b0 <_vfiprintf_r+0x12c>
 8005178:	06d1      	lsls	r1, r2, #27
 800517a:	bf44      	itt	mi
 800517c:	2320      	movmi	r3, #32
 800517e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005182:	0713      	lsls	r3, r2, #28
 8005184:	bf44      	itt	mi
 8005186:	232b      	movmi	r3, #43	; 0x2b
 8005188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800518c:	f89a 3000 	ldrb.w	r3, [sl]
 8005190:	2b2a      	cmp	r3, #42	; 0x2a
 8005192:	d015      	beq.n	80051c0 <_vfiprintf_r+0x13c>
 8005194:	9a07      	ldr	r2, [sp, #28]
 8005196:	4654      	mov	r4, sl
 8005198:	2000      	movs	r0, #0
 800519a:	f04f 0c0a 	mov.w	ip, #10
 800519e:	4621      	mov	r1, r4
 80051a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051a4:	3b30      	subs	r3, #48	; 0x30
 80051a6:	2b09      	cmp	r3, #9
 80051a8:	d94e      	bls.n	8005248 <_vfiprintf_r+0x1c4>
 80051aa:	b1b0      	cbz	r0, 80051da <_vfiprintf_r+0x156>
 80051ac:	9207      	str	r2, [sp, #28]
 80051ae:	e014      	b.n	80051da <_vfiprintf_r+0x156>
 80051b0:	eba0 0308 	sub.w	r3, r0, r8
 80051b4:	fa09 f303 	lsl.w	r3, r9, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	9304      	str	r3, [sp, #16]
 80051bc:	46a2      	mov	sl, r4
 80051be:	e7d2      	b.n	8005166 <_vfiprintf_r+0xe2>
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	1d19      	adds	r1, r3, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	9103      	str	r1, [sp, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bfbb      	ittet	lt
 80051cc:	425b      	neglt	r3, r3
 80051ce:	f042 0202 	orrlt.w	r2, r2, #2
 80051d2:	9307      	strge	r3, [sp, #28]
 80051d4:	9307      	strlt	r3, [sp, #28]
 80051d6:	bfb8      	it	lt
 80051d8:	9204      	strlt	r2, [sp, #16]
 80051da:	7823      	ldrb	r3, [r4, #0]
 80051dc:	2b2e      	cmp	r3, #46	; 0x2e
 80051de:	d10c      	bne.n	80051fa <_vfiprintf_r+0x176>
 80051e0:	7863      	ldrb	r3, [r4, #1]
 80051e2:	2b2a      	cmp	r3, #42	; 0x2a
 80051e4:	d135      	bne.n	8005252 <_vfiprintf_r+0x1ce>
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	1d1a      	adds	r2, r3, #4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	9203      	str	r2, [sp, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bfb8      	it	lt
 80051f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051f6:	3402      	adds	r4, #2
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052e0 <_vfiprintf_r+0x25c>
 80051fe:	7821      	ldrb	r1, [r4, #0]
 8005200:	2203      	movs	r2, #3
 8005202:	4650      	mov	r0, sl
 8005204:	f7fa fff4 	bl	80001f0 <memchr>
 8005208:	b140      	cbz	r0, 800521c <_vfiprintf_r+0x198>
 800520a:	2340      	movs	r3, #64	; 0x40
 800520c:	eba0 000a 	sub.w	r0, r0, sl
 8005210:	fa03 f000 	lsl.w	r0, r3, r0
 8005214:	9b04      	ldr	r3, [sp, #16]
 8005216:	4303      	orrs	r3, r0
 8005218:	3401      	adds	r4, #1
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005220:	482c      	ldr	r0, [pc, #176]	; (80052d4 <_vfiprintf_r+0x250>)
 8005222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005226:	2206      	movs	r2, #6
 8005228:	f7fa ffe2 	bl	80001f0 <memchr>
 800522c:	2800      	cmp	r0, #0
 800522e:	d03f      	beq.n	80052b0 <_vfiprintf_r+0x22c>
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <_vfiprintf_r+0x254>)
 8005232:	bb1b      	cbnz	r3, 800527c <_vfiprintf_r+0x1f8>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	3307      	adds	r3, #7
 8005238:	f023 0307 	bic.w	r3, r3, #7
 800523c:	3308      	adds	r3, #8
 800523e:	9303      	str	r3, [sp, #12]
 8005240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005242:	443b      	add	r3, r7
 8005244:	9309      	str	r3, [sp, #36]	; 0x24
 8005246:	e767      	b.n	8005118 <_vfiprintf_r+0x94>
 8005248:	fb0c 3202 	mla	r2, ip, r2, r3
 800524c:	460c      	mov	r4, r1
 800524e:	2001      	movs	r0, #1
 8005250:	e7a5      	b.n	800519e <_vfiprintf_r+0x11a>
 8005252:	2300      	movs	r3, #0
 8005254:	3401      	adds	r4, #1
 8005256:	9305      	str	r3, [sp, #20]
 8005258:	4619      	mov	r1, r3
 800525a:	f04f 0c0a 	mov.w	ip, #10
 800525e:	4620      	mov	r0, r4
 8005260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005264:	3a30      	subs	r2, #48	; 0x30
 8005266:	2a09      	cmp	r2, #9
 8005268:	d903      	bls.n	8005272 <_vfiprintf_r+0x1ee>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0c5      	beq.n	80051fa <_vfiprintf_r+0x176>
 800526e:	9105      	str	r1, [sp, #20]
 8005270:	e7c3      	b.n	80051fa <_vfiprintf_r+0x176>
 8005272:	fb0c 2101 	mla	r1, ip, r1, r2
 8005276:	4604      	mov	r4, r0
 8005278:	2301      	movs	r3, #1
 800527a:	e7f0      	b.n	800525e <_vfiprintf_r+0x1da>
 800527c:	ab03      	add	r3, sp, #12
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	462a      	mov	r2, r5
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <_vfiprintf_r+0x258>)
 8005284:	a904      	add	r1, sp, #16
 8005286:	4630      	mov	r0, r6
 8005288:	f3af 8000 	nop.w
 800528c:	4607      	mov	r7, r0
 800528e:	1c78      	adds	r0, r7, #1
 8005290:	d1d6      	bne.n	8005240 <_vfiprintf_r+0x1bc>
 8005292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005294:	07d9      	lsls	r1, r3, #31
 8005296:	d405      	bmi.n	80052a4 <_vfiprintf_r+0x220>
 8005298:	89ab      	ldrh	r3, [r5, #12]
 800529a:	059a      	lsls	r2, r3, #22
 800529c:	d402      	bmi.n	80052a4 <_vfiprintf_r+0x220>
 800529e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052a0:	f7ff fe31 	bl	8004f06 <__retarget_lock_release_recursive>
 80052a4:	89ab      	ldrh	r3, [r5, #12]
 80052a6:	065b      	lsls	r3, r3, #25
 80052a8:	f53f af12 	bmi.w	80050d0 <_vfiprintf_r+0x4c>
 80052ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ae:	e711      	b.n	80050d4 <_vfiprintf_r+0x50>
 80052b0:	ab03      	add	r3, sp, #12
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	462a      	mov	r2, r5
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <_vfiprintf_r+0x258>)
 80052b8:	a904      	add	r1, sp, #16
 80052ba:	4630      	mov	r0, r6
 80052bc:	f000 f880 	bl	80053c0 <_printf_i>
 80052c0:	e7e4      	b.n	800528c <_vfiprintf_r+0x208>
 80052c2:	bf00      	nop
 80052c4:	08005c90 	.word	0x08005c90
 80052c8:	08005cb0 	.word	0x08005cb0
 80052cc:	08005c70 	.word	0x08005c70
 80052d0:	08005cd0 	.word	0x08005cd0
 80052d4:	08005cda 	.word	0x08005cda
 80052d8:	00000000 	.word	0x00000000
 80052dc:	0800505f 	.word	0x0800505f
 80052e0:	08005cd6 	.word	0x08005cd6

080052e4 <_printf_common>:
 80052e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	4616      	mov	r6, r2
 80052ea:	4699      	mov	r9, r3
 80052ec:	688a      	ldr	r2, [r1, #8]
 80052ee:	690b      	ldr	r3, [r1, #16]
 80052f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bfb8      	it	lt
 80052f8:	4613      	movlt	r3, r2
 80052fa:	6033      	str	r3, [r6, #0]
 80052fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005300:	4607      	mov	r7, r0
 8005302:	460c      	mov	r4, r1
 8005304:	b10a      	cbz	r2, 800530a <_printf_common+0x26>
 8005306:	3301      	adds	r3, #1
 8005308:	6033      	str	r3, [r6, #0]
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	0699      	lsls	r1, r3, #26
 800530e:	bf42      	ittt	mi
 8005310:	6833      	ldrmi	r3, [r6, #0]
 8005312:	3302      	addmi	r3, #2
 8005314:	6033      	strmi	r3, [r6, #0]
 8005316:	6825      	ldr	r5, [r4, #0]
 8005318:	f015 0506 	ands.w	r5, r5, #6
 800531c:	d106      	bne.n	800532c <_printf_common+0x48>
 800531e:	f104 0a19 	add.w	sl, r4, #25
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	6832      	ldr	r2, [r6, #0]
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	42ab      	cmp	r3, r5
 800532a:	dc26      	bgt.n	800537a <_printf_common+0x96>
 800532c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005330:	1e13      	subs	r3, r2, #0
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	bf18      	it	ne
 8005336:	2301      	movne	r3, #1
 8005338:	0692      	lsls	r2, r2, #26
 800533a:	d42b      	bmi.n	8005394 <_printf_common+0xb0>
 800533c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005340:	4649      	mov	r1, r9
 8005342:	4638      	mov	r0, r7
 8005344:	47c0      	blx	r8
 8005346:	3001      	adds	r0, #1
 8005348:	d01e      	beq.n	8005388 <_printf_common+0xa4>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	68e5      	ldr	r5, [r4, #12]
 800534e:	6832      	ldr	r2, [r6, #0]
 8005350:	f003 0306 	and.w	r3, r3, #6
 8005354:	2b04      	cmp	r3, #4
 8005356:	bf08      	it	eq
 8005358:	1aad      	subeq	r5, r5, r2
 800535a:	68a3      	ldr	r3, [r4, #8]
 800535c:	6922      	ldr	r2, [r4, #16]
 800535e:	bf0c      	ite	eq
 8005360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005364:	2500      	movne	r5, #0
 8005366:	4293      	cmp	r3, r2
 8005368:	bfc4      	itt	gt
 800536a:	1a9b      	subgt	r3, r3, r2
 800536c:	18ed      	addgt	r5, r5, r3
 800536e:	2600      	movs	r6, #0
 8005370:	341a      	adds	r4, #26
 8005372:	42b5      	cmp	r5, r6
 8005374:	d11a      	bne.n	80053ac <_printf_common+0xc8>
 8005376:	2000      	movs	r0, #0
 8005378:	e008      	b.n	800538c <_printf_common+0xa8>
 800537a:	2301      	movs	r3, #1
 800537c:	4652      	mov	r2, sl
 800537e:	4649      	mov	r1, r9
 8005380:	4638      	mov	r0, r7
 8005382:	47c0      	blx	r8
 8005384:	3001      	adds	r0, #1
 8005386:	d103      	bne.n	8005390 <_printf_common+0xac>
 8005388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800538c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005390:	3501      	adds	r5, #1
 8005392:	e7c6      	b.n	8005322 <_printf_common+0x3e>
 8005394:	18e1      	adds	r1, r4, r3
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	2030      	movs	r0, #48	; 0x30
 800539a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800539e:	4422      	add	r2, r4
 80053a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053a8:	3302      	adds	r3, #2
 80053aa:	e7c7      	b.n	800533c <_printf_common+0x58>
 80053ac:	2301      	movs	r3, #1
 80053ae:	4622      	mov	r2, r4
 80053b0:	4649      	mov	r1, r9
 80053b2:	4638      	mov	r0, r7
 80053b4:	47c0      	blx	r8
 80053b6:	3001      	adds	r0, #1
 80053b8:	d0e6      	beq.n	8005388 <_printf_common+0xa4>
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7d9      	b.n	8005372 <_printf_common+0x8e>
	...

080053c0 <_printf_i>:
 80053c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	7e0f      	ldrb	r7, [r1, #24]
 80053c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053c8:	2f78      	cmp	r7, #120	; 0x78
 80053ca:	4691      	mov	r9, r2
 80053cc:	4680      	mov	r8, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	469a      	mov	sl, r3
 80053d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053d6:	d807      	bhi.n	80053e8 <_printf_i+0x28>
 80053d8:	2f62      	cmp	r7, #98	; 0x62
 80053da:	d80a      	bhi.n	80053f2 <_printf_i+0x32>
 80053dc:	2f00      	cmp	r7, #0
 80053de:	f000 80d8 	beq.w	8005592 <_printf_i+0x1d2>
 80053e2:	2f58      	cmp	r7, #88	; 0x58
 80053e4:	f000 80a3 	beq.w	800552e <_printf_i+0x16e>
 80053e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053f0:	e03a      	b.n	8005468 <_printf_i+0xa8>
 80053f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053f6:	2b15      	cmp	r3, #21
 80053f8:	d8f6      	bhi.n	80053e8 <_printf_i+0x28>
 80053fa:	a101      	add	r1, pc, #4	; (adr r1, 8005400 <_printf_i+0x40>)
 80053fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005400:	08005459 	.word	0x08005459
 8005404:	0800546d 	.word	0x0800546d
 8005408:	080053e9 	.word	0x080053e9
 800540c:	080053e9 	.word	0x080053e9
 8005410:	080053e9 	.word	0x080053e9
 8005414:	080053e9 	.word	0x080053e9
 8005418:	0800546d 	.word	0x0800546d
 800541c:	080053e9 	.word	0x080053e9
 8005420:	080053e9 	.word	0x080053e9
 8005424:	080053e9 	.word	0x080053e9
 8005428:	080053e9 	.word	0x080053e9
 800542c:	08005579 	.word	0x08005579
 8005430:	0800549d 	.word	0x0800549d
 8005434:	0800555b 	.word	0x0800555b
 8005438:	080053e9 	.word	0x080053e9
 800543c:	080053e9 	.word	0x080053e9
 8005440:	0800559b 	.word	0x0800559b
 8005444:	080053e9 	.word	0x080053e9
 8005448:	0800549d 	.word	0x0800549d
 800544c:	080053e9 	.word	0x080053e9
 8005450:	080053e9 	.word	0x080053e9
 8005454:	08005563 	.word	0x08005563
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	602a      	str	r2, [r5, #0]
 8005460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005468:	2301      	movs	r3, #1
 800546a:	e0a3      	b.n	80055b4 <_printf_i+0x1f4>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	6829      	ldr	r1, [r5, #0]
 8005470:	0606      	lsls	r6, r0, #24
 8005472:	f101 0304 	add.w	r3, r1, #4
 8005476:	d50a      	bpl.n	800548e <_printf_i+0xce>
 8005478:	680e      	ldr	r6, [r1, #0]
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	2e00      	cmp	r6, #0
 800547e:	da03      	bge.n	8005488 <_printf_i+0xc8>
 8005480:	232d      	movs	r3, #45	; 0x2d
 8005482:	4276      	negs	r6, r6
 8005484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005488:	485e      	ldr	r0, [pc, #376]	; (8005604 <_printf_i+0x244>)
 800548a:	230a      	movs	r3, #10
 800548c:	e019      	b.n	80054c2 <_printf_i+0x102>
 800548e:	680e      	ldr	r6, [r1, #0]
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005496:	bf18      	it	ne
 8005498:	b236      	sxthne	r6, r6
 800549a:	e7ef      	b.n	800547c <_printf_i+0xbc>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	6820      	ldr	r0, [r4, #0]
 80054a0:	1d19      	adds	r1, r3, #4
 80054a2:	6029      	str	r1, [r5, #0]
 80054a4:	0601      	lsls	r1, r0, #24
 80054a6:	d501      	bpl.n	80054ac <_printf_i+0xec>
 80054a8:	681e      	ldr	r6, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <_printf_i+0xf2>
 80054ac:	0646      	lsls	r6, r0, #25
 80054ae:	d5fb      	bpl.n	80054a8 <_printf_i+0xe8>
 80054b0:	881e      	ldrh	r6, [r3, #0]
 80054b2:	4854      	ldr	r0, [pc, #336]	; (8005604 <_printf_i+0x244>)
 80054b4:	2f6f      	cmp	r7, #111	; 0x6f
 80054b6:	bf0c      	ite	eq
 80054b8:	2308      	moveq	r3, #8
 80054ba:	230a      	movne	r3, #10
 80054bc:	2100      	movs	r1, #0
 80054be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054c2:	6865      	ldr	r5, [r4, #4]
 80054c4:	60a5      	str	r5, [r4, #8]
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	bfa2      	ittt	ge
 80054ca:	6821      	ldrge	r1, [r4, #0]
 80054cc:	f021 0104 	bicge.w	r1, r1, #4
 80054d0:	6021      	strge	r1, [r4, #0]
 80054d2:	b90e      	cbnz	r6, 80054d8 <_printf_i+0x118>
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	d04d      	beq.n	8005574 <_printf_i+0x1b4>
 80054d8:	4615      	mov	r5, r2
 80054da:	fbb6 f1f3 	udiv	r1, r6, r3
 80054de:	fb03 6711 	mls	r7, r3, r1, r6
 80054e2:	5dc7      	ldrb	r7, [r0, r7]
 80054e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054e8:	4637      	mov	r7, r6
 80054ea:	42bb      	cmp	r3, r7
 80054ec:	460e      	mov	r6, r1
 80054ee:	d9f4      	bls.n	80054da <_printf_i+0x11a>
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d10b      	bne.n	800550c <_printf_i+0x14c>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	07de      	lsls	r6, r3, #31
 80054f8:	d508      	bpl.n	800550c <_printf_i+0x14c>
 80054fa:	6923      	ldr	r3, [r4, #16]
 80054fc:	6861      	ldr	r1, [r4, #4]
 80054fe:	4299      	cmp	r1, r3
 8005500:	bfde      	ittt	le
 8005502:	2330      	movle	r3, #48	; 0x30
 8005504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005508:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800550c:	1b52      	subs	r2, r2, r5
 800550e:	6122      	str	r2, [r4, #16]
 8005510:	f8cd a000 	str.w	sl, [sp]
 8005514:	464b      	mov	r3, r9
 8005516:	aa03      	add	r2, sp, #12
 8005518:	4621      	mov	r1, r4
 800551a:	4640      	mov	r0, r8
 800551c:	f7ff fee2 	bl	80052e4 <_printf_common>
 8005520:	3001      	adds	r0, #1
 8005522:	d14c      	bne.n	80055be <_printf_i+0x1fe>
 8005524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005528:	b004      	add	sp, #16
 800552a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552e:	4835      	ldr	r0, [pc, #212]	; (8005604 <_printf_i+0x244>)
 8005530:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005534:	6829      	ldr	r1, [r5, #0]
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f851 6b04 	ldr.w	r6, [r1], #4
 800553c:	6029      	str	r1, [r5, #0]
 800553e:	061d      	lsls	r5, r3, #24
 8005540:	d514      	bpl.n	800556c <_printf_i+0x1ac>
 8005542:	07df      	lsls	r7, r3, #31
 8005544:	bf44      	itt	mi
 8005546:	f043 0320 	orrmi.w	r3, r3, #32
 800554a:	6023      	strmi	r3, [r4, #0]
 800554c:	b91e      	cbnz	r6, 8005556 <_printf_i+0x196>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f023 0320 	bic.w	r3, r3, #32
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	2310      	movs	r3, #16
 8005558:	e7b0      	b.n	80054bc <_printf_i+0xfc>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	f043 0320 	orr.w	r3, r3, #32
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	2378      	movs	r3, #120	; 0x78
 8005564:	4828      	ldr	r0, [pc, #160]	; (8005608 <_printf_i+0x248>)
 8005566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800556a:	e7e3      	b.n	8005534 <_printf_i+0x174>
 800556c:	0659      	lsls	r1, r3, #25
 800556e:	bf48      	it	mi
 8005570:	b2b6      	uxthmi	r6, r6
 8005572:	e7e6      	b.n	8005542 <_printf_i+0x182>
 8005574:	4615      	mov	r5, r2
 8005576:	e7bb      	b.n	80054f0 <_printf_i+0x130>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	6826      	ldr	r6, [r4, #0]
 800557c:	6961      	ldr	r1, [r4, #20]
 800557e:	1d18      	adds	r0, r3, #4
 8005580:	6028      	str	r0, [r5, #0]
 8005582:	0635      	lsls	r5, r6, #24
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	d501      	bpl.n	800558c <_printf_i+0x1cc>
 8005588:	6019      	str	r1, [r3, #0]
 800558a:	e002      	b.n	8005592 <_printf_i+0x1d2>
 800558c:	0670      	lsls	r0, r6, #25
 800558e:	d5fb      	bpl.n	8005588 <_printf_i+0x1c8>
 8005590:	8019      	strh	r1, [r3, #0]
 8005592:	2300      	movs	r3, #0
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	4615      	mov	r5, r2
 8005598:	e7ba      	b.n	8005510 <_printf_i+0x150>
 800559a:	682b      	ldr	r3, [r5, #0]
 800559c:	1d1a      	adds	r2, r3, #4
 800559e:	602a      	str	r2, [r5, #0]
 80055a0:	681d      	ldr	r5, [r3, #0]
 80055a2:	6862      	ldr	r2, [r4, #4]
 80055a4:	2100      	movs	r1, #0
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7fa fe22 	bl	80001f0 <memchr>
 80055ac:	b108      	cbz	r0, 80055b2 <_printf_i+0x1f2>
 80055ae:	1b40      	subs	r0, r0, r5
 80055b0:	6060      	str	r0, [r4, #4]
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	2300      	movs	r3, #0
 80055b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055bc:	e7a8      	b.n	8005510 <_printf_i+0x150>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4649      	mov	r1, r9
 80055c4:	4640      	mov	r0, r8
 80055c6:	47d0      	blx	sl
 80055c8:	3001      	adds	r0, #1
 80055ca:	d0ab      	beq.n	8005524 <_printf_i+0x164>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	079b      	lsls	r3, r3, #30
 80055d0:	d413      	bmi.n	80055fa <_printf_i+0x23a>
 80055d2:	68e0      	ldr	r0, [r4, #12]
 80055d4:	9b03      	ldr	r3, [sp, #12]
 80055d6:	4298      	cmp	r0, r3
 80055d8:	bfb8      	it	lt
 80055da:	4618      	movlt	r0, r3
 80055dc:	e7a4      	b.n	8005528 <_printf_i+0x168>
 80055de:	2301      	movs	r3, #1
 80055e0:	4632      	mov	r2, r6
 80055e2:	4649      	mov	r1, r9
 80055e4:	4640      	mov	r0, r8
 80055e6:	47d0      	blx	sl
 80055e8:	3001      	adds	r0, #1
 80055ea:	d09b      	beq.n	8005524 <_printf_i+0x164>
 80055ec:	3501      	adds	r5, #1
 80055ee:	68e3      	ldr	r3, [r4, #12]
 80055f0:	9903      	ldr	r1, [sp, #12]
 80055f2:	1a5b      	subs	r3, r3, r1
 80055f4:	42ab      	cmp	r3, r5
 80055f6:	dcf2      	bgt.n	80055de <_printf_i+0x21e>
 80055f8:	e7eb      	b.n	80055d2 <_printf_i+0x212>
 80055fa:	2500      	movs	r5, #0
 80055fc:	f104 0619 	add.w	r6, r4, #25
 8005600:	e7f5      	b.n	80055ee <_printf_i+0x22e>
 8005602:	bf00      	nop
 8005604:	08005ce1 	.word	0x08005ce1
 8005608:	08005cf2 	.word	0x08005cf2

0800560c <_sbrk_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d06      	ldr	r5, [pc, #24]	; (8005628 <_sbrk_r+0x1c>)
 8005610:	2300      	movs	r3, #0
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	f7fb fad6 	bl	8000bc8 <_sbrk>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_sbrk_r+0x1a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_sbrk_r+0x1a>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	200002bc 	.word	0x200002bc

0800562c <__sread>:
 800562c:	b510      	push	{r4, lr}
 800562e:	460c      	mov	r4, r1
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	f000 fab2 	bl	8005b9c <_read_r>
 8005638:	2800      	cmp	r0, #0
 800563a:	bfab      	itete	ge
 800563c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800563e:	89a3      	ldrhlt	r3, [r4, #12]
 8005640:	181b      	addge	r3, r3, r0
 8005642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005646:	bfac      	ite	ge
 8005648:	6563      	strge	r3, [r4, #84]	; 0x54
 800564a:	81a3      	strhlt	r3, [r4, #12]
 800564c:	bd10      	pop	{r4, pc}

0800564e <__swrite>:
 800564e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005652:	461f      	mov	r7, r3
 8005654:	898b      	ldrh	r3, [r1, #12]
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	4605      	mov	r5, r0
 800565a:	460c      	mov	r4, r1
 800565c:	4616      	mov	r6, r2
 800565e:	d505      	bpl.n	800566c <__swrite+0x1e>
 8005660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005664:	2302      	movs	r3, #2
 8005666:	2200      	movs	r2, #0
 8005668:	f000 f9c8 	bl	80059fc <_lseek_r>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	4632      	mov	r2, r6
 800567a:	463b      	mov	r3, r7
 800567c:	4628      	mov	r0, r5
 800567e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005682:	f000 b869 	b.w	8005758 <_write_r>

08005686 <__sseek>:
 8005686:	b510      	push	{r4, lr}
 8005688:	460c      	mov	r4, r1
 800568a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568e:	f000 f9b5 	bl	80059fc <_lseek_r>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	bf15      	itete	ne
 8005698:	6560      	strne	r0, [r4, #84]	; 0x54
 800569a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800569e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056a2:	81a3      	strheq	r3, [r4, #12]
 80056a4:	bf18      	it	ne
 80056a6:	81a3      	strhne	r3, [r4, #12]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <__sclose>:
 80056aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ae:	f000 b8d3 	b.w	8005858 <_close_r>
	...

080056b4 <__swbuf_r>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	460e      	mov	r6, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	4605      	mov	r5, r0
 80056bc:	b118      	cbz	r0, 80056c6 <__swbuf_r+0x12>
 80056be:	6983      	ldr	r3, [r0, #24]
 80056c0:	b90b      	cbnz	r3, 80056c6 <__swbuf_r+0x12>
 80056c2:	f7ff fb81 	bl	8004dc8 <__sinit>
 80056c6:	4b21      	ldr	r3, [pc, #132]	; (800574c <__swbuf_r+0x98>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	d12b      	bne.n	8005724 <__swbuf_r+0x70>
 80056cc:	686c      	ldr	r4, [r5, #4]
 80056ce:	69a3      	ldr	r3, [r4, #24]
 80056d0:	60a3      	str	r3, [r4, #8]
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	071a      	lsls	r2, r3, #28
 80056d6:	d52f      	bpl.n	8005738 <__swbuf_r+0x84>
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	b36b      	cbz	r3, 8005738 <__swbuf_r+0x84>
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	6820      	ldr	r0, [r4, #0]
 80056e0:	1ac0      	subs	r0, r0, r3
 80056e2:	6963      	ldr	r3, [r4, #20]
 80056e4:	b2f6      	uxtb	r6, r6
 80056e6:	4283      	cmp	r3, r0
 80056e8:	4637      	mov	r7, r6
 80056ea:	dc04      	bgt.n	80056f6 <__swbuf_r+0x42>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f948 	bl	8005984 <_fflush_r>
 80056f4:	bb30      	cbnz	r0, 8005744 <__swbuf_r+0x90>
 80056f6:	68a3      	ldr	r3, [r4, #8]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	60a3      	str	r3, [r4, #8]
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	6022      	str	r2, [r4, #0]
 8005702:	701e      	strb	r6, [r3, #0]
 8005704:	6963      	ldr	r3, [r4, #20]
 8005706:	3001      	adds	r0, #1
 8005708:	4283      	cmp	r3, r0
 800570a:	d004      	beq.n	8005716 <__swbuf_r+0x62>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	07db      	lsls	r3, r3, #31
 8005710:	d506      	bpl.n	8005720 <__swbuf_r+0x6c>
 8005712:	2e0a      	cmp	r6, #10
 8005714:	d104      	bne.n	8005720 <__swbuf_r+0x6c>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f933 	bl	8005984 <_fflush_r>
 800571e:	b988      	cbnz	r0, 8005744 <__swbuf_r+0x90>
 8005720:	4638      	mov	r0, r7
 8005722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <__swbuf_r+0x9c>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d101      	bne.n	800572e <__swbuf_r+0x7a>
 800572a:	68ac      	ldr	r4, [r5, #8]
 800572c:	e7cf      	b.n	80056ce <__swbuf_r+0x1a>
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <__swbuf_r+0xa0>)
 8005730:	429c      	cmp	r4, r3
 8005732:	bf08      	it	eq
 8005734:	68ec      	ldreq	r4, [r5, #12]
 8005736:	e7ca      	b.n	80056ce <__swbuf_r+0x1a>
 8005738:	4621      	mov	r1, r4
 800573a:	4628      	mov	r0, r5
 800573c:	f000 f81e 	bl	800577c <__swsetup_r>
 8005740:	2800      	cmp	r0, #0
 8005742:	d0cb      	beq.n	80056dc <__swbuf_r+0x28>
 8005744:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005748:	e7ea      	b.n	8005720 <__swbuf_r+0x6c>
 800574a:	bf00      	nop
 800574c:	08005c90 	.word	0x08005c90
 8005750:	08005cb0 	.word	0x08005cb0
 8005754:	08005c70 	.word	0x08005c70

08005758 <_write_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d07      	ldr	r5, [pc, #28]	; (8005778 <_write_r+0x20>)
 800575c:	4604      	mov	r4, r0
 800575e:	4608      	mov	r0, r1
 8005760:	4611      	mov	r1, r2
 8005762:	2200      	movs	r2, #0
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f7fb f9e4 	bl	8000b34 <_write>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_write_r+0x1e>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_write_r+0x1e>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	200002bc 	.word	0x200002bc

0800577c <__swsetup_r>:
 800577c:	4b32      	ldr	r3, [pc, #200]	; (8005848 <__swsetup_r+0xcc>)
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	681d      	ldr	r5, [r3, #0]
 8005782:	4606      	mov	r6, r0
 8005784:	460c      	mov	r4, r1
 8005786:	b125      	cbz	r5, 8005792 <__swsetup_r+0x16>
 8005788:	69ab      	ldr	r3, [r5, #24]
 800578a:	b913      	cbnz	r3, 8005792 <__swsetup_r+0x16>
 800578c:	4628      	mov	r0, r5
 800578e:	f7ff fb1b 	bl	8004dc8 <__sinit>
 8005792:	4b2e      	ldr	r3, [pc, #184]	; (800584c <__swsetup_r+0xd0>)
 8005794:	429c      	cmp	r4, r3
 8005796:	d10f      	bne.n	80057b8 <__swsetup_r+0x3c>
 8005798:	686c      	ldr	r4, [r5, #4]
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057a0:	0719      	lsls	r1, r3, #28
 80057a2:	d42c      	bmi.n	80057fe <__swsetup_r+0x82>
 80057a4:	06dd      	lsls	r5, r3, #27
 80057a6:	d411      	bmi.n	80057cc <__swsetup_r+0x50>
 80057a8:	2309      	movs	r3, #9
 80057aa:	6033      	str	r3, [r6, #0]
 80057ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b6:	e03e      	b.n	8005836 <__swsetup_r+0xba>
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <__swsetup_r+0xd4>)
 80057ba:	429c      	cmp	r4, r3
 80057bc:	d101      	bne.n	80057c2 <__swsetup_r+0x46>
 80057be:	68ac      	ldr	r4, [r5, #8]
 80057c0:	e7eb      	b.n	800579a <__swsetup_r+0x1e>
 80057c2:	4b24      	ldr	r3, [pc, #144]	; (8005854 <__swsetup_r+0xd8>)
 80057c4:	429c      	cmp	r4, r3
 80057c6:	bf08      	it	eq
 80057c8:	68ec      	ldreq	r4, [r5, #12]
 80057ca:	e7e6      	b.n	800579a <__swsetup_r+0x1e>
 80057cc:	0758      	lsls	r0, r3, #29
 80057ce:	d512      	bpl.n	80057f6 <__swsetup_r+0x7a>
 80057d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d2:	b141      	cbz	r1, 80057e6 <__swsetup_r+0x6a>
 80057d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <__swsetup_r+0x66>
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 f991 	bl	8005b04 <_free_r>
 80057e2:	2300      	movs	r3, #0
 80057e4:	6363      	str	r3, [r4, #52]	; 0x34
 80057e6:	89a3      	ldrh	r3, [r4, #12]
 80057e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f043 0308 	orr.w	r3, r3, #8
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	b94b      	cbnz	r3, 8005816 <__swsetup_r+0x9a>
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580c:	d003      	beq.n	8005816 <__swsetup_r+0x9a>
 800580e:	4621      	mov	r1, r4
 8005810:	4630      	mov	r0, r6
 8005812:	f000 f92b 	bl	8005a6c <__smakebuf_r>
 8005816:	89a0      	ldrh	r0, [r4, #12]
 8005818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800581c:	f010 0301 	ands.w	r3, r0, #1
 8005820:	d00a      	beq.n	8005838 <__swsetup_r+0xbc>
 8005822:	2300      	movs	r3, #0
 8005824:	60a3      	str	r3, [r4, #8]
 8005826:	6963      	ldr	r3, [r4, #20]
 8005828:	425b      	negs	r3, r3
 800582a:	61a3      	str	r3, [r4, #24]
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	b943      	cbnz	r3, 8005842 <__swsetup_r+0xc6>
 8005830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005834:	d1ba      	bne.n	80057ac <__swsetup_r+0x30>
 8005836:	bd70      	pop	{r4, r5, r6, pc}
 8005838:	0781      	lsls	r1, r0, #30
 800583a:	bf58      	it	pl
 800583c:	6963      	ldrpl	r3, [r4, #20]
 800583e:	60a3      	str	r3, [r4, #8]
 8005840:	e7f4      	b.n	800582c <__swsetup_r+0xb0>
 8005842:	2000      	movs	r0, #0
 8005844:	e7f7      	b.n	8005836 <__swsetup_r+0xba>
 8005846:	bf00      	nop
 8005848:	2000000c 	.word	0x2000000c
 800584c:	08005c90 	.word	0x08005c90
 8005850:	08005cb0 	.word	0x08005cb0
 8005854:	08005c70 	.word	0x08005c70

08005858 <_close_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d06      	ldr	r5, [pc, #24]	; (8005874 <_close_r+0x1c>)
 800585c:	2300      	movs	r3, #0
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	f7fb f97c 	bl	8000b60 <_close>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_close_r+0x1a>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_close_r+0x1a>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	200002bc 	.word	0x200002bc

08005878 <__sflush_r>:
 8005878:	898a      	ldrh	r2, [r1, #12]
 800587a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	4605      	mov	r5, r0
 8005880:	0710      	lsls	r0, r2, #28
 8005882:	460c      	mov	r4, r1
 8005884:	d458      	bmi.n	8005938 <__sflush_r+0xc0>
 8005886:	684b      	ldr	r3, [r1, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	dc05      	bgt.n	8005898 <__sflush_r+0x20>
 800588c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	dc02      	bgt.n	8005898 <__sflush_r+0x20>
 8005892:	2000      	movs	r0, #0
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800589a:	2e00      	cmp	r6, #0
 800589c:	d0f9      	beq.n	8005892 <__sflush_r+0x1a>
 800589e:	2300      	movs	r3, #0
 80058a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058a4:	682f      	ldr	r7, [r5, #0]
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	d032      	beq.n	8005910 <__sflush_r+0x98>
 80058aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	075a      	lsls	r2, r3, #29
 80058b0:	d505      	bpl.n	80058be <__sflush_r+0x46>
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	1ac0      	subs	r0, r0, r3
 80058b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058b8:	b10b      	cbz	r3, 80058be <__sflush_r+0x46>
 80058ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058bc:	1ac0      	subs	r0, r0, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	4602      	mov	r2, r0
 80058c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c4:	6a21      	ldr	r1, [r4, #32]
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b0      	blx	r6
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	d106      	bne.n	80058de <__sflush_r+0x66>
 80058d0:	6829      	ldr	r1, [r5, #0]
 80058d2:	291d      	cmp	r1, #29
 80058d4:	d82c      	bhi.n	8005930 <__sflush_r+0xb8>
 80058d6:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <__sflush_r+0x108>)
 80058d8:	40ca      	lsrs	r2, r1
 80058da:	07d6      	lsls	r6, r2, #31
 80058dc:	d528      	bpl.n	8005930 <__sflush_r+0xb8>
 80058de:	2200      	movs	r2, #0
 80058e0:	6062      	str	r2, [r4, #4]
 80058e2:	04d9      	lsls	r1, r3, #19
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	6022      	str	r2, [r4, #0]
 80058e8:	d504      	bpl.n	80058f4 <__sflush_r+0x7c>
 80058ea:	1c42      	adds	r2, r0, #1
 80058ec:	d101      	bne.n	80058f2 <__sflush_r+0x7a>
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	b903      	cbnz	r3, 80058f4 <__sflush_r+0x7c>
 80058f2:	6560      	str	r0, [r4, #84]	; 0x54
 80058f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058f6:	602f      	str	r7, [r5, #0]
 80058f8:	2900      	cmp	r1, #0
 80058fa:	d0ca      	beq.n	8005892 <__sflush_r+0x1a>
 80058fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005900:	4299      	cmp	r1, r3
 8005902:	d002      	beq.n	800590a <__sflush_r+0x92>
 8005904:	4628      	mov	r0, r5
 8005906:	f000 f8fd 	bl	8005b04 <_free_r>
 800590a:	2000      	movs	r0, #0
 800590c:	6360      	str	r0, [r4, #52]	; 0x34
 800590e:	e7c1      	b.n	8005894 <__sflush_r+0x1c>
 8005910:	6a21      	ldr	r1, [r4, #32]
 8005912:	2301      	movs	r3, #1
 8005914:	4628      	mov	r0, r5
 8005916:	47b0      	blx	r6
 8005918:	1c41      	adds	r1, r0, #1
 800591a:	d1c7      	bne.n	80058ac <__sflush_r+0x34>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0c4      	beq.n	80058ac <__sflush_r+0x34>
 8005922:	2b1d      	cmp	r3, #29
 8005924:	d001      	beq.n	800592a <__sflush_r+0xb2>
 8005926:	2b16      	cmp	r3, #22
 8005928:	d101      	bne.n	800592e <__sflush_r+0xb6>
 800592a:	602f      	str	r7, [r5, #0]
 800592c:	e7b1      	b.n	8005892 <__sflush_r+0x1a>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	e7ad      	b.n	8005894 <__sflush_r+0x1c>
 8005938:	690f      	ldr	r7, [r1, #16]
 800593a:	2f00      	cmp	r7, #0
 800593c:	d0a9      	beq.n	8005892 <__sflush_r+0x1a>
 800593e:	0793      	lsls	r3, r2, #30
 8005940:	680e      	ldr	r6, [r1, #0]
 8005942:	bf08      	it	eq
 8005944:	694b      	ldreq	r3, [r1, #20]
 8005946:	600f      	str	r7, [r1, #0]
 8005948:	bf18      	it	ne
 800594a:	2300      	movne	r3, #0
 800594c:	eba6 0807 	sub.w	r8, r6, r7
 8005950:	608b      	str	r3, [r1, #8]
 8005952:	f1b8 0f00 	cmp.w	r8, #0
 8005956:	dd9c      	ble.n	8005892 <__sflush_r+0x1a>
 8005958:	6a21      	ldr	r1, [r4, #32]
 800595a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800595c:	4643      	mov	r3, r8
 800595e:	463a      	mov	r2, r7
 8005960:	4628      	mov	r0, r5
 8005962:	47b0      	blx	r6
 8005964:	2800      	cmp	r0, #0
 8005966:	dc06      	bgt.n	8005976 <__sflush_r+0xfe>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005974:	e78e      	b.n	8005894 <__sflush_r+0x1c>
 8005976:	4407      	add	r7, r0
 8005978:	eba8 0800 	sub.w	r8, r8, r0
 800597c:	e7e9      	b.n	8005952 <__sflush_r+0xda>
 800597e:	bf00      	nop
 8005980:	20400001 	.word	0x20400001

08005984 <_fflush_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	690b      	ldr	r3, [r1, #16]
 8005988:	4605      	mov	r5, r0
 800598a:	460c      	mov	r4, r1
 800598c:	b913      	cbnz	r3, 8005994 <_fflush_r+0x10>
 800598e:	2500      	movs	r5, #0
 8005990:	4628      	mov	r0, r5
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	b118      	cbz	r0, 800599e <_fflush_r+0x1a>
 8005996:	6983      	ldr	r3, [r0, #24]
 8005998:	b90b      	cbnz	r3, 800599e <_fflush_r+0x1a>
 800599a:	f7ff fa15 	bl	8004dc8 <__sinit>
 800599e:	4b14      	ldr	r3, [pc, #80]	; (80059f0 <_fflush_r+0x6c>)
 80059a0:	429c      	cmp	r4, r3
 80059a2:	d11b      	bne.n	80059dc <_fflush_r+0x58>
 80059a4:	686c      	ldr	r4, [r5, #4]
 80059a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0ef      	beq.n	800598e <_fflush_r+0xa>
 80059ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059b0:	07d0      	lsls	r0, r2, #31
 80059b2:	d404      	bmi.n	80059be <_fflush_r+0x3a>
 80059b4:	0599      	lsls	r1, r3, #22
 80059b6:	d402      	bmi.n	80059be <_fflush_r+0x3a>
 80059b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ba:	f7ff faa3 	bl	8004f04 <__retarget_lock_acquire_recursive>
 80059be:	4628      	mov	r0, r5
 80059c0:	4621      	mov	r1, r4
 80059c2:	f7ff ff59 	bl	8005878 <__sflush_r>
 80059c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c8:	07da      	lsls	r2, r3, #31
 80059ca:	4605      	mov	r5, r0
 80059cc:	d4e0      	bmi.n	8005990 <_fflush_r+0xc>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	059b      	lsls	r3, r3, #22
 80059d2:	d4dd      	bmi.n	8005990 <_fflush_r+0xc>
 80059d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d6:	f7ff fa96 	bl	8004f06 <__retarget_lock_release_recursive>
 80059da:	e7d9      	b.n	8005990 <_fflush_r+0xc>
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <_fflush_r+0x70>)
 80059de:	429c      	cmp	r4, r3
 80059e0:	d101      	bne.n	80059e6 <_fflush_r+0x62>
 80059e2:	68ac      	ldr	r4, [r5, #8]
 80059e4:	e7df      	b.n	80059a6 <_fflush_r+0x22>
 80059e6:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <_fflush_r+0x74>)
 80059e8:	429c      	cmp	r4, r3
 80059ea:	bf08      	it	eq
 80059ec:	68ec      	ldreq	r4, [r5, #12]
 80059ee:	e7da      	b.n	80059a6 <_fflush_r+0x22>
 80059f0:	08005c90 	.word	0x08005c90
 80059f4:	08005cb0 	.word	0x08005cb0
 80059f8:	08005c70 	.word	0x08005c70

080059fc <_lseek_r>:
 80059fc:	b538      	push	{r3, r4, r5, lr}
 80059fe:	4d07      	ldr	r5, [pc, #28]	; (8005a1c <_lseek_r+0x20>)
 8005a00:	4604      	mov	r4, r0
 8005a02:	4608      	mov	r0, r1
 8005a04:	4611      	mov	r1, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	602a      	str	r2, [r5, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f7fb f8cf 	bl	8000bae <_lseek>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d102      	bne.n	8005a1a <_lseek_r+0x1e>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	b103      	cbz	r3, 8005a1a <_lseek_r+0x1e>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	200002bc 	.word	0x200002bc

08005a20 <__swhatbuf_r>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	460e      	mov	r6, r1
 8005a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	b096      	sub	sp, #88	; 0x58
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	461d      	mov	r5, r3
 8005a30:	da08      	bge.n	8005a44 <__swhatbuf_r+0x24>
 8005a32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	602a      	str	r2, [r5, #0]
 8005a3a:	061a      	lsls	r2, r3, #24
 8005a3c:	d410      	bmi.n	8005a60 <__swhatbuf_r+0x40>
 8005a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a42:	e00e      	b.n	8005a62 <__swhatbuf_r+0x42>
 8005a44:	466a      	mov	r2, sp
 8005a46:	f000 f8bb 	bl	8005bc0 <_fstat_r>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	dbf1      	blt.n	8005a32 <__swhatbuf_r+0x12>
 8005a4e:	9a01      	ldr	r2, [sp, #4]
 8005a50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a58:	425a      	negs	r2, r3
 8005a5a:	415a      	adcs	r2, r3
 8005a5c:	602a      	str	r2, [r5, #0]
 8005a5e:	e7ee      	b.n	8005a3e <__swhatbuf_r+0x1e>
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	2000      	movs	r0, #0
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	b016      	add	sp, #88	; 0x58
 8005a68:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a6c <__smakebuf_r>:
 8005a6c:	898b      	ldrh	r3, [r1, #12]
 8005a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a70:	079d      	lsls	r5, r3, #30
 8005a72:	4606      	mov	r6, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	d507      	bpl.n	8005a88 <__smakebuf_r+0x1c>
 8005a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	6123      	str	r3, [r4, #16]
 8005a80:	2301      	movs	r3, #1
 8005a82:	6163      	str	r3, [r4, #20]
 8005a84:	b002      	add	sp, #8
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	ab01      	add	r3, sp, #4
 8005a8a:	466a      	mov	r2, sp
 8005a8c:	f7ff ffc8 	bl	8005a20 <__swhatbuf_r>
 8005a90:	9900      	ldr	r1, [sp, #0]
 8005a92:	4605      	mov	r5, r0
 8005a94:	4630      	mov	r0, r6
 8005a96:	f7ff fa57 	bl	8004f48 <_malloc_r>
 8005a9a:	b948      	cbnz	r0, 8005ab0 <__smakebuf_r+0x44>
 8005a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa0:	059a      	lsls	r2, r3, #22
 8005aa2:	d4ef      	bmi.n	8005a84 <__smakebuf_r+0x18>
 8005aa4:	f023 0303 	bic.w	r3, r3, #3
 8005aa8:	f043 0302 	orr.w	r3, r3, #2
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	e7e3      	b.n	8005a78 <__smakebuf_r+0xc>
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <__smakebuf_r+0x7c>)
 8005ab2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	6020      	str	r0, [r4, #0]
 8005ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	9b00      	ldr	r3, [sp, #0]
 8005ac0:	6163      	str	r3, [r4, #20]
 8005ac2:	9b01      	ldr	r3, [sp, #4]
 8005ac4:	6120      	str	r0, [r4, #16]
 8005ac6:	b15b      	cbz	r3, 8005ae0 <__smakebuf_r+0x74>
 8005ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f889 	bl	8005be4 <_isatty_r>
 8005ad2:	b128      	cbz	r0, 8005ae0 <__smakebuf_r+0x74>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	89a0      	ldrh	r0, [r4, #12]
 8005ae2:	4305      	orrs	r5, r0
 8005ae4:	81a5      	strh	r5, [r4, #12]
 8005ae6:	e7cd      	b.n	8005a84 <__smakebuf_r+0x18>
 8005ae8:	08004d61 	.word	0x08004d61

08005aec <__malloc_lock>:
 8005aec:	4801      	ldr	r0, [pc, #4]	; (8005af4 <__malloc_lock+0x8>)
 8005aee:	f7ff ba09 	b.w	8004f04 <__retarget_lock_acquire_recursive>
 8005af2:	bf00      	nop
 8005af4:	200002b0 	.word	0x200002b0

08005af8 <__malloc_unlock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_unlock+0x8>)
 8005afa:	f7ff ba04 	b.w	8004f06 <__retarget_lock_release_recursive>
 8005afe:	bf00      	nop
 8005b00:	200002b0 	.word	0x200002b0

08005b04 <_free_r>:
 8005b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d044      	beq.n	8005b94 <_free_r+0x90>
 8005b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0e:	9001      	str	r0, [sp, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f1a1 0404 	sub.w	r4, r1, #4
 8005b16:	bfb8      	it	lt
 8005b18:	18e4      	addlt	r4, r4, r3
 8005b1a:	f7ff ffe7 	bl	8005aec <__malloc_lock>
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <_free_r+0x94>)
 8005b20:	9801      	ldr	r0, [sp, #4]
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	b933      	cbnz	r3, 8005b34 <_free_r+0x30>
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	6014      	str	r4, [r2, #0]
 8005b2a:	b003      	add	sp, #12
 8005b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b30:	f7ff bfe2 	b.w	8005af8 <__malloc_unlock>
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	d908      	bls.n	8005b4a <_free_r+0x46>
 8005b38:	6825      	ldr	r5, [r4, #0]
 8005b3a:	1961      	adds	r1, r4, r5
 8005b3c:	428b      	cmp	r3, r1
 8005b3e:	bf01      	itttt	eq
 8005b40:	6819      	ldreq	r1, [r3, #0]
 8005b42:	685b      	ldreq	r3, [r3, #4]
 8005b44:	1949      	addeq	r1, r1, r5
 8005b46:	6021      	streq	r1, [r4, #0]
 8005b48:	e7ed      	b.n	8005b26 <_free_r+0x22>
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	b10b      	cbz	r3, 8005b54 <_free_r+0x50>
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d9fa      	bls.n	8005b4a <_free_r+0x46>
 8005b54:	6811      	ldr	r1, [r2, #0]
 8005b56:	1855      	adds	r5, r2, r1
 8005b58:	42a5      	cmp	r5, r4
 8005b5a:	d10b      	bne.n	8005b74 <_free_r+0x70>
 8005b5c:	6824      	ldr	r4, [r4, #0]
 8005b5e:	4421      	add	r1, r4
 8005b60:	1854      	adds	r4, r2, r1
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	6011      	str	r1, [r2, #0]
 8005b66:	d1e0      	bne.n	8005b2a <_free_r+0x26>
 8005b68:	681c      	ldr	r4, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	6053      	str	r3, [r2, #4]
 8005b6e:	4421      	add	r1, r4
 8005b70:	6011      	str	r1, [r2, #0]
 8005b72:	e7da      	b.n	8005b2a <_free_r+0x26>
 8005b74:	d902      	bls.n	8005b7c <_free_r+0x78>
 8005b76:	230c      	movs	r3, #12
 8005b78:	6003      	str	r3, [r0, #0]
 8005b7a:	e7d6      	b.n	8005b2a <_free_r+0x26>
 8005b7c:	6825      	ldr	r5, [r4, #0]
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	428b      	cmp	r3, r1
 8005b82:	bf04      	itt	eq
 8005b84:	6819      	ldreq	r1, [r3, #0]
 8005b86:	685b      	ldreq	r3, [r3, #4]
 8005b88:	6063      	str	r3, [r4, #4]
 8005b8a:	bf04      	itt	eq
 8005b8c:	1949      	addeq	r1, r1, r5
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	6054      	str	r4, [r2, #4]
 8005b92:	e7ca      	b.n	8005b2a <_free_r+0x26>
 8005b94:	b003      	add	sp, #12
 8005b96:	bd30      	pop	{r4, r5, pc}
 8005b98:	200002b4 	.word	0x200002b4

08005b9c <_read_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	; (8005bbc <_read_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fa ffa4 	bl	8000af8 <_read>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_read_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_read_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	200002bc 	.word	0x200002bc

08005bc0 <_fstat_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	; (8005be0 <_fstat_r+0x20>)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	4608      	mov	r0, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	f7fa ffd3 	bl	8000b78 <_fstat>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d102      	bne.n	8005bdc <_fstat_r+0x1c>
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	b103      	cbz	r3, 8005bdc <_fstat_r+0x1c>
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	bd38      	pop	{r3, r4, r5, pc}
 8005bde:	bf00      	nop
 8005be0:	200002bc 	.word	0x200002bc

08005be4 <_isatty_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d06      	ldr	r5, [pc, #24]	; (8005c00 <_isatty_r+0x1c>)
 8005be8:	2300      	movs	r3, #0
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	f7fa ffd2 	bl	8000b98 <_isatty>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d102      	bne.n	8005bfe <_isatty_r+0x1a>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	b103      	cbz	r3, 8005bfe <_isatty_r+0x1a>
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
 8005c00:	200002bc 	.word	0x200002bc

08005c04 <_init>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr

08005c10 <_fini>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr
