
02_SPI_Tx_Rx_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e4c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004040  08004040  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004048  08004048  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000000c  0800405c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800405c  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d834  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  0002d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002895a  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d150  00000000  00000000  00059422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f947d  00000000  00000000  00066572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e4c  00000000  00000000  0015fa40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003fe0 	.word	0x08003fe0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003fe0 	.word	0x08003fe0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fad2 	bl	8000a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f857 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f907 	bl	8000710 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000502:	f000 f89b 	bl	800063c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000506:	f000 f8c5 	bl	8000694 <MX_SPI1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Clear the buffers
		memset(buffer_rx, 0, BUFFER_SIZE);
 800050a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050e:	2100      	movs	r1, #0
 8000510:	4820      	ldr	r0, [pc, #128]	; (8000594 <main+0xa4>)
 8000512:	f003 fd5d 	bl	8003fd0 <memset>
		memset(buffer_print, 0, BUFFER_SIZE);
 8000516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051a:	2100      	movs	r1, #0
 800051c:	481e      	ldr	r0, [pc, #120]	; (8000598 <main+0xa8>)
 800051e:	f003 fd57 	bl	8003fd0 <memset>
		received_length = 0;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <main+0xac>)
 8000524:	2200      	movs	r2, #0
 8000526:	801a      	strh	r2, [r3, #0]

		// Receive data through UART (blocking mode) until newline character
		while (1)
		{
			uint8_t received_byte;
			HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, &received_byte, 1, HAL_MAX_DELAY);
 8000528:	1db9      	adds	r1, r7, #6
 800052a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800052e:	2201      	movs	r2, #1
 8000530:	481b      	ldr	r0, [pc, #108]	; (80005a0 <main+0xb0>)
 8000532:	f002 ffef 	bl	8003514 <HAL_UART_Receive>
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]

			if (status == HAL_OK)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1f3      	bne.n	8000528 <main+0x38>
			{
				buffer_rx[received_length++] = received_byte;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <main+0xac>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b29b      	uxth	r3, r3
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	b291      	uxth	r1, r2
 800054a:	4a14      	ldr	r2, [pc, #80]	; (800059c <main+0xac>)
 800054c:	8011      	strh	r1, [r2, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	79b9      	ldrb	r1, [r7, #6]
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <main+0xa4>)
 8000554:	5499      	strb	r1, [r3, r2]

				// Break on newline character or if buffer is full
				if (received_byte == '\n' || received_length >= BUFFER_SIZE)
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	2b0a      	cmp	r3, #10
 800055a:	d005      	beq.n	8000568 <main+0x78>
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <main+0xac>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	2bff      	cmp	r3, #255	; 0xff
 8000564:	d800      	bhi.n	8000568 <main+0x78>
		{
 8000566:	e7df      	b.n	8000528 <main+0x38>
				}
			}
		}

		// Transmit and receive data through SPI in interrupt mode
		spi_cplt = 0;
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <main+0xb4>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_TransmitReceive_IT(&hspi1, buffer_rx, buffer_print,
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <main+0xac>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	b29b      	uxth	r3, r3
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <main+0xa8>)
 8000576:	4907      	ldr	r1, [pc, #28]	; (8000594 <main+0xa4>)
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <main+0xb8>)
 800057a:	f002 fa5f 	bl	8002a3c <HAL_SPI_TransmitReceive_IT>
				received_length);

		// Wait until SPI communication is done
		while (!spi_cplt) {
 800057e:	e002      	b.n	8000586 <main+0x96>
			// Optionally, add a timeout here to avoid an infinite loop
			HAL_Delay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fb01 	bl	8000b88 <HAL_Delay>
		while (!spi_cplt) {
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <main+0xb4>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f7      	beq.n	8000580 <main+0x90>
		memset(buffer_rx, 0, BUFFER_SIZE);
 8000590:	e7bb      	b.n	800050a <main+0x1a>
 8000592:	bf00      	nop
 8000594:	20000110 	.word	0x20000110
 8000598:	20000210 	.word	0x20000210
 800059c:	20000312 	.word	0x20000312
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000310 	.word	0x20000310
 80005a8:	200000ac 	.word	0x200000ac

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b096      	sub	sp, #88	; 0x58
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2244      	movs	r2, #68	; 0x44
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fd08 	bl	8003fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d2:	f000 fe21 	bl	8001218 <HAL_PWREx_ControlVoltageScaling>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005dc:	f000 f91c 	bl	8000818 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005e0:	2310      	movs	r3, #16
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ec:	2360      	movs	r3, #96	; 0x60
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fe73 	bl	80012e4 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000604:	f000 f908 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fa78 	bl	8001b18 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800062e:	f000 f8f3 	bl	8000818 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3758      	adds	r7, #88	; 0x58
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_LPUART1_UART_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 800067a:	f002 fe69 	bl	8003350 <HAL_UART_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 f8c8 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	40008000 	.word	0x40008000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_SPI1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_SPI1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_SPI1_Init+0x74>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_SPI1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_SPI1_Init+0x74>)
 80006ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI1_Init+0x74>)
 80006c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI1_Init+0x74>)
 80006ca:	2238      	movs	r2, #56	; 0x38
 80006cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_SPI1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_SPI1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_SPI1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_SPI1_Init+0x74>)
 80006e2:	2207      	movs	r2, #7
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_SPI1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_SPI1_Init+0x74>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_SPI1_Init+0x74>)
 80006f4:	f002 f8fe 	bl	80028f4 <HAL_SPI_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f88b 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000ac 	.word	0x200000ac
 800070c:	40013000 	.word	0x40013000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <MX_GPIO_Init+0x90>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_GPIO_Init+0x90>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000756:	f000 fdb5 	bl	80012c4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x90>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_GPIO_Init+0x90>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x94>)
 8000778:	f000 fd0e 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x94>)
 8000794:	f000 fb6e 	bl	8000e74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
//	spi_cplt = 1;
    if (hspi->Instance == SPI1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <HAL_SPI_TxRxCpltCallback+0x54>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d102      	bne.n	80007c0 <HAL_SPI_TxRxCpltCallback+0x18>
    {
        spi_cplt = 1; // Signal that SPI communication is done
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_SPI_TxRxCpltCallback+0x58>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
    }
	HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4810      	ldr	r0, [pc, #64]	; (8000804 <HAL_SPI_TxRxCpltCallback+0x5c>)
 80007c4:	f000 fd00 	bl	80011c8 <HAL_GPIO_TogglePin>
//	HAL_Delay(1000);
	// Transmit the received SPI data through UART
	HAL_UART_Transmit(&hlpuart1, buffer_print, received_length, HAL_MAX_DELAY);
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_SPI_TxRxCpltCallback+0x60>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d2:	490e      	ldr	r1, [pc, #56]	; (800080c <HAL_SPI_TxRxCpltCallback+0x64>)
 80007d4:	480e      	ldr	r0, [pc, #56]	; (8000810 <HAL_SPI_TxRxCpltCallback+0x68>)
 80007d6:	f002 fe09 	bl	80033ec <HAL_UART_Transmit>
	// Clear the buffers
	memset(buffer_rx, 0, BUFFER_SIZE);
 80007da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007de:	2100      	movs	r1, #0
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <HAL_SPI_TxRxCpltCallback+0x6c>)
 80007e2:	f003 fbf5 	bl	8003fd0 <memset>
	memset(buffer_print, 0, BUFFER_SIZE);
 80007e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ea:	2100      	movs	r1, #0
 80007ec:	4807      	ldr	r0, [pc, #28]	; (800080c <HAL_SPI_TxRxCpltCallback+0x64>)
 80007ee:	f003 fbef 	bl	8003fd0 <memset>


}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40013000 	.word	0x40013000
 8000800:	20000310 	.word	0x20000310
 8000804:	48000400 	.word	0x48000400
 8000808:	20000312 	.word	0x20000312
 800080c:	20000210 	.word	0x20000210
 8000810:	20000028 	.word	0x20000028
 8000814:	20000110 	.word	0x20000110

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0ac      	sub	sp, #176	; 0xb0
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	228c      	movs	r2, #140	; 0x8c
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f003 fb9f 	bl	8003fd0 <memset>
  if(huart->Instance==LPUART1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a22      	ldr	r2, [pc, #136]	; (8000920 <HAL_UART_MspInit+0xb4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d13d      	bne.n	8000918 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800089c:	2320      	movs	r3, #32
 800089e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fb59 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b4:	f7ff ffb0 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <HAL_UART_MspInit+0xb8>)
 80008ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_UART_MspInit+0xb8>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_UART_MspInit+0xb8>)
 80008c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_UART_MspInit+0xb8>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a13      	ldr	r2, [pc, #76]	; (8000924 <HAL_UART_MspInit+0xb8>)
 80008d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_UART_MspInit+0xb8>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80008e8:	f000 fcec 	bl	80012c4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80008ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000906:	2308      	movs	r3, #8
 8000908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800090c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_UART_MspInit+0xbc>)
 8000914:	f000 faae 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	37b0      	adds	r7, #176	; 0xb0
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40008000 	.word	0x40008000
 8000924:	40021000 	.word	0x40021000
 8000928:	48001800 	.word	0x48001800

0800092c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <HAL_SPI_MspInit+0x8c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d130      	bne.n	80009b0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_SPI_MspInit+0x90>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <HAL_SPI_MspInit+0x90>)
 8000954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_SPI_MspInit+0x90>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_SPI_MspInit+0x90>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_SPI_MspInit+0x90>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_SPI_MspInit+0x90>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800097e:	23c2      	movs	r3, #194	; 0xc2
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098e:	2305      	movs	r3, #5
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fa6a 	bl	8000e74 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2023      	movs	r0, #35	; 0x23
 80009a6:	f000 f9ee 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009aa:	2023      	movs	r0, #35	; 0x23
 80009ac:	f000 fa07 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40013000 	.word	0x40013000
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 f89c 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <SPI1_IRQHandler+0x10>)
 8000a1a:	f002 f8bf 	bl	8002b9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000ac 	.word	0x200000ac

08000a28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff ffea 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f003 fa85 	bl	8003f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fd37 	bl	80004f0 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a90:	08004050 	.word	0x08004050
  ldr r2, =_sbss
 8000a94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a98:	20000318 	.word	0x20000318

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>

08000a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f961 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f80e 	bl	8000ad0 <HAL_InitTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e001      	b.n	8000ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac0:	f7ff feb0 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_InitTick+0x6c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d023      	beq.n	8000b2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_InitTick+0x70>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_InitTick+0x6c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f96d 	bl	8000dda <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10f      	bne.n	8000b26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d809      	bhi.n	8000b20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	f000 f937 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_InitTick+0x74>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e004      	b.n	8000b30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e001      	b.n	8000b30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000314 	.word	0x20000314

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000314 	.word	0x20000314

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff ffee 	bl	8000b70 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffde 	bl	8000b70 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d005      	beq.n	8000e16 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e029      	b.n	8000e6a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 020e 	bic.w	r2, r2, #14
 8000e24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f003 021c 	and.w	r2, r3, #28
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	4798      	blx	r3
    }
  }
  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e166      	b.n	8001152 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8158 	beq.w	800114c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d005      	beq.n	8000eb4 <HAL_GPIO_Init+0x40>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d017      	beq.n	8000f52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d123      	bne.n	8000fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	6939      	ldr	r1, [r7, #16]
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0203 	and.w	r2, r3, #3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80b2 	beq.w	800114c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe8:	4b61      	ldr	r3, [pc, #388]	; (8001170 <HAL_GPIO_Init+0x2fc>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	4a60      	ldr	r2, [pc, #384]	; (8001170 <HAL_GPIO_Init+0x2fc>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff4:	4b5e      	ldr	r3, [pc, #376]	; (8001170 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001000:	4a5c      	ldr	r2, [pc, #368]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800102a:	d02b      	beq.n	8001084 <HAL_GPIO_Init+0x210>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a52      	ldr	r2, [pc, #328]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d025      	beq.n	8001080 <HAL_GPIO_Init+0x20c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a51      	ldr	r2, [pc, #324]	; (800117c <HAL_GPIO_Init+0x308>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d01f      	beq.n	800107c <HAL_GPIO_Init+0x208>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a50      	ldr	r2, [pc, #320]	; (8001180 <HAL_GPIO_Init+0x30c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d019      	beq.n	8001078 <HAL_GPIO_Init+0x204>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a4f      	ldr	r2, [pc, #316]	; (8001184 <HAL_GPIO_Init+0x310>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d013      	beq.n	8001074 <HAL_GPIO_Init+0x200>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <HAL_GPIO_Init+0x314>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1fc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_GPIO_Init+0x318>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1f8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_GPIO_Init+0x31c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1f4>
 8001064:	2307      	movs	r3, #7
 8001066:	e00e      	b.n	8001086 <HAL_GPIO_Init+0x212>
 8001068:	2308      	movs	r3, #8
 800106a:	e00c      	b.n	8001086 <HAL_GPIO_Init+0x212>
 800106c:	2306      	movs	r3, #6
 800106e:	e00a      	b.n	8001086 <HAL_GPIO_Init+0x212>
 8001070:	2305      	movs	r3, #5
 8001072:	e008      	b.n	8001086 <HAL_GPIO_Init+0x212>
 8001074:	2304      	movs	r3, #4
 8001076:	e006      	b.n	8001086 <HAL_GPIO_Init+0x212>
 8001078:	2303      	movs	r3, #3
 800107a:	e004      	b.n	8001086 <HAL_GPIO_Init+0x212>
 800107c:	2302      	movs	r3, #2
 800107e:	e002      	b.n	8001086 <HAL_GPIO_Init+0x212>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <HAL_GPIO_Init+0x212>
 8001084:	2300      	movs	r3, #0
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	4093      	lsls	r3, r2
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001096:	4937      	ldr	r1, [pc, #220]	; (8001174 <HAL_GPIO_Init+0x300>)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_GPIO_Init+0x320>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c8:	4a32      	ldr	r2, [pc, #200]	; (8001194 <HAL_GPIO_Init+0x320>)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <HAL_GPIO_Init+0x320>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010f2:	4a28      	ldr	r2, [pc, #160]	; (8001194 <HAL_GPIO_Init+0x320>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x320>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_GPIO_Init+0x320>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_GPIO_Init+0x320>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <HAL_GPIO_Init+0x320>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	f47f ae91 	bne.w	8000e84 <HAL_GPIO_Init+0x10>
  }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000
 8001178:	48000400 	.word	0x48000400
 800117c:	48000800 	.word	0x48000800
 8001180:	48000c00 	.word	0x48000c00
 8001184:	48001000 	.word	0x48001000
 8001188:	48001400 	.word	0x48001400
 800118c:	48001800 	.word	0x48001800
 8001190:	48001c00 	.word	0x48001c00
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43d9      	mvns	r1, r3
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	400b      	ands	r3, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_PWREx_GetVoltageRange+0x18>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40007000 	.word	0x40007000

08001218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001226:	d130      	bne.n	800128a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001234:	d038      	beq.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2232      	movs	r2, #50	; 0x32
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0c9b      	lsrs	r3, r3, #18
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800125c:	e002      	b.n	8001264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3b01      	subs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001270:	d102      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f2      	bne.n	800125e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001284:	d110      	bne.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e00f      	b.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001296:	d007      	beq.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007000 	.word	0x40007000
 80012bc:	20000000 	.word	0x20000000
 80012c0:	431bde83 	.word	0x431bde83

080012c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6053      	str	r3, [r2, #4]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f000 bc08 	b.w	8001b08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f8:	4b96      	ldr	r3, [pc, #600]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001302:	4b94      	ldr	r3, [pc, #592]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80e4 	beq.w	80014e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_RCC_OscConfig+0x4c>
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	f040 808b 	bne.w	800143e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b01      	cmp	r3, #1
 800132c:	f040 8087 	bne.w	800143e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x64>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e3df      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_RCC_OscConfig+0x7e>
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001360:	e005      	b.n	800136e <HAL_RCC_OscConfig+0x8a>
 8001362:	4b7c      	ldr	r3, [pc, #496]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800136e:	4293      	cmp	r3, r2
 8001370:	d223      	bcs.n	80013ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fd92 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e3c0      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a72      	ldr	r2, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	496d      	ldr	r1, [pc, #436]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a4:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	4968      	ldr	r1, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e025      	b.n	8001406 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ba:	4b66      	ldr	r3, [pc, #408]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4960      	ldr	r1, [pc, #384]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d8:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	495b      	ldr	r1, [pc, #364]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fd52 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e380      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001406:	f000 fc87 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 800140a:	4602      	mov	r2, r0
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4950      	ldr	r1, [pc, #320]	; (8001558 <HAL_RCC_OscConfig+0x274>)
 8001418:	5ccb      	ldrb	r3, [r1, r3]
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a4e      	ldr	r2, [pc, #312]	; (800155c <HAL_RCC_OscConfig+0x278>)
 8001424:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x27c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb50 	bl	8000ad0 <HAL_InitTick>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d052      	beq.n	80014e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	e364      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d032      	beq.n	80014ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001446:	4b43      	ldr	r3, [pc, #268]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a42      	ldr	r2, [pc, #264]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb8d 	bl	8000b70 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145a:	f7ff fb89 	bl	8000b70 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e34d      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146c:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b36      	ldr	r3, [pc, #216]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a35      	ldr	r2, [pc, #212]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4930      	ldr	r1, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	492b      	ldr	r1, [pc, #172]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
 80014aa:	e01a      	b.n	80014e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb5a 	bl	8000b70 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c0:	f7ff fb56 	bl	8000b70 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e31a      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1dc>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d073      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x21c>
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d10e      	bne.n	8001518 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d063      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d15f      	bne.n	80015d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e2f7      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x24c>
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e025      	b.n	800157c <HAL_RCC_OscConfig+0x298>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001538:	d114      	bne.n	8001564 <HAL_RCC_OscConfig+0x280>
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a02      	ldr	r2, [pc, #8]	; (8001554 <HAL_RCC_OscConfig+0x270>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e013      	b.n	800157c <HAL_RCC_OscConfig+0x298>
 8001554:	40021000 	.word	0x40021000
 8001558:	08003ff8 	.word	0x08003ff8
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	4ba0      	ldr	r3, [pc, #640]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a9f      	ldr	r2, [pc, #636]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b9d      	ldr	r3, [pc, #628]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a9c      	ldr	r2, [pc, #624]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff faf4 	bl	8000b70 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff faf0 	bl	8000b70 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e2b4      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x2a8>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fae0 	bl	8000b70 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fadc 	bl	8000b70 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e2a0      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2d0>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d060      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x310>
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d119      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d116      	bne.n	8001622 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x328>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e27d      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	4973      	ldr	r1, [pc, #460]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001620:	e040      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d023      	beq.n	8001672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fa9b 	bl	8000b70 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fa97 	bl	8000b70 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e25b      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	061b      	lsls	r3, r3, #24
 800166a:	495f      	ldr	r1, [pc, #380]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	e018      	b.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a5c      	ldr	r2, [pc, #368]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fa77 	bl	8000b70 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fa73 	bl	8000b70 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e237      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03c      	beq.n	800172a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016be:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa52 	bl	8000b70 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fa4e 	bl	8000b70 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e212      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ef      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3ec>
 80016f0:	e01b      	b.n	800172a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f8:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fa35 	bl	8000b70 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fa31 	bl	8000b70 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1f5      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a6 	beq.w	8001884 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001760:	2301      	movs	r3, #1
 8001762:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d118      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177c:	f7ff f9f8 	bl	8000b70 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7ff f9f4 	bl	8000b70 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1b8      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x508>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d8>
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ba:	e029      	b.n	8001810 <HAL_RCC_OscConfig+0x52c>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d115      	bne.n	80017f0 <HAL_RCC_OscConfig+0x50c>
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_RCC_OscConfig+0x504>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x52c>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	4b9d      	ldr	r3, [pc, #628]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	4a9c      	ldr	r2, [pc, #624]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001800:	4b99      	ldr	r3, [pc, #612]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	4a98      	ldr	r2, [pc, #608]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d016      	beq.n	8001846 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f9aa 	bl	8000b70 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff f9a6 	bl	8000b70 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e168      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ed      	beq.n	8001820 <HAL_RCC_OscConfig+0x53c>
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff f993 	bl	8000b70 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff f98f 	bl	8000b70 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e151      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001864:	4b80      	ldr	r3, [pc, #512]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ed      	bne.n	800184e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001872:	7ffb      	ldrb	r3, [r7, #31]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 800187e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001882:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d03c      	beq.n	800190a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001898:	4b73      	ldr	r3, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 800189a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189e:	4a72      	ldr	r2, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff f962 	bl	8000b70 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b0:	f7ff f95e 	bl	8000b70 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e122      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c2:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ef      	beq.n	80018b0 <HAL_RCC_OscConfig+0x5cc>
 80018d0:	e01b      	b.n	800190a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018d2:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d8:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff f945 	bl	8000b70 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ea:	f7ff f941 	bl	8000b70 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e105      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018fc:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80018fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80f9 	beq.w	8001b06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	2b02      	cmp	r3, #2
 800191a:	f040 80cf 	bne.w	8001abc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800191e:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0203 	and.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	429a      	cmp	r2, r3
 8001930:	d12c      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	3b01      	subs	r3, #1
 800193e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d123      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d11b      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d113      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	3b01      	subs	r3, #1
 8001972:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d109      	bne.n	800198c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d071      	beq.n	8001a70 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d068      	beq.n	8001a64 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800199e:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0ac      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ba:	f7ff f8d9 	bl	8000b70 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff f8d5 	bl	8000b70 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e099      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x788>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019f0:	3a01      	subs	r2, #1
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a02:	0852      	lsrs	r2, r2, #1
 8001a04:	3a01      	subs	r2, #1
 8001a06:	0552      	lsls	r2, r2, #21
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a0e:	0852      	lsrs	r2, r2, #1
 8001a10:	3a01      	subs	r2, #1
 8001a12:	0652      	lsls	r2, r2, #25
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a1a:	06d2      	lsls	r2, r2, #27
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	4912      	ldr	r1, [pc, #72]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a3c:	f7ff f898 	bl	8000b70 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f894 	bl	8000b70 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e058      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_RCC_OscConfig+0x784>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a62:	e050      	b.n	8001b06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e04f      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d144      	bne.n	8001b06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a94:	f7ff f86c 	bl	8000b70 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f868 	bl	8000b70 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e02c      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x7b8>
 8001aba:	e024      	b.n	8001b06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d01f      	beq.n	8001b02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f84f 	bl	8000b70 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f84b 	bl	8000b70 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e00f      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4905      	ldr	r1, [pc, #20]	; (8001b10 <HAL_RCC_OscConfig+0x82c>)
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_RCC_OscConfig+0x830>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e001      	b.n	8001b06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	feeefffc 	.word	0xfeeefffc

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0e7      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b75      	ldr	r3, [pc, #468]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4970      	ldr	r1, [pc, #448]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0cf      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d010      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d908      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4960      	ldr	r1, [pc, #384]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d04c      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0a6      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e09a      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bce:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e08e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e086      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4943      	ldr	r1, [pc, #268]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c00:	f7fe ffb6 	bl	8000b70 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7fe ffb2 	bl	8000b70 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e06e      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 020c 	and.w	r2, r3, #12
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1eb      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d208      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	492b      	ldr	r1, [pc, #172]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d210      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	4923      	ldr	r1, [pc, #140]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e036      	b.n	8001cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4918      	ldr	r1, [pc, #96]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4910      	ldr	r1, [pc, #64]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ccc:	f000 f824 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	490b      	ldr	r1, [pc, #44]	; (8001d0c <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1fc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe feed 	bl	8000ad0 <HAL_InitTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08003ff8 	.word	0x08003ff8
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x34>
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d121      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d11e      	bne.n	8001d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d74:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	e004      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d134      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d003      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001dbc:	e005      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc0:	617b      	str	r3, [r7, #20]
      break;
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc6:	617b      	str	r3, [r7, #20]
      break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	617b      	str	r3, [r7, #20]
      break;
 8001dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	3301      	adds	r3, #1
 8001ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	fb03 f202 	mul.w	r2, r3, r2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	0e5b      	lsrs	r3, r3, #25
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	3301      	adds	r3, #1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e10:	69bb      	ldr	r3, [r7, #24]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08004010 	.word	0x08004010
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200

08001e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e36:	681b      	ldr	r3, [r3, #0]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e4c:	f7ff fff0 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4904      	ldr	r1, [pc, #16]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004008 	.word	0x08004008

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e78:	f7ff ffda 	bl	8001e30 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0adb      	lsrs	r3, r3, #11
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4904      	ldr	r1, [pc, #16]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08004008 	.word	0x08004008

08001ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eb8:	f7ff f9a0 	bl	80011fc <HAL_PWREx_GetVoltageRange>
 8001ebc:	6178      	str	r0, [r7, #20]
 8001ebe:	e014      	b.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ed8:	f7ff f990 	bl	80011fc <HAL_PWREx_GetVoltageRange>
 8001edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef0:	d10b      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d919      	bls.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2ba0      	cmp	r3, #160	; 0xa0
 8001efc:	d902      	bls.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001efe:	2302      	movs	r3, #2
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e013      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f04:	2301      	movs	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e010      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d902      	bls.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f10:	2303      	movs	r3, #3
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	e00a      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d102      	bne.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	e004      	b.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b70      	cmp	r3, #112	; 0x70
 8001f26:	d101      	bne.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f28:	2301      	movs	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 0207 	bic.w	r2, r3, #7
 8001f34:	4909      	ldr	r1, [pc, #36]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40022000 	.word	0x40022000

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f68:	2300      	movs	r3, #0
 8001f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d041      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f84:	d02a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f8a:	d824      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f90:	d008      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f96:	d81e      	bhi.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa4:	4b86      	ldr	r3, [pc, #536]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a85      	ldr	r2, [pc, #532]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb0:	e015      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 facd 	bl	8002558 <RCCEx_PLLSAI1_Config>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc2:	e00c      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3320      	adds	r3, #32
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fbb6 	bl	800273c <RCCEx_PLLSAI2_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fd4:	e003      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fda:	e000      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff2:	4973      	ldr	r1, [pc, #460]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ffa:	e001      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d041      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002010:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002014:	d02a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002016:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800201a:	d824      	bhi.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800201c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002020:	d008      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002026:	d81e      	bhi.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800202c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002030:	d010      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002032:	e018      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002034:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a61      	ldr	r2, [pc, #388]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002040:	e015      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fa85 	bl	8002558 <RCCEx_PLLSAI1_Config>
 800204e:	4603      	mov	r3, r0
 8002050:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002052:	e00c      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3320      	adds	r3, #32
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fb6e 	bl	800273c <RCCEx_PLLSAI2_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002064:	e003      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	74fb      	strb	r3, [r7, #19]
      break;
 800206a:	e000      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800206c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002074:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002082:	494f      	ldr	r1, [pc, #316]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800208a:	e001      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a0 	beq.w	80021de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00d      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a40      	ldr	r2, [pc, #256]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d4:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3a      	ldr	r2, [pc, #232]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e0:	f7fe fd46 	bl	8000b70 <HAL_GetTick>
 80020e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e6:	e009      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7fe fd42 	bl	8000b70 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d902      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	74fb      	strb	r3, [r7, #19]
        break;
 80020fa:	e005      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ef      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d15c      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01f      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d019      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe fd01 	bl	8000b70 <HAL_GetTick>
 800216e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002170:	e00b      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fcfd 	bl	8000b70 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d902      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	74fb      	strb	r3, [r7, #19]
            break;
 8002188:	e006      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ec      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021b6:	e009      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
 80021bc:	e006      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021cc:	7c7b      	ldrb	r3, [r7, #17]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4ba6      	ldr	r3, [pc, #664]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	4aa5      	ldr	r2, [pc, #660]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ea:	4ba0      	ldr	r3, [pc, #640]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f023 0203 	bic.w	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	499c      	ldr	r1, [pc, #624]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800220c:	4b97      	ldr	r3, [pc, #604]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f023 020c 	bic.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	4994      	ldr	r1, [pc, #592]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800222e:	4b8f      	ldr	r3, [pc, #572]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	498b      	ldr	r1, [pc, #556]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002250:	4b86      	ldr	r3, [pc, #536]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4983      	ldr	r1, [pc, #524]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002272:	4b7e      	ldr	r3, [pc, #504]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	497a      	ldr	r1, [pc, #488]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002294:	4b75      	ldr	r3, [pc, #468]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4972      	ldr	r1, [pc, #456]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022b6:	4b6d      	ldr	r3, [pc, #436]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c4:	4969      	ldr	r1, [pc, #420]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022d8:	4b64      	ldr	r3, [pc, #400]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e6:	4961      	ldr	r1, [pc, #388]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002308:	4958      	ldr	r1, [pc, #352]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	4950      	ldr	r1, [pc, #320]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4947      	ldr	r1, [pc, #284]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002360:	4b42      	ldr	r3, [pc, #264]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002366:	f023 0203 	bic.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	493f      	ldr	r1, [pc, #252]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d028      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002382:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	4936      	ldr	r1, [pc, #216]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a2:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4a31      	ldr	r2, [pc, #196]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ac:	60d3      	str	r3, [r2, #12]
 80023ae:	e011      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	2101      	movs	r1, #1
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f8c9 	bl	8002558 <RCCEx_PLLSAI1_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d028      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	491f      	ldr	r1, [pc, #124]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023fe:	d106      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800240a:	60d3      	str	r3, [r2, #12]
 800240c:	e011      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002416:	d10c      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f89a 	bl	8002558 <RCCEx_PLLSAI1_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800244c:	4907      	ldr	r1, [pc, #28]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800245c:	d108      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245e:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a02      	ldr	r2, [pc, #8]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002468:	60d3      	str	r3, [r2, #12]
 800246a:	e013      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800246c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002478:	d10c      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	2101      	movs	r1, #1
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f869 	bl	8002558 <RCCEx_PLLSAI1_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d02f      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ae:	4929      	ldr	r1, [pc, #164]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024be:	d10d      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	2102      	movs	r1, #2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f846 	bl	8002558 <RCCEx_PLLSAI1_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d014      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	74bb      	strb	r3, [r7, #18]
 80024da:	e011      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3320      	adds	r3, #32
 80024ea:	2102      	movs	r1, #2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f925 	bl	800273c <RCCEx_PLLSAI2_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800251c:	490d      	ldr	r1, [pc, #52]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002540:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002548:	7cbb      	ldrb	r3, [r7, #18]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002566:	4b74      	ldr	r3, [pc, #464]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002572:	4b71      	ldr	r3, [pc, #452]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d10d      	bne.n	800259e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
       ||
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800258a:	4b6b      	ldr	r3, [pc, #428]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
       ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d047      	beq.n	800262e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e044      	b.n	800262e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d018      	beq.n	80025de <RCCEx_PLLSAI1_Config+0x86>
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d825      	bhi.n	80025fc <RCCEx_PLLSAI1_Config+0xa4>
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d002      	beq.n	80025ba <RCCEx_PLLSAI1_Config+0x62>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d009      	beq.n	80025cc <RCCEx_PLLSAI1_Config+0x74>
 80025b8:	e020      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ba:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11d      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ca:	e01a      	b.n	8002602 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025cc:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d116      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025dc:	e013      	b.n	8002606 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ea:	4b53      	ldr	r3, [pc, #332]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fa:	e006      	b.n	800260a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	e004      	b.n	800260c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002602:	bf00      	nop
 8002604:	e002      	b.n	800260c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260a:	bf00      	nop
    }

    if(status == HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002612:	4b49      	ldr	r3, [pc, #292]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	430b      	orrs	r3, r1
 8002628:	4943      	ldr	r1, [pc, #268]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d17c      	bne.n	800272e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800263e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002640:	f7fe fa96 	bl	8000b70 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002646:	e009      	b.n	800265c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002648:	f7fe fa92 	bl	8000b70 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	73fb      	strb	r3, [r7, #15]
        break;
 800265a:	e005      	b.n	8002668 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ef      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d15f      	bne.n	800272e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d110      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800267c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6892      	ldr	r2, [r2, #8]
 8002684:	0211      	lsls	r1, r2, #8
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	06d2      	lsls	r2, r2, #27
 800268c:	430a      	orrs	r2, r1
 800268e:	492a      	ldr	r1, [pc, #168]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	610b      	str	r3, [r1, #16]
 8002694:	e027      	b.n	80026e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d112      	bne.n	80026c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
 80026ac:	0211      	lsls	r1, r2, #8
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6912      	ldr	r2, [r2, #16]
 80026b2:	0852      	lsrs	r2, r2, #1
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0552      	lsls	r2, r2, #21
 80026b8:	430a      	orrs	r2, r1
 80026ba:	491f      	ldr	r1, [pc, #124]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	610b      	str	r3, [r1, #16]
 80026c0:	e011      	b.n	80026e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c2:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6892      	ldr	r2, [r2, #8]
 80026d2:	0211      	lsls	r1, r2, #8
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6952      	ldr	r2, [r2, #20]
 80026d8:	0852      	lsrs	r2, r2, #1
 80026da:	3a01      	subs	r2, #1
 80026dc:	0652      	lsls	r2, r2, #25
 80026de:	430a      	orrs	r2, r1
 80026e0:	4915      	ldr	r1, [pc, #84]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe fa3d 	bl	8000b70 <HAL_GetTick>
 80026f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f8:	e009      	b.n	800270e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026fa:	f7fe fa39 	bl	8000b70 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d902      	bls.n	800270e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	73fb      	strb	r3, [r7, #15]
          break;
 800270c:	e005      	b.n	800271a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0ef      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000

0800273c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800274a:	4b69      	ldr	r3, [pc, #420]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d018      	beq.n	8002788 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002756:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d10d      	bne.n	8002782 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
       ||
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800276e:	4b60      	ldr	r3, [pc, #384]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
       ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d047      	beq.n	8002812 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
 8002786:	e044      	b.n	8002812 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d018      	beq.n	80027c2 <RCCEx_PLLSAI2_Config+0x86>
 8002790:	2b03      	cmp	r3, #3
 8002792:	d825      	bhi.n	80027e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002794:	2b01      	cmp	r3, #1
 8002796:	d002      	beq.n	800279e <RCCEx_PLLSAI2_Config+0x62>
 8002798:	2b02      	cmp	r3, #2
 800279a:	d009      	beq.n	80027b0 <RCCEx_PLLSAI2_Config+0x74>
 800279c:	e020      	b.n	80027e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11d      	bne.n	80027e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ae:	e01a      	b.n	80027e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b0:	4b4f      	ldr	r3, [pc, #316]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d116      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e013      	b.n	80027ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027c2:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ce:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027de:	e006      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e004      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	430b      	orrs	r3, r1
 800280c:	4938      	ldr	r1, [pc, #224]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d166      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a34      	ldr	r2, [pc, #208]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fe f9a4 	bl	8000b70 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800282a:	e009      	b.n	8002840 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800282c:	f7fe f9a0 	bl	8000b70 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d902      	bls.n	8002840 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	73fb      	strb	r3, [r7, #15]
        break;
 800283e:	e005      	b.n	800284c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ef      	bne.n	800282c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d149      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d110      	bne.n	800287a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	0211      	lsls	r1, r2, #8
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68d2      	ldr	r2, [r2, #12]
 800286e:	06d2      	lsls	r2, r2, #27
 8002870:	430a      	orrs	r2, r1
 8002872:	491f      	ldr	r1, [pc, #124]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	614b      	str	r3, [r1, #20]
 8002878:	e011      	b.n	800289e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	0211      	lsls	r1, r2, #8
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6912      	ldr	r2, [r2, #16]
 8002890:	0852      	lsrs	r2, r2, #1
 8002892:	3a01      	subs	r2, #1
 8002894:	0652      	lsls	r2, r2, #25
 8002896:	430a      	orrs	r2, r1
 8002898:	4915      	ldr	r1, [pc, #84]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe f961 	bl	8000b70 <HAL_GetTick>
 80028ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028b0:	e009      	b.n	80028c6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028b2:	f7fe f95d 	bl	8000b70 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d902      	bls.n	80028c6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	73fb      	strb	r3, [r7, #15]
          break;
 80028c4:	e005      	b.n	80028d2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0ef      	beq.n	80028b2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e095      	b.n	8002a32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d108      	bne.n	8002920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002916:	d009      	beq.n	800292c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
 800291e:	e005      	b.n	800292c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd fff0 	bl	800092c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002962:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800296c:	d902      	bls.n	8002974 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e002      	b.n	800297a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002982:	d007      	beq.n	8002994 <HAL_SPI_Init+0xa0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800298c:	d002      	beq.n	8002994 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	ea42 0103 	orr.w	r1, r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	f003 0204 	and.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a10:	ea42 0103 	orr.w	r1, r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_SPI_TransmitReceive_IT+0x20>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e091      	b.n	8002b80 <HAL_SPI_TransmitReceive_IT+0x144>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a6a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a72:	7dbb      	ldrb	r3, [r7, #22]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d00d      	beq.n	8002a94 <HAL_SPI_TransmitReceive_IT+0x58>
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a7e:	d106      	bne.n	8002a8e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <HAL_SPI_TransmitReceive_IT+0x52>
 8002a88:	7dbb      	ldrb	r3, [r7, #22]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d002      	beq.n	8002a94 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a92:	e070      	b.n	8002b76 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aaa:	e064      	b.n	8002b76 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d003      	beq.n	8002ac0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2205      	movs	r2, #5
 8002abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	887a      	ldrh	r2, [r7, #2]
 8002ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	887a      	ldrh	r2, [r7, #2]
 8002ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af6:	d906      	bls.n	8002b06 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <HAL_SPI_TransmitReceive_IT+0x150>)
 8002afc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002b02:	651a      	str	r2, [r3, #80]	; 0x50
 8002b04:	e005      	b.n	8002b12 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002b0a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002b10:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b1a:	d802      	bhi.n	8002b22 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d908      	bls.n	8002b34 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e007      	b.n	8002b44 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002b52:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d008      	beq.n	8002b74 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e000      	b.n	8002b76 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002b74:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	08002f3f 	.word	0x08002f3f
 8002b90:	08002fa5 	.word	0x08002fa5
 8002b94:	08002def 	.word	0x08002def
 8002b98:	08002ead 	.word	0x08002ead

08002b9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
    return;
 8002bde:	e0d7      	b.n	8002d90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_SPI_IRQHandler+0x66>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	09db      	lsrs	r3, r3, #7
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
    return;
 8002c00:	e0c6      	b.n	8002d90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_SPI_IRQHandler+0x8c>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80b4 	beq.w	8002d90 <HAL_SPI_IRQHandler+0x1f4>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80ad 	beq.w	8002d90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d023      	beq.n	8002c8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d011      	beq.n	8002c72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	f043 0204 	orr.w	r2, r3, #4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	e00b      	b.n	8002c8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]
        return;
 8002c88:	e082      	b.n	8002d90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d014      	beq.n	8002cc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd0:	f043 0208 	orr.w	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d04f      	beq.n	8002d8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <HAL_SPI_IRQHandler+0x17e>
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d034      	beq.n	8002d84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0203 	bic.w	r2, r2, #3
 8002d28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d011      	beq.n	8002d56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_SPI_IRQHandler+0x1fc>)
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f857 	bl	8000df2 <HAL_DMA_Abort_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_SPI_IRQHandler+0x1fc>)
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f841 	bl	8000df2 <HAL_DMA_Abort_IT>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002d82:	e003      	b.n	8002d8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f813 	bl	8002db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d8a:	e000      	b.n	8002d8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002d8c:	bf00      	nop
    return;
 8002d8e:	bf00      	nop
  }
}
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	08002dc5 	.word	0x08002dc5

08002d9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff ffe5 	bl	8002db0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d923      	bls.n	8002e4a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b02      	subs	r3, #2
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d11f      	bne.n	8002e78 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	e016      	b.n	8002e78 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f103 020c 	add.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10f      	bne.n	8002ea4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e92:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa14 	bl	80032cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d912      	bls.n	8002ee4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	1c9a      	adds	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b02      	subs	r3, #2
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ee2:	e012      	b.n	8002f0a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d110      	bne.n	8002f36 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f22:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f9cb 	bl	80032cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	b292      	uxth	r2, r2
 8002f52:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	1c9a      	adds	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f998 	bl	80032cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d110      	bne.n	8002ffc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f968 	bl	80032cc <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003014:	f7fd fdac 	bl	8000b70 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	4413      	add	r3, r2
 8003022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003024:	f7fd fda4 	bl	8000b70 <HAL_GetTick>
 8003028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800302a:	4b39      	ldr	r3, [pc, #228]	; (8003110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	015b      	lsls	r3, r3, #5
 8003030:	0d1b      	lsrs	r3, r3, #20
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303a:	e054      	b.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003042:	d050      	beq.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003044:	f7fd fd94 	bl	8000b70 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	429a      	cmp	r2, r3
 8003052:	d902      	bls.n	800305a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d13d      	bne.n	80030d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003072:	d111      	bne.n	8003098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307c:	d004      	beq.n	8003088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	d107      	bne.n	8003098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a0:	d10f      	bne.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e017      	b.n	8003106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	429a      	cmp	r2, r3
 8003102:	d19b      	bne.n	800303c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000

08003114 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003126:	f7fd fd23 	bl	8000b70 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	4413      	add	r3, r2
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003136:	f7fd fd1b 	bl	8000b70 <HAL_GetTick>
 800313a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	330c      	adds	r3, #12
 8003142:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00da      	lsls	r2, r3, #3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	0d1b      	lsrs	r3, r3, #20
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800315c:	e060      	b.n	8003220 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003164:	d107      	bne.n	8003176 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003174:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d050      	beq.n	8003220 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800317e:	f7fd fcf7 	bl	8000b70 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318a:	429a      	cmp	r2, r3
 800318c:	d902      	bls.n	8003194 <SPI_WaitFifoStateUntilTimeout+0x80>
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	2b00      	cmp	r3, #0
 8003192:	d13d      	bne.n	8003210 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ac:	d111      	bne.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b6:	d004      	beq.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c0:	d107      	bne.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031da:	d10f      	bne.n	80031fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e010      	b.n	8003232 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3b01      	subs	r3, #1
 800321e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d196      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3728      	adds	r7, #40	; 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000000 	.word	0x20000000

08003240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff ff5b 	bl	8003114 <SPI_WaitFifoStateUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e027      	b.n	80032c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2200      	movs	r2, #0
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff fec0 	bl	8003004 <SPI_WaitFlagStateUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e014      	b.n	80032c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff34 	bl	8003114 <SPI_WaitFifoStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e000      	b.n	80032c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032d4:	f7fd fc4c 	bl	8000b70 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0220 	bic.w	r2, r2, #32
 80032e8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	2164      	movs	r1, #100	; 0x64
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ffa6 	bl	8003240 <SPI_EndRxTxTransaction>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fd3a 	bl	8002d9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003328:	e00e      	b.n	8003348 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fa38 	bl	80007a8 <HAL_SPI_TxRxCpltCallback>
}
 8003338:	e006      	b.n	8003348 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fd34 	bl	8002db0 <HAL_SPI_ErrorCallback>
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e040      	b.n	80033e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fa7a 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f992 	bl	80036b8 <UART_SetConfig>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e022      	b.n	80033e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fc3e 	bl	8003c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fcc5 	bl	8003d6c <UART_CheckIdleState>
 80033e2:	4603      	mov	r3, r0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003400:	2b20      	cmp	r3, #32
 8003402:	f040 8082 	bne.w	800350a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <HAL_UART_Transmit+0x26>
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07a      	b.n	800350c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_UART_Transmit+0x38>
 8003420:	2302      	movs	r3, #2
 8003422:	e073      	b.n	800350c <HAL_UART_Transmit+0x120>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2221      	movs	r2, #33	; 0x21
 8003438:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800343a:	f7fd fb99 	bl	8000b70 <HAL_GetTick>
 800343e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003458:	d108      	bne.n	800346c <HAL_UART_Transmit+0x80>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e003      	b.n	8003474 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800347c:	e02d      	b.n	80034da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2200      	movs	r2, #0
 8003486:	2180      	movs	r1, #128	; 0x80
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fcb8 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e039      	b.n	800350c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	881a      	ldrh	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034aa:	b292      	uxth	r2, r2
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	3302      	adds	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e008      	b.n	80034c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b292      	uxth	r2, r2
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1cb      	bne.n	800347e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2140      	movs	r1, #64	; 0x40
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fc84 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e005      	b.n	800350c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003528:	2b20      	cmp	r3, #32
 800352a:	f040 80bf 	bne.w	80036ac <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_UART_Receive+0x26>
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0b7      	b.n	80036ae <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_UART_Receive+0x38>
 8003548:	2302      	movs	r3, #2
 800354a:	e0b0      	b.n	80036ae <HAL_UART_Receive+0x19a>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2222      	movs	r2, #34	; 0x22
 8003560:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003568:	f7fd fb02 	bl	8000b70 <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	88fa      	ldrh	r2, [r7, #6]
 8003572:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	d10e      	bne.n	80035a6 <HAL_UART_Receive+0x92>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d105      	bne.n	800359c <HAL_UART_Receive+0x88>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800359a:	e02d      	b.n	80035f8 <HAL_UART_Receive+0xe4>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	22ff      	movs	r2, #255	; 0xff
 80035a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a4:	e028      	b.n	80035f8 <HAL_UART_Receive+0xe4>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <HAL_UART_Receive+0xb6>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Receive+0xac>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035be:	e01b      	b.n	80035f8 <HAL_UART_Receive+0xe4>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	227f      	movs	r2, #127	; 0x7f
 80035c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c8:	e016      	b.n	80035f8 <HAL_UART_Receive+0xe4>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d2:	d10d      	bne.n	80035f0 <HAL_UART_Receive+0xdc>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_UART_Receive+0xd2>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	227f      	movs	r2, #127	; 0x7f
 80035e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035e4:	e008      	b.n	80035f8 <HAL_UART_Receive+0xe4>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	223f      	movs	r2, #63	; 0x3f
 80035ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035ee:	e003      	b.n	80035f8 <HAL_UART_Receive+0xe4>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80035fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d108      	bne.n	800361c <HAL_UART_Receive+0x108>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d104      	bne.n	800361c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	e003      	b.n	8003624 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800362c:	e033      	b.n	8003696 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	2120      	movs	r1, #32
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fbe0 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e032      	b.n	80036ae <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003654:	b29a      	uxth	r2, r3
 8003656:	8a7b      	ldrh	r3, [r7, #18]
 8003658:	4013      	ands	r3, r2
 800365a:	b29a      	uxth	r2, r3
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	3302      	adds	r3, #2
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e00d      	b.n	8003684 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800366e:	b29b      	uxth	r3, r3
 8003670:	b2da      	uxtb	r2, r3
 8003672:	8a7b      	ldrh	r3, [r7, #18]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	4013      	ands	r3, r2
 8003678:	b2da      	uxtb	r2, r3
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1c5      	bne.n	800362e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036bc:	b08a      	sub	sp, #40	; 0x28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	4313      	orrs	r3, r2
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4ba4      	ldr	r3, [pc, #656]	; (8003978 <UART_SetConfig+0x2c0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a99      	ldr	r2, [pc, #612]	; (800397c <UART_SetConfig+0x2c4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	4313      	orrs	r3, r2
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	430a      	orrs	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a90      	ldr	r2, [pc, #576]	; (8003980 <UART_SetConfig+0x2c8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d126      	bne.n	8003790 <UART_SetConfig+0xd8>
 8003742:	4b90      	ldr	r3, [pc, #576]	; (8003984 <UART_SetConfig+0x2cc>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b03      	cmp	r3, #3
 800374e:	d81b      	bhi.n	8003788 <UART_SetConfig+0xd0>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <UART_SetConfig+0xa0>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	08003769 	.word	0x08003769
 800375c:	08003779 	.word	0x08003779
 8003760:	08003771 	.word	0x08003771
 8003764:	08003781 	.word	0x08003781
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e116      	b.n	800399e <UART_SetConfig+0x2e6>
 8003770:	2302      	movs	r3, #2
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e112      	b.n	800399e <UART_SetConfig+0x2e6>
 8003778:	2304      	movs	r3, #4
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e10e      	b.n	800399e <UART_SetConfig+0x2e6>
 8003780:	2308      	movs	r3, #8
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e10a      	b.n	800399e <UART_SetConfig+0x2e6>
 8003788:	2310      	movs	r3, #16
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e106      	b.n	800399e <UART_SetConfig+0x2e6>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <UART_SetConfig+0x2d0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d138      	bne.n	800380c <UART_SetConfig+0x154>
 800379a:	4b7a      	ldr	r3, [pc, #488]	; (8003984 <UART_SetConfig+0x2cc>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	d82d      	bhi.n	8003804 <UART_SetConfig+0x14c>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <UART_SetConfig+0xf8>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037e5 	.word	0x080037e5
 80037b4:	08003805 	.word	0x08003805
 80037b8:	08003805 	.word	0x08003805
 80037bc:	08003805 	.word	0x08003805
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	08003805 	.word	0x08003805
 80037c8:	08003805 	.word	0x08003805
 80037cc:	08003805 	.word	0x08003805
 80037d0:	080037ed 	.word	0x080037ed
 80037d4:	08003805 	.word	0x08003805
 80037d8:	08003805 	.word	0x08003805
 80037dc:	08003805 	.word	0x08003805
 80037e0:	080037fd 	.word	0x080037fd
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e0d8      	b.n	800399e <UART_SetConfig+0x2e6>
 80037ec:	2302      	movs	r3, #2
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e0d4      	b.n	800399e <UART_SetConfig+0x2e6>
 80037f4:	2304      	movs	r3, #4
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e0d0      	b.n	800399e <UART_SetConfig+0x2e6>
 80037fc:	2308      	movs	r3, #8
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e0cc      	b.n	800399e <UART_SetConfig+0x2e6>
 8003804:	2310      	movs	r3, #16
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e0c8      	b.n	800399e <UART_SetConfig+0x2e6>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5e      	ldr	r2, [pc, #376]	; (800398c <UART_SetConfig+0x2d4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d125      	bne.n	8003862 <UART_SetConfig+0x1aa>
 8003816:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <UART_SetConfig+0x2cc>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003820:	2b30      	cmp	r3, #48	; 0x30
 8003822:	d016      	beq.n	8003852 <UART_SetConfig+0x19a>
 8003824:	2b30      	cmp	r3, #48	; 0x30
 8003826:	d818      	bhi.n	800385a <UART_SetConfig+0x1a2>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d00a      	beq.n	8003842 <UART_SetConfig+0x18a>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d814      	bhi.n	800385a <UART_SetConfig+0x1a2>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <UART_SetConfig+0x182>
 8003834:	2b10      	cmp	r3, #16
 8003836:	d008      	beq.n	800384a <UART_SetConfig+0x192>
 8003838:	e00f      	b.n	800385a <UART_SetConfig+0x1a2>
 800383a:	2300      	movs	r3, #0
 800383c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003840:	e0ad      	b.n	800399e <UART_SetConfig+0x2e6>
 8003842:	2302      	movs	r3, #2
 8003844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003848:	e0a9      	b.n	800399e <UART_SetConfig+0x2e6>
 800384a:	2304      	movs	r3, #4
 800384c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003850:	e0a5      	b.n	800399e <UART_SetConfig+0x2e6>
 8003852:	2308      	movs	r3, #8
 8003854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003858:	e0a1      	b.n	800399e <UART_SetConfig+0x2e6>
 800385a:	2310      	movs	r3, #16
 800385c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003860:	e09d      	b.n	800399e <UART_SetConfig+0x2e6>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <UART_SetConfig+0x2d8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d125      	bne.n	80038b8 <UART_SetConfig+0x200>
 800386c:	4b45      	ldr	r3, [pc, #276]	; (8003984 <UART_SetConfig+0x2cc>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003876:	2bc0      	cmp	r3, #192	; 0xc0
 8003878:	d016      	beq.n	80038a8 <UART_SetConfig+0x1f0>
 800387a:	2bc0      	cmp	r3, #192	; 0xc0
 800387c:	d818      	bhi.n	80038b0 <UART_SetConfig+0x1f8>
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d00a      	beq.n	8003898 <UART_SetConfig+0x1e0>
 8003882:	2b80      	cmp	r3, #128	; 0x80
 8003884:	d814      	bhi.n	80038b0 <UART_SetConfig+0x1f8>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <UART_SetConfig+0x1d8>
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d008      	beq.n	80038a0 <UART_SetConfig+0x1e8>
 800388e:	e00f      	b.n	80038b0 <UART_SetConfig+0x1f8>
 8003890:	2300      	movs	r3, #0
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e082      	b.n	800399e <UART_SetConfig+0x2e6>
 8003898:	2302      	movs	r3, #2
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e07e      	b.n	800399e <UART_SetConfig+0x2e6>
 80038a0:	2304      	movs	r3, #4
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e07a      	b.n	800399e <UART_SetConfig+0x2e6>
 80038a8:	2308      	movs	r3, #8
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e076      	b.n	800399e <UART_SetConfig+0x2e6>
 80038b0:	2310      	movs	r3, #16
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e072      	b.n	800399e <UART_SetConfig+0x2e6>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a35      	ldr	r2, [pc, #212]	; (8003994 <UART_SetConfig+0x2dc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d12a      	bne.n	8003918 <UART_SetConfig+0x260>
 80038c2:	4b30      	ldr	r3, [pc, #192]	; (8003984 <UART_SetConfig+0x2cc>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d0:	d01a      	beq.n	8003908 <UART_SetConfig+0x250>
 80038d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d6:	d81b      	bhi.n	8003910 <UART_SetConfig+0x258>
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d00c      	beq.n	80038f8 <UART_SetConfig+0x240>
 80038de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e2:	d815      	bhi.n	8003910 <UART_SetConfig+0x258>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <UART_SetConfig+0x238>
 80038e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ec:	d008      	beq.n	8003900 <UART_SetConfig+0x248>
 80038ee:	e00f      	b.n	8003910 <UART_SetConfig+0x258>
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f6:	e052      	b.n	800399e <UART_SetConfig+0x2e6>
 80038f8:	2302      	movs	r3, #2
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fe:	e04e      	b.n	800399e <UART_SetConfig+0x2e6>
 8003900:	2304      	movs	r3, #4
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003906:	e04a      	b.n	800399e <UART_SetConfig+0x2e6>
 8003908:	2308      	movs	r3, #8
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e046      	b.n	800399e <UART_SetConfig+0x2e6>
 8003910:	2310      	movs	r3, #16
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e042      	b.n	800399e <UART_SetConfig+0x2e6>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a17      	ldr	r2, [pc, #92]	; (800397c <UART_SetConfig+0x2c4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d13a      	bne.n	8003998 <UART_SetConfig+0x2e0>
 8003922:	4b18      	ldr	r3, [pc, #96]	; (8003984 <UART_SetConfig+0x2cc>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800392c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003930:	d01a      	beq.n	8003968 <UART_SetConfig+0x2b0>
 8003932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003936:	d81b      	bhi.n	8003970 <UART_SetConfig+0x2b8>
 8003938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800393c:	d00c      	beq.n	8003958 <UART_SetConfig+0x2a0>
 800393e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003942:	d815      	bhi.n	8003970 <UART_SetConfig+0x2b8>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <UART_SetConfig+0x298>
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d008      	beq.n	8003960 <UART_SetConfig+0x2a8>
 800394e:	e00f      	b.n	8003970 <UART_SetConfig+0x2b8>
 8003950:	2300      	movs	r3, #0
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e022      	b.n	800399e <UART_SetConfig+0x2e6>
 8003958:	2302      	movs	r3, #2
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395e:	e01e      	b.n	800399e <UART_SetConfig+0x2e6>
 8003960:	2304      	movs	r3, #4
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e01a      	b.n	800399e <UART_SetConfig+0x2e6>
 8003968:	2308      	movs	r3, #8
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e016      	b.n	800399e <UART_SetConfig+0x2e6>
 8003970:	2310      	movs	r3, #16
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e012      	b.n	800399e <UART_SetConfig+0x2e6>
 8003978:	efff69f3 	.word	0xefff69f3
 800397c:	40008000 	.word	0x40008000
 8003980:	40013800 	.word	0x40013800
 8003984:	40021000 	.word	0x40021000
 8003988:	40004400 	.word	0x40004400
 800398c:	40004800 	.word	0x40004800
 8003990:	40004c00 	.word	0x40004c00
 8003994:	40005000 	.word	0x40005000
 8003998:	2310      	movs	r3, #16
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a9f      	ldr	r2, [pc, #636]	; (8003c20 <UART_SetConfig+0x568>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d17a      	bne.n	8003a9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d824      	bhi.n	80039fa <UART_SetConfig+0x342>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0x300>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039eb 	.word	0x080039eb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039fb 	.word	0x080039fb
 80039d4:	080039fb 	.word	0x080039fb
 80039d8:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe fa34 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80039e0:	61f8      	str	r0, [r7, #28]
        break;
 80039e2:	e010      	b.n	8003a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b8f      	ldr	r3, [pc, #572]	; (8003c24 <UART_SetConfig+0x56c>)
 80039e6:	61fb      	str	r3, [r7, #28]
        break;
 80039e8:	e00d      	b.n	8003a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe f995 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 80039ee:	61f8      	str	r0, [r7, #28]
        break;
 80039f0:	e009      	b.n	8003a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	61fb      	str	r3, [r7, #28]
        break;
 80039f8:	e005      	b.n	8003a06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80fb 	beq.w	8003c04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d305      	bcc.n	8003a2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d903      	bls.n	8003a32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a30:	e0e8      	b.n	8003c04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2200      	movs	r2, #0
 8003a36:	461c      	mov	r4, r3
 8003a38:	4615      	mov	r5, r2
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	022b      	lsls	r3, r5, #8
 8003a44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a48:	0222      	lsls	r2, r4, #8
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	6849      	ldr	r1, [r1, #4]
 8003a4e:	0849      	lsrs	r1, r1, #1
 8003a50:	2000      	movs	r0, #0
 8003a52:	4688      	mov	r8, r1
 8003a54:	4681      	mov	r9, r0
 8003a56:	eb12 0a08 	adds.w	sl, r2, r8
 8003a5a:	eb43 0b09 	adc.w	fp, r3, r9
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a6c:	4650      	mov	r0, sl
 8003a6e:	4659      	mov	r1, fp
 8003a70:	f7fc fbbc 	bl	80001ec <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a82:	d308      	bcc.n	8003a96 <UART_SetConfig+0x3de>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8a:	d204      	bcs.n	8003a96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	60da      	str	r2, [r3, #12]
 8003a94:	e0b6      	b.n	8003c04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a9c:	e0b2      	b.n	8003c04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa6:	d15e      	bne.n	8003b66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d828      	bhi.n	8003b02 <UART_SetConfig+0x44a>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <UART_SetConfig+0x400>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003add 	.word	0x08003add
 8003abc:	08003ae5 	.word	0x08003ae5
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003b03 	.word	0x08003b03
 8003ac8:	08003af3 	.word	0x08003af3
 8003acc:	08003b03 	.word	0x08003b03
 8003ad0:	08003b03 	.word	0x08003b03
 8003ad4:	08003b03 	.word	0x08003b03
 8003ad8:	08003afb 	.word	0x08003afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003adc:	f7fe f9b4 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	61f8      	str	r0, [r7, #28]
        break;
 8003ae2:	e014      	b.n	8003b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe f9c6 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	61f8      	str	r0, [r7, #28]
        break;
 8003aea:	e010      	b.n	8003b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aec:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <UART_SetConfig+0x56c>)
 8003aee:	61fb      	str	r3, [r7, #28]
        break;
 8003af0:	e00d      	b.n	8003b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af2:	f7fe f911 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8003af6:	61f8      	str	r0, [r7, #28]
        break;
 8003af8:	e009      	b.n	8003b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afe:	61fb      	str	r3, [r7, #28]
        break;
 8003b00:	e005      	b.n	8003b0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d077      	beq.n	8003c04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005a      	lsls	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	441a      	add	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b0f      	cmp	r3, #15
 8003b2e:	d916      	bls.n	8003b5e <UART_SetConfig+0x4a6>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d212      	bcs.n	8003b5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f023 030f 	bic.w	r3, r3, #15
 8003b40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	8afa      	ldrh	r2, [r7, #22]
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	e052      	b.n	8003c04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b64:	e04e      	b.n	8003c04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d827      	bhi.n	8003bbe <UART_SetConfig+0x506>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0x4bc>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003ba1 	.word	0x08003ba1
 8003b7c:	08003ba9 	.word	0x08003ba9
 8003b80:	08003bbf 	.word	0x08003bbf
 8003b84:	08003baf 	.word	0x08003baf
 8003b88:	08003bbf 	.word	0x08003bbf
 8003b8c:	08003bbf 	.word	0x08003bbf
 8003b90:	08003bbf 	.word	0x08003bbf
 8003b94:	08003bb7 	.word	0x08003bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b98:	f7fe f956 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8003b9c:	61f8      	str	r0, [r7, #28]
        break;
 8003b9e:	e014      	b.n	8003bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ba0:	f7fe f968 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8003ba4:	61f8      	str	r0, [r7, #28]
        break;
 8003ba6:	e010      	b.n	8003bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <UART_SetConfig+0x56c>)
 8003baa:	61fb      	str	r3, [r7, #28]
        break;
 8003bac:	e00d      	b.n	8003bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bae:	f7fe f8b3 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8003bb2:	61f8      	str	r0, [r7, #28]
        break;
 8003bb4:	e009      	b.n	8003bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bba:	61fb      	str	r3, [r7, #28]
        break;
 8003bbc:	e005      	b.n	8003bca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d019      	beq.n	8003c04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	085a      	lsrs	r2, r3, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b0f      	cmp	r3, #15
 8003be8:	d909      	bls.n	8003bfe <UART_SetConfig+0x546>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf0:	d205      	bcs.n	8003bfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60da      	str	r2, [r3, #12]
 8003bfc:	e002      	b.n	8003c04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1e:	bf00      	nop
 8003c20:	40008000 	.word	0x40008000
 8003c24:	00f42400 	.word	0x00f42400

08003c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d26:	d10a      	bne.n	8003d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d7c:	f7fc fef8 	bl	8000b70 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d10e      	bne.n	8003dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f82d 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e023      	b.n	8003df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d10e      	bne.n	8003dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f817 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e00d      	b.n	8003df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b09c      	sub	sp, #112	; 0x70
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0e:	e0a5      	b.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e16:	f000 80a1 	beq.w	8003f5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1a:	f7fc fea9 	bl	8000b70 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d13e      	bne.n	8003eae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e44:	667b      	str	r3, [r7, #100]	; 0x64
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e6      	bne.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	663b      	str	r3, [r7, #96]	; 0x60
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e067      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d04f      	beq.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eca:	d147      	bne.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e6      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	613b      	str	r3, [r7, #16]
   return(result);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f28:	623a      	str	r2, [r7, #32]
 8003f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	69f9      	ldr	r1, [r7, #28]
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e010      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	f43f af4a 	beq.w	8003e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3770      	adds	r7, #112	; 0x70
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <__libc_init_array>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4d0d      	ldr	r5, [pc, #52]	; (8003fc0 <__libc_init_array+0x38>)
 8003f8c:	4c0d      	ldr	r4, [pc, #52]	; (8003fc4 <__libc_init_array+0x3c>)
 8003f8e:	1b64      	subs	r4, r4, r5
 8003f90:	10a4      	asrs	r4, r4, #2
 8003f92:	2600      	movs	r6, #0
 8003f94:	42a6      	cmp	r6, r4
 8003f96:	d109      	bne.n	8003fac <__libc_init_array+0x24>
 8003f98:	4d0b      	ldr	r5, [pc, #44]	; (8003fc8 <__libc_init_array+0x40>)
 8003f9a:	4c0c      	ldr	r4, [pc, #48]	; (8003fcc <__libc_init_array+0x44>)
 8003f9c:	f000 f820 	bl	8003fe0 <_init>
 8003fa0:	1b64      	subs	r4, r4, r5
 8003fa2:	10a4      	asrs	r4, r4, #2
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	d105      	bne.n	8003fb6 <__libc_init_array+0x2e>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb0:	4798      	blx	r3
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7ee      	b.n	8003f94 <__libc_init_array+0xc>
 8003fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fba:	4798      	blx	r3
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	e7f2      	b.n	8003fa6 <__libc_init_array+0x1e>
 8003fc0:	08004048 	.word	0x08004048
 8003fc4:	08004048 	.word	0x08004048
 8003fc8:	08004048 	.word	0x08004048
 8003fcc:	0800404c 	.word	0x0800404c

08003fd0 <memset>:
 8003fd0:	4402      	add	r2, r0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d100      	bne.n	8003fda <memset+0xa>
 8003fd8:	4770      	bx	lr
 8003fda:	f803 1b01 	strb.w	r1, [r3], #1
 8003fde:	e7f9      	b.n	8003fd4 <memset+0x4>

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
