
03_SPI_Tx_Rx_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800408c  0800408c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004094  08004094  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800409c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000018  080040b4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080040b4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d52f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c40  00000000  00000000  0002d577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028154  00000000  00000000  000307d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d040  00000000  00000000  00058924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6670  00000000  00000000  00065964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015bfd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e8c  00000000  00000000  0015c024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800402c 	.word	0x0800402c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	0800402c 	.word	0x0800402c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fb03 	bl	8000afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f830 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f904 	bl	8000708 <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 f8dc 	bl	80006bc <MX_DMA_Init>
  MX_SPI1_Init();
 8000504:	f000 f89c 	bl	8000640 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 8000508:	f000 f86e 	bl	80005e8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_SPI_TransmitReceive_DMA(&hspi1, buffer_tx, buffer_rx, 10);
 800050c:	230a      	movs	r3, #10
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <main+0x58>)
 8000510:	490e      	ldr	r1, [pc, #56]	; (800054c <main+0x5c>)
 8000512:	480f      	ldr	r0, [pc, #60]	; (8000550 <main+0x60>)
 8000514:	f002 fc60 	bl	8002dd8 <HAL_SPI_TransmitReceive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag == 1)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <main+0x64>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d10c      	bne.n	800053a <main+0x4a>
	  {
		  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x68>)
 8000526:	f001 f81f 	bl	8001568 <HAL_GPIO_WritePin>
		  HAL_Delay(3000);
 800052a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800052e:	f000 fb5b 	bl	8000be8 <HAL_Delay>
		  flag = 0;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	e7ee      	b.n	8000518 <main+0x28>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x68>)
 8000540:	f001 f812 	bl	8001568 <HAL_GPIO_WritePin>
	  if(flag == 1)
 8000544:	e7e8      	b.n	8000518 <main+0x28>
 8000546:	bf00      	nop
 8000548:	200001ac 	.word	0x200001ac
 800054c:	20000000 	.word	0x20000000
 8000550:	200000b8 	.word	0x200000b8
 8000554:	200001b6 	.word	0x200001b6
 8000558:	48000400 	.word	0x48000400

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	; 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fd56 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000582:	f001 f817 	bl	80015b4 <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 f918 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000590:	2310      	movs	r3, #16
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800059c:	23b0      	movs	r3, #176	; 0xb0
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f869 	bl	8001680 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005b4:	f000 f904 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	2102      	movs	r1, #2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fc6f 	bl	8001eb4 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005dc:	f000 f8f0 	bl	80007c0 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3758      	adds	r7, #88	; 0x58
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <MX_LPUART1_UART_Init+0x54>)
 80005f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_LPUART1_UART_Init+0x50>)
 8000626:	f003 f81f 	bl	8003668 <HAL_UART_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000630:	f000 f8c6 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000034 	.word	0x20000034
 800063c:	40008000 	.word	0x40008000

08000640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_SPI1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_SPI1_Init+0x74>)
 800064c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_SPI1_Init+0x74>)
 800065a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800065e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_SPI1_Init+0x74>)
 800066e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000672:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000676:	2228      	movs	r2, #40	; 0x28
 8000678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_SPI1_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_SPI1_Init+0x74>)
 800068e:	2207      	movs	r2, #7
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_SPI1_Init+0x74>)
 800069a:	2208      	movs	r2, #8
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_SPI1_Init+0x74>)
 80006a0:	f002 faf6 	bl	8002c90 <HAL_SPI_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f889 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000b8 	.word	0x200000b8
 80006b8:	40013000 	.word	0x40013000

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_DMA_Init+0x48>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <MX_DMA_Init+0x48>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6493      	str	r3, [r2, #72]	; 0x48
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_DMA_Init+0x48>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200c      	movs	r0, #12
 80006e0:	f000 fb81 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006e4:	200c      	movs	r0, #12
 80006e6:	f000 fb9a 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	200d      	movs	r0, #13
 80006f0:	f000 fb79 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006f4:	200d      	movs	r0, #13
 80006f6:	f000 fb92 	bl	8000e1e <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_GPIO_Init+0x90>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <MX_GPIO_Init+0x90>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_GPIO_Init+0x90>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_GPIO_Init+0x90>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_GPIO_Init+0x90>)
 800073c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0x90>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800074e:	f000 ff87 	bl	8001660 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_GPIO_Init+0x90>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <MX_GPIO_Init+0x90>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_GPIO_Init+0x90>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x94>)
 8000770:	f000 fefa 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x94>)
 800078c:	f000 fd5a 	bl	8001244 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000400 	.word	0x48000400

080007a0 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
//	while(1);
	flag = 1;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <HAL_SPI_TxRxCpltCallback+0x1c>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200001b6 	.word	0x200001b6

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_MspInit+0x44>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6613      	str	r3, [r2, #96]	; 0x60
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x44>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6593      	str	r3, [r2, #88]	; 0x58
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0ac      	sub	sp, #176	; 0xb0
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	228c      	movs	r2, #140	; 0x8c
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fbf1 	bl	800401c <memset>
  if(huart->Instance==LPUART1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <HAL_UART_MspInit+0xb4>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d13d      	bne.n	80008c0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000844:	2320      	movs	r3, #32
 8000846:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000848:	2300      	movs	r3, #0
 800084a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fd53 	bl	80022fc <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800085c:	f7ff ffb0 	bl	80007c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <HAL_UART_MspInit+0xb8>)
 8000862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_UART_MspInit+0xb8>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <HAL_UART_MspInit+0xb8>)
 800086e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_UART_MspInit+0xb8>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <HAL_UART_MspInit+0xb8>)
 800087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_UART_MspInit+0xb8>)
 8000886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000890:	f000 fee6 	bl	8001660 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000894:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ae:	2308      	movs	r3, #8
 80008b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <HAL_UART_MspInit+0xbc>)
 80008bc:	f000 fcc2 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	37b0      	adds	r7, #176	; 0xb0
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40008000 	.word	0x40008000
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48001800 	.word	0x48001800

080008d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <HAL_SPI_MspInit+0x120>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d17a      	bne.n	80009ec <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008f6:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <HAL_SPI_MspInit+0x124>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	4a3f      	ldr	r2, [pc, #252]	; (80009f8 <HAL_SPI_MspInit+0x124>)
 80008fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000900:	6613      	str	r3, [r2, #96]	; 0x60
 8000902:	4b3d      	ldr	r3, [pc, #244]	; (80009f8 <HAL_SPI_MspInit+0x124>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <HAL_SPI_MspInit+0x124>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a39      	ldr	r2, [pc, #228]	; (80009f8 <HAL_SPI_MspInit+0x124>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <HAL_SPI_MspInit+0x124>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000926:	23c2      	movs	r3, #194	; 0xc2
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000936:	2305      	movs	r3, #5
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f000 fc7e 	bl	8001244 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <HAL_SPI_MspInit+0x128>)
 800094a:	4a2d      	ldr	r2, [pc, #180]	; (8000a00 <HAL_SPI_MspInit+0x12c>)
 800094c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000950:	2201      	movs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000956:	2210      	movs	r2, #16
 8000958:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <HAL_SPI_MspInit+0x128>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <HAL_SPI_MspInit+0x128>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_SPI_MspInit+0x128>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800097e:	481f      	ldr	r0, [pc, #124]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000980:	f000 fa68 	bl	8000e54 <HAL_DMA_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800098a:	f7ff ff19 	bl	80007c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
 8000994:	4a19      	ldr	r2, [pc, #100]	; (80009fc <HAL_SPI_MspInit+0x128>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 800099c:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <HAL_SPI_MspInit+0x134>)
 800099e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009d2:	f000 fa3f 	bl	8000e54 <HAL_DMA_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80009dc:	f7ff fef0 	bl	80007c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009e4:	659a      	str	r2, [r3, #88]	; 0x58
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_SPI_MspInit+0x130>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40013000 	.word	0x40013000
 80009f8:	40021000 	.word	0x40021000
 80009fc:	2000011c 	.word	0x2000011c
 8000a00:	40020030 	.word	0x40020030
 8000a04:	20000164 	.word	0x20000164
 8000a08:	4002001c 	.word	0x4002001c

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8a6 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <DMA1_Channel2_IRQHandler+0x10>)
 8000a66:	f000 fb0d 	bl	8001084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000164 	.word	0x20000164

08000a74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <DMA1_Channel3_IRQHandler+0x10>)
 8000a7a:	f000 fb03 	bl	8001084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000011c 	.word	0x2000011c

08000a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab0:	f7ff ffea 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	; (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ada:	f003 fa7b 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ade:	f7ff fd07 	bl	80004f0 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000af0:	0800409c 	.word	0x0800409c
  ldr r2, =_sbss
 8000af4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000af8:	200001bc 	.word	0x200001bc

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>

08000afe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f961 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f80e 	bl	8000b30 <HAL_InitTick>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e001      	b.n	8000b24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b20:	f7ff fe54 	bl	80007cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_InitTick+0x6c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d023      	beq.n	8000b8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_InitTick+0x70>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_InitTick+0x6c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f96d 	bl	8000e3a <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10f      	bne.n	8000b86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d809      	bhi.n	8000b80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	f000 f937 	bl	8000de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_InitTick+0x74>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e007      	b.n	8000b90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e004      	b.n	8000b90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e001      	b.n	8000b90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000014 	.word	0x20000014
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000010 	.word	0x20000010

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000014 	.word	0x20000014
 8000bcc:	200001b8 	.word	0x200001b8

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200001b8 	.word	0x200001b8

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000014 	.word	0x20000014

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff3e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff31 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e098      	b.n	8000f98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <HAL_DMA_Init+0x150>)
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d80f      	bhi.n	8000e92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_DMA_Init+0x154>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_DMA_Init+0x158>)
 8000e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	009a      	lsls	r2, r3, #2
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_DMA_Init+0x15c>)
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e90:	e00e      	b.n	8000eb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <HAL_DMA_Init+0x160>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a43      	ldr	r2, [pc, #268]	; (8000fac <HAL_DMA_Init+0x158>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a42      	ldr	r2, [pc, #264]	; (8000fb8 <HAL_DMA_Init+0x164>)
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f0a:	d039      	beq.n	8000f80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <HAL_DMA_Init+0x15c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d11a      	bne.n	8000f4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f003 031c 	and.w	r3, r3, #28
 8000f22:	210f      	movs	r1, #15
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	4924      	ldr	r1, [pc, #144]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3c:	f003 031c 	and.w	r3, r3, #28
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	491d      	ldr	r1, [pc, #116]	; (8000fbc <HAL_DMA_Init+0x168>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
 8000f4a:	e019      	b.n	8000f80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	f003 031c 	and.w	r3, r3, #28
 8000f58:	210f      	movs	r1, #15
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4917      	ldr	r1, [pc, #92]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6859      	ldr	r1, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f003 031c 	and.w	r3, r3, #28
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	4911      	ldr	r1, [pc, #68]	; (8000fc0 <HAL_DMA_Init+0x16c>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40020407 	.word	0x40020407
 8000fa8:	bffdfff8 	.word	0xbffdfff8
 8000fac:	cccccccd 	.word	0xcccccccd
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	bffdfbf8 	.word	0xbffdfbf8
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	400200a8 	.word	0x400200a8
 8000fc0:	400204a8 	.word	0x400204a8

08000fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_DMA_Start_IT+0x20>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e04b      	b.n	800107c <HAL_DMA_Start_IT+0xb8>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d13a      	bne.n	800106e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68b9      	ldr	r1, [r7, #8]
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 f8e0 	bl	80011e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 020e 	orr.w	r2, r2, #14
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e00f      	b.n	800105c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0204 	bic.w	r2, r2, #4
 800104a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 020a 	orr.w	r2, r2, #10
 800105a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0201 	orr.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e005      	b.n	800107a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001076:	2302      	movs	r3, #2
 8001078:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800107a:	7dfb      	ldrb	r3, [r7, #23]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	f003 031c 	and.w	r3, r3, #28
 80010a4:	2204      	movs	r2, #4
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d026      	beq.n	80010fe <HAL_DMA_IRQHandler+0x7a>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d021      	beq.n	80010fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d107      	bne.n	80010d8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0204 	bic.w	r2, r2, #4
 80010d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	f003 021c 	and.w	r2, r3, #28
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	2104      	movs	r1, #4
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d071      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80010fc:	e06c      	b.n	80011d8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f003 031c 	and.w	r3, r3, #28
 8001106:	2202      	movs	r2, #2
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d02e      	beq.n	8001170 <HAL_DMA_IRQHandler+0xec>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d029      	beq.n	8001170 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10b      	bne.n	8001142 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 020a 	bic.w	r2, r2, #10
 8001138:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f003 021c 	and.w	r2, r3, #28
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2102      	movs	r1, #2
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	2b00      	cmp	r3, #0
 8001164:	d038      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800116e:	e033      	b.n	80011d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f003 031c 	and.w	r3, r3, #28
 8001178:	2208      	movs	r2, #8
 800117a:	409a      	lsls	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d02a      	beq.n	80011da <HAL_DMA_IRQHandler+0x156>
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	2b00      	cmp	r3, #0
 800118c:	d025      	beq.n	80011da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 020e 	bic.w	r2, r2, #14
 800119c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f003 021c 	and.w	r2, r3, #28
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
}
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f003 021c 	and.w	r2, r3, #28
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b10      	cmp	r3, #16
 8001212:	d108      	bne.n	8001226 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001224:	e007      	b.n	8001236 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	60da      	str	r2, [r3, #12]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	e166      	b.n	8001522 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2101      	movs	r1, #1
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8158 	beq.w	800151c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d005      	beq.n	8001284 <HAL_GPIO_Init+0x40>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d130      	bne.n	80012e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ba:	2201      	movs	r2, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	f003 0201 	and.w	r2, r3, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d017      	beq.n	8001322 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d123      	bne.n	8001376 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	6939      	ldr	r1, [r7, #16]
 8001372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0203 	and.w	r2, r3, #3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80b2 	beq.w	800151c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	4b61      	ldr	r3, [pc, #388]	; (8001540 <HAL_GPIO_Init+0x2fc>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	4a60      	ldr	r2, [pc, #384]	; (8001540 <HAL_GPIO_Init+0x2fc>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6613      	str	r3, [r2, #96]	; 0x60
 80013c4:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_GPIO_Init+0x2fc>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d0:	4a5c      	ldr	r2, [pc, #368]	; (8001544 <HAL_GPIO_Init+0x300>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013fa:	d02b      	beq.n	8001454 <HAL_GPIO_Init+0x210>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a52      	ldr	r2, [pc, #328]	; (8001548 <HAL_GPIO_Init+0x304>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d025      	beq.n	8001450 <HAL_GPIO_Init+0x20c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a51      	ldr	r2, [pc, #324]	; (800154c <HAL_GPIO_Init+0x308>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d01f      	beq.n	800144c <HAL_GPIO_Init+0x208>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a50      	ldr	r2, [pc, #320]	; (8001550 <HAL_GPIO_Init+0x30c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d019      	beq.n	8001448 <HAL_GPIO_Init+0x204>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <HAL_GPIO_Init+0x310>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d013      	beq.n	8001444 <HAL_GPIO_Init+0x200>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a4e      	ldr	r2, [pc, #312]	; (8001558 <HAL_GPIO_Init+0x314>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00d      	beq.n	8001440 <HAL_GPIO_Init+0x1fc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a4d      	ldr	r2, [pc, #308]	; (800155c <HAL_GPIO_Init+0x318>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d007      	beq.n	800143c <HAL_GPIO_Init+0x1f8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a4c      	ldr	r2, [pc, #304]	; (8001560 <HAL_GPIO_Init+0x31c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_GPIO_Init+0x1f4>
 8001434:	2307      	movs	r3, #7
 8001436:	e00e      	b.n	8001456 <HAL_GPIO_Init+0x212>
 8001438:	2308      	movs	r3, #8
 800143a:	e00c      	b.n	8001456 <HAL_GPIO_Init+0x212>
 800143c:	2306      	movs	r3, #6
 800143e:	e00a      	b.n	8001456 <HAL_GPIO_Init+0x212>
 8001440:	2305      	movs	r3, #5
 8001442:	e008      	b.n	8001456 <HAL_GPIO_Init+0x212>
 8001444:	2304      	movs	r3, #4
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x212>
 8001448:	2303      	movs	r3, #3
 800144a:	e004      	b.n	8001456 <HAL_GPIO_Init+0x212>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x212>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_GPIO_Init+0x212>
 8001454:	2300      	movs	r3, #0
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4093      	lsls	r3, r2
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001466:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_GPIO_Init+0x300>)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <HAL_GPIO_Init+0x320>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001498:	4a32      	ldr	r2, [pc, #200]	; (8001564 <HAL_GPIO_Init+0x320>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_GPIO_Init+0x320>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c2:	4a28      	ldr	r2, [pc, #160]	; (8001564 <HAL_GPIO_Init+0x320>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_GPIO_Init+0x320>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ec:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <HAL_GPIO_Init+0x320>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_GPIO_Init+0x320>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_GPIO_Init+0x320>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa22 f303 	lsr.w	r3, r2, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	f47f ae91 	bne.w	8001254 <HAL_GPIO_Init+0x10>
  }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	48001000 	.word	0x48001000
 8001558:	48001400 	.word	0x48001400
 800155c:	48001800 	.word	0x48001800
 8001560:	48001c00 	.word	0x48001c00
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001578:	787b      	ldrb	r3, [r7, #1]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001584:	e002      	b.n	800158c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000

080015b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c2:	d130      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d0:	d038      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2232      	movs	r2, #50	; 0x32
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f8:	e002      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160c:	d102      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x60>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f2      	bne.n	80015fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001620:	d110      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e00f      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d007      	beq.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001642:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	2000000c 	.word	0x2000000c
 800165c:	431bde83 	.word	0x431bde83

08001660 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_PWREx_EnableVddIO2+0x1c>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6053      	str	r3, [r2, #4]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f000 bc08 	b.w	8001ea4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169e:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80e4 	beq.w	800187e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_RCC_OscConfig+0x4c>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	f040 808b 	bne.w	80017da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	f040 8087 	bne.w	80017da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x64>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e3df      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1a      	ldr	r2, [r3, #32]
 80016e8:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_RCC_OscConfig+0x7e>
 80016f4:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fc:	e005      	b.n	800170a <HAL_RCC_OscConfig+0x8a>
 80016fe:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170a:	4293      	cmp	r3, r2
 800170c:	d223      	bcs.n	8001756 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd92 	bl	800223c <RCC_SetFlashLatencyFromMSIRange>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3c0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	496d      	ldr	r1, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	4968      	ldr	r1, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e025      	b.n	80017a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a65      	ldr	r2, [pc, #404]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4960      	ldr	r1, [pc, #384]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	495b      	ldr	r1, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd52 	bl	800223c <RCC_SetFlashLatencyFromMSIRange>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e380      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a2:	f000 fc87 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	4950      	ldr	r1, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x274>)
 80017b4:	5ccb      	ldrb	r3, [r1, r3]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	4a4e      	ldr	r2, [pc, #312]	; (80018f8 <HAL_RCC_OscConfig+0x278>)
 80017c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_RCC_OscConfig+0x27c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f9b2 	bl	8000b30 <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d052      	beq.n	800187c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	e364      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d032      	beq.n	8001848 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ee:	f7ff f9ef 	bl	8000bd0 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f6:	f7ff f9eb 	bl	8000bd0 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e34d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4930      	ldr	r1, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	492b      	ldr	r1, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
 8001846:	e01a      	b.n	800187e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001854:	f7ff f9bc 	bl	8000bd0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185c:	f7ff f9b8 	bl	8000bd0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e31a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x1dc>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d073      	beq.n	8001972 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x21c>
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d10e      	bne.n	80018b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d10b      	bne.n	80018b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d063      	beq.n	8001970 <HAL_RCC_OscConfig+0x2f0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d15f      	bne.n	8001970 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e2f7      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x24c>
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e025      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d114      	bne.n	8001900 <HAL_RCC_OscConfig+0x280>
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a02      	ldr	r2, [pc, #8]	; (80018f0 <HAL_RCC_OscConfig+0x270>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e013      	b.n	8001918 <HAL_RCC_OscConfig+0x298>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08004044 	.word	0x08004044
 80018f8:	2000000c 	.word	0x2000000c
 80018fc:	20000010 	.word	0x20000010
 8001900:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a9f      	ldr	r2, [pc, #636]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b9d      	ldr	r3, [pc, #628]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a9c      	ldr	r2, [pc, #624]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f956 	bl	8000bd0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff f952 	bl	8000bd0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e2b4      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193a:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x2a8>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff f942 	bl	8000bd0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff f93e 	bl	8000bd0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e2a0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x2d0>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d060      	beq.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x310>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d119      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d116      	bne.n	80019be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001990:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_OscConfig+0x328>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e27d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	4973      	ldr	r1, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	e040      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d023      	beq.n	8001a0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c6:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff f8fd 	bl	8000bd0 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f8f9 	bl	8000bd0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e25b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b62      	ldr	r3, [pc, #392]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	495f      	ldr	r1, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b5d      	ldr	r3, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5c      	ldr	r2, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f8d9 	bl	8000bd0 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff f8d5 	bl	8000bd0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e237      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f8b4 	bl	8000bd0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6c:	f7ff f8b0 	bl	8000bd0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e212      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ef      	beq.n	8001a6c <HAL_RCC_OscConfig+0x3ec>
 8001a8c:	e01b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f897 	bl	8000bd0 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f893 	bl	8000bd0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1f5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80a6 	beq.w	8001c20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d118      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f85a 	bl	8000bd0 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b20:	f7ff f856 	bl	8000bd0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1b8      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_RCC_OscConfig+0x508>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x4d8>
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b56:	e029      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d115      	bne.n	8001b8c <HAL_RCC_OscConfig+0x50c>
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b80:	e014      	b.n	8001bac <HAL_RCC_OscConfig+0x52c>
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	4b9d      	ldr	r3, [pc, #628]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a9c      	ldr	r2, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9c:	4b99      	ldr	r3, [pc, #612]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a98      	ldr	r2, [pc, #608]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f80c 	bl	8000bd0 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f808 	bl	8000bd0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e168      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd2:	4b8c      	ldr	r3, [pc, #560]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ed      	beq.n	8001bbc <HAL_RCC_OscConfig+0x53c>
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7fe fff5 	bl	8000bd0 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7fe fff1 	bl	8000bd0 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e151      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ed      	bne.n	8001bea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c34:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c3a:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7fe ffc4 	bl	8000bd0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4c:	f7fe ffc0 	bl	8000bd0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e122      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5e:	4b69      	ldr	r3, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ef      	beq.n	8001c4c <HAL_RCC_OscConfig+0x5cc>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c6e:	4b65      	ldr	r3, [pc, #404]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7fe ffa7 	bl	8000bd0 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c86:	f7fe ffa3 	bl	8000bd0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e105      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80f9 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	f040 80cf 	bne.w	8001e58 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cba:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f003 0203 	and.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d12c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d123      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d11b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d113      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d109      	bne.n	8001d28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	3b01      	subs	r3, #1
 8001d22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d071      	beq.n	8001e0c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d068      	beq.n	8001e00 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d3a:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0ac      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d56:	f7fe ff3b 	bl	8000bd0 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe ff37 	bl	8000bd0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e099      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_RCC_OscConfig+0x788>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d96:	0212      	lsls	r2, r2, #8
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d9e:	0852      	lsrs	r2, r2, #1
 8001da0:	3a01      	subs	r2, #1
 8001da2:	0552      	lsls	r2, r2, #21
 8001da4:	4311      	orrs	r1, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001daa:	0852      	lsrs	r2, r2, #1
 8001dac:	3a01      	subs	r2, #1
 8001dae:	0652      	lsls	r2, r2, #25
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db6:	06d2      	lsls	r2, r2, #27
 8001db8:	430a      	orrs	r2, r1
 8001dba:	4912      	ldr	r1, [pc, #72]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd8:	f7fe fefa 	bl	8000bd0 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe fef6 	bl	8000bd0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e058      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <HAL_RCC_OscConfig+0x784>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfe:	e050      	b.n	8001ea2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d144      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e18:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e30:	f7fe fece 	bl	8000bd0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe feca 	bl	8000bd0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e02c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x7b8>
 8001e56:	e024      	b.n	8001ea2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d01f      	beq.n	8001e9e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe feb1 	bl	8000bd0 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe fead 	bl	8000bd0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4905      	ldr	r1, [pc, #20]	; (8001eac <HAL_RCC_OscConfig+0x82c>)
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_OscConfig+0x830>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]
 8001e9c:	e001      	b.n	8001ea2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	feeefffc 	.word	0xfeeefffc

08001eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0e7      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4970      	ldr	r1, [pc, #448]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b6e      	ldr	r3, [pc, #440]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0cf      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d010      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d908      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4960      	ldr	r1, [pc, #384]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04c      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0a6      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e09a      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e08e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e086      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4943      	ldr	r1, [pc, #268]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fe18 	bl	8000bd0 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fe14 	bl	8000bd0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06e      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	492b      	ldr	r1, [pc, #172]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffa:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d210      	bcs.n	800202a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	4923      	ldr	r1, [pc, #140]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_ClockConfig+0x1ec>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e036      	b.n	8002098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4918      	ldr	r1, [pc, #96]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d009      	beq.n	8002068 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4910      	ldr	r1, [pc, #64]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002068:	f000 f824 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	490b      	ldr	r1, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1f4>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1fc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fd4f 	bl	8000b30 <HAL_InitTick>
 8002092:	4603      	mov	r3, r0
 8002094:	72fb      	strb	r3, [r7, #11]

  return status;
 8002096:	7afb      	ldrb	r3, [r7, #11]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08004044 	.word	0x08004044
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	20000010 	.word	0x20000010

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x34>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d121      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d11e      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e8:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	e005      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002124:	e00a      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d102      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e004      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d101      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002138:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800213a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d134      	bne.n	80021ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0xa6>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d003      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xac>
 8002158:	e005      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002162:	617b      	str	r3, [r7, #20]
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fb03 f202 	mul.w	r2, r3, r2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0e5b      	lsrs	r3, r3, #25
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	3301      	adds	r3, #1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021ac:	69bb      	ldr	r3, [r7, #24]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	0800405c 	.word	0x0800405c
 80021c4:	00f42400 	.word	0x00f42400
 80021c8:	007a1200 	.word	0x007a1200

080021cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	2000000c 	.word	0x2000000c

080021e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021e8:	f7ff fff0 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4904      	ldr	r1, [pc, #16]	; (800220c <HAL_RCC_GetPCLK1Freq+0x28>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08004054 	.word	0x08004054

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002214:	f7ff ffda 	bl	80021cc <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0adb      	lsrs	r3, r3, #11
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4904      	ldr	r1, [pc, #16]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08004054 	.word	0x08004054

0800223c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002254:	f7ff f9a0 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 8002258:	6178      	str	r0, [r7, #20]
 800225a:	e014      	b.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002266:	6593      	str	r3, [r2, #88]	; 0x58
 8002268:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff f990 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 8002278:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228c:	d10b      	bne.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b80      	cmp	r3, #128	; 0x80
 8002292:	d919      	bls.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2ba0      	cmp	r3, #160	; 0xa0
 8002298:	d902      	bls.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800229a:	2302      	movs	r3, #2
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e013      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a0:	2301      	movs	r3, #1
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	e010      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b80      	cmp	r3, #128	; 0x80
 80022aa:	d902      	bls.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022ac:	2303      	movs	r3, #3
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e00a      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d102      	bne.n	80022be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022b8:	2302      	movs	r3, #2
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	e004      	b.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b70      	cmp	r3, #112	; 0x70
 80022c2:	d101      	bne.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 0207 	bic.w	r2, r3, #7
 80022d0:	4909      	ldr	r1, [pc, #36]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40022000 	.word	0x40022000

080022fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002304:	2300      	movs	r3, #0
 8002306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002308:	2300      	movs	r3, #0
 800230a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002314:	2b00      	cmp	r3, #0
 8002316:	d041      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800231c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002320:	d02a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002326:	d824      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800232e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002332:	d81e      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233c:	d010      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800233e:	e018      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002340:	4b86      	ldr	r3, [pc, #536]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a85      	ldr	r2, [pc, #532]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234c:	e015      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f000 facd 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800235e:	e00c      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3320      	adds	r3, #32
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fbb6 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002370:	e003      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	74fb      	strb	r3, [r7, #19]
      break;
 8002376:	e000      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002380:	4b76      	ldr	r3, [pc, #472]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800238e:	4973      	ldr	r1, [pc, #460]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002396:	e001      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d041      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023b0:	d02a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023b6:	d824      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023bc:	d008      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023c2:	d81e      	bhi.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d010      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023ce:	e018      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023d0:	4b62      	ldr	r3, [pc, #392]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a61      	ldr	r2, [pc, #388]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023dc:	e015      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fa85 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ee:	e00c      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3320      	adds	r3, #32
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fb6e 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002400:	e003      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	74fb      	strb	r3, [r7, #19]
      break;
 8002406:	e000      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002410:	4b52      	ldr	r3, [pc, #328]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241e:	494f      	ldr	r1, [pc, #316]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002426:	e001      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a0 	beq.w	800257a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	4a40      	ldr	r2, [pc, #256]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	6593      	str	r3, [r2, #88]	; 0x58
 8002460:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246c:	2301      	movs	r3, #1
 800246e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002470:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a3a      	ldr	r2, [pc, #232]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800247c:	f7fe fba8 	bl	8000bd0 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002482:	e009      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002484:	f7fe fba4 	bl	8000bd0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d902      	bls.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	74fb      	strb	r3, [r7, #19]
        break;
 8002496:	e005      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ef      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d15c      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01f      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d019      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a20      	ldr	r2, [pc, #128]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe fb63 	bl	8000bd0 <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250c:	e00b      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fb5f 	bl	8000bd0 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d902      	bls.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	74fb      	strb	r3, [r7, #19]
            break;
 8002524:	e006      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ec      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4904      	ldr	r1, [pc, #16]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002552:	e009      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
 8002558:	e006      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002568:	7c7b      	ldrb	r3, [r7, #17]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4ba6      	ldr	r3, [pc, #664]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	4aa5      	ldr	r2, [pc, #660]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002578:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002586:	4ba0      	ldr	r3, [pc, #640]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258c:	f023 0203 	bic.w	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	499c      	ldr	r1, [pc, #624]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a8:	4b97      	ldr	r3, [pc, #604]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	f023 020c 	bic.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	4994      	ldr	r1, [pc, #592]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ca:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	498b      	ldr	r1, [pc, #556]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ec:	4b86      	ldr	r3, [pc, #536]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4983      	ldr	r1, [pc, #524]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800260e:	4b7e      	ldr	r3, [pc, #504]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	497a      	ldr	r1, [pc, #488]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002630:	4b75      	ldr	r3, [pc, #468]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	4972      	ldr	r1, [pc, #456]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002652:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	4969      	ldr	r1, [pc, #420]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002674:	4b64      	ldr	r3, [pc, #400]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002682:	4961      	ldr	r1, [pc, #388]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002696:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	4958      	ldr	r1, [pc, #352]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	4950      	ldr	r1, [pc, #320]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026da:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4947      	ldr	r1, [pc, #284]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	493f      	ldr	r1, [pc, #252]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d028      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4936      	ldr	r1, [pc, #216]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273c:	d106      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273e:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002748:	60d3      	str	r3, [r2, #12]
 800274a:	e011      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002754:	d10c      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2101      	movs	r1, #1
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f8c9 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d028      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278a:	491f      	ldr	r1, [pc, #124]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279a:	d106      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a6:	60d3      	str	r3, [r2, #12]
 80027a8:	e011      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b2:	d10c      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f89a 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e8:	4907      	ldr	r1, [pc, #28]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f8:	d108      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027fa:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a02      	ldr	r2, [pc, #8]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002804:	60d3      	str	r3, [r2, #12]
 8002806:	e013      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002808:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f869 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284a:	4929      	ldr	r1, [pc, #164]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800285a:	d10d      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f846 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d014      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	74bb      	strb	r3, [r7, #18]
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3320      	adds	r3, #32
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f925 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028b8:	490d      	ldr	r1, [pc, #52]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028dc:	4904      	ldr	r1, [pc, #16]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000

080028f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002902:	4b74      	ldr	r3, [pc, #464]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d018      	beq.n	8002940 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800290e:	4b71      	ldr	r3, [pc, #452]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
       ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002926:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
       ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d047      	beq.n	80029ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e044      	b.n	80029ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d018      	beq.n	800297a <RCCEx_PLLSAI1_Config+0x86>
 8002948:	2b03      	cmp	r3, #3
 800294a:	d825      	bhi.n	8002998 <RCCEx_PLLSAI1_Config+0xa4>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d002      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0x62>
 8002950:	2b02      	cmp	r3, #2
 8002952:	d009      	beq.n	8002968 <RCCEx_PLLSAI1_Config+0x74>
 8002954:	e020      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002956:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002966:	e01a      	b.n	800299e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002968:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002978:	e013      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800297a:	4b56      	ldr	r3, [pc, #344]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002986:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002996:	e006      	b.n	80029a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e004      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ae:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	430b      	orrs	r3, r1
 80029c4:	4943      	ldr	r1, [pc, #268]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d17c      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029d0:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a3f      	ldr	r2, [pc, #252]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe f8f8 	bl	8000bd0 <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029e2:	e009      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e4:	f7fe f8f4 	bl	8000bd0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	73fb      	strb	r3, [r7, #15]
        break;
 80029f6:	e005      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ef      	bne.n	80029e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d15f      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d110      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6892      	ldr	r2, [r2, #8]
 8002a20:	0211      	lsls	r1, r2, #8
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	06d2      	lsls	r2, r2, #27
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	492a      	ldr	r1, [pc, #168]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	610b      	str	r3, [r1, #16]
 8002a30:	e027      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d112      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6892      	ldr	r2, [r2, #8]
 8002a48:	0211      	lsls	r1, r2, #8
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6912      	ldr	r2, [r2, #16]
 8002a4e:	0852      	lsrs	r2, r2, #1
 8002a50:	3a01      	subs	r2, #1
 8002a52:	0552      	lsls	r2, r2, #21
 8002a54:	430a      	orrs	r2, r1
 8002a56:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	610b      	str	r3, [r1, #16]
 8002a5c:	e011      	b.n	8002a82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6892      	ldr	r2, [r2, #8]
 8002a6e:	0211      	lsls	r1, r2, #8
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6952      	ldr	r2, [r2, #20]
 8002a74:	0852      	lsrs	r2, r2, #1
 8002a76:	3a01      	subs	r2, #1
 8002a78:	0652      	lsls	r2, r2, #25
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	4915      	ldr	r1, [pc, #84]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7fe f89f 	bl	8000bd0 <HAL_GetTick>
 8002a92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a94:	e009      	b.n	8002aaa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a96:	f7fe f89b 	bl	8000bd0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d902      	bls.n	8002aaa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa8:	e005      	b.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ef      	beq.n	8002a96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae6:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
       ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b0a:	4b60      	ldr	r3, [pc, #384]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
       ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d047      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e044      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d018      	beq.n	8002b5e <RCCEx_PLLSAI2_Config+0x86>
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d825      	bhi.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x62>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d009      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x74>
 8002b38:	e020      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e01a      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e013      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b6a:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b7a:	e006      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e004      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b92:	4b3e      	ldr	r3, [pc, #248]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	4938      	ldr	r1, [pc, #224]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d166      	bne.n	8002c82 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a34      	ldr	r2, [pc, #208]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f806 	bl	8000bd0 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bc6:	e009      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc8:	f7fe f802 	bl	8000bd0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bda:	e005      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ef      	bne.n	8002bc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d149      	bne.n	8002c82 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d110      	bne.n	8002c16 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	0211      	lsls	r1, r2, #8
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	06d2      	lsls	r2, r2, #27
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	491f      	ldr	r1, [pc, #124]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	614b      	str	r3, [r1, #20]
 8002c14:	e011      	b.n	8002c3a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6892      	ldr	r2, [r2, #8]
 8002c26:	0211      	lsls	r1, r2, #8
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6912      	ldr	r2, [r2, #16]
 8002c2c:	0852      	lsrs	r2, r2, #1
 8002c2e:	3a01      	subs	r2, #1
 8002c30:	0652      	lsls	r2, r2, #25
 8002c32:	430a      	orrs	r2, r1
 8002c34:	4915      	ldr	r1, [pc, #84]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fd ffc3 	bl	8000bd0 <HAL_GetTick>
 8002c4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c4c:	e009      	b.n	8002c62 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c4e:	f7fd ffbf 	bl	8000bd0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d902      	bls.n	8002c62 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c60:	e005      	b.n	8002c6e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ef      	beq.n	8002c4e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	4903      	ldr	r1, [pc, #12]	; (8002c8c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e095      	b.n	8002dce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d108      	bne.n	8002cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb2:	d009      	beq.n	8002cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
 8002cba:	e005      	b.n	8002cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fd fdf6 	bl	80008d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d08:	d902      	bls.n	8002d10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e002      	b.n	8002d16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d1e:	d007      	beq.n	8002d30 <HAL_SPI_Init+0xa0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d28:	d002      	beq.n	8002d30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	ea42 0103 	orr.w	r1, r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	0c1b      	lsrs	r3, r3, #16
 8002d8c:	f003 0204 	and.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e16c      	b.n	80030d2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e06:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002e0e:	7dbb      	ldrb	r3, [r7, #22]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d00d      	beq.n	8002e30 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1a:	d106      	bne.n	8002e2a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <HAL_SPI_TransmitReceive_DMA+0x52>
 8002e24:	7dbb      	ldrb	r3, [r7, #22]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e2e:	e14b      	b.n	80030c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e46:	e13f      	b.n	80030c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d003      	beq.n	8002e5c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2205      	movs	r2, #5
 8002e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	887a      	ldrh	r2, [r7, #2]
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002ea4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eae:	d908      	bls.n	8002ec2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	e06f      	b.n	8002fa2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ed0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002edc:	d126      	bne.n	8002f2c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ef8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f08:	e010      	b.n	8002f2c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f18:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f36:	d134      	bne.n	8002fa2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f46:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f66:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f7a:	e012      	b.n	8002fa2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f8a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d108      	bne.n	8002fc0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	4a4a      	ldr	r2, [pc, #296]	; (80030dc <HAL_SPI_TransmitReceive_DMA+0x304>)
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	4a49      	ldr	r2, [pc, #292]	; (80030e0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fbe:	e007      	b.n	8002fd0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	4a47      	ldr	r2, [pc, #284]	; (80030e4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	4a46      	ldr	r2, [pc, #280]	; (80030e8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a45      	ldr	r2, [pc, #276]	; (80030ec <HAL_SPI_TransmitReceive_DMA+0x314>)
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	2200      	movs	r2, #0
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	4619      	mov	r1, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002ffa:	f7fd ffe3 	bl	8000fc4 <HAL_DMA_Start_IT>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00c      	beq.n	800301e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003008:	f043 0210 	orr.w	r2, r3, #16
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800301c:	e054      	b.n	80030c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303a:	2200      	movs	r2, #0
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	2200      	movs	r2, #0
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	2200      	movs	r2, #0
 800304c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	4619      	mov	r1, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003064:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003066:	f7fd ffad 	bl	8000fc4 <HAL_DMA_Start_IT>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	f043 0210 	orr.w	r2, r3, #16
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003088:	e01e      	b.n	80030c8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d007      	beq.n	80030a8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0220 	orr.w	r2, r2, #32
 80030b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0202 	orr.w	r2, r2, #2
 80030c6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	08003279 	.word	0x08003279
 80030e0:	08003141 	.word	0x08003141
 80030e4:	08003295 	.word	0x08003295
 80030e8:	080031e9 	.word	0x080031e9
 80030ec:	080032b1 	.word	0x080032b1

080030f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800314e:	f7fd fd3f 	bl	8000bd0 <HAL_GetTick>
 8003152:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	d03c      	beq.n	80031dc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0220 	bic.w	r2, r2, #32
 8003170:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <SPI_DMAReceiveCplt+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003182:	d108      	bne.n	8003196 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0203 	bic.w	r2, r2, #3
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	e007      	b.n	80031a6 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	2164      	movs	r1, #100	; 0x64
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f9be 	bl	800352c <SPI_EndRxTransaction>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff ffa9 	bl	800312c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80031da:	e002      	b.n	80031e2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff ff87 	bl	80030f0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f6:	f7fd fceb 	bl	8000bd0 <HAL_GetTick>
 80031fa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b20      	cmp	r3, #32
 8003208:	d030      	beq.n	800326c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0220 	bic.w	r2, r2, #32
 8003218:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	2164      	movs	r1, #100	; 0x64
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9dc 	bl	80035dc <SPI_EndRxTxTransaction>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0203 	bic.w	r2, r2, #3
 8003244:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff ff61 	bl	800312c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800326a:	e002      	b.n	8003272 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7fd fa97 	bl	80007a0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff ff3c 	bl	8003104 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7ff ff38 	bl	8003118 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0203 	bic.w	r2, r2, #3
 80032cc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff ff22 	bl	800312c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003300:	f7fd fc66 	bl	8000bd0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4413      	add	r3, r2
 800330e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003310:	f7fd fc5e 	bl	8000bd0 <HAL_GetTick>
 8003314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003316:	4b39      	ldr	r3, [pc, #228]	; (80033fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	015b      	lsls	r3, r3, #5
 800331c:	0d1b      	lsrs	r3, r3, #20
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	fb02 f303 	mul.w	r3, r2, r3
 8003324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003326:	e054      	b.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332e:	d050      	beq.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003330:	f7fd fc4e 	bl	8000bd0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	429a      	cmp	r2, r3
 800333e:	d902      	bls.n	8003346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d13d      	bne.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335e:	d111      	bne.n	8003384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d004      	beq.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d107      	bne.n	8003384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338c:	d10f      	bne.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e017      	b.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d19b      	bne.n	8003328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000000c 	.word	0x2000000c

08003400 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003412:	f7fd fbdd 	bl	8000bd0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	4413      	add	r3, r2
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003422:	f7fd fbd5 	bl	8000bd0 <HAL_GetTick>
 8003426:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003430:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00da      	lsls	r2, r3, #3
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	0d1b      	lsrs	r3, r3, #20
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003448:	e060      	b.n	800350c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003450:	d107      	bne.n	8003462 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003460:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003468:	d050      	beq.n	800350c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800346a:	f7fd fbb1 	bl	8000bd0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	429a      	cmp	r2, r3
 8003478:	d902      	bls.n	8003480 <SPI_WaitFifoStateUntilTimeout+0x80>
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d13d      	bne.n	80034fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800348e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003498:	d111      	bne.n	80034be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a2:	d004      	beq.n	80034ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ac:	d107      	bne.n	80034be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c6:	d10f      	bne.n	80034e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e010      	b.n	800351e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	3b01      	subs	r3, #1
 800350a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d196      	bne.n	800344a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000000c 	.word	0x2000000c

0800352c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003540:	d111      	bne.n	8003566 <SPI_EndRxTransaction+0x3a>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354a:	d004      	beq.n	8003556 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003554:	d107      	bne.n	8003566 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2200      	movs	r2, #0
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff febd 	bl	80032f0 <SPI_WaitFlagStateUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	f043 0220 	orr.w	r2, r3, #32
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e023      	b.n	80035d4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003594:	d11d      	bne.n	80035d2 <SPI_EndRxTransaction+0xa6>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359e:	d004      	beq.n	80035aa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a8:	d113      	bne.n	80035d2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7ff ff22 	bl	8003400 <SPI_WaitFifoStateUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e000      	b.n	80035d4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff ff03 	bl	8003400 <SPI_WaitFifoStateUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d007      	beq.n	8003610 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e027      	b.n	8003660 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2200      	movs	r2, #0
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff fe68 	bl	80032f0 <SPI_WaitFlagStateUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e014      	b.n	8003660 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2200      	movs	r2, #0
 800363e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fedc 	bl	8003400 <SPI_WaitFifoStateUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e000      	b.n	8003660 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e040      	b.n	80036fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd f8c2 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f82c 	bl	8003704 <UART_SetConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e022      	b.n	80036fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fad8 	bl	8003c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb5f 	bl	8003db8 <UART_CheckIdleState>
 80036fa:	4603      	mov	r3, r0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003708:	b08a      	sub	sp, #40	; 0x28
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4313      	orrs	r3, r2
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4ba4      	ldr	r3, [pc, #656]	; (80039c4 <UART_SetConfig+0x2c0>)
 8003734:	4013      	ands	r3, r2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800373c:	430b      	orrs	r3, r1
 800373e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a99      	ldr	r2, [pc, #612]	; (80039c8 <UART_SetConfig+0x2c4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d004      	beq.n	8003770 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	4313      	orrs	r3, r2
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a90      	ldr	r2, [pc, #576]	; (80039cc <UART_SetConfig+0x2c8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d126      	bne.n	80037dc <UART_SetConfig+0xd8>
 800378e:	4b90      	ldr	r3, [pc, #576]	; (80039d0 <UART_SetConfig+0x2cc>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d81b      	bhi.n	80037d4 <UART_SetConfig+0xd0>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <UART_SetConfig+0xa0>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037c5 	.word	0x080037c5
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037cd 	.word	0x080037cd
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e116      	b.n	80039ea <UART_SetConfig+0x2e6>
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e112      	b.n	80039ea <UART_SetConfig+0x2e6>
 80037c4:	2304      	movs	r3, #4
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e10e      	b.n	80039ea <UART_SetConfig+0x2e6>
 80037cc:	2308      	movs	r3, #8
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e10a      	b.n	80039ea <UART_SetConfig+0x2e6>
 80037d4:	2310      	movs	r3, #16
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e106      	b.n	80039ea <UART_SetConfig+0x2e6>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a7c      	ldr	r2, [pc, #496]	; (80039d4 <UART_SetConfig+0x2d0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d138      	bne.n	8003858 <UART_SetConfig+0x154>
 80037e6:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <UART_SetConfig+0x2cc>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	d82d      	bhi.n	8003850 <UART_SetConfig+0x14c>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0xf8>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003851 	.word	0x08003851
 8003804:	08003851 	.word	0x08003851
 8003808:	08003851 	.word	0x08003851
 800380c:	08003841 	.word	0x08003841
 8003810:	08003851 	.word	0x08003851
 8003814:	08003851 	.word	0x08003851
 8003818:	08003851 	.word	0x08003851
 800381c:	08003839 	.word	0x08003839
 8003820:	08003851 	.word	0x08003851
 8003824:	08003851 	.word	0x08003851
 8003828:	08003851 	.word	0x08003851
 800382c:	08003849 	.word	0x08003849
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003836:	e0d8      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003838:	2302      	movs	r3, #2
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	e0d4      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003840:	2304      	movs	r3, #4
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e0d0      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003848:	2308      	movs	r3, #8
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e0cc      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003850:	2310      	movs	r3, #16
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e0c8      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5e      	ldr	r2, [pc, #376]	; (80039d8 <UART_SetConfig+0x2d4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d125      	bne.n	80038ae <UART_SetConfig+0x1aa>
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <UART_SetConfig+0x2cc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800386c:	2b30      	cmp	r3, #48	; 0x30
 800386e:	d016      	beq.n	800389e <UART_SetConfig+0x19a>
 8003870:	2b30      	cmp	r3, #48	; 0x30
 8003872:	d818      	bhi.n	80038a6 <UART_SetConfig+0x1a2>
 8003874:	2b20      	cmp	r3, #32
 8003876:	d00a      	beq.n	800388e <UART_SetConfig+0x18a>
 8003878:	2b20      	cmp	r3, #32
 800387a:	d814      	bhi.n	80038a6 <UART_SetConfig+0x1a2>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <UART_SetConfig+0x182>
 8003880:	2b10      	cmp	r3, #16
 8003882:	d008      	beq.n	8003896 <UART_SetConfig+0x192>
 8003884:	e00f      	b.n	80038a6 <UART_SetConfig+0x1a2>
 8003886:	2300      	movs	r3, #0
 8003888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388c:	e0ad      	b.n	80039ea <UART_SetConfig+0x2e6>
 800388e:	2302      	movs	r3, #2
 8003890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003894:	e0a9      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003896:	2304      	movs	r3, #4
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389c:	e0a5      	b.n	80039ea <UART_SetConfig+0x2e6>
 800389e:	2308      	movs	r3, #8
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a4:	e0a1      	b.n	80039ea <UART_SetConfig+0x2e6>
 80038a6:	2310      	movs	r3, #16
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ac:	e09d      	b.n	80039ea <UART_SetConfig+0x2e6>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <UART_SetConfig+0x2d8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d125      	bne.n	8003904 <UART_SetConfig+0x200>
 80038b8:	4b45      	ldr	r3, [pc, #276]	; (80039d0 <UART_SetConfig+0x2cc>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038c2:	2bc0      	cmp	r3, #192	; 0xc0
 80038c4:	d016      	beq.n	80038f4 <UART_SetConfig+0x1f0>
 80038c6:	2bc0      	cmp	r3, #192	; 0xc0
 80038c8:	d818      	bhi.n	80038fc <UART_SetConfig+0x1f8>
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d00a      	beq.n	80038e4 <UART_SetConfig+0x1e0>
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d814      	bhi.n	80038fc <UART_SetConfig+0x1f8>
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <UART_SetConfig+0x1d8>
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d008      	beq.n	80038ec <UART_SetConfig+0x1e8>
 80038da:	e00f      	b.n	80038fc <UART_SetConfig+0x1f8>
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e2:	e082      	b.n	80039ea <UART_SetConfig+0x2e6>
 80038e4:	2302      	movs	r3, #2
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e07e      	b.n	80039ea <UART_SetConfig+0x2e6>
 80038ec:	2304      	movs	r3, #4
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e07a      	b.n	80039ea <UART_SetConfig+0x2e6>
 80038f4:	2308      	movs	r3, #8
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e076      	b.n	80039ea <UART_SetConfig+0x2e6>
 80038fc:	2310      	movs	r3, #16
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e072      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <UART_SetConfig+0x2dc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d12a      	bne.n	8003964 <UART_SetConfig+0x260>
 800390e:	4b30      	ldr	r3, [pc, #192]	; (80039d0 <UART_SetConfig+0x2cc>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800391c:	d01a      	beq.n	8003954 <UART_SetConfig+0x250>
 800391e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003922:	d81b      	bhi.n	800395c <UART_SetConfig+0x258>
 8003924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003928:	d00c      	beq.n	8003944 <UART_SetConfig+0x240>
 800392a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392e:	d815      	bhi.n	800395c <UART_SetConfig+0x258>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <UART_SetConfig+0x238>
 8003934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003938:	d008      	beq.n	800394c <UART_SetConfig+0x248>
 800393a:	e00f      	b.n	800395c <UART_SetConfig+0x258>
 800393c:	2300      	movs	r3, #0
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003942:	e052      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003944:	2302      	movs	r3, #2
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394a:	e04e      	b.n	80039ea <UART_SetConfig+0x2e6>
 800394c:	2304      	movs	r3, #4
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e04a      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003954:	2308      	movs	r3, #8
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e046      	b.n	80039ea <UART_SetConfig+0x2e6>
 800395c:	2310      	movs	r3, #16
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e042      	b.n	80039ea <UART_SetConfig+0x2e6>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <UART_SetConfig+0x2c4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d13a      	bne.n	80039e4 <UART_SetConfig+0x2e0>
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <UART_SetConfig+0x2cc>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397c:	d01a      	beq.n	80039b4 <UART_SetConfig+0x2b0>
 800397e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003982:	d81b      	bhi.n	80039bc <UART_SetConfig+0x2b8>
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003988:	d00c      	beq.n	80039a4 <UART_SetConfig+0x2a0>
 800398a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398e:	d815      	bhi.n	80039bc <UART_SetConfig+0x2b8>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <UART_SetConfig+0x298>
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003998:	d008      	beq.n	80039ac <UART_SetConfig+0x2a8>
 800399a:	e00f      	b.n	80039bc <UART_SetConfig+0x2b8>
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e022      	b.n	80039ea <UART_SetConfig+0x2e6>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e01e      	b.n	80039ea <UART_SetConfig+0x2e6>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e01a      	b.n	80039ea <UART_SetConfig+0x2e6>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e016      	b.n	80039ea <UART_SetConfig+0x2e6>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e012      	b.n	80039ea <UART_SetConfig+0x2e6>
 80039c4:	efff69f3 	.word	0xefff69f3
 80039c8:	40008000 	.word	0x40008000
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40004400 	.word	0x40004400
 80039d8:	40004800 	.word	0x40004800
 80039dc:	40004c00 	.word	0x40004c00
 80039e0:	40005000 	.word	0x40005000
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a9f      	ldr	r2, [pc, #636]	; (8003c6c <UART_SetConfig+0x568>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d17a      	bne.n	8003aea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d824      	bhi.n	8003a46 <UART_SetConfig+0x342>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x300>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a47 	.word	0x08003a47
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a47 	.word	0x08003a47
 8003a14:	08003a37 	.word	0x08003a37
 8003a18:	08003a47 	.word	0x08003a47
 8003a1c:	08003a47 	.word	0x08003a47
 8003a20:	08003a47 	.word	0x08003a47
 8003a24:	08003a3f 	.word	0x08003a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7fe fbdc 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	61f8      	str	r0, [r7, #28]
        break;
 8003a2e:	e010      	b.n	8003a52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a30:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <UART_SetConfig+0x56c>)
 8003a32:	61fb      	str	r3, [r7, #28]
        break;
 8003a34:	e00d      	b.n	8003a52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a36:	f7fe fb3d 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8003a3a:	61f8      	str	r0, [r7, #28]
        break;
 8003a3c:	e009      	b.n	8003a52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e005      	b.n	8003a52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80fb 	beq.w	8003c50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d305      	bcc.n	8003a76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a70:	69fa      	ldr	r2, [r7, #28]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d903      	bls.n	8003a7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a7c:	e0e8      	b.n	8003c50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2200      	movs	r2, #0
 8003a82:	461c      	mov	r4, r3
 8003a84:	4615      	mov	r5, r2
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	022b      	lsls	r3, r5, #8
 8003a90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a94:	0222      	lsls	r2, r4, #8
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	6849      	ldr	r1, [r1, #4]
 8003a9a:	0849      	lsrs	r1, r1, #1
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	4688      	mov	r8, r1
 8003aa0:	4681      	mov	r9, r0
 8003aa2:	eb12 0a08 	adds.w	sl, r2, r8
 8003aa6:	eb43 0b09 	adc.w	fp, r3, r9
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab8:	4650      	mov	r0, sl
 8003aba:	4659      	mov	r1, fp
 8003abc:	f7fc fb96 	bl	80001ec <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ace:	d308      	bcc.n	8003ae2 <UART_SetConfig+0x3de>
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad6:	d204      	bcs.n	8003ae2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	e0b6      	b.n	8003c50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ae8:	e0b2      	b.n	8003c50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af2:	d15e      	bne.n	8003bb2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d828      	bhi.n	8003b4e <UART_SetConfig+0x44a>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <UART_SetConfig+0x400>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b29 	.word	0x08003b29
 8003b08:	08003b31 	.word	0x08003b31
 8003b0c:	08003b39 	.word	0x08003b39
 8003b10:	08003b4f 	.word	0x08003b4f
 8003b14:	08003b3f 	.word	0x08003b3f
 8003b18:	08003b4f 	.word	0x08003b4f
 8003b1c:	08003b4f 	.word	0x08003b4f
 8003b20:	08003b4f 	.word	0x08003b4f
 8003b24:	08003b47 	.word	0x08003b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b28:	f7fe fb5c 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8003b2c:	61f8      	str	r0, [r7, #28]
        break;
 8003b2e:	e014      	b.n	8003b5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7fe fb6e 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8003b34:	61f8      	str	r0, [r7, #28]
        break;
 8003b36:	e010      	b.n	8003b5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b38:	4b4d      	ldr	r3, [pc, #308]	; (8003c70 <UART_SetConfig+0x56c>)
 8003b3a:	61fb      	str	r3, [r7, #28]
        break;
 8003b3c:	e00d      	b.n	8003b5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b3e:	f7fe fab9 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8003b42:	61f8      	str	r0, [r7, #28]
        break;
 8003b44:	e009      	b.n	8003b5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4a:	61fb      	str	r3, [r7, #28]
        break;
 8003b4c:	e005      	b.n	8003b5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d077      	beq.n	8003c50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	005a      	lsls	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	441a      	add	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b0f      	cmp	r3, #15
 8003b7a:	d916      	bls.n	8003baa <UART_SetConfig+0x4a6>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b82:	d212      	bcs.n	8003baa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f023 030f 	bic.w	r3, r3, #15
 8003b8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	8afb      	ldrh	r3, [r7, #22]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	8afa      	ldrh	r2, [r7, #22]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e052      	b.n	8003c50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bb0:	e04e      	b.n	8003c50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d827      	bhi.n	8003c0a <UART_SetConfig+0x506>
 8003bba:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <UART_SetConfig+0x4bc>)
 8003bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003bed 	.word	0x08003bed
 8003bc8:	08003bf5 	.word	0x08003bf5
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003bfb 	.word	0x08003bfb
 8003bd4:	08003c0b 	.word	0x08003c0b
 8003bd8:	08003c0b 	.word	0x08003c0b
 8003bdc:	08003c0b 	.word	0x08003c0b
 8003be0:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7fe fafe 	bl	80021e4 <HAL_RCC_GetPCLK1Freq>
 8003be8:	61f8      	str	r0, [r7, #28]
        break;
 8003bea:	e014      	b.n	8003c16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7fe fb10 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8003bf0:	61f8      	str	r0, [r7, #28]
        break;
 8003bf2:	e010      	b.n	8003c16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <UART_SetConfig+0x56c>)
 8003bf6:	61fb      	str	r3, [r7, #28]
        break;
 8003bf8:	e00d      	b.n	8003c16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7fe fa5b 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8003bfe:	61f8      	str	r0, [r7, #28]
        break;
 8003c00:	e009      	b.n	8003c16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	61fb      	str	r3, [r7, #28]
        break;
 8003c08:	e005      	b.n	8003c16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c14:	bf00      	nop
    }

    if (pclk != 0U)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d019      	beq.n	8003c50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	085a      	lsrs	r2, r3, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	441a      	add	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b0f      	cmp	r3, #15
 8003c34:	d909      	bls.n	8003c4a <UART_SetConfig+0x546>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d205      	bcs.n	8003c4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	e002      	b.n	8003c50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40008000 	.word	0x40008000
 8003c70:	00f42400 	.word	0x00f42400

08003c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01a      	beq.n	8003d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d72:	d10a      	bne.n	8003d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc8:	f7fc ff02 	bl	8000bd0 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d10e      	bne.n	8003dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f82d 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e023      	b.n	8003e42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d10e      	bne.n	8003e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f817 	bl	8003e4a <UART_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e00d      	b.n	8003e42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b09c      	sub	sp, #112	; 0x70
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5a:	e0a5      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e62:	f000 80a1 	beq.w	8003fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fc feb3 	bl	8000bd0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x32>
 8003e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d13e      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e90:	667b      	str	r3, [r7, #100]	; 0x64
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ea0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e6      	bne.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ece:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ed0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e5      	bne.n	8003eae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e067      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d04f      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f16:	d147      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
 8003f42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e6      	bne.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	613b      	str	r3, [r7, #16]
   return(result);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3308      	adds	r3, #8
 8003f72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f74:	623a      	str	r2, [r7, #32]
 8003f76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	69f9      	ldr	r1, [r7, #28]
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e5      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e010      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	f43f af4a 	beq.w	8003e5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3770      	adds	r7, #112	; 0x70
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 f820 	bl	800402c <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	08004094 	.word	0x08004094
 8004010:	08004094 	.word	0x08004094
 8004014:	08004094 	.word	0x08004094
 8004018:	08004098 	.word	0x08004098

0800401c <memset>:
 800401c:	4402      	add	r2, r0
 800401e:	4603      	mov	r3, r0
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	f803 1b01 	strb.w	r1, [r3], #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <_init>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	bf00      	nop
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr

08004038 <_fini>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	bf00      	nop
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr
