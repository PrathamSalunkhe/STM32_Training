
03_SPI_Tx_Rx_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c8  080061c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000070  08006240  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08006240  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f974  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002223  00000000  00000000  0002fa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00031c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  000328e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f0c  00000000  00000000  000334c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee52  00000000  00000000  0005d3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbe26  00000000  00000000  0006c21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b64  00000000  00000000  00168094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060c0 	.word	0x080060c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080060c0 	.word	0x080060c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc0b 	bl	8000db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f83e 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f912 	bl	80007c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8ea 	bl	800077c <MX_DMA_Init>
  MX_SPI1_Init();
 80005a8:	f000 f8aa 	bl	8000700 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 80005ac:	f000 f87c 	bl	80006a8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_SPI_TransmitReceive_DMA(&hspi1, buffer_tx, buffer_rx, 10);

  /* receive data through uart in interrupt mode */
  HAL_UART_Receive_IT(&hlpuart1, rx_buffer, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	4911      	ldr	r1, [pc, #68]	; (80005f8 <main+0x64>)
 80005b4:	4811      	ldr	r0, [pc, #68]	; (80005fc <main+0x68>)
 80005b6:	f003 fb2b 	bl	8003c10 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(uart_cplt == 1)
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <main+0x6c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d10a      	bne.n	80005da <main+0x46>
	  {
		  /* transmit and received the data through spi in dma mode */
		  HAL_SPI_TransmitReceive_DMA(&hspi1, uart_buffer, buffer_print, received_length);
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <main+0x70>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <main+0x74>)
 80005cc:	490f      	ldr	r1, [pc, #60]	; (800060c <main+0x78>)
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <main+0x7c>)
 80005d0:	f002 fdf4 	bl	80031bc <HAL_SPI_TransmitReceive_DMA>
		  uart_cplt = 0;		//flag zero
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x6c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	  }

	  if(spi_cplt == 1)			//if spi tx-rx completes
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <main+0x80>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d1ea      	bne.n	80005ba <main+0x26>
	  {
		  /* continuous process */
		  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	480c      	ldr	r0, [pc, #48]	; (8000618 <main+0x84>)
 80005e8:	f001 f9ae 	bl	8001948 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f0:	f000 fc54 	bl	8000e9c <HAL_Delay>
	  if(uart_cplt == 1)
 80005f4:	e7e1      	b.n	80005ba <main+0x26>
 80005f6:	bf00      	nop
 80005f8:	200002cc 	.word	0x200002cc
 80005fc:	2000008c 	.word	0x2000008c
 8000600:	20000331 	.word	0x20000331
 8000604:	20000332 	.word	0x20000332
 8000608:	20000204 	.word	0x20000204
 800060c:	20000268 	.word	0x20000268
 8000610:	20000110 	.word	0x20000110
 8000614:	20000330 	.word	0x20000330
 8000618:	48000400 	.word	0x48000400

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	; 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fdb2 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000642:	f001 f9a9 	bl	8001998 <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 f962 	bl	8000914 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000650:	2310      	movs	r3, #16
 8000652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800065c:	23b0      	movs	r3, #176	; 0xb0
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f9fb 	bl	8001a64 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000674:	f000 f94e 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	2102      	movs	r1, #2
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fe01 	bl	8002298 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800069c:	f000 f93a 	bl	8000914 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	; 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_LPUART1_UART_Init+0x54>)
 80006b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_LPUART1_UART_Init+0x50>)
 80006e6:	f003 f9b1 	bl	8003a4c <HAL_UART_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 f910 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40008000 	.word	0x40008000

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_SPI1_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_SPI1_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_SPI1_Init+0x74>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI1_Init+0x74>)
 800071a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800071e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI1_Init+0x74>)
 800072e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI1_Init+0x74>)
 8000736:	2228      	movs	r2, #40	; 0x28
 8000738:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI1_Init+0x74>)
 800074e:	2207      	movs	r2, #7
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI1_Init+0x74>)
 800075a:	2208      	movs	r2, #8
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_SPI1_Init+0x74>)
 8000760:	f002 fc88 	bl	8003074 <HAL_SPI_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 f8d3 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000110 	.word	0x20000110
 8000778:	40013000 	.word	0x40013000

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_DMA_Init+0x48>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_DMA_Init+0x48>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6493      	str	r3, [r2, #72]	; 0x48
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_DMA_Init+0x48>)
 8000790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200c      	movs	r0, #12
 80007a0:	f000 fc7b 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007a4:	200c      	movs	r0, #12
 80007a6:	f000 fc94 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200d      	movs	r0, #13
 80007b0:	f000 fc73 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007b4:	200d      	movs	r0, #13
 80007b6:	f000 fc8c 	bl	80010d2 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_GPIO_Init+0x90>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <MX_GPIO_Init+0x90>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_GPIO_Init+0x90>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_GPIO_Init+0x90>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0x90>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0x90>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800080e:	f001 f919 	bl	8001a44 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0x90>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0x90>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_GPIO_Init+0x90>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0x94>)
 8000830:	f001 f872 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0x94>)
 800084c:	f000 fed2 	bl	80015f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400

08000860 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/* start the reception of data in interrupt mode again */
	HAL_UART_Receive_IT(&hlpuart1, rx_buffer, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	4917      	ldr	r1, [pc, #92]	; (80008c8 <HAL_UART_RxCpltCallback+0x68>)
 800086c:	4817      	ldr	r0, [pc, #92]	; (80008cc <HAL_UART_RxCpltCallback+0x6c>)
 800086e:	f003 f9cf 	bl	8003c10 <HAL_UART_Receive_IT>

	/* store the received data into buffer */
	if(rx_buffer[0]!= RETURN_CHAR && rx_buffer[0] != NEWLINE_CHAR)
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_RxCpltCallback+0x68>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b0d      	cmp	r3, #13
 8000878:	d013      	beq.n	80008a2 <HAL_UART_RxCpltCallback+0x42>
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <HAL_UART_RxCpltCallback+0x68>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b0a      	cmp	r3, #10
 8000880:	d00f      	beq.n	80008a2 <HAL_UART_RxCpltCallback+0x42>
	{
		uart_buffer[Index] = rx_buffer[0];
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_UART_RxCpltCallback+0x70>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_UART_RxCpltCallback+0x68>)
 800088c:	7819      	ldrb	r1, [r3, #0]
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_UART_RxCpltCallback+0x74>)
 8000890:	5499      	strb	r1, [r3, r2]
		Index++;							//increment length
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_UART_RxCpltCallback+0x70>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b29b      	uxth	r3, r3
 8000898:	3301      	adds	r3, #1
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_UART_RxCpltCallback+0x70>)
 800089e:	801a      	strh	r2, [r3, #0]
	{
		uart_cplt = 1;						//data reception complete
		received_length= Index;	//store length in another variable
		Index = 0;				//clear length
	}
}
 80008a0:	e00e      	b.n	80008c0 <HAL_UART_RxCpltCallback+0x60>
	else if (rx_buffer[0] == NEWLINE_CHAR)
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_UART_RxCpltCallback+0x68>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b0a      	cmp	r3, #10
 80008a8:	d10a      	bne.n	80008c0 <HAL_UART_RxCpltCallback+0x60>
		uart_cplt = 1;						//data reception complete
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_UART_RxCpltCallback+0x78>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
		received_length= Index;	//store length in another variable
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_UART_RxCpltCallback+0x70>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_UART_RxCpltCallback+0x7c>)
 80008b8:	801a      	strh	r2, [r3, #0]
		Index = 0;				//clear length
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_UART_RxCpltCallback+0x70>)
 80008bc:	2200      	movs	r2, #0
 80008be:	801a      	strh	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200002cc 	.word	0x200002cc
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	20000334 	.word	0x20000334
 80008d4:	20000268 	.word	0x20000268
 80008d8:	20000331 	.word	0x20000331
 80008dc:	20000332 	.word	0x20000332

080008e0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	/* print the received data on terminal */
	printf("%s\r\n", buffer_print);			//print the buffer
 80008e8:	4907      	ldr	r1, [pc, #28]	; (8000908 <HAL_SPI_TxRxCpltCallback+0x28>)
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <HAL_SPI_TxRxCpltCallback+0x2c>)
 80008ec:	f004 fc5a 	bl	80051a4 <iprintf>
	spi_cplt = 1;							//enable the flag
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_SPI_TxRxCpltCallback+0x30>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
	memset(buffer_print, 0, MAX_SIZE);		//clear buffer
 80008f6:	2264      	movs	r2, #100	; 0x64
 80008f8:	2100      	movs	r1, #0
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <HAL_SPI_TxRxCpltCallback+0x28>)
 80008fc:	f004 fc4a 	bl	8005194 <memset>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000204 	.word	0x20000204
 800090c:	080060d8 	.word	0x080060d8
 8000910:	20000330 	.word	0x20000330

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0ac      	sub	sp, #176	; 0xb0
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	228c      	movs	r2, #140	; 0x8c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fc03 	bl	8005194 <memset>
  if(huart->Instance==LPUART1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a26      	ldr	r2, [pc, #152]	; (8000a2c <HAL_UART_MspInit+0xc4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d145      	bne.n	8000a24 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000998:	2320      	movs	r3, #32
 800099a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fe9b 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f7ff ffb0 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <HAL_UART_MspInit+0xc8>)
 80009b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_UART_MspInit+0xc8>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_UART_MspInit+0xc8>)
 80009c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_UART_MspInit+0xc8>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0xc8>)
 80009d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_UART_MspInit+0xc8>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009e4:	f001 f82e 	bl	8001a44 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80009e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a02:	2308      	movs	r3, #8
 8000a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <HAL_UART_MspInit+0xcc>)
 8000a10:	f000 fdf0 	bl	80015f4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2046      	movs	r0, #70	; 0x46
 8000a1a:	f000 fb3e 	bl	800109a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000a1e:	2046      	movs	r0, #70	; 0x46
 8000a20:	f000 fb57 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	37b0      	adds	r7, #176	; 0xb0
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40008000 	.word	0x40008000
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48001800 	.word	0x48001800

08000a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a40      	ldr	r2, [pc, #256]	; (8000b58 <HAL_SPI_MspInit+0x120>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d17a      	bne.n	8000b50 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <HAL_SPI_MspInit+0x124>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <HAL_SPI_MspInit+0x124>)
 8000a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a64:	6613      	str	r3, [r2, #96]	; 0x60
 8000a66:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <HAL_SPI_MspInit+0x124>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <HAL_SPI_MspInit+0x124>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <HAL_SPI_MspInit+0x124>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <HAL_SPI_MspInit+0x124>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a8a:	23c2      	movs	r3, #194	; 0xc2
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f000 fda4 	bl	80015f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000aae:	4a2d      	ldr	r2, [pc, #180]	; (8000b64 <HAL_SPI_MspInit+0x12c>)
 8000ab0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000aba:	2210      	movs	r2, #16
 8000abc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000ae4:	f000 fb10 	bl	8001108 <HAL_DMA_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000aee:	f7ff ff11 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000af6:	655a      	str	r2, [r3, #84]	; 0x54
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_SPI_MspInit+0x128>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b00:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <HAL_SPI_MspInit+0x134>)
 8000b02:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b36:	f000 fae7 	bl	8001108 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8000b40:	f7ff fee8 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b48:	659a      	str	r2, [r3, #88]	; 0x58
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_SPI_MspInit+0x130>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	20000174 	.word	0x20000174
 8000b64:	40020030 	.word	0x40020030
 8000b68:	200001bc 	.word	0x200001bc
 8000b6c:	4002001c 	.word	0x4002001c

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f94e 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA1_Channel2_IRQHandler+0x10>)
 8000bca:	f000 fc34 	bl	8001436 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001bc 	.word	0x200001bc

08000bd8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Channel3_IRQHandler+0x10>)
 8000bde:	f000 fc2a 	bl	8001436 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000174 	.word	0x20000174

08000bec <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <LPUART1_IRQHandler+0x10>)
 8000bf2:	f003 f863 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000008c 	.word	0x2000008c

08000c00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e00a      	b.n	8000c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c12:	f3af 8000 	nop.w
 8000c16:	4601      	mov	r1, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf0      	blt.n	8000c12 <_read+0x12>
  }

  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <_write+0x28>)
 8000c54:	f002 ff48 	bl	8003ae8 <HAL_UART_Transmit>
  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000008c 	.word	0x2000008c

08000c68 <_close>:

int _close(int file)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c90:	605a      	str	r2, [r3, #4]
  return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_isatty>:

int _isatty(int file)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca8:	2301      	movs	r3, #1
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f004 fa1e 	bl	8005140 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20050000 	.word	0x20050000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000338 	.word	0x20000338
 8000d38:	20000350 	.word	0x20000350

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f004 f9dd 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fbff 	bl	8000594 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da4:	080061d0 	.word	0x080061d0
  ldr r2, =_sbss
 8000da8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dac:	20000350 	.word	0x20000350

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>

08000db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f961 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f80e 	bl	8000de4 <HAL_InitTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	e001      	b.n	8000dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd4:	f7ff fda4 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_InitTick+0x6c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d023      	beq.n	8000e40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_InitTick+0x70>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_InitTick+0x6c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f96d 	bl	80010ee <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10f      	bne.n	8000e3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d809      	bhi.n	8000e34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e28:	f000 f937 	bl	800109a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_InitTick+0x74>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e007      	b.n	8000e44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	e004      	b.n	8000e44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	e001      	b.n	8000e44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	2000033c 	.word	0x2000033c

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2000033c 	.word	0x2000033c

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e098      	b.n	800124c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <HAL_DMA_Init+0x150>)
 8001122:	429a      	cmp	r2, r3
 8001124:	d80f      	bhi.n	8001146 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <HAL_DMA_Init+0x154>)
 800112e:	4413      	add	r3, r2
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_DMA_Init+0x158>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	009a      	lsls	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_DMA_Init+0x15c>)
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
 8001144:	e00e      	b.n	8001164 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b46      	ldr	r3, [pc, #280]	; (8001268 <HAL_DMA_Init+0x160>)
 800114e:	4413      	add	r3, r2
 8001150:	4a43      	ldr	r2, [pc, #268]	; (8001260 <HAL_DMA_Init+0x158>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	009a      	lsls	r2, r3, #2
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a42      	ldr	r2, [pc, #264]	; (800126c <HAL_DMA_Init+0x164>)
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800117a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800117e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011be:	d039      	beq.n	8001234 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_DMA_Init+0x15c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d11a      	bne.n	8001200 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_DMA_Init+0x168>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 031c 	and.w	r3, r3, #28
 80011d6:	210f      	movs	r1, #15
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4924      	ldr	r1, [pc, #144]	; (8001270 <HAL_DMA_Init+0x168>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_DMA_Init+0x168>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f003 031c 	and.w	r3, r3, #28
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	491d      	ldr	r1, [pc, #116]	; (8001270 <HAL_DMA_Init+0x168>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
 80011fe:	e019      	b.n	8001234 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_DMA_Init+0x16c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f003 031c 	and.w	r3, r3, #28
 800120c:	210f      	movs	r1, #15
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	4917      	ldr	r1, [pc, #92]	; (8001274 <HAL_DMA_Init+0x16c>)
 8001216:	4013      	ands	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_DMA_Init+0x16c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 031c 	and.w	r3, r3, #28
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	4911      	ldr	r1, [pc, #68]	; (8001274 <HAL_DMA_Init+0x16c>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40020407 	.word	0x40020407
 800125c:	bffdfff8 	.word	0xbffdfff8
 8001260:	cccccccd 	.word	0xcccccccd
 8001264:	40020000 	.word	0x40020000
 8001268:	bffdfbf8 	.word	0xbffdfbf8
 800126c:	40020400 	.word	0x40020400
 8001270:	400200a8 	.word	0x400200a8
 8001274:	400204a8 	.word	0x400204a8

08001278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_DMA_Start_IT+0x20>
 8001294:	2302      	movs	r3, #2
 8001296:	e04b      	b.n	8001330 <HAL_DMA_Start_IT+0xb8>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d13a      	bne.n	8001322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f95f 	bl	8001594 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 020e 	orr.w	r2, r2, #14
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e00f      	b.n	8001310 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0204 	bic.w	r2, r2, #4
 80012fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 020a 	orr.w	r2, r2, #10
 800130e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e005      	b.n	800132e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800132a:	2302      	movs	r3, #2
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d008      	beq.n	8001362 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2204      	movs	r2, #4
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e022      	b.n	80013a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 020e 	bic.w	r2, r2, #14
 8001370:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 021c 	and.w	r2, r3, #28
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d005      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2204      	movs	r2, #4
 80013d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e029      	b.n	800142c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 020e 	bic.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	f003 021c 	and.w	r2, r3, #28
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f202 	lsl.w	r2, r1, r2
 800140a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	4798      	blx	r3
    }
  }
  return status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 031c 	and.w	r3, r3, #28
 8001456:	2204      	movs	r2, #4
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d026      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x7a>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d021      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0204 	bic.w	r2, r2, #4
 8001488:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 021c 	and.w	r2, r3, #28
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2104      	movs	r1, #4
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d071      	beq.n	800158a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	e06c      	b.n	800158a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	f003 031c 	and.w	r3, r3, #28
 80014b8:	2202      	movs	r2, #2
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d02e      	beq.n	8001522 <HAL_DMA_IRQHandler+0xec>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d029      	beq.n	8001522 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020a 	bic.w	r2, r2, #10
 80014ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f003 021c 	and.w	r2, r3, #28
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	2102      	movs	r1, #2
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d038      	beq.n	800158a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001520:	e033      	b.n	800158a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f003 031c 	and.w	r3, r3, #28
 800152a:	2208      	movs	r2, #8
 800152c:	409a      	lsls	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d02a      	beq.n	800158c <HAL_DMA_IRQHandler+0x156>
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d025      	beq.n	800158c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 020e 	bic.w	r2, r2, #14
 800154e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 021c 	and.w	r2, r3, #28
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800158a:	bf00      	nop
 800158c:	bf00      	nop
}
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 021c 	and.w	r2, r3, #28
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d108      	bne.n	80015d8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015d6:	e007      	b.n	80015e8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e166      	b.n	80018d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8158 	beq.w	80018cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d005      	beq.n	8001634 <HAL_GPIO_Init+0x40>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d130      	bne.n	8001696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800166a:	2201      	movs	r2, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 0201 	and.w	r2, r3, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d017      	beq.n	80016d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d123      	bne.n	8001726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	6939      	ldr	r1, [r7, #16]
 8001722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0203 	and.w	r2, r3, #3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80b2 	beq.w	80018cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001768:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_GPIO_Init+0x2fc>)
 800176a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176c:	4a60      	ldr	r2, [pc, #384]	; (80018f0 <HAL_GPIO_Init+0x2fc>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6613      	str	r3, [r2, #96]	; 0x60
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_GPIO_Init+0x2fc>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001780:	4a5c      	ldr	r2, [pc, #368]	; (80018f4 <HAL_GPIO_Init+0x300>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017aa:	d02b      	beq.n	8001804 <HAL_GPIO_Init+0x210>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_GPIO_Init+0x304>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d025      	beq.n	8001800 <HAL_GPIO_Init+0x20c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a51      	ldr	r2, [pc, #324]	; (80018fc <HAL_GPIO_Init+0x308>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d01f      	beq.n	80017fc <HAL_GPIO_Init+0x208>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a50      	ldr	r2, [pc, #320]	; (8001900 <HAL_GPIO_Init+0x30c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d019      	beq.n	80017f8 <HAL_GPIO_Init+0x204>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a4f      	ldr	r2, [pc, #316]	; (8001904 <HAL_GPIO_Init+0x310>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <HAL_GPIO_Init+0x200>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a4e      	ldr	r2, [pc, #312]	; (8001908 <HAL_GPIO_Init+0x314>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00d      	beq.n	80017f0 <HAL_GPIO_Init+0x1fc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_GPIO_Init+0x318>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d007      	beq.n	80017ec <HAL_GPIO_Init+0x1f8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <HAL_GPIO_Init+0x31c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_GPIO_Init+0x1f4>
 80017e4:	2307      	movs	r3, #7
 80017e6:	e00e      	b.n	8001806 <HAL_GPIO_Init+0x212>
 80017e8:	2308      	movs	r3, #8
 80017ea:	e00c      	b.n	8001806 <HAL_GPIO_Init+0x212>
 80017ec:	2306      	movs	r3, #6
 80017ee:	e00a      	b.n	8001806 <HAL_GPIO_Init+0x212>
 80017f0:	2305      	movs	r3, #5
 80017f2:	e008      	b.n	8001806 <HAL_GPIO_Init+0x212>
 80017f4:	2304      	movs	r3, #4
 80017f6:	e006      	b.n	8001806 <HAL_GPIO_Init+0x212>
 80017f8:	2303      	movs	r3, #3
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_Init+0x212>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0x212>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_Init+0x212>
 8001804:	2300      	movs	r3, #0
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_GPIO_Init+0x300>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001824:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <HAL_GPIO_Init+0x320>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001848:	4a32      	ldr	r2, [pc, #200]	; (8001914 <HAL_GPIO_Init+0x320>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_GPIO_Init+0x320>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001872:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_GPIO_Init+0x320>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_GPIO_Init+0x320>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_GPIO_Init+0x320>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_GPIO_Init+0x320>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_GPIO_Init+0x320>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f ae91 	bne.w	8001604 <HAL_GPIO_Init+0x10>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	48001000 	.word	0x48001000
 8001908:	48001400 	.word	0x48001400
 800190c:	48001800 	.word	0x48001800
 8001910:	48001c00 	.word	0x48001c00
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001934:	e002      	b.n	800193c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43d9      	mvns	r1, r3
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	400b      	ands	r3, r1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <HAL_PWREx_GetVoltageRange+0x18>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007000 	.word	0x40007000

08001998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a6:	d130      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b4:	d038      	beq.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2232      	movs	r2, #50	; 0x32
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019dc:	e002      	b.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f0:	d102      	bne.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f2      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a04:	d110      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e00f      	b.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a16:	d007      	beq.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	431bde83 	.word	0x431bde83

08001a44 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6053      	str	r3, [r2, #4]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f000 bc08 	b.w	8002288 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a78:	4b96      	ldr	r3, [pc, #600]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a82:	4b94      	ldr	r3, [pc, #592]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80e4 	beq.w	8001c62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4c>
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	f040 808b 	bne.w	8001bbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 8087 	bne.w	8001bbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab0:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x64>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e3df      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x7e>
 8001ad8:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae0:	e005      	b.n	8001aee <HAL_RCC_OscConfig+0x8a>
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d223      	bcs.n	8001b3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fd92 	bl	8002620 <RCC_SetFlashLatencyFromMSIRange>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e3c0      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b06:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a72      	ldr	r2, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	496d      	ldr	r1, [pc, #436]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4968      	ldr	r1, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	e025      	b.n	8001b86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3a:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4960      	ldr	r1, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b58:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	495b      	ldr	r1, [pc, #364]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fd52 	bl	8002620 <RCC_SetFlashLatencyFromMSIRange>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e380      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b86:	f000 fc87 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	4950      	ldr	r1, [pc, #320]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b98:	5ccb      	ldrb	r3, [r1, r3]
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_RCC_OscConfig+0x278>)
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f91a 	bl	8000de4 <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d052      	beq.n	8001c60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	e364      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d032      	beq.n	8001c2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a42      	ldr	r2, [pc, #264]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f957 	bl	8000e84 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7ff f953 	bl	8000e84 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e34d      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bec:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a35      	ldr	r2, [pc, #212]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4930      	ldr	r1, [pc, #192]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	492b      	ldr	r1, [pc, #172]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
 8001c2a:	e01a      	b.n	8001c62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f924 	bl	8000e84 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c40:	f7ff f920 	bl	8000e84 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e31a      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1dc>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d073      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x21c>
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d10e      	bne.n	8001c98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d10b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d063      	beq.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d15f      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e2f7      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e025      	b.n	8001cfc <HAL_RCC_OscConfig+0x298>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d114      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x280>
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a02      	ldr	r2, [pc, #8]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e013      	b.n	8001cfc <HAL_RCC_OscConfig+0x298>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	080060e0 	.word	0x080060e0
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004
 8001ce4:	4ba0      	ldr	r3, [pc, #640]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a9f      	ldr	r2, [pc, #636]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b9d      	ldr	r3, [pc, #628]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a9c      	ldr	r2, [pc, #624]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff f8be 	bl	8000e84 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f8ba 	bl	8000e84 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e2b4      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	4b92      	ldr	r3, [pc, #584]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x2a8>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f8aa 	bl	8000e84 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff f8a6 	bl	8000e84 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e2a0      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d46:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2d0>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d060      	beq.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_OscConfig+0x310>
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d119      	bne.n	8001da2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d116      	bne.n	8001da2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x328>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e27d      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	4973      	ldr	r1, [pc, #460]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	e040      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d023      	beq.n	8001df2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001daa:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6e      	ldr	r2, [pc, #440]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff f865 	bl	8000e84 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f861 	bl	8000e84 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e25b      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	495f      	ldr	r1, [pc, #380]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
 8001df0:	e018      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f841 	bl	8000e84 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff f83d 	bl	8000e84 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e237      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e38:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	4a4a      	ldr	r2, [pc, #296]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f81c 	bl	8000e84 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff f818 	bl	8000e84 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e212      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ef      	beq.n	8001e50 <HAL_RCC_OscConfig+0x3ec>
 8001e70:	e01b      	b.n	8001eaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e78:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7fe ffff 	bl	8000e84 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7fe fffb 	bl	8000e84 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1f5      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ef      	bne.n	8001e8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80a6 	beq.w	8002004 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d118      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efc:	f7fe ffc2 	bl	8000e84 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7fe ffbe 	bl	8000e84 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1b8      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4d8>
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3a:	e029      	b.n	8001f90 <HAL_RCC_OscConfig+0x52c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d115      	bne.n	8001f70 <HAL_RCC_OscConfig+0x50c>
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x52c>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	4b9d      	ldr	r3, [pc, #628]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a9c      	ldr	r2, [pc, #624]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f80:	4b99      	ldr	r3, [pc, #612]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a98      	ldr	r2, [pc, #608]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe ff74 	bl	8000e84 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe ff70 	bl	8000e84 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e168      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb6:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ed      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x53c>
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7fe ff5d 	bl	8000e84 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe ff59 	bl	8000e84 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e151      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe4:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ed      	bne.n	8001fce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002002:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d03c      	beq.n	800208a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01c      	beq.n	8002052 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 800201a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201e:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7fe ff2c 	bl	8000e84 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002030:	f7fe ff28 	bl	8000e84 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e122      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002042:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCC_OscConfig+0x5cc>
 8002050:	e01b      	b.n	800208a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002058:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7fe ff0f 	bl	8000e84 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206a:	f7fe ff0b 	bl	8000e84 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e105      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800207c:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 800207e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ef      	bne.n	800206a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80f9 	beq.w	8002286 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	2b02      	cmp	r3, #2
 800209a:	f040 80cf 	bne.w	800223c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800209e:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0203 	and.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d12c      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	3b01      	subs	r3, #1
 80020be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d123      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d11b      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d113      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d109      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	3b01      	subs	r3, #1
 8002106:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d071      	beq.n	80021f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d068      	beq.n	80021e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800211e:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0ac      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2d      	ldr	r2, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002138:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800213a:	f7fe fea3 	bl	8000e84 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fe9f 	bl	8000e84 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e099      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCC_OscConfig+0x788>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002170:	3a01      	subs	r2, #1
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800217a:	0212      	lsls	r2, r2, #8
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002182:	0852      	lsrs	r2, r2, #1
 8002184:	3a01      	subs	r2, #1
 8002186:	0552      	lsls	r2, r2, #21
 8002188:	4311      	orrs	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800218e:	0852      	lsrs	r2, r2, #1
 8002190:	3a01      	subs	r2, #1
 8002192:	0652      	lsls	r2, r2, #25
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800219a:	06d2      	lsls	r2, r2, #27
 800219c:	430a      	orrs	r2, r1
 800219e:	4912      	ldr	r1, [pc, #72]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021bc:	f7fe fe62 	bl	8000e84 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe fe5e 	bl	8000e84 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e058      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e2:	e050      	b.n	8002286 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04f      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d144      	bne.n	8002286 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002212:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002214:	f7fe fe36 	bl	8000e84 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe fe32 	bl	8000e84 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e02c      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x7b8>
 800223a:	e024      	b.n	8002286 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d01f      	beq.n	8002282 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe fe19 	bl	8000e84 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fe15 	bl	8000e84 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e00f      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4905      	ldr	r1, [pc, #20]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_OscConfig+0x830>)
 800227c:	4013      	ands	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e001      	b.n	8002286 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	feeefffc 	.word	0xfeeefffc

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0e7      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b75      	ldr	r3, [pc, #468]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b72      	ldr	r3, [pc, #456]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4970      	ldr	r1, [pc, #448]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b6e      	ldr	r3, [pc, #440]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cf      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d908      	bls.n	800230a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4960      	ldr	r1, [pc, #384]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04c      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231e:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d121      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0a6      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	4b54      	ldr	r3, [pc, #336]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e09a      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e08e      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e086      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4943      	ldr	r1, [pc, #268]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7fe fd80 	bl	8000e84 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe fd7c 	bl	8000e84 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e06e      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d208      	bcs.n	80023de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	492b      	ldr	r1, [pc, #172]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d210      	bcs.n	800240e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 0207 	bic.w	r2, r3, #7
 80023f4:	4923      	ldr	r1, [pc, #140]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e036      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4918      	ldr	r1, [pc, #96]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4910      	ldr	r1, [pc, #64]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800244c:	f000 f824 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	490b      	ldr	r1, [pc, #44]	; (800248c <HAL_RCC_ClockConfig+0x1f4>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800246a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1fc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fcb7 	bl	8000de4 <HAL_InitTick>
 8002476:	4603      	mov	r3, r0
 8002478:	72fb      	strb	r3, [r7, #11]

  return status;
 800247a:	7afb      	ldrb	r3, [r7, #11]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	080060e0 	.word	0x080060e0
 8002490:	20000000 	.word	0x20000000
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a6:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x34>
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d121      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d11e      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e005      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f4:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d102      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	e004      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d101      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800251c:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_RCC_GetSysClockFreq+0x114>)
 800251e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d134      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d003      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0xa6>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d003      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0xac>
 800253c:	e005      	b.n	800254a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002540:	617b      	str	r3, [r7, #20]
      break;
 8002542:	e005      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002546:	617b      	str	r3, [r7, #20]
      break;
 8002548:	e002      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	617b      	str	r3, [r7, #20]
      break;
 800254e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	3301      	adds	r3, #1
 800255c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	fb03 f202 	mul.w	r2, r3, r2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	0e5b      	lsrs	r3, r3, #25
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	3301      	adds	r3, #1
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002590:	69bb      	ldr	r3, [r7, #24]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	080060f8 	.word	0x080060f8
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200

080025b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4904      	ldr	r1, [pc, #16]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	080060f0 	.word	0x080060f0

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025f8:	f7ff ffda 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0adb      	lsrs	r3, r3, #11
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCC_GetPCLK2Freq+0x28>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	080060f0 	.word	0x080060f0

08002620 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002638:	f7ff f9a0 	bl	800197c <HAL_PWREx_GetVoltageRange>
 800263c:	6178      	str	r0, [r7, #20]
 800263e:	e014      	b.n	800266a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6593      	str	r3, [r2, #88]	; 0x58
 800264c:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002658:	f7ff f990 	bl	800197c <HAL_PWREx_GetVoltageRange>
 800265c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002670:	d10b      	bne.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d919      	bls.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2ba0      	cmp	r3, #160	; 0xa0
 800267c:	d902      	bls.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800267e:	2302      	movs	r3, #2
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	e013      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002684:	2301      	movs	r3, #1
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	e010      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d902      	bls.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002690:	2303      	movs	r3, #3
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	e00a      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	d102      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800269c:	2302      	movs	r3, #2
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e004      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b70      	cmp	r3, #112	; 0x70
 80026a6:	d101      	bne.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a8:	2301      	movs	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 0207 	bic.w	r2, r3, #7
 80026b4:	4909      	ldr	r1, [pc, #36]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40022000 	.word	0x40022000

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e8:	2300      	movs	r3, #0
 80026ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026ec:	2300      	movs	r3, #0
 80026ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d041      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002704:	d02a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002706:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800270a:	d824      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800270c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002712:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002716:	d81e      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800271c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002720:	d010      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002722:	e018      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002724:	4b86      	ldr	r3, [pc, #536]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a85      	ldr	r2, [pc, #532]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002730:	e015      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f000 facd 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002742:	e00c      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3320      	adds	r3, #32
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fbb6 	bl	8002ebc <RCCEx_PLLSAI2_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002754:	e003      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	74fb      	strb	r3, [r7, #19]
      break;
 800275a:	e000      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800275c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002764:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002772:	4973      	ldr	r1, [pc, #460]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800277a:	e001      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d041      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002790:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002794:	d02a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002796:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800279a:	d824      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800279c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a0:	d008      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a6:	d81e      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d010      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027b2:	e018      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a61      	ldr	r2, [pc, #388]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c0:	e015      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fa85 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3320      	adds	r3, #32
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fb6e 	bl	8002ebc <RCCEx_PLLSAI2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027f4:	4b52      	ldr	r3, [pc, #328]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002802:	494f      	ldr	r1, [pc, #316]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a0 	beq.w	800295e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	4a40      	ldr	r2, [pc, #256]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	; 0x58
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002860:	f7fe fb10 	bl	8000e84 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe fb0c 	bl	8000e84 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	74fb      	strb	r3, [r7, #19]
        break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d15c      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01f      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d019      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe facb 	bl	8000e84 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f0:	e00b      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe fac7 	bl	8000e84 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d902      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	74fb      	strb	r3, [r7, #19]
            break;
 8002908:	e006      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ec      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002936:	e009      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
 800293c:	e006      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294c:	7c7b      	ldrb	r3, [r7, #17]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4ba6      	ldr	r3, [pc, #664]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	4aa5      	ldr	r2, [pc, #660]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296a:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f023 0203 	bic.w	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	499c      	ldr	r1, [pc, #624]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800298c:	4b97      	ldr	r3, [pc, #604]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 020c 	bic.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	4994      	ldr	r1, [pc, #592]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ae:	4b8f      	ldr	r3, [pc, #572]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	498b      	ldr	r1, [pc, #556]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029d0:	4b86      	ldr	r3, [pc, #536]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4983      	ldr	r1, [pc, #524]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029f2:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	497a      	ldr	r1, [pc, #488]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4972      	ldr	r1, [pc, #456]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	4969      	ldr	r1, [pc, #420]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a58:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a66:	4961      	ldr	r1, [pc, #388]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a88:	4958      	ldr	r1, [pc, #352]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	4950      	ldr	r1, [pc, #320]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002abe:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4947      	ldr	r1, [pc, #284]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ae0:	4b42      	ldr	r3, [pc, #264]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	493f      	ldr	r1, [pc, #252]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d028      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b02:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4936      	ldr	r1, [pc, #216]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b20:	d106      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a31      	ldr	r2, [pc, #196]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2c:	60d3      	str	r3, [r2, #12]
 8002b2e:	e011      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f8c9 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d028      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	491f      	ldr	r1, [pc, #124]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8a:	60d3      	str	r3, [r2, #12]
 8002b8c:	e011      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f89a 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bde:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a02      	ldr	r2, [pc, #8]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be8:	60d3      	str	r3, [r2, #12]
 8002bea:	e013      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002bec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f869 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d02f      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c20:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2e:	4929      	ldr	r1, [pc, #164]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3e:	d10d      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f846 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d014      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	74bb      	strb	r3, [r7, #18]
 8002c5a:	e011      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3320      	adds	r3, #32
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f925 	bl	8002ebc <RCCEx_PLLSAI2_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c76:	7cfb      	ldrb	r3, [r7, #19]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9c:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00b      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ce6:	4b74      	ldr	r3, [pc, #464]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cf2:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d10d      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
       ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
       ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d047      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e044      	b.n	8002dae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d018      	beq.n	8002d5e <RCCEx_PLLSAI1_Config+0x86>
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d825      	bhi.n	8002d7c <RCCEx_PLLSAI1_Config+0xa4>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d002      	beq.n	8002d3a <RCCEx_PLLSAI1_Config+0x62>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d009      	beq.n	8002d4c <RCCEx_PLLSAI1_Config+0x74>
 8002d38:	e020      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11d      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e01a      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d4c:	4b5a      	ldr	r3, [pc, #360]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e013      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d7a:	e006      	b.n	8002d8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e004      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	430b      	orrs	r3, r1
 8002da8:	4943      	ldr	r1, [pc, #268]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d17c      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3f      	ldr	r2, [pc, #252]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe f860 	bl	8000e84 <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dc6:	e009      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dc8:	f7fe f85c 	bl	8000e84 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d902      	bls.n	8002ddc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dda:	e005      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ef      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d15f      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d110      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002dfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	0211      	lsls	r1, r2, #8
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	06d2      	lsls	r2, r2, #27
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	492a      	ldr	r1, [pc, #168]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	610b      	str	r3, [r1, #16]
 8002e14:	e027      	b.n	8002e66 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d112      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	0211      	lsls	r1, r2, #8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	0852      	lsrs	r2, r2, #1
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0552      	lsls	r2, r2, #21
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	610b      	str	r3, [r1, #16]
 8002e40:	e011      	b.n	8002e66 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	0211      	lsls	r1, r2, #8
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6952      	ldr	r2, [r2, #20]
 8002e58:	0852      	lsrs	r2, r2, #1
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	0652      	lsls	r2, r2, #25
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	4915      	ldr	r1, [pc, #84]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe f807 	bl	8000e84 <HAL_GetTick>
 8002e76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e78:	e009      	b.n	8002e8e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e7a:	f7fe f803 	bl	8000e84 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d902      	bls.n	8002e8e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e8c:	e005      	b.n	8002e9a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ef      	beq.n	8002e7a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eca:	4b69      	ldr	r3, [pc, #420]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d10d      	bne.n	8002f02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eee:	4b60      	ldr	r3, [pc, #384]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
       ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d047      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e044      	b.n	8002f92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d018      	beq.n	8002f42 <RCCEx_PLLSAI2_Config+0x86>
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d825      	bhi.n	8002f60 <RCCEx_PLLSAI2_Config+0xa4>
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <RCCEx_PLLSAI2_Config+0x62>
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d009      	beq.n	8002f30 <RCCEx_PLLSAI2_Config+0x74>
 8002f1c:	e020      	b.n	8002f60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1e:	4b54      	ldr	r3, [pc, #336]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2e:	e01a      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d116      	bne.n	8002f6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e013      	b.n	8002f6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4e:	4b48      	ldr	r3, [pc, #288]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5e:	e006      	b.n	8002f6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e004      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	4938      	ldr	r1, [pc, #224]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d166      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a34      	ldr	r2, [pc, #208]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fd ff6e 	bl	8000e84 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fac:	f7fd ff6a 	bl	8000e84 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ef      	bne.n	8002fac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d149      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d110      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	06d2      	lsls	r2, r2, #27
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	491f      	ldr	r1, [pc, #124]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
 8002ff8:	e011      	b.n	800301e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003002:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	0211      	lsls	r1, r2, #8
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6912      	ldr	r2, [r2, #16]
 8003010:	0852      	lsrs	r2, r2, #1
 8003012:	3a01      	subs	r2, #1
 8003014:	0652      	lsls	r2, r2, #25
 8003016:	430a      	orrs	r2, r1
 8003018:	4915      	ldr	r1, [pc, #84]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003028:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7fd ff2b 	bl	8000e84 <HAL_GetTick>
 800302e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003030:	e009      	b.n	8003046 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003032:	f7fd ff27 	bl	8000e84 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d902      	bls.n	8003046 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	73fb      	strb	r3, [r7, #15]
          break;
 8003044:	e005      	b.n	8003052 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ef      	beq.n	8003032 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e095      	b.n	80031b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003096:	d009      	beq.n	80030ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
 800309e:	e005      	b.n	80030ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd fcb6 	bl	8000a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ec:	d902      	bls.n	80030f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	e002      	b.n	80030fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003102:	d007      	beq.n	8003114 <HAL_SPI_Init+0xa0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800310c:	d002      	beq.n	8003114 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	ea42 0103 	orr.w	r1, r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	f003 0204 	and.w	r2, r3, #4
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003190:	ea42 0103 	orr.w	r1, r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_SPI_TransmitReceive_DMA+0x20>
 80031d8:	2302      	movs	r3, #2
 80031da:	e16c      	b.n	80034b6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80031f2:	7dbb      	ldrb	r3, [r7, #22]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d00d      	beq.n	8003214 <HAL_SPI_TransmitReceive_DMA+0x58>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031fe:	d106      	bne.n	800320e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003208:	7dbb      	ldrb	r3, [r7, #22]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d002      	beq.n	8003214 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003212:	e14b      	b.n	80034ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
    goto error;
 800322a:	e13f      	b.n	80034ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b04      	cmp	r3, #4
 8003236:	d003      	beq.n	8003240 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2205      	movs	r2, #5
 800323c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	887a      	ldrh	r2, [r7, #2]
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	887a      	ldrh	r2, [r7, #2]
 800326a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003288:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003292:	d908      	bls.n	80032a6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	e06f      	b.n	8003386 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032b4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d126      	bne.n	8003310 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10f      	bne.n	80032ee <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032dc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ec:	e010      	b.n	8003310 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	b29b      	uxth	r3, r3
 8003308:	3301      	adds	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331a:	d134      	bne.n	8003386 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800332a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003332:	b29b      	uxth	r3, r3
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d111      	bne.n	8003360 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003352:	b29b      	uxth	r3, r3
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800335e:	e012      	b.n	8003386 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800336e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003376:	b29b      	uxth	r3, r3
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	b29b      	uxth	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b04      	cmp	r3, #4
 8003390:	d108      	bne.n	80033a4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	4a49      	ldr	r2, [pc, #292]	; (80034c4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a2:	e007      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a47      	ldr	r2, [pc, #284]	; (80034c8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	4a46      	ldr	r2, [pc, #280]	; (80034cc <HAL_SPI_TransmitReceive_DMA+0x310>)
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	4a45      	ldr	r2, [pc, #276]	; (80034d0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	2200      	movs	r2, #0
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	4619      	mov	r1, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033de:	f7fd ff4b 	bl	8001278 <HAL_DMA_Start_IT>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00c      	beq.n	8003402 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003400:	e054      	b.n	80034ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	2200      	movs	r2, #0
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	2200      	movs	r2, #0
 8003430:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	4619      	mov	r1, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003448:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800344a:	f7fd ff15 	bl	8001278 <HAL_DMA_Start_IT>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800346c:	e01e      	b.n	80034ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d007      	beq.n	800348c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0220 	orr.w	r2, r2, #32
 800349a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0202 	orr.w	r2, r2, #2
 80034aa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	0800365d 	.word	0x0800365d
 80034c4:	08003525 	.word	0x08003525
 80034c8:	08003679 	.word	0x08003679
 80034cc:	080035cd 	.word	0x080035cd
 80034d0:	08003695 	.word	0x08003695

080034d4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003532:	f7fd fca7 	bl	8000e84 <HAL_GetTick>
 8003536:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d03c      	beq.n	80035c0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0220 	bic.w	r2, r2, #32
 8003554:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10d      	bne.n	800357a <SPI_DMAReceiveCplt+0x56>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003566:	d108      	bne.n	800357a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0203 	bic.w	r2, r2, #3
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	e007      	b.n	800358a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	2164      	movs	r1, #100	; 0x64
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f9be 	bl	8003910 <SPI_EndRxTransaction>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff ffa9 	bl	8003510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80035be:	e002      	b.n	80035c6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff ff87 	bl	80034d4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035da:	f7fd fc53 	bl	8000e84 <HAL_GetTick>
 80035de:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d030      	beq.n	8003650 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0220 	bic.w	r2, r2, #32
 80035fc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	2164      	movs	r1, #100	; 0x64
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f9dc 	bl	80039c0 <SPI_EndRxTxTransaction>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0203 	bic.w	r2, r2, #3
 8003628:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff ff61 	bl	8003510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800364e:	e002      	b.n	8003656 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7fd f945 	bl	80008e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff ff3c 	bl	80034e8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff ff38 	bl	80034fc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0203 	bic.w	r2, r2, #3
 80036b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b6:	f043 0210 	orr.w	r2, r3, #16
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff ff22 	bl	8003510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036e4:	f7fd fbce 	bl	8000e84 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036f4:	f7fd fbc6 	bl	8000e84 <HAL_GetTick>
 80036f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	015b      	lsls	r3, r3, #5
 8003700:	0d1b      	lsrs	r3, r3, #20
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800370a:	e054      	b.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003712:	d050      	beq.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003714:	f7fd fbb6 	bl	8000e84 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	429a      	cmp	r2, r3
 8003722:	d902      	bls.n	800372a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d13d      	bne.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003742:	d111      	bne.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374c:	d004      	beq.n	8003758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003756:	d107      	bne.n	8003768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003770:	d10f      	bne.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e017      	b.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d19b      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000000 	.word	0x20000000

080037e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037f6:	f7fd fb45 	bl	8000e84 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	4413      	add	r3, r2
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003806:	f7fd fb3d 	bl	8000e84 <HAL_GetTick>
 800380a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003814:	4b3d      	ldr	r3, [pc, #244]	; (800390c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	00da      	lsls	r2, r3, #3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	0d1b      	lsrs	r3, r3, #20
 8003824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800382c:	e060      	b.n	80038f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003834:	d107      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003844:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800384c:	d050      	beq.n	80038f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800384e:	f7fd fb19 	bl	8000e84 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	429a      	cmp	r2, r3
 800385c:	d902      	bls.n	8003864 <SPI_WaitFifoStateUntilTimeout+0x80>
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d13d      	bne.n	80038e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003872:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800387c:	d111      	bne.n	80038a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d004      	beq.n	8003892 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003890:	d107      	bne.n	80038a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	d10f      	bne.n	80038cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e010      	b.n	8003902 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d196      	bne.n	800382e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3728      	adds	r7, #40	; 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003924:	d111      	bne.n	800394a <SPI_EndRxTransaction+0x3a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392e:	d004      	beq.n	800393a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003938:	d107      	bne.n	800394a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2200      	movs	r2, #0
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7ff febd 	bl	80036d4 <SPI_WaitFlagStateUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e023      	b.n	80039b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003978:	d11d      	bne.n	80039b6 <SPI_EndRxTransaction+0xa6>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d004      	beq.n	800398e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398c:	d113      	bne.n	80039b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ff22 	bl	80037e4 <SPI_WaitFifoStateUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e000      	b.n	80039b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff ff03 	bl	80037e4 <SPI_WaitFifoStateUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e027      	b.n	8003a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2180      	movs	r1, #128	; 0x80
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f7ff fe68 	bl	80036d4 <SPI_WaitFlagStateUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e014      	b.n	8003a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff fedc 	bl	80037e4 <SPI_WaitFifoStateUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e000      	b.n	8003a44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e040      	b.n	8003ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fc ff7a 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fc18 	bl	80042c0 <UART_SetConfig>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e022      	b.n	8003ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fec4 	bl	8004830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 ff4b 	bl	8004974 <UART_CheckIdleState>
 8003ade:	4603      	mov	r3, r0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	f040 8082 	bne.w	8003c06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_UART_Transmit+0x26>
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07a      	b.n	8003c08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Transmit+0x38>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e073      	b.n	8003c08 <HAL_UART_Transmit+0x120>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2221      	movs	r2, #33	; 0x21
 8003b34:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b36:	f7fd f9a5 	bl	8000e84 <HAL_GetTick>
 8003b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	88fa      	ldrh	r2, [r7, #6]
 8003b40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d108      	bne.n	8003b68 <HAL_UART_Transmit+0x80>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e003      	b.n	8003b70 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b78:	e02d      	b.n	8003bd6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 ff3e 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e039      	b.n	8003c08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	881a      	ldrh	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3302      	adds	r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e008      	b.n	8003bc4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1cb      	bne.n	8003b7a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2140      	movs	r1, #64	; 0x40
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 ff0a 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e005      	b.n	8003c08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d142      	bne.n	8003cac <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_UART_Receive_IT+0x22>
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e03b      	b.n	8003cae <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Receive_IT+0x34>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e034      	b.n	8003cae <HAL_UART_Receive_IT+0x9e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_UART_Receive_IT+0xa8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d01f      	beq.n	8003c9c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	613b      	str	r3, [r7, #16]
   return(result);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	69f9      	ldr	r1, [r7, #28]
 8003c8e:	6a3a      	ldr	r2, [r7, #32]
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e6      	bne.n	8003c6a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 ff74 	bl	8004b90 <UART_Start_Receive_IT>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	e000      	b.n	8003cae <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3728      	adds	r7, #40	; 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40008000 	.word	0x40008000

08003cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b0ba      	sub	sp, #232	; 0xe8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ce2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ce6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cea:	4013      	ands	r3, r2
 8003cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d115      	bne.n	8003d24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00f      	beq.n	8003d24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 82a6 	beq.w	8004266 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
      }
      return;
 8003d22:	e2a0      	b.n	8004266 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8117 	beq.w	8003f5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d3e:	4b85      	ldr	r3, [pc, #532]	; (8003f54 <HAL_UART_IRQHandler+0x298>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 810a 	beq.w	8003f5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d011      	beq.n	8003d78 <HAL_UART_IRQHandler+0xbc>
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00b      	beq.n	8003d78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d011      	beq.n	8003da8 <HAL_UART_IRQHandler+0xec>
 8003d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2202      	movs	r2, #2
 8003d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9e:	f043 0204 	orr.w	r2, r3, #4
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d011      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x11c>
 8003db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dce:	f043 0202 	orr.w	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00b      	beq.n	8003e14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2208      	movs	r2, #8
 8003e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0a:	f043 0208 	orr.w	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d012      	beq.n	8003e46 <HAL_UART_IRQHandler+0x18a>
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00c      	beq.n	8003e46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 820c 	beq.w	800426a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d005      	beq.n	8003e9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d04f      	beq.n	8003f3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 ff40 	bl	8004d24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d141      	bne.n	8003f36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ede:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1d9      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d013      	beq.n	8003f2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <HAL_UART_IRQHandler+0x29c>)
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fd fa4e 	bl	80013b4 <HAL_DMA_Abort_IT>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e00f      	b.n	8003f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9b0 	bl	8004294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e00b      	b.n	8003f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9ac 	bl	8004294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	e007      	b.n	8003f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9a8 	bl	8004294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f4c:	e18d      	b.n	800426a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4e:	bf00      	nop
    return;
 8003f50:	e18b      	b.n	800426a <HAL_UART_IRQHandler+0x5ae>
 8003f52:	bf00      	nop
 8003f54:	04000120 	.word	0x04000120
 8003f58:	08004deb 	.word	0x08004deb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 8146 	bne.w	80041f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 813f 	beq.w	80041f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8138 	beq.w	80041f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2210      	movs	r2, #16
 8003f88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	f040 80b4 	bne.w	8004102 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 815f 	beq.w	800426e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	f080 8157 	bcs.w	800426e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 8085 	bne.w	80040e6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800400a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004012:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800401e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1da      	bne.n	8003fdc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3308      	adds	r3, #8
 800402c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800404a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800404e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800405c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e1      	bne.n	8004026 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800408c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e3      	bne.n	8004062 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e4      	bne.n	80040a6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd f929 	bl	8001338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8d4 	bl	80042a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004100:	e0b5      	b.n	800426e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410e:	b29b      	uxth	r3, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80a7 	beq.w	8004272 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a2 	beq.w	8004272 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
 8004152:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e4      	bne.n	800412e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	623b      	str	r3, [r7, #32]
   return(result);
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004188:	633a      	str	r2, [r7, #48]	; 0x30
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e3      	bne.n	8004164 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	617b      	str	r3, [r7, #20]
   return(result);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e4      	bne.n	80041ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f85c 	bl	80042a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f0:	e03f      	b.n	8004272 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00e      	beq.n	800421c <HAL_UART_IRQHandler+0x560>
 80041fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 ff88 	bl	800512a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800421a:	e02d      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
    }
    return;
 8004244:	e017      	b.n	8004276 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_UART_IRQHandler+0x5bc>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fdd9 	bl	8004e16 <UART_EndTransmit_IT>
    return;
 8004264:	e008      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004266:	bf00      	nop
 8004268:	e006      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
    return;
 800426a:	bf00      	nop
 800426c:	e004      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
      return;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004276:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004278:	37e8      	adds	r7, #232	; 0xe8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop

08004280 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c4:	b08a      	sub	sp, #40	; 0x28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	431a      	orrs	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4ba4      	ldr	r3, [pc, #656]	; (8004580 <UART_SetConfig+0x2c0>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a99      	ldr	r2, [pc, #612]	; (8004584 <UART_SetConfig+0x2c4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	4313      	orrs	r3, r2
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a90      	ldr	r2, [pc, #576]	; (8004588 <UART_SetConfig+0x2c8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d126      	bne.n	8004398 <UART_SetConfig+0xd8>
 800434a:	4b90      	ldr	r3, [pc, #576]	; (800458c <UART_SetConfig+0x2cc>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b03      	cmp	r3, #3
 8004356:	d81b      	bhi.n	8004390 <UART_SetConfig+0xd0>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0xa0>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004371 	.word	0x08004371
 8004364:	08004381 	.word	0x08004381
 8004368:	08004379 	.word	0x08004379
 800436c:	08004389 	.word	0x08004389
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e116      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004378:	2302      	movs	r3, #2
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e112      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004380:	2304      	movs	r3, #4
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e10e      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004388:	2308      	movs	r3, #8
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e10a      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004390:	2310      	movs	r3, #16
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e106      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a7c      	ldr	r2, [pc, #496]	; (8004590 <UART_SetConfig+0x2d0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d138      	bne.n	8004414 <UART_SetConfig+0x154>
 80043a2:	4b7a      	ldr	r3, [pc, #488]	; (800458c <UART_SetConfig+0x2cc>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b0c      	cmp	r3, #12
 80043ae:	d82d      	bhi.n	800440c <UART_SetConfig+0x14c>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <UART_SetConfig+0xf8>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043ed 	.word	0x080043ed
 80043bc:	0800440d 	.word	0x0800440d
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	0800440d 	.word	0x0800440d
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	080043f5 	.word	0x080043f5
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004405 	.word	0x08004405
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e0d8      	b.n	80045a6 <UART_SetConfig+0x2e6>
 80043f4:	2302      	movs	r3, #2
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e0d4      	b.n	80045a6 <UART_SetConfig+0x2e6>
 80043fc:	2304      	movs	r3, #4
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e0d0      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004404:	2308      	movs	r3, #8
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e0cc      	b.n	80045a6 <UART_SetConfig+0x2e6>
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e0c8      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a5e      	ldr	r2, [pc, #376]	; (8004594 <UART_SetConfig+0x2d4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d125      	bne.n	800446a <UART_SetConfig+0x1aa>
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <UART_SetConfig+0x2cc>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004424:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004428:	2b30      	cmp	r3, #48	; 0x30
 800442a:	d016      	beq.n	800445a <UART_SetConfig+0x19a>
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d818      	bhi.n	8004462 <UART_SetConfig+0x1a2>
 8004430:	2b20      	cmp	r3, #32
 8004432:	d00a      	beq.n	800444a <UART_SetConfig+0x18a>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d814      	bhi.n	8004462 <UART_SetConfig+0x1a2>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <UART_SetConfig+0x182>
 800443c:	2b10      	cmp	r3, #16
 800443e:	d008      	beq.n	8004452 <UART_SetConfig+0x192>
 8004440:	e00f      	b.n	8004462 <UART_SetConfig+0x1a2>
 8004442:	2300      	movs	r3, #0
 8004444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004448:	e0ad      	b.n	80045a6 <UART_SetConfig+0x2e6>
 800444a:	2302      	movs	r3, #2
 800444c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004450:	e0a9      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004452:	2304      	movs	r3, #4
 8004454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004458:	e0a5      	b.n	80045a6 <UART_SetConfig+0x2e6>
 800445a:	2308      	movs	r3, #8
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004460:	e0a1      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004462:	2310      	movs	r3, #16
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004468:	e09d      	b.n	80045a6 <UART_SetConfig+0x2e6>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a4a      	ldr	r2, [pc, #296]	; (8004598 <UART_SetConfig+0x2d8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d125      	bne.n	80044c0 <UART_SetConfig+0x200>
 8004474:	4b45      	ldr	r3, [pc, #276]	; (800458c <UART_SetConfig+0x2cc>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800447e:	2bc0      	cmp	r3, #192	; 0xc0
 8004480:	d016      	beq.n	80044b0 <UART_SetConfig+0x1f0>
 8004482:	2bc0      	cmp	r3, #192	; 0xc0
 8004484:	d818      	bhi.n	80044b8 <UART_SetConfig+0x1f8>
 8004486:	2b80      	cmp	r3, #128	; 0x80
 8004488:	d00a      	beq.n	80044a0 <UART_SetConfig+0x1e0>
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d814      	bhi.n	80044b8 <UART_SetConfig+0x1f8>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <UART_SetConfig+0x1d8>
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d008      	beq.n	80044a8 <UART_SetConfig+0x1e8>
 8004496:	e00f      	b.n	80044b8 <UART_SetConfig+0x1f8>
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e082      	b.n	80045a6 <UART_SetConfig+0x2e6>
 80044a0:	2302      	movs	r3, #2
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e07e      	b.n	80045a6 <UART_SetConfig+0x2e6>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e07a      	b.n	80045a6 <UART_SetConfig+0x2e6>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e076      	b.n	80045a6 <UART_SetConfig+0x2e6>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e072      	b.n	80045a6 <UART_SetConfig+0x2e6>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a35      	ldr	r2, [pc, #212]	; (800459c <UART_SetConfig+0x2dc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d12a      	bne.n	8004520 <UART_SetConfig+0x260>
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <UART_SetConfig+0x2cc>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d8:	d01a      	beq.n	8004510 <UART_SetConfig+0x250>
 80044da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044de:	d81b      	bhi.n	8004518 <UART_SetConfig+0x258>
 80044e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e4:	d00c      	beq.n	8004500 <UART_SetConfig+0x240>
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ea:	d815      	bhi.n	8004518 <UART_SetConfig+0x258>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <UART_SetConfig+0x238>
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d008      	beq.n	8004508 <UART_SetConfig+0x248>
 80044f6:	e00f      	b.n	8004518 <UART_SetConfig+0x258>
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e052      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004500:	2302      	movs	r3, #2
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e04e      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004508:	2304      	movs	r3, #4
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e04a      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004510:	2308      	movs	r3, #8
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e046      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004518:	2310      	movs	r3, #16
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e042      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <UART_SetConfig+0x2c4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d13a      	bne.n	80045a0 <UART_SetConfig+0x2e0>
 800452a:	4b18      	ldr	r3, [pc, #96]	; (800458c <UART_SetConfig+0x2cc>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004538:	d01a      	beq.n	8004570 <UART_SetConfig+0x2b0>
 800453a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800453e:	d81b      	bhi.n	8004578 <UART_SetConfig+0x2b8>
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004544:	d00c      	beq.n	8004560 <UART_SetConfig+0x2a0>
 8004546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454a:	d815      	bhi.n	8004578 <UART_SetConfig+0x2b8>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <UART_SetConfig+0x298>
 8004550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004554:	d008      	beq.n	8004568 <UART_SetConfig+0x2a8>
 8004556:	e00f      	b.n	8004578 <UART_SetConfig+0x2b8>
 8004558:	2300      	movs	r3, #0
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455e:	e022      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004560:	2302      	movs	r3, #2
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e01e      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004568:	2304      	movs	r3, #4
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e01a      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004570:	2308      	movs	r3, #8
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e016      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004578:	2310      	movs	r3, #16
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457e:	e012      	b.n	80045a6 <UART_SetConfig+0x2e6>
 8004580:	efff69f3 	.word	0xefff69f3
 8004584:	40008000 	.word	0x40008000
 8004588:	40013800 	.word	0x40013800
 800458c:	40021000 	.word	0x40021000
 8004590:	40004400 	.word	0x40004400
 8004594:	40004800 	.word	0x40004800
 8004598:	40004c00 	.word	0x40004c00
 800459c:	40005000 	.word	0x40005000
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a9f      	ldr	r2, [pc, #636]	; (8004828 <UART_SetConfig+0x568>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d17a      	bne.n	80046a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d824      	bhi.n	8004602 <UART_SetConfig+0x342>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x300>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	08004603 	.word	0x08004603
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	08004603 	.word	0x08004603
 80045d0:	080045f3 	.word	0x080045f3
 80045d4:	08004603 	.word	0x08004603
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004603 	.word	0x08004603
 80045e0:	080045fb 	.word	0x080045fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e4:	f7fd fff0 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80045e8:	61f8      	str	r0, [r7, #28]
        break;
 80045ea:	e010      	b.n	800460e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ec:	4b8f      	ldr	r3, [pc, #572]	; (800482c <UART_SetConfig+0x56c>)
 80045ee:	61fb      	str	r3, [r7, #28]
        break;
 80045f0:	e00d      	b.n	800460e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f2:	f7fd ff51 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 80045f6:	61f8      	str	r0, [r7, #28]
        break;
 80045f8:	e009      	b.n	800460e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fe:	61fb      	str	r3, [r7, #28]
        break;
 8004600:	e005      	b.n	800460e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800460c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80fb 	beq.w	800480c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	429a      	cmp	r2, r3
 8004624:	d305      	bcc.n	8004632 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	429a      	cmp	r2, r3
 8004630:	d903      	bls.n	800463a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004638:	e0e8      	b.n	800480c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2200      	movs	r2, #0
 800463e:	461c      	mov	r4, r3
 8004640:	4615      	mov	r5, r2
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	022b      	lsls	r3, r5, #8
 800464c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004650:	0222      	lsls	r2, r4, #8
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	6849      	ldr	r1, [r1, #4]
 8004656:	0849      	lsrs	r1, r1, #1
 8004658:	2000      	movs	r0, #0
 800465a:	4688      	mov	r8, r1
 800465c:	4681      	mov	r9, r0
 800465e:	eb12 0a08 	adds.w	sl, r2, r8
 8004662:	eb43 0b09 	adc.w	fp, r3, r9
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004674:	4650      	mov	r0, sl
 8004676:	4659      	mov	r1, fp
 8004678:	f7fb fe0a 	bl	8000290 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4613      	mov	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d308      	bcc.n	800469e <UART_SetConfig+0x3de>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004692:	d204      	bcs.n	800469e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	60da      	str	r2, [r3, #12]
 800469c:	e0b6      	b.n	800480c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046a4:	e0b2      	b.n	800480c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ae:	d15e      	bne.n	800476e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d828      	bhi.n	800470a <UART_SetConfig+0x44a>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <UART_SetConfig+0x400>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	0800470b 	.word	0x0800470b
 80046d0:	080046fb 	.word	0x080046fb
 80046d4:	0800470b 	.word	0x0800470b
 80046d8:	0800470b 	.word	0x0800470b
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	08004703 	.word	0x08004703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7fd ff70 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80046e8:	61f8      	str	r0, [r7, #28]
        break;
 80046ea:	e014      	b.n	8004716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ec:	f7fd ff82 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 80046f0:	61f8      	str	r0, [r7, #28]
        break;
 80046f2:	e010      	b.n	8004716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b4d      	ldr	r3, [pc, #308]	; (800482c <UART_SetConfig+0x56c>)
 80046f6:	61fb      	str	r3, [r7, #28]
        break;
 80046f8:	e00d      	b.n	8004716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fa:	f7fd fecd 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 80046fe:	61f8      	str	r0, [r7, #28]
        break;
 8004700:	e009      	b.n	8004716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	61fb      	str	r3, [r7, #28]
        break;
 8004708:	e005      	b.n	8004716 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d077      	beq.n	800480c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005a      	lsls	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	441a      	add	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d916      	bls.n	8004766 <UART_SetConfig+0x4a6>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473e:	d212      	bcs.n	8004766 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f023 030f 	bic.w	r3, r3, #15
 8004748:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	b29b      	uxth	r3, r3
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	b29a      	uxth	r2, r3
 8004756:	8afb      	ldrh	r3, [r7, #22]
 8004758:	4313      	orrs	r3, r2
 800475a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	8afa      	ldrh	r2, [r7, #22]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e052      	b.n	800480c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800476c:	e04e      	b.n	800480c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004772:	2b08      	cmp	r3, #8
 8004774:	d827      	bhi.n	80047c6 <UART_SetConfig+0x506>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0x4bc>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047b1 	.word	0x080047b1
 8004788:	080047c7 	.word	0x080047c7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047c7 	.word	0x080047c7
 8004794:	080047c7 	.word	0x080047c7
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047bf 	.word	0x080047bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fd ff12 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80047a4:	61f8      	str	r0, [r7, #28]
        break;
 80047a6:	e014      	b.n	80047d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a8:	f7fd ff24 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 80047ac:	61f8      	str	r0, [r7, #28]
        break;
 80047ae:	e010      	b.n	80047d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b0:	4b1e      	ldr	r3, [pc, #120]	; (800482c <UART_SetConfig+0x56c>)
 80047b2:	61fb      	str	r3, [r7, #28]
        break;
 80047b4:	e00d      	b.n	80047d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b6:	f7fd fe6f 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 80047ba:	61f8      	str	r0, [r7, #28]
        break;
 80047bc:	e009      	b.n	80047d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c2:	61fb      	str	r3, [r7, #28]
        break;
 80047c4:	e005      	b.n	80047d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047d0:	bf00      	nop
    }

    if (pclk != 0U)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d019      	beq.n	800480c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	085a      	lsrs	r2, r3, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	441a      	add	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	d909      	bls.n	8004806 <UART_SetConfig+0x546>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d205      	bcs.n	8004806 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e002      	b.n	800480c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004818:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800481c:	4618      	mov	r0, r3
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	40008000 	.word	0x40008000
 800482c:	00f42400 	.word	0x00f42400

08004830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01a      	beq.n	8004946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492e:	d10a      	bne.n	8004946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
  }
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af02      	add	r7, sp, #8
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004984:	f7fc fa7e 	bl	8000e84 <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d10e      	bne.n	80049b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f82d 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e023      	b.n	80049fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d10e      	bne.n	80049e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f817 	bl	8004a06 <UART_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e00d      	b.n	80049fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b09c      	sub	sp, #112	; 0x70
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4613      	mov	r3, r2
 8004a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a16:	e0a5      	b.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a1e:	f000 80a1 	beq.w	8004b64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fc fa2f 	bl	8000e84 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d13e      	bne.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e6      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	663b      	str	r3, [r7, #96]	; 0x60
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e5      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e067      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d04f      	beq.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d147      	bne.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004adc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
 8004afe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b30:	623a      	str	r2, [r7, #32]
 8004b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	6a3a      	ldr	r2, [r7, #32]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e010      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	f43f af4a 	beq.w	8004a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3770      	adds	r7, #112	; 0x70
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b097      	sub	sp, #92	; 0x5c
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc2:	d10e      	bne.n	8004be2 <UART_Start_Receive_IT+0x52>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <UART_Start_Receive_IT+0x48>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bd6:	e02d      	b.n	8004c34 <UART_Start_Receive_IT+0xa4>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	22ff      	movs	r2, #255	; 0xff
 8004bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004be0:	e028      	b.n	8004c34 <UART_Start_Receive_IT+0xa4>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10d      	bne.n	8004c06 <UART_Start_Receive_IT+0x76>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <UART_Start_Receive_IT+0x6c>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bfa:	e01b      	b.n	8004c34 <UART_Start_Receive_IT+0xa4>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	227f      	movs	r2, #127	; 0x7f
 8004c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c04:	e016      	b.n	8004c34 <UART_Start_Receive_IT+0xa4>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0e:	d10d      	bne.n	8004c2c <UART_Start_Receive_IT+0x9c>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <UART_Start_Receive_IT+0x92>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	227f      	movs	r2, #127	; 0x7f
 8004c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c20:	e008      	b.n	8004c34 <UART_Start_Receive_IT+0xa4>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	223f      	movs	r2, #63	; 0x3f
 8004c26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c2a:	e003      	b.n	8004c34 <UART_Start_Receive_IT+0xa4>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2222      	movs	r2, #34	; 0x22
 8004c40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3308      	adds	r3, #8
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	657b      	str	r3, [r7, #84]	; 0x54
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c62:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d107      	bne.n	8004c90 <UART_Start_Receive_IT+0x100>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d103      	bne.n	8004c90 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <UART_Start_Receive_IT+0x18c>)
 8004c8c:	665a      	str	r2, [r3, #100]	; 0x64
 8004c8e:	e002      	b.n	8004c96 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a23      	ldr	r2, [pc, #140]	; (8004d20 <UART_Start_Receive_IT+0x190>)
 8004c94:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d019      	beq.n	8004cda <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_Start_Receive_IT+0x116>
 8004cd8:	e018      	b.n	8004d0c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f043 0320 	orr.w	r3, r3, #32
 8004cee:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf8:	623b      	str	r3, [r7, #32]
 8004cfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	69f9      	ldr	r1, [r7, #28]
 8004cfe:	6a3a      	ldr	r2, [r7, #32]
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e6      	bne.n	8004cda <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	375c      	adds	r7, #92	; 0x5c
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	08004fcb 	.word	0x08004fcb
 8004d20:	08004e6b 	.word	0x08004e6b

08004d24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b095      	sub	sp, #84	; 0x54
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e6      	bne.n	8004d2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3308      	adds	r3, #8
 8004d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e5      	bne.n	8004d5e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d118      	bne.n	8004dcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f023 0310 	bic.w	r3, r3, #16
 8004dae:	647b      	str	r3, [r7, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6979      	ldr	r1, [r7, #20]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004dde:	bf00      	nop
 8004de0:	3754      	adds	r7, #84	; 0x54
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff fa43 	bl	8004294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b088      	sub	sp, #32
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff fa0f 	bl	8004280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e62:	bf00      	nop
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b096      	sub	sp, #88	; 0x58
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e80:	2b22      	cmp	r3, #34	; 0x22
 8004e82:	f040 8094 	bne.w	8004fae <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e90:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004e94:	b2d9      	uxtb	r1, r3
 8004e96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	400a      	ands	r2, r1
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d179      	bne.n	8004fc2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
 8004eee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e6      	bne.n	8004ece <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f20:	633a      	str	r2, [r7, #48]	; 0x30
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d12e      	bne.n	8004fa6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e6      	bne.n	8004f4e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d103      	bne.n	8004f96 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2210      	movs	r2, #16
 8004f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff f982 	bl	80042a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fa4:	e00d      	b.n	8004fc2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fb fc5a 	bl	8000860 <HAL_UART_RxCpltCallback>
}
 8004fac:	e009      	b.n	8004fc2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	8b1b      	ldrh	r3, [r3, #24]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0208 	orr.w	r2, r2, #8
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	831a      	strh	r2, [r3, #24]
}
 8004fc2:	bf00      	nop
 8004fc4:	3758      	adds	r7, #88	; 0x58
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b096      	sub	sp, #88	; 0x58
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe0:	2b22      	cmp	r3, #34	; 0x22
 8004fe2:	f040 8094 	bne.w	800510e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004fec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ff6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004ffa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004ffe:	4013      	ands	r3, r2
 8005000:	b29a      	uxth	r2, r3
 8005002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005004:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	1c9a      	adds	r2, r3, #2
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d179      	bne.n	8005122 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800504c:	643b      	str	r3, [r7, #64]	; 0x40
 800504e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e6      	bne.n	800502e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3308      	adds	r3, #8
 8005066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	64bb      	str	r3, [r7, #72]	; 0x48
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e5      	bne.n	8005060 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d12e      	bne.n	8005106 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0310 	bic.w	r3, r3, #16
 80050c2:	647b      	str	r3, [r7, #68]	; 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d103      	bne.n	80050f6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2210      	movs	r2, #16
 80050f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff f8d2 	bl	80042a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005104:	e00d      	b.n	8005122 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fb fbaa 	bl	8000860 <HAL_UART_RxCpltCallback>
}
 800510c:	e009      	b.n	8005122 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	8b1b      	ldrh	r3, [r3, #24]
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0208 	orr.w	r2, r2, #8
 800511e:	b292      	uxth	r2, r2
 8005120:	831a      	strh	r2, [r3, #24]
}
 8005122:	bf00      	nop
 8005124:	3758      	adds	r7, #88	; 0x58
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <__errno>:
 8005140:	4b01      	ldr	r3, [pc, #4]	; (8005148 <__errno+0x8>)
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	2000000c 	.word	0x2000000c

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	; (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	; (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	; (8005190 <__libc_init_array+0x44>)
 8005160:	f000 ffae 	bl	80060c0 <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	080061c8 	.word	0x080061c8
 8005188:	080061c8 	.word	0x080061c8
 800518c:	080061c8 	.word	0x080061c8
 8005190:	080061cc 	.word	0x080061cc

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <iprintf>:
 80051a4:	b40f      	push	{r0, r1, r2, r3}
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <iprintf+0x2c>)
 80051a8:	b513      	push	{r0, r1, r4, lr}
 80051aa:	681c      	ldr	r4, [r3, #0]
 80051ac:	b124      	cbz	r4, 80051b8 <iprintf+0x14>
 80051ae:	69a3      	ldr	r3, [r4, #24]
 80051b0:	b913      	cbnz	r3, 80051b8 <iprintf+0x14>
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 f866 	bl	8005284 <__sinit>
 80051b8:	ab05      	add	r3, sp, #20
 80051ba:	9a04      	ldr	r2, [sp, #16]
 80051bc:	68a1      	ldr	r1, [r4, #8]
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 f9bd 	bl	8005540 <_vfiprintf_r>
 80051c6:	b002      	add	sp, #8
 80051c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr
 80051d0:	2000000c 	.word	0x2000000c

080051d4 <std>:
 80051d4:	2300      	movs	r3, #0
 80051d6:	b510      	push	{r4, lr}
 80051d8:	4604      	mov	r4, r0
 80051da:	e9c0 3300 	strd	r3, r3, [r0]
 80051de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051e2:	6083      	str	r3, [r0, #8]
 80051e4:	8181      	strh	r1, [r0, #12]
 80051e6:	6643      	str	r3, [r0, #100]	; 0x64
 80051e8:	81c2      	strh	r2, [r0, #14]
 80051ea:	6183      	str	r3, [r0, #24]
 80051ec:	4619      	mov	r1, r3
 80051ee:	2208      	movs	r2, #8
 80051f0:	305c      	adds	r0, #92	; 0x5c
 80051f2:	f7ff ffcf 	bl	8005194 <memset>
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <std+0x38>)
 80051f8:	6263      	str	r3, [r4, #36]	; 0x24
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <std+0x3c>)
 80051fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x40>)
 8005200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x44>)
 8005204:	6224      	str	r4, [r4, #32]
 8005206:	6323      	str	r3, [r4, #48]	; 0x30
 8005208:	bd10      	pop	{r4, pc}
 800520a:	bf00      	nop
 800520c:	08005ae9 	.word	0x08005ae9
 8005210:	08005b0b 	.word	0x08005b0b
 8005214:	08005b43 	.word	0x08005b43
 8005218:	08005b67 	.word	0x08005b67

0800521c <_cleanup_r>:
 800521c:	4901      	ldr	r1, [pc, #4]	; (8005224 <_cleanup_r+0x8>)
 800521e:	f000 b8af 	b.w	8005380 <_fwalk_reent>
 8005222:	bf00      	nop
 8005224:	08005e41 	.word	0x08005e41

08005228 <__sfmoreglue>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	2268      	movs	r2, #104	; 0x68
 800522c:	1e4d      	subs	r5, r1, #1
 800522e:	4355      	muls	r5, r2
 8005230:	460e      	mov	r6, r1
 8005232:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005236:	f000 f8e5 	bl	8005404 <_malloc_r>
 800523a:	4604      	mov	r4, r0
 800523c:	b140      	cbz	r0, 8005250 <__sfmoreglue+0x28>
 800523e:	2100      	movs	r1, #0
 8005240:	e9c0 1600 	strd	r1, r6, [r0]
 8005244:	300c      	adds	r0, #12
 8005246:	60a0      	str	r0, [r4, #8]
 8005248:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800524c:	f7ff ffa2 	bl	8005194 <memset>
 8005250:	4620      	mov	r0, r4
 8005252:	bd70      	pop	{r4, r5, r6, pc}

08005254 <__sfp_lock_acquire>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <__sfp_lock_acquire+0x8>)
 8005256:	f000 b8b3 	b.w	80053c0 <__retarget_lock_acquire_recursive>
 800525a:	bf00      	nop
 800525c:	20000341 	.word	0x20000341

08005260 <__sfp_lock_release>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__sfp_lock_release+0x8>)
 8005262:	f000 b8ae 	b.w	80053c2 <__retarget_lock_release_recursive>
 8005266:	bf00      	nop
 8005268:	20000341 	.word	0x20000341

0800526c <__sinit_lock_acquire>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__sinit_lock_acquire+0x8>)
 800526e:	f000 b8a7 	b.w	80053c0 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	20000342 	.word	0x20000342

08005278 <__sinit_lock_release>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sinit_lock_release+0x8>)
 800527a:	f000 b8a2 	b.w	80053c2 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	20000342 	.word	0x20000342

08005284 <__sinit>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4604      	mov	r4, r0
 8005288:	f7ff fff0 	bl	800526c <__sinit_lock_acquire>
 800528c:	69a3      	ldr	r3, [r4, #24]
 800528e:	b11b      	cbz	r3, 8005298 <__sinit+0x14>
 8005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005294:	f7ff bff0 	b.w	8005278 <__sinit_lock_release>
 8005298:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800529c:	6523      	str	r3, [r4, #80]	; 0x50
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <__sinit+0x68>)
 80052a0:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <__sinit+0x6c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80052a6:	42a3      	cmp	r3, r4
 80052a8:	bf04      	itt	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	61a3      	streq	r3, [r4, #24]
 80052ae:	4620      	mov	r0, r4
 80052b0:	f000 f820 	bl	80052f4 <__sfp>
 80052b4:	6060      	str	r0, [r4, #4]
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 f81c 	bl	80052f4 <__sfp>
 80052bc:	60a0      	str	r0, [r4, #8]
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 f818 	bl	80052f4 <__sfp>
 80052c4:	2200      	movs	r2, #0
 80052c6:	60e0      	str	r0, [r4, #12]
 80052c8:	2104      	movs	r1, #4
 80052ca:	6860      	ldr	r0, [r4, #4]
 80052cc:	f7ff ff82 	bl	80051d4 <std>
 80052d0:	68a0      	ldr	r0, [r4, #8]
 80052d2:	2201      	movs	r2, #1
 80052d4:	2109      	movs	r1, #9
 80052d6:	f7ff ff7d 	bl	80051d4 <std>
 80052da:	68e0      	ldr	r0, [r4, #12]
 80052dc:	2202      	movs	r2, #2
 80052de:	2112      	movs	r1, #18
 80052e0:	f7ff ff78 	bl	80051d4 <std>
 80052e4:	2301      	movs	r3, #1
 80052e6:	61a3      	str	r3, [r4, #24]
 80052e8:	e7d2      	b.n	8005290 <__sinit+0xc>
 80052ea:	bf00      	nop
 80052ec:	08006128 	.word	0x08006128
 80052f0:	0800521d 	.word	0x0800521d

080052f4 <__sfp>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	4607      	mov	r7, r0
 80052f8:	f7ff ffac 	bl	8005254 <__sfp_lock_acquire>
 80052fc:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <__sfp+0x84>)
 80052fe:	681e      	ldr	r6, [r3, #0]
 8005300:	69b3      	ldr	r3, [r6, #24]
 8005302:	b913      	cbnz	r3, 800530a <__sfp+0x16>
 8005304:	4630      	mov	r0, r6
 8005306:	f7ff ffbd 	bl	8005284 <__sinit>
 800530a:	3648      	adds	r6, #72	; 0x48
 800530c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005310:	3b01      	subs	r3, #1
 8005312:	d503      	bpl.n	800531c <__sfp+0x28>
 8005314:	6833      	ldr	r3, [r6, #0]
 8005316:	b30b      	cbz	r3, 800535c <__sfp+0x68>
 8005318:	6836      	ldr	r6, [r6, #0]
 800531a:	e7f7      	b.n	800530c <__sfp+0x18>
 800531c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005320:	b9d5      	cbnz	r5, 8005358 <__sfp+0x64>
 8005322:	4b16      	ldr	r3, [pc, #88]	; (800537c <__sfp+0x88>)
 8005324:	60e3      	str	r3, [r4, #12]
 8005326:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800532a:	6665      	str	r5, [r4, #100]	; 0x64
 800532c:	f000 f847 	bl	80053be <__retarget_lock_init_recursive>
 8005330:	f7ff ff96 	bl	8005260 <__sfp_lock_release>
 8005334:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005338:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800533c:	6025      	str	r5, [r4, #0]
 800533e:	61a5      	str	r5, [r4, #24]
 8005340:	2208      	movs	r2, #8
 8005342:	4629      	mov	r1, r5
 8005344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005348:	f7ff ff24 	bl	8005194 <memset>
 800534c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005354:	4620      	mov	r0, r4
 8005356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005358:	3468      	adds	r4, #104	; 0x68
 800535a:	e7d9      	b.n	8005310 <__sfp+0x1c>
 800535c:	2104      	movs	r1, #4
 800535e:	4638      	mov	r0, r7
 8005360:	f7ff ff62 	bl	8005228 <__sfmoreglue>
 8005364:	4604      	mov	r4, r0
 8005366:	6030      	str	r0, [r6, #0]
 8005368:	2800      	cmp	r0, #0
 800536a:	d1d5      	bne.n	8005318 <__sfp+0x24>
 800536c:	f7ff ff78 	bl	8005260 <__sfp_lock_release>
 8005370:	230c      	movs	r3, #12
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	e7ee      	b.n	8005354 <__sfp+0x60>
 8005376:	bf00      	nop
 8005378:	08006128 	.word	0x08006128
 800537c:	ffff0001 	.word	0xffff0001

08005380 <_fwalk_reent>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	4606      	mov	r6, r0
 8005386:	4688      	mov	r8, r1
 8005388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800538c:	2700      	movs	r7, #0
 800538e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005392:	f1b9 0901 	subs.w	r9, r9, #1
 8005396:	d505      	bpl.n	80053a4 <_fwalk_reent+0x24>
 8005398:	6824      	ldr	r4, [r4, #0]
 800539a:	2c00      	cmp	r4, #0
 800539c:	d1f7      	bne.n	800538e <_fwalk_reent+0xe>
 800539e:	4638      	mov	r0, r7
 80053a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a4:	89ab      	ldrh	r3, [r5, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d907      	bls.n	80053ba <_fwalk_reent+0x3a>
 80053aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053ae:	3301      	adds	r3, #1
 80053b0:	d003      	beq.n	80053ba <_fwalk_reent+0x3a>
 80053b2:	4629      	mov	r1, r5
 80053b4:	4630      	mov	r0, r6
 80053b6:	47c0      	blx	r8
 80053b8:	4307      	orrs	r7, r0
 80053ba:	3568      	adds	r5, #104	; 0x68
 80053bc:	e7e9      	b.n	8005392 <_fwalk_reent+0x12>

080053be <__retarget_lock_init_recursive>:
 80053be:	4770      	bx	lr

080053c0 <__retarget_lock_acquire_recursive>:
 80053c0:	4770      	bx	lr

080053c2 <__retarget_lock_release_recursive>:
 80053c2:	4770      	bx	lr

080053c4 <sbrk_aligned>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	4e0e      	ldr	r6, [pc, #56]	; (8005400 <sbrk_aligned+0x3c>)
 80053c8:	460c      	mov	r4, r1
 80053ca:	6831      	ldr	r1, [r6, #0]
 80053cc:	4605      	mov	r5, r0
 80053ce:	b911      	cbnz	r1, 80053d6 <sbrk_aligned+0x12>
 80053d0:	f000 fb7a 	bl	8005ac8 <_sbrk_r>
 80053d4:	6030      	str	r0, [r6, #0]
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 fb75 	bl	8005ac8 <_sbrk_r>
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	d00a      	beq.n	80053f8 <sbrk_aligned+0x34>
 80053e2:	1cc4      	adds	r4, r0, #3
 80053e4:	f024 0403 	bic.w	r4, r4, #3
 80053e8:	42a0      	cmp	r0, r4
 80053ea:	d007      	beq.n	80053fc <sbrk_aligned+0x38>
 80053ec:	1a21      	subs	r1, r4, r0
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 fb6a 	bl	8005ac8 <_sbrk_r>
 80053f4:	3001      	adds	r0, #1
 80053f6:	d101      	bne.n	80053fc <sbrk_aligned+0x38>
 80053f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80053fc:	4620      	mov	r0, r4
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	20000348 	.word	0x20000348

08005404 <_malloc_r>:
 8005404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005408:	1ccd      	adds	r5, r1, #3
 800540a:	f025 0503 	bic.w	r5, r5, #3
 800540e:	3508      	adds	r5, #8
 8005410:	2d0c      	cmp	r5, #12
 8005412:	bf38      	it	cc
 8005414:	250c      	movcc	r5, #12
 8005416:	2d00      	cmp	r5, #0
 8005418:	4607      	mov	r7, r0
 800541a:	db01      	blt.n	8005420 <_malloc_r+0x1c>
 800541c:	42a9      	cmp	r1, r5
 800541e:	d905      	bls.n	800542c <_malloc_r+0x28>
 8005420:	230c      	movs	r3, #12
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	2600      	movs	r6, #0
 8005426:	4630      	mov	r0, r6
 8005428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542c:	4e2e      	ldr	r6, [pc, #184]	; (80054e8 <_malloc_r+0xe4>)
 800542e:	f000 fdbb 	bl	8005fa8 <__malloc_lock>
 8005432:	6833      	ldr	r3, [r6, #0]
 8005434:	461c      	mov	r4, r3
 8005436:	bb34      	cbnz	r4, 8005486 <_malloc_r+0x82>
 8005438:	4629      	mov	r1, r5
 800543a:	4638      	mov	r0, r7
 800543c:	f7ff ffc2 	bl	80053c4 <sbrk_aligned>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	4604      	mov	r4, r0
 8005444:	d14d      	bne.n	80054e2 <_malloc_r+0xde>
 8005446:	6834      	ldr	r4, [r6, #0]
 8005448:	4626      	mov	r6, r4
 800544a:	2e00      	cmp	r6, #0
 800544c:	d140      	bne.n	80054d0 <_malloc_r+0xcc>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	4631      	mov	r1, r6
 8005452:	4638      	mov	r0, r7
 8005454:	eb04 0803 	add.w	r8, r4, r3
 8005458:	f000 fb36 	bl	8005ac8 <_sbrk_r>
 800545c:	4580      	cmp	r8, r0
 800545e:	d13a      	bne.n	80054d6 <_malloc_r+0xd2>
 8005460:	6821      	ldr	r1, [r4, #0]
 8005462:	3503      	adds	r5, #3
 8005464:	1a6d      	subs	r5, r5, r1
 8005466:	f025 0503 	bic.w	r5, r5, #3
 800546a:	3508      	adds	r5, #8
 800546c:	2d0c      	cmp	r5, #12
 800546e:	bf38      	it	cc
 8005470:	250c      	movcc	r5, #12
 8005472:	4629      	mov	r1, r5
 8005474:	4638      	mov	r0, r7
 8005476:	f7ff ffa5 	bl	80053c4 <sbrk_aligned>
 800547a:	3001      	adds	r0, #1
 800547c:	d02b      	beq.n	80054d6 <_malloc_r+0xd2>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	442b      	add	r3, r5
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	e00e      	b.n	80054a4 <_malloc_r+0xa0>
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	1b52      	subs	r2, r2, r5
 800548a:	d41e      	bmi.n	80054ca <_malloc_r+0xc6>
 800548c:	2a0b      	cmp	r2, #11
 800548e:	d916      	bls.n	80054be <_malloc_r+0xba>
 8005490:	1961      	adds	r1, r4, r5
 8005492:	42a3      	cmp	r3, r4
 8005494:	6025      	str	r5, [r4, #0]
 8005496:	bf18      	it	ne
 8005498:	6059      	strne	r1, [r3, #4]
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	bf08      	it	eq
 800549e:	6031      	streq	r1, [r6, #0]
 80054a0:	5162      	str	r2, [r4, r5]
 80054a2:	604b      	str	r3, [r1, #4]
 80054a4:	4638      	mov	r0, r7
 80054a6:	f104 060b 	add.w	r6, r4, #11
 80054aa:	f000 fd83 	bl	8005fb4 <__malloc_unlock>
 80054ae:	f026 0607 	bic.w	r6, r6, #7
 80054b2:	1d23      	adds	r3, r4, #4
 80054b4:	1af2      	subs	r2, r6, r3
 80054b6:	d0b6      	beq.n	8005426 <_malloc_r+0x22>
 80054b8:	1b9b      	subs	r3, r3, r6
 80054ba:	50a3      	str	r3, [r4, r2]
 80054bc:	e7b3      	b.n	8005426 <_malloc_r+0x22>
 80054be:	6862      	ldr	r2, [r4, #4]
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	bf0c      	ite	eq
 80054c4:	6032      	streq	r2, [r6, #0]
 80054c6:	605a      	strne	r2, [r3, #4]
 80054c8:	e7ec      	b.n	80054a4 <_malloc_r+0xa0>
 80054ca:	4623      	mov	r3, r4
 80054cc:	6864      	ldr	r4, [r4, #4]
 80054ce:	e7b2      	b.n	8005436 <_malloc_r+0x32>
 80054d0:	4634      	mov	r4, r6
 80054d2:	6876      	ldr	r6, [r6, #4]
 80054d4:	e7b9      	b.n	800544a <_malloc_r+0x46>
 80054d6:	230c      	movs	r3, #12
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4638      	mov	r0, r7
 80054dc:	f000 fd6a 	bl	8005fb4 <__malloc_unlock>
 80054e0:	e7a1      	b.n	8005426 <_malloc_r+0x22>
 80054e2:	6025      	str	r5, [r4, #0]
 80054e4:	e7de      	b.n	80054a4 <_malloc_r+0xa0>
 80054e6:	bf00      	nop
 80054e8:	20000344 	.word	0x20000344

080054ec <__sfputc_r>:
 80054ec:	6893      	ldr	r3, [r2, #8]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	b410      	push	{r4}
 80054f4:	6093      	str	r3, [r2, #8]
 80054f6:	da08      	bge.n	800550a <__sfputc_r+0x1e>
 80054f8:	6994      	ldr	r4, [r2, #24]
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	db01      	blt.n	8005502 <__sfputc_r+0x16>
 80054fe:	290a      	cmp	r1, #10
 8005500:	d103      	bne.n	800550a <__sfputc_r+0x1e>
 8005502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005506:	f000 bb33 	b.w	8005b70 <__swbuf_r>
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	1c58      	adds	r0, r3, #1
 800550e:	6010      	str	r0, [r2, #0]
 8005510:	7019      	strb	r1, [r3, #0]
 8005512:	4608      	mov	r0, r1
 8005514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005518:	4770      	bx	lr

0800551a <__sfputs_r>:
 800551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	4614      	mov	r4, r2
 8005522:	18d5      	adds	r5, r2, r3
 8005524:	42ac      	cmp	r4, r5
 8005526:	d101      	bne.n	800552c <__sfputs_r+0x12>
 8005528:	2000      	movs	r0, #0
 800552a:	e007      	b.n	800553c <__sfputs_r+0x22>
 800552c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005530:	463a      	mov	r2, r7
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff ffda 	bl	80054ec <__sfputc_r>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d1f3      	bne.n	8005524 <__sfputs_r+0xa>
 800553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005540 <_vfiprintf_r>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	460d      	mov	r5, r1
 8005546:	b09d      	sub	sp, #116	; 0x74
 8005548:	4614      	mov	r4, r2
 800554a:	4698      	mov	r8, r3
 800554c:	4606      	mov	r6, r0
 800554e:	b118      	cbz	r0, 8005558 <_vfiprintf_r+0x18>
 8005550:	6983      	ldr	r3, [r0, #24]
 8005552:	b90b      	cbnz	r3, 8005558 <_vfiprintf_r+0x18>
 8005554:	f7ff fe96 	bl	8005284 <__sinit>
 8005558:	4b89      	ldr	r3, [pc, #548]	; (8005780 <_vfiprintf_r+0x240>)
 800555a:	429d      	cmp	r5, r3
 800555c:	d11b      	bne.n	8005596 <_vfiprintf_r+0x56>
 800555e:	6875      	ldr	r5, [r6, #4]
 8005560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005562:	07d9      	lsls	r1, r3, #31
 8005564:	d405      	bmi.n	8005572 <_vfiprintf_r+0x32>
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	059a      	lsls	r2, r3, #22
 800556a:	d402      	bmi.n	8005572 <_vfiprintf_r+0x32>
 800556c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556e:	f7ff ff27 	bl	80053c0 <__retarget_lock_acquire_recursive>
 8005572:	89ab      	ldrh	r3, [r5, #12]
 8005574:	071b      	lsls	r3, r3, #28
 8005576:	d501      	bpl.n	800557c <_vfiprintf_r+0x3c>
 8005578:	692b      	ldr	r3, [r5, #16]
 800557a:	b9eb      	cbnz	r3, 80055b8 <_vfiprintf_r+0x78>
 800557c:	4629      	mov	r1, r5
 800557e:	4630      	mov	r0, r6
 8005580:	f000 fb5a 	bl	8005c38 <__swsetup_r>
 8005584:	b1c0      	cbz	r0, 80055b8 <_vfiprintf_r+0x78>
 8005586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005588:	07dc      	lsls	r4, r3, #31
 800558a:	d50e      	bpl.n	80055aa <_vfiprintf_r+0x6a>
 800558c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005590:	b01d      	add	sp, #116	; 0x74
 8005592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005596:	4b7b      	ldr	r3, [pc, #492]	; (8005784 <_vfiprintf_r+0x244>)
 8005598:	429d      	cmp	r5, r3
 800559a:	d101      	bne.n	80055a0 <_vfiprintf_r+0x60>
 800559c:	68b5      	ldr	r5, [r6, #8]
 800559e:	e7df      	b.n	8005560 <_vfiprintf_r+0x20>
 80055a0:	4b79      	ldr	r3, [pc, #484]	; (8005788 <_vfiprintf_r+0x248>)
 80055a2:	429d      	cmp	r5, r3
 80055a4:	bf08      	it	eq
 80055a6:	68f5      	ldreq	r5, [r6, #12]
 80055a8:	e7da      	b.n	8005560 <_vfiprintf_r+0x20>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	0598      	lsls	r0, r3, #22
 80055ae:	d4ed      	bmi.n	800558c <_vfiprintf_r+0x4c>
 80055b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b2:	f7ff ff06 	bl	80053c2 <__retarget_lock_release_recursive>
 80055b6:	e7e9      	b.n	800558c <_vfiprintf_r+0x4c>
 80055b8:	2300      	movs	r3, #0
 80055ba:	9309      	str	r3, [sp, #36]	; 0x24
 80055bc:	2320      	movs	r3, #32
 80055be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c6:	2330      	movs	r3, #48	; 0x30
 80055c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800578c <_vfiprintf_r+0x24c>
 80055cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d0:	f04f 0901 	mov.w	r9, #1
 80055d4:	4623      	mov	r3, r4
 80055d6:	469a      	mov	sl, r3
 80055d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055dc:	b10a      	cbz	r2, 80055e2 <_vfiprintf_r+0xa2>
 80055de:	2a25      	cmp	r2, #37	; 0x25
 80055e0:	d1f9      	bne.n	80055d6 <_vfiprintf_r+0x96>
 80055e2:	ebba 0b04 	subs.w	fp, sl, r4
 80055e6:	d00b      	beq.n	8005600 <_vfiprintf_r+0xc0>
 80055e8:	465b      	mov	r3, fp
 80055ea:	4622      	mov	r2, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff ff93 	bl	800551a <__sfputs_r>
 80055f4:	3001      	adds	r0, #1
 80055f6:	f000 80aa 	beq.w	800574e <_vfiprintf_r+0x20e>
 80055fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055fc:	445a      	add	r2, fp
 80055fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005600:	f89a 3000 	ldrb.w	r3, [sl]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a2 	beq.w	800574e <_vfiprintf_r+0x20e>
 800560a:	2300      	movs	r3, #0
 800560c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005614:	f10a 0a01 	add.w	sl, sl, #1
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	9307      	str	r3, [sp, #28]
 800561c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005620:	931a      	str	r3, [sp, #104]	; 0x68
 8005622:	4654      	mov	r4, sl
 8005624:	2205      	movs	r2, #5
 8005626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562a:	4858      	ldr	r0, [pc, #352]	; (800578c <_vfiprintf_r+0x24c>)
 800562c:	f7fa fde0 	bl	80001f0 <memchr>
 8005630:	9a04      	ldr	r2, [sp, #16]
 8005632:	b9d8      	cbnz	r0, 800566c <_vfiprintf_r+0x12c>
 8005634:	06d1      	lsls	r1, r2, #27
 8005636:	bf44      	itt	mi
 8005638:	2320      	movmi	r3, #32
 800563a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800563e:	0713      	lsls	r3, r2, #28
 8005640:	bf44      	itt	mi
 8005642:	232b      	movmi	r3, #43	; 0x2b
 8005644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005648:	f89a 3000 	ldrb.w	r3, [sl]
 800564c:	2b2a      	cmp	r3, #42	; 0x2a
 800564e:	d015      	beq.n	800567c <_vfiprintf_r+0x13c>
 8005650:	9a07      	ldr	r2, [sp, #28]
 8005652:	4654      	mov	r4, sl
 8005654:	2000      	movs	r0, #0
 8005656:	f04f 0c0a 	mov.w	ip, #10
 800565a:	4621      	mov	r1, r4
 800565c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005660:	3b30      	subs	r3, #48	; 0x30
 8005662:	2b09      	cmp	r3, #9
 8005664:	d94e      	bls.n	8005704 <_vfiprintf_r+0x1c4>
 8005666:	b1b0      	cbz	r0, 8005696 <_vfiprintf_r+0x156>
 8005668:	9207      	str	r2, [sp, #28]
 800566a:	e014      	b.n	8005696 <_vfiprintf_r+0x156>
 800566c:	eba0 0308 	sub.w	r3, r0, r8
 8005670:	fa09 f303 	lsl.w	r3, r9, r3
 8005674:	4313      	orrs	r3, r2
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	46a2      	mov	sl, r4
 800567a:	e7d2      	b.n	8005622 <_vfiprintf_r+0xe2>
 800567c:	9b03      	ldr	r3, [sp, #12]
 800567e:	1d19      	adds	r1, r3, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	9103      	str	r1, [sp, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	bfbb      	ittet	lt
 8005688:	425b      	neglt	r3, r3
 800568a:	f042 0202 	orrlt.w	r2, r2, #2
 800568e:	9307      	strge	r3, [sp, #28]
 8005690:	9307      	strlt	r3, [sp, #28]
 8005692:	bfb8      	it	lt
 8005694:	9204      	strlt	r2, [sp, #16]
 8005696:	7823      	ldrb	r3, [r4, #0]
 8005698:	2b2e      	cmp	r3, #46	; 0x2e
 800569a:	d10c      	bne.n	80056b6 <_vfiprintf_r+0x176>
 800569c:	7863      	ldrb	r3, [r4, #1]
 800569e:	2b2a      	cmp	r3, #42	; 0x2a
 80056a0:	d135      	bne.n	800570e <_vfiprintf_r+0x1ce>
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	1d1a      	adds	r2, r3, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	9203      	str	r2, [sp, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bfb8      	it	lt
 80056ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056b2:	3402      	adds	r4, #2
 80056b4:	9305      	str	r3, [sp, #20]
 80056b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800579c <_vfiprintf_r+0x25c>
 80056ba:	7821      	ldrb	r1, [r4, #0]
 80056bc:	2203      	movs	r2, #3
 80056be:	4650      	mov	r0, sl
 80056c0:	f7fa fd96 	bl	80001f0 <memchr>
 80056c4:	b140      	cbz	r0, 80056d8 <_vfiprintf_r+0x198>
 80056c6:	2340      	movs	r3, #64	; 0x40
 80056c8:	eba0 000a 	sub.w	r0, r0, sl
 80056cc:	fa03 f000 	lsl.w	r0, r3, r0
 80056d0:	9b04      	ldr	r3, [sp, #16]
 80056d2:	4303      	orrs	r3, r0
 80056d4:	3401      	adds	r4, #1
 80056d6:	9304      	str	r3, [sp, #16]
 80056d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056dc:	482c      	ldr	r0, [pc, #176]	; (8005790 <_vfiprintf_r+0x250>)
 80056de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e2:	2206      	movs	r2, #6
 80056e4:	f7fa fd84 	bl	80001f0 <memchr>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d03f      	beq.n	800576c <_vfiprintf_r+0x22c>
 80056ec:	4b29      	ldr	r3, [pc, #164]	; (8005794 <_vfiprintf_r+0x254>)
 80056ee:	bb1b      	cbnz	r3, 8005738 <_vfiprintf_r+0x1f8>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	3307      	adds	r3, #7
 80056f4:	f023 0307 	bic.w	r3, r3, #7
 80056f8:	3308      	adds	r3, #8
 80056fa:	9303      	str	r3, [sp, #12]
 80056fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fe:	443b      	add	r3, r7
 8005700:	9309      	str	r3, [sp, #36]	; 0x24
 8005702:	e767      	b.n	80055d4 <_vfiprintf_r+0x94>
 8005704:	fb0c 3202 	mla	r2, ip, r2, r3
 8005708:	460c      	mov	r4, r1
 800570a:	2001      	movs	r0, #1
 800570c:	e7a5      	b.n	800565a <_vfiprintf_r+0x11a>
 800570e:	2300      	movs	r3, #0
 8005710:	3401      	adds	r4, #1
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	4619      	mov	r1, r3
 8005716:	f04f 0c0a 	mov.w	ip, #10
 800571a:	4620      	mov	r0, r4
 800571c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005720:	3a30      	subs	r2, #48	; 0x30
 8005722:	2a09      	cmp	r2, #9
 8005724:	d903      	bls.n	800572e <_vfiprintf_r+0x1ee>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0c5      	beq.n	80056b6 <_vfiprintf_r+0x176>
 800572a:	9105      	str	r1, [sp, #20]
 800572c:	e7c3      	b.n	80056b6 <_vfiprintf_r+0x176>
 800572e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005732:	4604      	mov	r4, r0
 8005734:	2301      	movs	r3, #1
 8005736:	e7f0      	b.n	800571a <_vfiprintf_r+0x1da>
 8005738:	ab03      	add	r3, sp, #12
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	462a      	mov	r2, r5
 800573e:	4b16      	ldr	r3, [pc, #88]	; (8005798 <_vfiprintf_r+0x258>)
 8005740:	a904      	add	r1, sp, #16
 8005742:	4630      	mov	r0, r6
 8005744:	f3af 8000 	nop.w
 8005748:	4607      	mov	r7, r0
 800574a:	1c78      	adds	r0, r7, #1
 800574c:	d1d6      	bne.n	80056fc <_vfiprintf_r+0x1bc>
 800574e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005750:	07d9      	lsls	r1, r3, #31
 8005752:	d405      	bmi.n	8005760 <_vfiprintf_r+0x220>
 8005754:	89ab      	ldrh	r3, [r5, #12]
 8005756:	059a      	lsls	r2, r3, #22
 8005758:	d402      	bmi.n	8005760 <_vfiprintf_r+0x220>
 800575a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800575c:	f7ff fe31 	bl	80053c2 <__retarget_lock_release_recursive>
 8005760:	89ab      	ldrh	r3, [r5, #12]
 8005762:	065b      	lsls	r3, r3, #25
 8005764:	f53f af12 	bmi.w	800558c <_vfiprintf_r+0x4c>
 8005768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800576a:	e711      	b.n	8005590 <_vfiprintf_r+0x50>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	462a      	mov	r2, r5
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <_vfiprintf_r+0x258>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4630      	mov	r0, r6
 8005778:	f000 f880 	bl	800587c <_printf_i>
 800577c:	e7e4      	b.n	8005748 <_vfiprintf_r+0x208>
 800577e:	bf00      	nop
 8005780:	0800614c 	.word	0x0800614c
 8005784:	0800616c 	.word	0x0800616c
 8005788:	0800612c 	.word	0x0800612c
 800578c:	0800618c 	.word	0x0800618c
 8005790:	08006196 	.word	0x08006196
 8005794:	00000000 	.word	0x00000000
 8005798:	0800551b 	.word	0x0800551b
 800579c:	08006192 	.word	0x08006192

080057a0 <_printf_common>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	4616      	mov	r6, r2
 80057a6:	4699      	mov	r9, r3
 80057a8:	688a      	ldr	r2, [r1, #8]
 80057aa:	690b      	ldr	r3, [r1, #16]
 80057ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057b0:	4293      	cmp	r3, r2
 80057b2:	bfb8      	it	lt
 80057b4:	4613      	movlt	r3, r2
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057bc:	4607      	mov	r7, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	b10a      	cbz	r2, 80057c6 <_printf_common+0x26>
 80057c2:	3301      	adds	r3, #1
 80057c4:	6033      	str	r3, [r6, #0]
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	0699      	lsls	r1, r3, #26
 80057ca:	bf42      	ittt	mi
 80057cc:	6833      	ldrmi	r3, [r6, #0]
 80057ce:	3302      	addmi	r3, #2
 80057d0:	6033      	strmi	r3, [r6, #0]
 80057d2:	6825      	ldr	r5, [r4, #0]
 80057d4:	f015 0506 	ands.w	r5, r5, #6
 80057d8:	d106      	bne.n	80057e8 <_printf_common+0x48>
 80057da:	f104 0a19 	add.w	sl, r4, #25
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	6832      	ldr	r2, [r6, #0]
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	42ab      	cmp	r3, r5
 80057e6:	dc26      	bgt.n	8005836 <_printf_common+0x96>
 80057e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057ec:	1e13      	subs	r3, r2, #0
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	bf18      	it	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	0692      	lsls	r2, r2, #26
 80057f6:	d42b      	bmi.n	8005850 <_printf_common+0xb0>
 80057f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057fc:	4649      	mov	r1, r9
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	3001      	adds	r0, #1
 8005804:	d01e      	beq.n	8005844 <_printf_common+0xa4>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	68e5      	ldr	r5, [r4, #12]
 800580a:	6832      	ldr	r2, [r6, #0]
 800580c:	f003 0306 	and.w	r3, r3, #6
 8005810:	2b04      	cmp	r3, #4
 8005812:	bf08      	it	eq
 8005814:	1aad      	subeq	r5, r5, r2
 8005816:	68a3      	ldr	r3, [r4, #8]
 8005818:	6922      	ldr	r2, [r4, #16]
 800581a:	bf0c      	ite	eq
 800581c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005820:	2500      	movne	r5, #0
 8005822:	4293      	cmp	r3, r2
 8005824:	bfc4      	itt	gt
 8005826:	1a9b      	subgt	r3, r3, r2
 8005828:	18ed      	addgt	r5, r5, r3
 800582a:	2600      	movs	r6, #0
 800582c:	341a      	adds	r4, #26
 800582e:	42b5      	cmp	r5, r6
 8005830:	d11a      	bne.n	8005868 <_printf_common+0xc8>
 8005832:	2000      	movs	r0, #0
 8005834:	e008      	b.n	8005848 <_printf_common+0xa8>
 8005836:	2301      	movs	r3, #1
 8005838:	4652      	mov	r2, sl
 800583a:	4649      	mov	r1, r9
 800583c:	4638      	mov	r0, r7
 800583e:	47c0      	blx	r8
 8005840:	3001      	adds	r0, #1
 8005842:	d103      	bne.n	800584c <_printf_common+0xac>
 8005844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584c:	3501      	adds	r5, #1
 800584e:	e7c6      	b.n	80057de <_printf_common+0x3e>
 8005850:	18e1      	adds	r1, r4, r3
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	2030      	movs	r0, #48	; 0x30
 8005856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800585a:	4422      	add	r2, r4
 800585c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005864:	3302      	adds	r3, #2
 8005866:	e7c7      	b.n	80057f8 <_printf_common+0x58>
 8005868:	2301      	movs	r3, #1
 800586a:	4622      	mov	r2, r4
 800586c:	4649      	mov	r1, r9
 800586e:	4638      	mov	r0, r7
 8005870:	47c0      	blx	r8
 8005872:	3001      	adds	r0, #1
 8005874:	d0e6      	beq.n	8005844 <_printf_common+0xa4>
 8005876:	3601      	adds	r6, #1
 8005878:	e7d9      	b.n	800582e <_printf_common+0x8e>
	...

0800587c <_printf_i>:
 800587c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005880:	7e0f      	ldrb	r7, [r1, #24]
 8005882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005884:	2f78      	cmp	r7, #120	; 0x78
 8005886:	4691      	mov	r9, r2
 8005888:	4680      	mov	r8, r0
 800588a:	460c      	mov	r4, r1
 800588c:	469a      	mov	sl, r3
 800588e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005892:	d807      	bhi.n	80058a4 <_printf_i+0x28>
 8005894:	2f62      	cmp	r7, #98	; 0x62
 8005896:	d80a      	bhi.n	80058ae <_printf_i+0x32>
 8005898:	2f00      	cmp	r7, #0
 800589a:	f000 80d8 	beq.w	8005a4e <_printf_i+0x1d2>
 800589e:	2f58      	cmp	r7, #88	; 0x58
 80058a0:	f000 80a3 	beq.w	80059ea <_printf_i+0x16e>
 80058a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ac:	e03a      	b.n	8005924 <_printf_i+0xa8>
 80058ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058b2:	2b15      	cmp	r3, #21
 80058b4:	d8f6      	bhi.n	80058a4 <_printf_i+0x28>
 80058b6:	a101      	add	r1, pc, #4	; (adr r1, 80058bc <_printf_i+0x40>)
 80058b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058bc:	08005915 	.word	0x08005915
 80058c0:	08005929 	.word	0x08005929
 80058c4:	080058a5 	.word	0x080058a5
 80058c8:	080058a5 	.word	0x080058a5
 80058cc:	080058a5 	.word	0x080058a5
 80058d0:	080058a5 	.word	0x080058a5
 80058d4:	08005929 	.word	0x08005929
 80058d8:	080058a5 	.word	0x080058a5
 80058dc:	080058a5 	.word	0x080058a5
 80058e0:	080058a5 	.word	0x080058a5
 80058e4:	080058a5 	.word	0x080058a5
 80058e8:	08005a35 	.word	0x08005a35
 80058ec:	08005959 	.word	0x08005959
 80058f0:	08005a17 	.word	0x08005a17
 80058f4:	080058a5 	.word	0x080058a5
 80058f8:	080058a5 	.word	0x080058a5
 80058fc:	08005a57 	.word	0x08005a57
 8005900:	080058a5 	.word	0x080058a5
 8005904:	08005959 	.word	0x08005959
 8005908:	080058a5 	.word	0x080058a5
 800590c:	080058a5 	.word	0x080058a5
 8005910:	08005a1f 	.word	0x08005a1f
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	1d1a      	adds	r2, r3, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	602a      	str	r2, [r5, #0]
 800591c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005924:	2301      	movs	r3, #1
 8005926:	e0a3      	b.n	8005a70 <_printf_i+0x1f4>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	6829      	ldr	r1, [r5, #0]
 800592c:	0606      	lsls	r6, r0, #24
 800592e:	f101 0304 	add.w	r3, r1, #4
 8005932:	d50a      	bpl.n	800594a <_printf_i+0xce>
 8005934:	680e      	ldr	r6, [r1, #0]
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	2e00      	cmp	r6, #0
 800593a:	da03      	bge.n	8005944 <_printf_i+0xc8>
 800593c:	232d      	movs	r3, #45	; 0x2d
 800593e:	4276      	negs	r6, r6
 8005940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005944:	485e      	ldr	r0, [pc, #376]	; (8005ac0 <_printf_i+0x244>)
 8005946:	230a      	movs	r3, #10
 8005948:	e019      	b.n	800597e <_printf_i+0x102>
 800594a:	680e      	ldr	r6, [r1, #0]
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005952:	bf18      	it	ne
 8005954:	b236      	sxthne	r6, r6
 8005956:	e7ef      	b.n	8005938 <_printf_i+0xbc>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	6820      	ldr	r0, [r4, #0]
 800595c:	1d19      	adds	r1, r3, #4
 800595e:	6029      	str	r1, [r5, #0]
 8005960:	0601      	lsls	r1, r0, #24
 8005962:	d501      	bpl.n	8005968 <_printf_i+0xec>
 8005964:	681e      	ldr	r6, [r3, #0]
 8005966:	e002      	b.n	800596e <_printf_i+0xf2>
 8005968:	0646      	lsls	r6, r0, #25
 800596a:	d5fb      	bpl.n	8005964 <_printf_i+0xe8>
 800596c:	881e      	ldrh	r6, [r3, #0]
 800596e:	4854      	ldr	r0, [pc, #336]	; (8005ac0 <_printf_i+0x244>)
 8005970:	2f6f      	cmp	r7, #111	; 0x6f
 8005972:	bf0c      	ite	eq
 8005974:	2308      	moveq	r3, #8
 8005976:	230a      	movne	r3, #10
 8005978:	2100      	movs	r1, #0
 800597a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800597e:	6865      	ldr	r5, [r4, #4]
 8005980:	60a5      	str	r5, [r4, #8]
 8005982:	2d00      	cmp	r5, #0
 8005984:	bfa2      	ittt	ge
 8005986:	6821      	ldrge	r1, [r4, #0]
 8005988:	f021 0104 	bicge.w	r1, r1, #4
 800598c:	6021      	strge	r1, [r4, #0]
 800598e:	b90e      	cbnz	r6, 8005994 <_printf_i+0x118>
 8005990:	2d00      	cmp	r5, #0
 8005992:	d04d      	beq.n	8005a30 <_printf_i+0x1b4>
 8005994:	4615      	mov	r5, r2
 8005996:	fbb6 f1f3 	udiv	r1, r6, r3
 800599a:	fb03 6711 	mls	r7, r3, r1, r6
 800599e:	5dc7      	ldrb	r7, [r0, r7]
 80059a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059a4:	4637      	mov	r7, r6
 80059a6:	42bb      	cmp	r3, r7
 80059a8:	460e      	mov	r6, r1
 80059aa:	d9f4      	bls.n	8005996 <_printf_i+0x11a>
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d10b      	bne.n	80059c8 <_printf_i+0x14c>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	07de      	lsls	r6, r3, #31
 80059b4:	d508      	bpl.n	80059c8 <_printf_i+0x14c>
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6861      	ldr	r1, [r4, #4]
 80059ba:	4299      	cmp	r1, r3
 80059bc:	bfde      	ittt	le
 80059be:	2330      	movle	r3, #48	; 0x30
 80059c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059c8:	1b52      	subs	r2, r2, r5
 80059ca:	6122      	str	r2, [r4, #16]
 80059cc:	f8cd a000 	str.w	sl, [sp]
 80059d0:	464b      	mov	r3, r9
 80059d2:	aa03      	add	r2, sp, #12
 80059d4:	4621      	mov	r1, r4
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff fee2 	bl	80057a0 <_printf_common>
 80059dc:	3001      	adds	r0, #1
 80059de:	d14c      	bne.n	8005a7a <_printf_i+0x1fe>
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e4:	b004      	add	sp, #16
 80059e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ea:	4835      	ldr	r0, [pc, #212]	; (8005ac0 <_printf_i+0x244>)
 80059ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059f0:	6829      	ldr	r1, [r5, #0]
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059f8:	6029      	str	r1, [r5, #0]
 80059fa:	061d      	lsls	r5, r3, #24
 80059fc:	d514      	bpl.n	8005a28 <_printf_i+0x1ac>
 80059fe:	07df      	lsls	r7, r3, #31
 8005a00:	bf44      	itt	mi
 8005a02:	f043 0320 	orrmi.w	r3, r3, #32
 8005a06:	6023      	strmi	r3, [r4, #0]
 8005a08:	b91e      	cbnz	r6, 8005a12 <_printf_i+0x196>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f023 0320 	bic.w	r3, r3, #32
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	2310      	movs	r3, #16
 8005a14:	e7b0      	b.n	8005978 <_printf_i+0xfc>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f043 0320 	orr.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	2378      	movs	r3, #120	; 0x78
 8005a20:	4828      	ldr	r0, [pc, #160]	; (8005ac4 <_printf_i+0x248>)
 8005a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a26:	e7e3      	b.n	80059f0 <_printf_i+0x174>
 8005a28:	0659      	lsls	r1, r3, #25
 8005a2a:	bf48      	it	mi
 8005a2c:	b2b6      	uxthmi	r6, r6
 8005a2e:	e7e6      	b.n	80059fe <_printf_i+0x182>
 8005a30:	4615      	mov	r5, r2
 8005a32:	e7bb      	b.n	80059ac <_printf_i+0x130>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	6826      	ldr	r6, [r4, #0]
 8005a38:	6961      	ldr	r1, [r4, #20]
 8005a3a:	1d18      	adds	r0, r3, #4
 8005a3c:	6028      	str	r0, [r5, #0]
 8005a3e:	0635      	lsls	r5, r6, #24
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	d501      	bpl.n	8005a48 <_printf_i+0x1cc>
 8005a44:	6019      	str	r1, [r3, #0]
 8005a46:	e002      	b.n	8005a4e <_printf_i+0x1d2>
 8005a48:	0670      	lsls	r0, r6, #25
 8005a4a:	d5fb      	bpl.n	8005a44 <_printf_i+0x1c8>
 8005a4c:	8019      	strh	r1, [r3, #0]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	4615      	mov	r5, r2
 8005a54:	e7ba      	b.n	80059cc <_printf_i+0x150>
 8005a56:	682b      	ldr	r3, [r5, #0]
 8005a58:	1d1a      	adds	r2, r3, #4
 8005a5a:	602a      	str	r2, [r5, #0]
 8005a5c:	681d      	ldr	r5, [r3, #0]
 8005a5e:	6862      	ldr	r2, [r4, #4]
 8005a60:	2100      	movs	r1, #0
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7fa fbc4 	bl	80001f0 <memchr>
 8005a68:	b108      	cbz	r0, 8005a6e <_printf_i+0x1f2>
 8005a6a:	1b40      	subs	r0, r0, r5
 8005a6c:	6060      	str	r0, [r4, #4]
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	2300      	movs	r3, #0
 8005a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a78:	e7a8      	b.n	80059cc <_printf_i+0x150>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4649      	mov	r1, r9
 8005a80:	4640      	mov	r0, r8
 8005a82:	47d0      	blx	sl
 8005a84:	3001      	adds	r0, #1
 8005a86:	d0ab      	beq.n	80059e0 <_printf_i+0x164>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	079b      	lsls	r3, r3, #30
 8005a8c:	d413      	bmi.n	8005ab6 <_printf_i+0x23a>
 8005a8e:	68e0      	ldr	r0, [r4, #12]
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	4298      	cmp	r0, r3
 8005a94:	bfb8      	it	lt
 8005a96:	4618      	movlt	r0, r3
 8005a98:	e7a4      	b.n	80059e4 <_printf_i+0x168>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	47d0      	blx	sl
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d09b      	beq.n	80059e0 <_printf_i+0x164>
 8005aa8:	3501      	adds	r5, #1
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	9903      	ldr	r1, [sp, #12]
 8005aae:	1a5b      	subs	r3, r3, r1
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dcf2      	bgt.n	8005a9a <_printf_i+0x21e>
 8005ab4:	e7eb      	b.n	8005a8e <_printf_i+0x212>
 8005ab6:	2500      	movs	r5, #0
 8005ab8:	f104 0619 	add.w	r6, r4, #25
 8005abc:	e7f5      	b.n	8005aaa <_printf_i+0x22e>
 8005abe:	bf00      	nop
 8005ac0:	0800619d 	.word	0x0800619d
 8005ac4:	080061ae 	.word	0x080061ae

08005ac8 <_sbrk_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_sbrk_r+0x1c>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	f7fb f8fc 	bl	8000cd0 <_sbrk>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_sbrk_r+0x1a>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_sbrk_r+0x1a>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	2000034c 	.word	0x2000034c

08005ae8 <__sread>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	460c      	mov	r4, r1
 8005aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af0:	f000 fab2 	bl	8006058 <_read_r>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	bfab      	itete	ge
 8005af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005afa:	89a3      	ldrhlt	r3, [r4, #12]
 8005afc:	181b      	addge	r3, r3, r0
 8005afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b02:	bfac      	ite	ge
 8005b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b06:	81a3      	strhlt	r3, [r4, #12]
 8005b08:	bd10      	pop	{r4, pc}

08005b0a <__swrite>:
 8005b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	461f      	mov	r7, r3
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	05db      	lsls	r3, r3, #23
 8005b14:	4605      	mov	r5, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	4616      	mov	r6, r2
 8005b1a:	d505      	bpl.n	8005b28 <__swrite+0x1e>
 8005b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b20:	2302      	movs	r3, #2
 8005b22:	2200      	movs	r2, #0
 8005b24:	f000 f9c8 	bl	8005eb8 <_lseek_r>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4628      	mov	r0, r5
 8005b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3e:	f000 b869 	b.w	8005c14 <_write_r>

08005b42 <__sseek>:
 8005b42:	b510      	push	{r4, lr}
 8005b44:	460c      	mov	r4, r1
 8005b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4a:	f000 f9b5 	bl	8005eb8 <_lseek_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	bf15      	itete	ne
 8005b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b5e:	81a3      	strheq	r3, [r4, #12]
 8005b60:	bf18      	it	ne
 8005b62:	81a3      	strhne	r3, [r4, #12]
 8005b64:	bd10      	pop	{r4, pc}

08005b66 <__sclose>:
 8005b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6a:	f000 b8d3 	b.w	8005d14 <_close_r>
	...

08005b70 <__swbuf_r>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	460e      	mov	r6, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	4605      	mov	r5, r0
 8005b78:	b118      	cbz	r0, 8005b82 <__swbuf_r+0x12>
 8005b7a:	6983      	ldr	r3, [r0, #24]
 8005b7c:	b90b      	cbnz	r3, 8005b82 <__swbuf_r+0x12>
 8005b7e:	f7ff fb81 	bl	8005284 <__sinit>
 8005b82:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <__swbuf_r+0x98>)
 8005b84:	429c      	cmp	r4, r3
 8005b86:	d12b      	bne.n	8005be0 <__swbuf_r+0x70>
 8005b88:	686c      	ldr	r4, [r5, #4]
 8005b8a:	69a3      	ldr	r3, [r4, #24]
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	071a      	lsls	r2, r3, #28
 8005b92:	d52f      	bpl.n	8005bf4 <__swbuf_r+0x84>
 8005b94:	6923      	ldr	r3, [r4, #16]
 8005b96:	b36b      	cbz	r3, 8005bf4 <__swbuf_r+0x84>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	1ac0      	subs	r0, r0, r3
 8005b9e:	6963      	ldr	r3, [r4, #20]
 8005ba0:	b2f6      	uxtb	r6, r6
 8005ba2:	4283      	cmp	r3, r0
 8005ba4:	4637      	mov	r7, r6
 8005ba6:	dc04      	bgt.n	8005bb2 <__swbuf_r+0x42>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 f948 	bl	8005e40 <_fflush_r>
 8005bb0:	bb30      	cbnz	r0, 8005c00 <__swbuf_r+0x90>
 8005bb2:	68a3      	ldr	r3, [r4, #8]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	6022      	str	r2, [r4, #0]
 8005bbe:	701e      	strb	r6, [r3, #0]
 8005bc0:	6963      	ldr	r3, [r4, #20]
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	4283      	cmp	r3, r0
 8005bc6:	d004      	beq.n	8005bd2 <__swbuf_r+0x62>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	07db      	lsls	r3, r3, #31
 8005bcc:	d506      	bpl.n	8005bdc <__swbuf_r+0x6c>
 8005bce:	2e0a      	cmp	r6, #10
 8005bd0:	d104      	bne.n	8005bdc <__swbuf_r+0x6c>
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f000 f933 	bl	8005e40 <_fflush_r>
 8005bda:	b988      	cbnz	r0, 8005c00 <__swbuf_r+0x90>
 8005bdc:	4638      	mov	r0, r7
 8005bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <__swbuf_r+0x9c>)
 8005be2:	429c      	cmp	r4, r3
 8005be4:	d101      	bne.n	8005bea <__swbuf_r+0x7a>
 8005be6:	68ac      	ldr	r4, [r5, #8]
 8005be8:	e7cf      	b.n	8005b8a <__swbuf_r+0x1a>
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <__swbuf_r+0xa0>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	bf08      	it	eq
 8005bf0:	68ec      	ldreq	r4, [r5, #12]
 8005bf2:	e7ca      	b.n	8005b8a <__swbuf_r+0x1a>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 f81e 	bl	8005c38 <__swsetup_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d0cb      	beq.n	8005b98 <__swbuf_r+0x28>
 8005c00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c04:	e7ea      	b.n	8005bdc <__swbuf_r+0x6c>
 8005c06:	bf00      	nop
 8005c08:	0800614c 	.word	0x0800614c
 8005c0c:	0800616c 	.word	0x0800616c
 8005c10:	0800612c 	.word	0x0800612c

08005c14 <_write_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d07      	ldr	r5, [pc, #28]	; (8005c34 <_write_r+0x20>)
 8005c18:	4604      	mov	r4, r0
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	602a      	str	r2, [r5, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f7fb f80a 	bl	8000c3c <_write>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_write_r+0x1e>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_write_r+0x1e>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	2000034c 	.word	0x2000034c

08005c38 <__swsetup_r>:
 8005c38:	4b32      	ldr	r3, [pc, #200]	; (8005d04 <__swsetup_r+0xcc>)
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	681d      	ldr	r5, [r3, #0]
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460c      	mov	r4, r1
 8005c42:	b125      	cbz	r5, 8005c4e <__swsetup_r+0x16>
 8005c44:	69ab      	ldr	r3, [r5, #24]
 8005c46:	b913      	cbnz	r3, 8005c4e <__swsetup_r+0x16>
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7ff fb1b 	bl	8005284 <__sinit>
 8005c4e:	4b2e      	ldr	r3, [pc, #184]	; (8005d08 <__swsetup_r+0xd0>)
 8005c50:	429c      	cmp	r4, r3
 8005c52:	d10f      	bne.n	8005c74 <__swsetup_r+0x3c>
 8005c54:	686c      	ldr	r4, [r5, #4]
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c5c:	0719      	lsls	r1, r3, #28
 8005c5e:	d42c      	bmi.n	8005cba <__swsetup_r+0x82>
 8005c60:	06dd      	lsls	r5, r3, #27
 8005c62:	d411      	bmi.n	8005c88 <__swsetup_r+0x50>
 8005c64:	2309      	movs	r3, #9
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c72:	e03e      	b.n	8005cf2 <__swsetup_r+0xba>
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <__swsetup_r+0xd4>)
 8005c76:	429c      	cmp	r4, r3
 8005c78:	d101      	bne.n	8005c7e <__swsetup_r+0x46>
 8005c7a:	68ac      	ldr	r4, [r5, #8]
 8005c7c:	e7eb      	b.n	8005c56 <__swsetup_r+0x1e>
 8005c7e:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <__swsetup_r+0xd8>)
 8005c80:	429c      	cmp	r4, r3
 8005c82:	bf08      	it	eq
 8005c84:	68ec      	ldreq	r4, [r5, #12]
 8005c86:	e7e6      	b.n	8005c56 <__swsetup_r+0x1e>
 8005c88:	0758      	lsls	r0, r3, #29
 8005c8a:	d512      	bpl.n	8005cb2 <__swsetup_r+0x7a>
 8005c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c8e:	b141      	cbz	r1, 8005ca2 <__swsetup_r+0x6a>
 8005c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c94:	4299      	cmp	r1, r3
 8005c96:	d002      	beq.n	8005c9e <__swsetup_r+0x66>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 f991 	bl	8005fc0 <_free_r>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	2300      	movs	r3, #0
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f043 0308 	orr.w	r3, r3, #8
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	b94b      	cbnz	r3, 8005cd2 <__swsetup_r+0x9a>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc8:	d003      	beq.n	8005cd2 <__swsetup_r+0x9a>
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f000 f92b 	bl	8005f28 <__smakebuf_r>
 8005cd2:	89a0      	ldrh	r0, [r4, #12]
 8005cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cd8:	f010 0301 	ands.w	r3, r0, #1
 8005cdc:	d00a      	beq.n	8005cf4 <__swsetup_r+0xbc>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60a3      	str	r3, [r4, #8]
 8005ce2:	6963      	ldr	r3, [r4, #20]
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	61a3      	str	r3, [r4, #24]
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	b943      	cbnz	r3, 8005cfe <__swsetup_r+0xc6>
 8005cec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cf0:	d1ba      	bne.n	8005c68 <__swsetup_r+0x30>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	0781      	lsls	r1, r0, #30
 8005cf6:	bf58      	it	pl
 8005cf8:	6963      	ldrpl	r3, [r4, #20]
 8005cfa:	60a3      	str	r3, [r4, #8]
 8005cfc:	e7f4      	b.n	8005ce8 <__swsetup_r+0xb0>
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e7f7      	b.n	8005cf2 <__swsetup_r+0xba>
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	0800614c 	.word	0x0800614c
 8005d0c:	0800616c 	.word	0x0800616c
 8005d10:	0800612c 	.word	0x0800612c

08005d14 <_close_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d06      	ldr	r5, [pc, #24]	; (8005d30 <_close_r+0x1c>)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	f7fa ffa2 	bl	8000c68 <_close>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_close_r+0x1a>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_close_r+0x1a>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	2000034c 	.word	0x2000034c

08005d34 <__sflush_r>:
 8005d34:	898a      	ldrh	r2, [r1, #12]
 8005d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	0710      	lsls	r0, r2, #28
 8005d3e:	460c      	mov	r4, r1
 8005d40:	d458      	bmi.n	8005df4 <__sflush_r+0xc0>
 8005d42:	684b      	ldr	r3, [r1, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dc05      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dc02      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	d0f9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d60:	682f      	ldr	r7, [r5, #0]
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	d032      	beq.n	8005dcc <__sflush_r+0x98>
 8005d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	075a      	lsls	r2, r3, #29
 8005d6c:	d505      	bpl.n	8005d7a <__sflush_r+0x46>
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	1ac0      	subs	r0, r0, r3
 8005d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d74:	b10b      	cbz	r3, 8005d7a <__sflush_r+0x46>
 8005d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d78:	1ac0      	subs	r0, r0, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d80:	6a21      	ldr	r1, [r4, #32]
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b0      	blx	r6
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	d106      	bne.n	8005d9a <__sflush_r+0x66>
 8005d8c:	6829      	ldr	r1, [r5, #0]
 8005d8e:	291d      	cmp	r1, #29
 8005d90:	d82c      	bhi.n	8005dec <__sflush_r+0xb8>
 8005d92:	4a2a      	ldr	r2, [pc, #168]	; (8005e3c <__sflush_r+0x108>)
 8005d94:	40ca      	lsrs	r2, r1
 8005d96:	07d6      	lsls	r6, r2, #31
 8005d98:	d528      	bpl.n	8005dec <__sflush_r+0xb8>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	6062      	str	r2, [r4, #4]
 8005d9e:	04d9      	lsls	r1, r3, #19
 8005da0:	6922      	ldr	r2, [r4, #16]
 8005da2:	6022      	str	r2, [r4, #0]
 8005da4:	d504      	bpl.n	8005db0 <__sflush_r+0x7c>
 8005da6:	1c42      	adds	r2, r0, #1
 8005da8:	d101      	bne.n	8005dae <__sflush_r+0x7a>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	b903      	cbnz	r3, 8005db0 <__sflush_r+0x7c>
 8005dae:	6560      	str	r0, [r4, #84]	; 0x54
 8005db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db2:	602f      	str	r7, [r5, #0]
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d0ca      	beq.n	8005d4e <__sflush_r+0x1a>
 8005db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	d002      	beq.n	8005dc6 <__sflush_r+0x92>
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 f8fd 	bl	8005fc0 <_free_r>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dca:	e7c1      	b.n	8005d50 <__sflush_r+0x1c>
 8005dcc:	6a21      	ldr	r1, [r4, #32]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b0      	blx	r6
 8005dd4:	1c41      	adds	r1, r0, #1
 8005dd6:	d1c7      	bne.n	8005d68 <__sflush_r+0x34>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c4      	beq.n	8005d68 <__sflush_r+0x34>
 8005dde:	2b1d      	cmp	r3, #29
 8005de0:	d001      	beq.n	8005de6 <__sflush_r+0xb2>
 8005de2:	2b16      	cmp	r3, #22
 8005de4:	d101      	bne.n	8005dea <__sflush_r+0xb6>
 8005de6:	602f      	str	r7, [r5, #0]
 8005de8:	e7b1      	b.n	8005d4e <__sflush_r+0x1a>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	e7ad      	b.n	8005d50 <__sflush_r+0x1c>
 8005df4:	690f      	ldr	r7, [r1, #16]
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	d0a9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005dfa:	0793      	lsls	r3, r2, #30
 8005dfc:	680e      	ldr	r6, [r1, #0]
 8005dfe:	bf08      	it	eq
 8005e00:	694b      	ldreq	r3, [r1, #20]
 8005e02:	600f      	str	r7, [r1, #0]
 8005e04:	bf18      	it	ne
 8005e06:	2300      	movne	r3, #0
 8005e08:	eba6 0807 	sub.w	r8, r6, r7
 8005e0c:	608b      	str	r3, [r1, #8]
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	dd9c      	ble.n	8005d4e <__sflush_r+0x1a>
 8005e14:	6a21      	ldr	r1, [r4, #32]
 8005e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e18:	4643      	mov	r3, r8
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b0      	blx	r6
 8005e20:	2800      	cmp	r0, #0
 8005e22:	dc06      	bgt.n	8005e32 <__sflush_r+0xfe>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e30:	e78e      	b.n	8005d50 <__sflush_r+0x1c>
 8005e32:	4407      	add	r7, r0
 8005e34:	eba8 0800 	sub.w	r8, r8, r0
 8005e38:	e7e9      	b.n	8005e0e <__sflush_r+0xda>
 8005e3a:	bf00      	nop
 8005e3c:	20400001 	.word	0x20400001

08005e40 <_fflush_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	690b      	ldr	r3, [r1, #16]
 8005e44:	4605      	mov	r5, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b913      	cbnz	r3, 8005e50 <_fflush_r+0x10>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	b118      	cbz	r0, 8005e5a <_fflush_r+0x1a>
 8005e52:	6983      	ldr	r3, [r0, #24]
 8005e54:	b90b      	cbnz	r3, 8005e5a <_fflush_r+0x1a>
 8005e56:	f7ff fa15 	bl	8005284 <__sinit>
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <_fflush_r+0x6c>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d11b      	bne.n	8005e98 <_fflush_r+0x58>
 8005e60:	686c      	ldr	r4, [r5, #4]
 8005e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ef      	beq.n	8005e4a <_fflush_r+0xa>
 8005e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e6c:	07d0      	lsls	r0, r2, #31
 8005e6e:	d404      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e70:	0599      	lsls	r1, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e76:	f7ff faa3 	bl	80053c0 <__retarget_lock_acquire_recursive>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	f7ff ff59 	bl	8005d34 <__sflush_r>
 8005e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e84:	07da      	lsls	r2, r3, #31
 8005e86:	4605      	mov	r5, r0
 8005e88:	d4e0      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	059b      	lsls	r3, r3, #22
 8005e8e:	d4dd      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e92:	f7ff fa96 	bl	80053c2 <__retarget_lock_release_recursive>
 8005e96:	e7d9      	b.n	8005e4c <_fflush_r+0xc>
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <_fflush_r+0x70>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d101      	bne.n	8005ea2 <_fflush_r+0x62>
 8005e9e:	68ac      	ldr	r4, [r5, #8]
 8005ea0:	e7df      	b.n	8005e62 <_fflush_r+0x22>
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <_fflush_r+0x74>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	bf08      	it	eq
 8005ea8:	68ec      	ldreq	r4, [r5, #12]
 8005eaa:	e7da      	b.n	8005e62 <_fflush_r+0x22>
 8005eac:	0800614c 	.word	0x0800614c
 8005eb0:	0800616c 	.word	0x0800616c
 8005eb4:	0800612c 	.word	0x0800612c

08005eb8 <_lseek_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_lseek_r+0x20>)
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fa fef5 	bl	8000cb6 <_lseek>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_lseek_r+0x1e>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_lseek_r+0x1e>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	2000034c 	.word	0x2000034c

08005edc <__swhatbuf_r>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	460e      	mov	r6, r1
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	b096      	sub	sp, #88	; 0x58
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	da08      	bge.n	8005f00 <__swhatbuf_r+0x24>
 8005eee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	061a      	lsls	r2, r3, #24
 8005ef8:	d410      	bmi.n	8005f1c <__swhatbuf_r+0x40>
 8005efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005efe:	e00e      	b.n	8005f1e <__swhatbuf_r+0x42>
 8005f00:	466a      	mov	r2, sp
 8005f02:	f000 f8bb 	bl	800607c <_fstat_r>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	dbf1      	blt.n	8005eee <__swhatbuf_r+0x12>
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f14:	425a      	negs	r2, r3
 8005f16:	415a      	adcs	r2, r3
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	e7ee      	b.n	8005efa <__swhatbuf_r+0x1e>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	2000      	movs	r0, #0
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	b016      	add	sp, #88	; 0x58
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f28 <__smakebuf_r>:
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f2c:	079d      	lsls	r5, r3, #30
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d507      	bpl.n	8005f44 <__smakebuf_r+0x1c>
 8005f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	6163      	str	r3, [r4, #20]
 8005f40:	b002      	add	sp, #8
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	ab01      	add	r3, sp, #4
 8005f46:	466a      	mov	r2, sp
 8005f48:	f7ff ffc8 	bl	8005edc <__swhatbuf_r>
 8005f4c:	9900      	ldr	r1, [sp, #0]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fa57 	bl	8005404 <_malloc_r>
 8005f56:	b948      	cbnz	r0, 8005f6c <__smakebuf_r+0x44>
 8005f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d4ef      	bmi.n	8005f40 <__smakebuf_r+0x18>
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	e7e3      	b.n	8005f34 <__smakebuf_r+0xc>
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <__smakebuf_r+0x7c>)
 8005f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	6020      	str	r0, [r4, #0]
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	6120      	str	r0, [r4, #16]
 8005f82:	b15b      	cbz	r3, 8005f9c <__smakebuf_r+0x74>
 8005f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f889 	bl	80060a0 <_isatty_r>
 8005f8e:	b128      	cbz	r0, 8005f9c <__smakebuf_r+0x74>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	89a0      	ldrh	r0, [r4, #12]
 8005f9e:	4305      	orrs	r5, r0
 8005fa0:	81a5      	strh	r5, [r4, #12]
 8005fa2:	e7cd      	b.n	8005f40 <__smakebuf_r+0x18>
 8005fa4:	0800521d 	.word	0x0800521d

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	; (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f7ff ba09 	b.w	80053c0 <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	20000340 	.word	0x20000340

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f7ff ba04 	b.w	80053c2 <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000340 	.word	0x20000340

08005fc0 <_free_r>:
 8005fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d044      	beq.n	8006050 <_free_r+0x90>
 8005fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd2:	bfb8      	it	lt
 8005fd4:	18e4      	addlt	r4, r4, r3
 8005fd6:	f7ff ffe7 	bl	8005fa8 <__malloc_lock>
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <_free_r+0x94>)
 8005fdc:	9801      	ldr	r0, [sp, #4]
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	b933      	cbnz	r3, 8005ff0 <_free_r+0x30>
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	6014      	str	r4, [r2, #0]
 8005fe6:	b003      	add	sp, #12
 8005fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fec:	f7ff bfe2 	b.w	8005fb4 <__malloc_unlock>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d908      	bls.n	8006006 <_free_r+0x46>
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	bf01      	itttt	eq
 8005ffc:	6819      	ldreq	r1, [r3, #0]
 8005ffe:	685b      	ldreq	r3, [r3, #4]
 8006000:	1949      	addeq	r1, r1, r5
 8006002:	6021      	streq	r1, [r4, #0]
 8006004:	e7ed      	b.n	8005fe2 <_free_r+0x22>
 8006006:	461a      	mov	r2, r3
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b10b      	cbz	r3, 8006010 <_free_r+0x50>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d9fa      	bls.n	8006006 <_free_r+0x46>
 8006010:	6811      	ldr	r1, [r2, #0]
 8006012:	1855      	adds	r5, r2, r1
 8006014:	42a5      	cmp	r5, r4
 8006016:	d10b      	bne.n	8006030 <_free_r+0x70>
 8006018:	6824      	ldr	r4, [r4, #0]
 800601a:	4421      	add	r1, r4
 800601c:	1854      	adds	r4, r2, r1
 800601e:	42a3      	cmp	r3, r4
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	d1e0      	bne.n	8005fe6 <_free_r+0x26>
 8006024:	681c      	ldr	r4, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6053      	str	r3, [r2, #4]
 800602a:	4421      	add	r1, r4
 800602c:	6011      	str	r1, [r2, #0]
 800602e:	e7da      	b.n	8005fe6 <_free_r+0x26>
 8006030:	d902      	bls.n	8006038 <_free_r+0x78>
 8006032:	230c      	movs	r3, #12
 8006034:	6003      	str	r3, [r0, #0]
 8006036:	e7d6      	b.n	8005fe6 <_free_r+0x26>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf04      	itt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	6063      	str	r3, [r4, #4]
 8006046:	bf04      	itt	eq
 8006048:	1949      	addeq	r1, r1, r5
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	6054      	str	r4, [r2, #4]
 800604e:	e7ca      	b.n	8005fe6 <_free_r+0x26>
 8006050:	b003      	add	sp, #12
 8006052:	bd30      	pop	{r4, r5, pc}
 8006054:	20000344 	.word	0x20000344

08006058 <_read_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4d07      	ldr	r5, [pc, #28]	; (8006078 <_read_r+0x20>)
 800605c:	4604      	mov	r4, r0
 800605e:	4608      	mov	r0, r1
 8006060:	4611      	mov	r1, r2
 8006062:	2200      	movs	r2, #0
 8006064:	602a      	str	r2, [r5, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f7fa fdca 	bl	8000c00 <_read>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_read_r+0x1e>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_read_r+0x1e>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	2000034c 	.word	0x2000034c

0800607c <_fstat_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d07      	ldr	r5, [pc, #28]	; (800609c <_fstat_r+0x20>)
 8006080:	2300      	movs	r3, #0
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	602b      	str	r3, [r5, #0]
 800608a:	f7fa fdf9 	bl	8000c80 <_fstat>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	d102      	bne.n	8006098 <_fstat_r+0x1c>
 8006092:	682b      	ldr	r3, [r5, #0]
 8006094:	b103      	cbz	r3, 8006098 <_fstat_r+0x1c>
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	bd38      	pop	{r3, r4, r5, pc}
 800609a:	bf00      	nop
 800609c:	2000034c 	.word	0x2000034c

080060a0 <_isatty_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d06      	ldr	r5, [pc, #24]	; (80060bc <_isatty_r+0x1c>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	602b      	str	r3, [r5, #0]
 80060ac:	f7fa fdf8 	bl	8000ca0 <_isatty>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_isatty_r+0x1a>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_isatty_r+0x1a>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	2000034c 	.word	0x2000034c

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr
