
03_SPI_Tx_Rx_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004430  08004430  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004438  08004438  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000000c  0800444c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800444c  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d60c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5b  00000000  00000000  0002d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002fe08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002895a  00000000  00000000  000308c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1cf  00000000  00000000  0005921a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f94c7  00000000  00000000  000663e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f8b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e8c  00000000  00000000  0015f900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080043d0 	.word	0x080043d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080043d0 	.word	0x080043d0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fb54 	bl	8000ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f859 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f92d 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 8000502:	f000 f905 	bl	8000710 <MX_DMA_Init>
  MX_SPI1_Init();
 8000506:	f000 f8c5 	bl	8000694 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 800050a:	f000 f897 	bl	800063c <MX_LPUART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Clear the buffers
		memset(buffer_rx, 0, BUFFER_SIZE);
 800050e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000512:	2100      	movs	r1, #0
 8000514:	4820      	ldr	r0, [pc, #128]	; (8000598 <main+0xa8>)
 8000516:	f003 ff53 	bl	80043c0 <memset>
		memset(buffer_print, 0, BUFFER_SIZE);
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	2100      	movs	r1, #0
 8000520:	481e      	ldr	r0, [pc, #120]	; (800059c <main+0xac>)
 8000522:	f003 ff4d 	bl	80043c0 <memset>
		received_length = 0;
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <main+0xb0>)
 8000528:	2200      	movs	r2, #0
 800052a:	801a      	strh	r2, [r3, #0]

		// Receive data through UART (blocking mode) until newline character
		while (1)
		{
			uint8_t received_byte;
			HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, &received_byte, 1, HAL_MAX_DELAY);
 800052c:	1db9      	adds	r1, r7, #6
 800052e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000532:	2201      	movs	r2, #1
 8000534:	481b      	ldr	r0, [pc, #108]	; (80005a4 <main+0xb4>)
 8000536:	f003 f9e5 	bl	8003904 <HAL_UART_Receive>
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]

			if (status == HAL_OK)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1f3      	bne.n	800052c <main+0x3c>
			{
				buffer_rx[received_length++] = received_byte;
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <main+0xb0>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b29b      	uxth	r3, r3
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	b291      	uxth	r1, r2
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <main+0xb0>)
 8000550:	8011      	strh	r1, [r2, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	79b9      	ldrb	r1, [r7, #6]
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <main+0xa8>)
 8000558:	5499      	strb	r1, [r3, r2]

				// Break on newline character or if buffer is full
				if (received_byte == '\n' || received_length >= BUFFER_SIZE)
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	2b0a      	cmp	r3, #10
 800055e:	d005      	beq.n	800056c <main+0x7c>
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0xb0>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b29b      	uxth	r3, r3
 8000566:	2bff      	cmp	r3, #255	; 0xff
 8000568:	d800      	bhi.n	800056c <main+0x7c>
		{
 800056a:	e7df      	b.n	800052c <main+0x3c>
				}
			}
		}

		// Transmit and receive data through SPI in interrupt mode
		spi_cplt = 0;
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <main+0xb8>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, buffer_rx, buffer_print, received_length);
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <main+0xb0>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	b29b      	uxth	r3, r3
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <main+0xac>)
 800057a:	4907      	ldr	r1, [pc, #28]	; (8000598 <main+0xa8>)
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <main+0xbc>)
 800057e:	f002 fc97 	bl	8002eb0 <HAL_SPI_TransmitReceive_DMA>

		// Wait until SPI communication is done
		while (!spi_cplt) {
 8000582:	e002      	b.n	800058a <main+0x9a>
			// Optionally, add a timeout here to avoid an infinite loop
			HAL_Delay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fb81 	bl	8000c8c <HAL_Delay>
		while (!spi_cplt) {
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <main+0xb8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0f7      	beq.n	8000584 <main+0x94>
		memset(buffer_rx, 0, BUFFER_SIZE);
 8000594:	e7bb      	b.n	800050e <main+0x1e>
 8000596:	bf00      	nop
 8000598:	200001a0 	.word	0x200001a0
 800059c:	200002a0 	.word	0x200002a0
 80005a0:	200003a2 	.word	0x200003a2
 80005a4:	20000028 	.word	0x20000028
 80005a8:	200003a0 	.word	0x200003a0
 80005ac:	200000ac 	.word	0x200000ac

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fefe 	bl	80043c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 f859 	bl	800168c <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 f940 	bl	8000864 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005e4:	2310      	movs	r3, #16
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005f0:	23b0      	movs	r3, #176	; 0xb0
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f8ab 	bl	8001758 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000608:	f000 f92c 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2102      	movs	r1, #2
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fcb1 	bl	8001f8c <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000630:	f000 f918 	bl	8000864 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_LPUART1_UART_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_LPUART1_UART_Init+0x50>)
 800067a:	f003 f861 	bl	8003740 <HAL_UART_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 f8ee 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	40008000 	.word	0x40008000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_SPI1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_SPI1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_SPI1_Init+0x74>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_SPI1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_SPI1_Init+0x74>)
 80006ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI1_Init+0x74>)
 80006c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI1_Init+0x74>)
 80006ca:	2228      	movs	r2, #40	; 0x28
 80006cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_SPI1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_SPI1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_SPI1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_SPI1_Init+0x74>)
 80006e2:	2207      	movs	r2, #7
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_SPI1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_SPI1_Init+0x74>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_SPI1_Init+0x74>)
 80006f4:	f002 fb38 	bl	8002d68 <HAL_SPI_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f8b1 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200000ac 	.word	0x200000ac
 800070c:	40013000 	.word	0x40013000

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_DMA_Init+0x48>)
 8000718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_DMA_Init+0x48>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6493      	str	r3, [r2, #72]	; 0x48
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_DMA_Init+0x48>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200c      	movs	r0, #12
 8000734:	f000 fba9 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000738:	200c      	movs	r0, #12
 800073a:	f000 fbc2 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200d      	movs	r0, #13
 8000744:	f000 fba1 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000748:	200d      	movs	r0, #13
 800074a:	f000 fbba 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_GPIO_Init+0x90>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <MX_GPIO_Init+0x90>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_GPIO_Init+0x90>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_GPIO_Init+0x90>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_GPIO_Init+0x90>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_GPIO_Init+0x90>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007a2:	f000 ffc9 	bl	8001738 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_GPIO_Init+0x90>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_GPIO_Init+0x90>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_GPIO_Init+0x90>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0x94>)
 80007c4:	f000 ff22 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0x94>)
 80007e0:	f000 fd82 	bl	80012e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000400 	.word	0x48000400

080007f4 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a11      	ldr	r2, [pc, #68]	; (8000848 <HAL_SPI_TxRxCpltCallback+0x54>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d102      	bne.n	800080c <HAL_SPI_TxRxCpltCallback+0x18>
    {
        spi_cplt = 1; // Signal that SPI communication is done
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_SPI_TxRxCpltCallback+0x58>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
    }
	HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000810:	f000 ff14 	bl	800163c <HAL_GPIO_TogglePin>
//	HAL_Delay(1000);
	// Transmit the received SPI data through UART
	HAL_UART_Transmit(&hlpuart1, buffer_print, received_length, HAL_MAX_DELAY);
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_SPI_TxRxCpltCallback+0x60>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081e:	490e      	ldr	r1, [pc, #56]	; (8000858 <HAL_SPI_TxRxCpltCallback+0x64>)
 8000820:	480e      	ldr	r0, [pc, #56]	; (800085c <HAL_SPI_TxRxCpltCallback+0x68>)
 8000822:	f002 ffdb 	bl	80037dc <HAL_UART_Transmit>
	// Clear the buffers
	memset(buffer_rx, 0, BUFFER_SIZE);
 8000826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082a:	2100      	movs	r1, #0
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <HAL_SPI_TxRxCpltCallback+0x6c>)
 800082e:	f003 fdc7 	bl	80043c0 <memset>
	memset(buffer_print, 0, BUFFER_SIZE);
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	2100      	movs	r1, #0
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <HAL_SPI_TxRxCpltCallback+0x64>)
 800083a:	f003 fdc1 	bl	80043c0 <memset>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40013000 	.word	0x40013000
 800084c:	200003a0 	.word	0x200003a0
 8000850:	48000400 	.word	0x48000400
 8000854:	200003a2 	.word	0x200003a2
 8000858:	200002a0 	.word	0x200002a0
 800085c:	20000028 	.word	0x20000028
 8000860:	200001a0 	.word	0x200001a0

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x44>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <HAL_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <HAL_MspInit+0x44>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x44>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x44>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x44>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0ac      	sub	sp, #176	; 0xb0
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	228c      	movs	r2, #140	; 0x8c
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fd71 	bl	80043c0 <memset>
  if(huart->Instance==LPUART1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a22      	ldr	r2, [pc, #136]	; (800096c <HAL_UART_MspInit+0xb4>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d13d      	bne.n	8000964 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008e8:	2320      	movs	r3, #32
 80008ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fd6d 	bl	80023d4 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000900:	f7ff ffb0 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <HAL_UART_MspInit+0xb8>)
 8000906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_UART_MspInit+0xb8>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_UART_MspInit+0xb8>)
 8000912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_UART_MspInit+0xb8>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_UART_MspInit+0xb8>)
 8000922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_UART_MspInit+0xb8>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000934:	f000 ff00 	bl	8001738 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000938:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800093c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000952:	2308      	movs	r3, #8
 8000954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000958:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_UART_MspInit+0xbc>)
 8000960:	f000 fcc2 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	37b0      	adds	r7, #176	; 0xb0
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40008000 	.word	0x40008000
 8000970:	40021000 	.word	0x40021000
 8000974:	48001800 	.word	0x48001800

08000978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a40      	ldr	r2, [pc, #256]	; (8000a98 <HAL_SPI_MspInit+0x120>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d17a      	bne.n	8000a90 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <HAL_SPI_MspInit+0x124>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a3f      	ldr	r2, [pc, #252]	; (8000a9c <HAL_SPI_MspInit+0x124>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <HAL_SPI_MspInit+0x124>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <HAL_SPI_MspInit+0x124>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a39      	ldr	r2, [pc, #228]	; (8000a9c <HAL_SPI_MspInit+0x124>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <HAL_SPI_MspInit+0x124>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	23c2      	movs	r3, #194	; 0xc2
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009da:	2305      	movs	r3, #5
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fc7e 	bl	80012e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 80009ee:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <HAL_SPI_MspInit+0x12c>)
 80009f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 80009fa:	2210      	movs	r2, #16
 80009fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a10:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a22:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a24:	f000 fa68 	bl	8000ef8 <HAL_DMA_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8000a2e:	f7ff ff19 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a36:	655a      	str	r2, [r3, #84]	; 0x54
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_SPI_MspInit+0x128>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a40:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <HAL_SPI_MspInit+0x134>)
 8000a42:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a76:	f000 fa3f 	bl	8000ef8 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8000a80:	f7ff fef0 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a88:	659a      	str	r2, [r3, #88]	; 0x58
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_SPI_MspInit+0x130>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40013000 	.word	0x40013000
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	40020030 	.word	0x40020030
 8000aa8:	20000158 	.word	0x20000158
 8000aac:	4002001c 	.word	0x4002001c

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f8a6 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <DMA1_Channel2_IRQHandler+0x10>)
 8000b0a:	f000 fb0d 	bl	8001128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000158 	.word	0x20000158

08000b18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <DMA1_Channel3_IRQHandler+0x10>)
 8000b1e:	f000 fb03 	bl	8001128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000110 	.word	0x20000110

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff ffea 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f003 fbfb 	bl	8004378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fcb5 	bl	80004f0 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b94:	08004440 	.word	0x08004440
  ldr r2, =_sbss
 8000b98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b9c:	200003a8 	.word	0x200003a8

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>

08000ba2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f961 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f000 f80e 	bl	8000bd4 <HAL_InitTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e001      	b.n	8000bc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc4:	f7ff fe54 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_InitTick+0x6c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d023      	beq.n	8000c30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_InitTick+0x70>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x6c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f96d 	bl	8000ede <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10f      	bne.n	8000c2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d809      	bhi.n	8000c24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c18:	f000 f937 	bl	8000e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_InitTick+0x74>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e007      	b.n	8000c34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e004      	b.n	8000c34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
 8000c2e:	e001      	b.n	8000c34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200003a4 	.word	0x200003a4

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200003a4 	.word	0x200003a4

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff29 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff3e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff31 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e098      	b.n	800103c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <HAL_DMA_Init+0x150>)
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d80f      	bhi.n	8000f36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	; (800104c <HAL_DMA_Init+0x154>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a4b      	ldr	r2, [pc, #300]	; (8001050 <HAL_DMA_Init+0x158>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	009a      	lsls	r2, r3, #2
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_DMA_Init+0x15c>)
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
 8000f34:	e00e      	b.n	8000f54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b46      	ldr	r3, [pc, #280]	; (8001058 <HAL_DMA_Init+0x160>)
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a43      	ldr	r2, [pc, #268]	; (8001050 <HAL_DMA_Init+0x158>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	009a      	lsls	r2, r3, #2
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a42      	ldr	r2, [pc, #264]	; (800105c <HAL_DMA_Init+0x164>)
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2202      	movs	r2, #2
 8000f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fae:	d039      	beq.n	8001024 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <HAL_DMA_Init+0x15c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d11a      	bne.n	8000ff0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <HAL_DMA_Init+0x168>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 031c 	and.w	r3, r3, #28
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4924      	ldr	r1, [pc, #144]	; (8001060 <HAL_DMA_Init+0x168>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_DMA_Init+0x168>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6859      	ldr	r1, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	f003 031c 	and.w	r3, r3, #28
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	491d      	ldr	r1, [pc, #116]	; (8001060 <HAL_DMA_Init+0x168>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
 8000fee:	e019      	b.n	8001024 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_DMA_Init+0x16c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	f003 031c 	and.w	r3, r3, #28
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	4917      	ldr	r1, [pc, #92]	; (8001064 <HAL_DMA_Init+0x16c>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_DMA_Init+0x16c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6859      	ldr	r1, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f003 031c 	and.w	r3, r3, #28
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	4911      	ldr	r1, [pc, #68]	; (8001064 <HAL_DMA_Init+0x16c>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40020407 	.word	0x40020407
 800104c:	bffdfff8 	.word	0xbffdfff8
 8001050:	cccccccd 	.word	0xcccccccd
 8001054:	40020000 	.word	0x40020000
 8001058:	bffdfbf8 	.word	0xbffdfbf8
 800105c:	40020400 	.word	0x40020400
 8001060:	400200a8 	.word	0x400200a8
 8001064:	400204a8 	.word	0x400204a8

08001068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_DMA_Start_IT+0x20>
 8001084:	2302      	movs	r3, #2
 8001086:	e04b      	b.n	8001120 <HAL_DMA_Start_IT+0xb8>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d13a      	bne.n	8001112 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f8e0 	bl	8001286 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 020e 	orr.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e00f      	b.n	8001100 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0204 	bic.w	r2, r2, #4
 80010ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 020a 	orr.w	r2, r2, #10
 80010fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e005      	b.n	800111e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800111a:	2302      	movs	r3, #2
 800111c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	f003 031c 	and.w	r3, r3, #28
 8001148:	2204      	movs	r2, #4
 800114a:	409a      	lsls	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d026      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x7a>
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	d021      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	2b00      	cmp	r3, #0
 800116a:	d107      	bne.n	800117c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0204 	bic.w	r2, r2, #4
 800117a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f003 021c 	and.w	r2, r3, #28
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	2104      	movs	r1, #4
 800118a:	fa01 f202 	lsl.w	r2, r1, r2
 800118e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	2b00      	cmp	r3, #0
 8001196:	d071      	beq.n	800127c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80011a0:	e06c      	b.n	800127c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 031c 	and.w	r3, r3, #28
 80011aa:	2202      	movs	r2, #2
 80011ac:	409a      	lsls	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d02e      	beq.n	8001214 <HAL_DMA_IRQHandler+0xec>
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d029      	beq.n	8001214 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10b      	bne.n	80011e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 020a 	bic.w	r2, r2, #10
 80011dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f003 021c 	and.w	r2, r3, #28
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2102      	movs	r1, #2
 80011f4:	fa01 f202 	lsl.w	r2, r1, r2
 80011f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d038      	beq.n	800127c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001212:	e033      	b.n	800127c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 031c 	and.w	r3, r3, #28
 800121c:	2208      	movs	r2, #8
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d02a      	beq.n	800127e <HAL_DMA_IRQHandler+0x156>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d025      	beq.n	800127e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 020e 	bic.w	r2, r2, #14
 8001240:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f003 021c 	and.w	r2, r3, #28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800127c:	bf00      	nop
 800127e:	bf00      	nop
}
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	f003 021c 	and.w	r2, r3, #28
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	2b10      	cmp	r3, #16
 80012b6:	d108      	bne.n	80012ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012c8:	e007      	b.n	80012da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	60da      	str	r2, [r3, #12]
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e166      	b.n	80015c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8158 	beq.w	80015c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x40>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d017      	beq.n	80013c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d123      	bne.n	800141a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0203 	and.w	r2, r3, #3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80b2 	beq.w	80015c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <HAL_GPIO_Init+0x2fc>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	4a60      	ldr	r2, [pc, #384]	; (80015e4 <HAL_GPIO_Init+0x2fc>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6613      	str	r3, [r2, #96]	; 0x60
 8001468:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <HAL_GPIO_Init+0x2fc>)
 800146a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001474:	4a5c      	ldr	r2, [pc, #368]	; (80015e8 <HAL_GPIO_Init+0x300>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800149e:	d02b      	beq.n	80014f8 <HAL_GPIO_Init+0x210>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a52      	ldr	r2, [pc, #328]	; (80015ec <HAL_GPIO_Init+0x304>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d025      	beq.n	80014f4 <HAL_GPIO_Init+0x20c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a51      	ldr	r2, [pc, #324]	; (80015f0 <HAL_GPIO_Init+0x308>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d01f      	beq.n	80014f0 <HAL_GPIO_Init+0x208>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a50      	ldr	r2, [pc, #320]	; (80015f4 <HAL_GPIO_Init+0x30c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d019      	beq.n	80014ec <HAL_GPIO_Init+0x204>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_GPIO_Init+0x310>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d013      	beq.n	80014e8 <HAL_GPIO_Init+0x200>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <HAL_GPIO_Init+0x314>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d00d      	beq.n	80014e4 <HAL_GPIO_Init+0x1fc>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a4d      	ldr	r2, [pc, #308]	; (8001600 <HAL_GPIO_Init+0x318>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d007      	beq.n	80014e0 <HAL_GPIO_Init+0x1f8>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <HAL_GPIO_Init+0x31c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d101      	bne.n	80014dc <HAL_GPIO_Init+0x1f4>
 80014d8:	2307      	movs	r3, #7
 80014da:	e00e      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014dc:	2308      	movs	r3, #8
 80014de:	e00c      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014e0:	2306      	movs	r3, #6
 80014e2:	e00a      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014e4:	2305      	movs	r3, #5
 80014e6:	e008      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014e8:	2304      	movs	r3, #4
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014ec:	2303      	movs	r3, #3
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x212>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_GPIO_Init+0x300>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_GPIO_Init+0x320>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800153c:	4a32      	ldr	r2, [pc, #200]	; (8001608 <HAL_GPIO_Init+0x320>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_GPIO_Init+0x320>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001566:	4a28      	ldr	r2, [pc, #160]	; (8001608 <HAL_GPIO_Init+0x320>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_GPIO_Init+0x320>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_GPIO_Init+0x320>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_GPIO_Init+0x320>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <HAL_GPIO_Init+0x320>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f ae91 	bne.w	80012f8 <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48001000 	.word	0x48001000
 80015fc:	48001400 	.word	0x48001400
 8001600:	48001800 	.word	0x48001800
 8001604:	48001c00 	.word	0x48001c00
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001628:	e002      	b.n	8001630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43d9      	mvns	r1, r3
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	400b      	ands	r3, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_PWREx_GetVoltageRange+0x18>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000

0800168c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169a:	d130      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a8:	d038      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2232      	movs	r2, #50	; 0x32
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	e002      	b.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e4:	d102      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f2      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d110      	bne.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e00f      	b.n	800171e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d007      	beq.n	800171c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40007000 	.word	0x40007000
 8001730:	20000000 	.word	0x20000000
 8001734:	431bde83 	.word	0x431bde83

08001738 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_PWREx_EnableVddIO2+0x1c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	6053      	str	r3, [r2, #4]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40007000 	.word	0x40007000

08001758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f000 bc08 	b.w	8001f7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176c:	4b96      	ldr	r3, [pc, #600]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001776:	4b94      	ldr	r3, [pc, #592]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80e4 	beq.w	8001956 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d007      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4c>
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	f040 808b 	bne.w	80018b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	f040 8087 	bne.w	80018b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a4:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_OscConfig+0x64>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e3df      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_RCC_OscConfig+0x7e>
 80017cc:	4b7e      	ldr	r3, [pc, #504]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d4:	e005      	b.n	80017e2 <HAL_RCC_OscConfig+0x8a>
 80017d6:	4b7c      	ldr	r3, [pc, #496]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d223      	bcs.n	800182e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fd92 	bl	8002314 <RCC_SetFlashLatencyFromMSIRange>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e3c0      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017fa:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a72      	ldr	r2, [pc, #456]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	496d      	ldr	r1, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001818:	4b6b      	ldr	r3, [pc, #428]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	4968      	ldr	r1, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	e025      	b.n	800187a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182e:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4960      	ldr	r1, [pc, #384]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184c:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	495b      	ldr	r1, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fd52 	bl	8002314 <RCC_SetFlashLatencyFromMSIRange>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e380      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800187a:	f000 fc87 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	4950      	ldr	r1, [pc, #320]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	4a4e      	ldr	r2, [pc, #312]	; (80019d0 <HAL_RCC_OscConfig+0x278>)
 8001898:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800189a:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <HAL_RCC_OscConfig+0x27c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f998 	bl	8000bd4 <HAL_InitTick>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d052      	beq.n	8001954 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	e364      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d032      	beq.n	8001920 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ba:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a42      	ldr	r2, [pc, #264]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f9d5 	bl	8000c74 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ce:	f7ff f9d1 	bl	8000c74 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e34d      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a35      	ldr	r2, [pc, #212]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018f2:	f043 0308 	orr.w	r3, r3, #8
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4930      	ldr	r1, [pc, #192]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	492b      	ldr	r1, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
 800191e:	e01a      	b.n	8001956 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800192c:	f7ff f9a2 	bl	8000c74 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001934:	f7ff f99e 	bl	8000c74 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e31a      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x1dc>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d073      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b08      	cmp	r3, #8
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x21c>
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d10e      	bne.n	800198c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d10b      	bne.n	800198c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d063      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d15f      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e2f7      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001994:	d106      	bne.n	80019a4 <HAL_RCC_OscConfig+0x24c>
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e025      	b.n	80019f0 <HAL_RCC_OscConfig+0x298>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ac:	d114      	bne.n	80019d8 <HAL_RCC_OscConfig+0x280>
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a02      	ldr	r2, [pc, #8]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e013      	b.n	80019f0 <HAL_RCC_OscConfig+0x298>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	080043e8 	.word	0x080043e8
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004
 80019d8:	4ba0      	ldr	r3, [pc, #640]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a9f      	ldr	r2, [pc, #636]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b9d      	ldr	r3, [pc, #628]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a9c      	ldr	r2, [pc, #624]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f93c 	bl	8000c74 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff f938 	bl	8000c74 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e2b4      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x2a8>
 8001a1e:	e014      	b.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f928 	bl	8000c74 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f924 	bl	8000c74 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e2a0      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2d0>
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d060      	beq.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_OscConfig+0x310>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d116      	bne.n	8001a96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a68:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x328>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e27d      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	4973      	ldr	r1, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a94:	e040      	b.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d023      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f8e3 	bl	8000c74 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f8df 	bl	8000c74 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e25b      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	495f      	ldr	r1, [pc, #380]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e018      	b.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5c      	ldr	r2, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f8bf 	bl	8000c74 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff f8bb 	bl	8000c74 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e237      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d03c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f89a 	bl	8000c74 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f896 	bl	8000c74 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e212      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ef      	beq.n	8001b44 <HAL_RCC_OscConfig+0x3ec>
 8001b64:	e01b      	b.n	8001b9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6c:	4a3b      	ldr	r2, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff f87d 	bl	8000c74 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f879 	bl	8000c74 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1f5      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b90:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1ef      	bne.n	8001b7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80a6 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d118      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f840 	bl	8000c74 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf8:	f7ff f83c 	bl	8000c74 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1b8      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4d8>
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2e:	e029      	b.n	8001c84 <HAL_RCC_OscConfig+0x52c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d115      	bne.n	8001c64 <HAL_RCC_OscConfig+0x50c>
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4e:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_OscConfig+0x52c>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	4b9d      	ldr	r3, [pc, #628]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a9c      	ldr	r2, [pc, #624]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c74:	4b99      	ldr	r3, [pc, #612]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	4a98      	ldr	r2, [pc, #608]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d016      	beq.n	8001cba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7fe fff2 	bl	8000c74 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7fe ffee 	bl	8000c74 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e168      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001caa:	4b8c      	ldr	r3, [pc, #560]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ed      	beq.n	8001c94 <HAL_RCC_OscConfig+0x53c>
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7fe ffdb 	bl	8000c74 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7fe ffd7 	bl	8000c74 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e151      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd8:	4b80      	ldr	r3, [pc, #512]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ed      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cec:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	4a7a      	ldr	r2, [pc, #488]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d0c:	4b73      	ldr	r3, [pc, #460]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d12:	4a72      	ldr	r2, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7fe ffaa 	bl	8000c74 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d24:	f7fe ffa6 	bl	8000c74 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e122      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d36:	4b69      	ldr	r3, [pc, #420]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ef      	beq.n	8001d24 <HAL_RCC_OscConfig+0x5cc>
 8001d44:	e01b      	b.n	8001d7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4c:	4a63      	ldr	r2, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7fe ff8d 	bl	8000c74 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d5e:	f7fe ff89 	bl	8000c74 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e105      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d70:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ef      	bne.n	8001d5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80f9 	beq.w	8001f7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	f040 80cf 	bne.w	8001f30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0203 	and.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d12c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	3b01      	subs	r3, #1
 8001db2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d123      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d11b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d113      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	3b01      	subs	r3, #1
 8001de6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d109      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d071      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d068      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0ac      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e2e:	f7fe ff21 	bl	8000c74 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e36:	f7fe ff1d 	bl	8000c74 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e099      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_OscConfig+0x788>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e64:	3a01      	subs	r2, #1
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e6e:	0212      	lsls	r2, r2, #8
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e76:	0852      	lsrs	r2, r2, #1
 8001e78:	3a01      	subs	r2, #1
 8001e7a:	0552      	lsls	r2, r2, #21
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	0652      	lsls	r2, r2, #25
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e8e:	06d2      	lsls	r2, r2, #27
 8001e90:	430a      	orrs	r2, r1
 8001e92:	4912      	ldr	r1, [pc, #72]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb0:	f7fe fee0 	bl	8000c74 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fedc 	bl	8000c74 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e058      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_RCC_OscConfig+0x784>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed6:	e050      	b.n	8001f7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e04f      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d144      	bne.n	8001f7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a20      	ldr	r2, [pc, #128]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f08:	f7fe feb4 	bl	8000c74 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe feb0 	bl	8000c74 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e02c      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x7b8>
 8001f2e:	e024      	b.n	8001f7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d01f      	beq.n	8001f76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe fe97 	bl	8000c74 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe fe93 	bl	8000c74 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	4905      	ldr	r1, [pc, #20]	; (8001f84 <HAL_RCC_OscConfig+0x82c>)
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_RCC_OscConfig+0x830>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
 8001f74:	e001      	b.n	8001f7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3720      	adds	r7, #32
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	feeefffc 	.word	0xfeeefffc

08001f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0e7      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d910      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b72      	ldr	r3, [pc, #456]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 0207 	bic.w	r2, r3, #7
 8001fb6:	4970      	ldr	r1, [pc, #448]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b6e      	ldr	r3, [pc, #440]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cf      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d908      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4960      	ldr	r1, [pc, #384]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04c      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b5a      	ldr	r3, [pc, #360]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d121      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0a6      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e09a      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e08e      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002052:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e086      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002062:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4943      	ldr	r1, [pc, #268]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002074:	f7fe fdfe 	bl	8000c74 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	e00a      	b.n	8002092 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207c:	f7fe fdfa 	bl	8000c74 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e06e      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 020c 	and.w	r2, r3, #12
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1eb      	bne.n	800207c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	429a      	cmp	r2, r3
 80020be:	d208      	bcs.n	80020d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	492b      	ldr	r1, [pc, #172]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d210      	bcs.n	8002102 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 0207 	bic.w	r2, r3, #7
 80020e8:	4923      	ldr	r1, [pc, #140]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <HAL_RCC_ClockConfig+0x1ec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e036      	b.n	8002170 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4918      	ldr	r1, [pc, #96]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4910      	ldr	r1, [pc, #64]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002140:	f000 f824 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	490b      	ldr	r1, [pc, #44]	; (8002180 <HAL_RCC_ClockConfig+0x1f4>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1f8>)
 800215e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1fc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fd35 	bl	8000bd4 <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	72fb      	strb	r3, [r7, #11]

  return status;
 800216e:	7afb      	ldrb	r3, [r7, #11]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	080043e8 	.word	0x080043e8
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x34>
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d121      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d11e      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e005      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021e8:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d102      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e004      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d101      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002212:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d134      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0xa6>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d003      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0xac>
 8002230:	e005      	b.n	800223e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_GetSysClockFreq+0x110>)
 8002234:	617b      	str	r3, [r7, #20]
      break;
 8002236:	e005      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800223a:	617b      	str	r3, [r7, #20]
      break;
 800223c:	e002      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	617b      	str	r3, [r7, #20]
      break;
 8002242:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	3301      	adds	r3, #1
 8002250:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	fb03 f202 	mul.w	r2, r3, r2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	0e5b      	lsrs	r3, r3, #25
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	3301      	adds	r3, #1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002284:	69bb      	ldr	r3, [r7, #24]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	08004400 	.word	0x08004400
 800229c:	00f42400 	.word	0x00f42400
 80022a0:	007a1200 	.word	0x007a1200

080022a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000

080022bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022c0:	f7ff fff0 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	080043f8 	.word	0x080043f8

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022ec:	f7ff ffda 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0adb      	lsrs	r3, r3, #11
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4904      	ldr	r1, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	080043f8 	.word	0x080043f8

08002314 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800232c:	f7ff f9a0 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 8002330:	6178      	str	r0, [r7, #20]
 8002332:	e014      	b.n	800235e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002338:	4a24      	ldr	r2, [pc, #144]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233e:	6593      	str	r3, [r2, #88]	; 0x58
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800234c:	f7ff f990 	bl	8001670 <HAL_PWREx_GetVoltageRange>
 8002350:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002364:	d10b      	bne.n	800237e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d919      	bls.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2ba0      	cmp	r3, #160	; 0xa0
 8002370:	d902      	bls.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002372:	2302      	movs	r3, #2
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	e013      	b.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002378:	2301      	movs	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	e010      	b.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d902      	bls.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002384:	2303      	movs	r3, #3
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	e00a      	b.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d102      	bne.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002390:	2302      	movs	r3, #2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e004      	b.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b70      	cmp	r3, #112	; 0x70
 800239a:	d101      	bne.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800239c:	2301      	movs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 0207 	bic.w	r2, r3, #7
 80023a8:	4909      	ldr	r1, [pc, #36]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d001      	beq.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40022000 	.word	0x40022000

080023d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023dc:	2300      	movs	r3, #0
 80023de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023e0:	2300      	movs	r3, #0
 80023e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d041      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023f8:	d02a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023fe:	d824      	bhi.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002400:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002404:	d008      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800240a:	d81e      	bhi.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002414:	d010      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002416:	e018      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002418:	4b86      	ldr	r3, [pc, #536]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a85      	ldr	r2, [pc, #532]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002422:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002424:	e015      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f000 facd 	bl	80029cc <RCCEx_PLLSAI1_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002436:	e00c      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3320      	adds	r3, #32
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fbb6 	bl	8002bb0 <RCCEx_PLLSAI2_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002448:	e003      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	74fb      	strb	r3, [r7, #19]
      break;
 800244e:	e000      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10b      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002458:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002466:	4973      	ldr	r1, [pc, #460]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800246e:	e001      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d041      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002488:	d02a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800248a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800248e:	d824      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002494:	d008      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800249a:	d81e      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d010      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024a6:	e018      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a8:	4b62      	ldr	r3, [pc, #392]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a61      	ldr	r2, [pc, #388]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024b4:	e015      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fa85 	bl	80029cc <RCCEx_PLLSAI1_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c6:	e00c      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3320      	adds	r3, #32
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb6e 	bl	8002bb0 <RCCEx_PLLSAI2_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d8:	e003      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	74fb      	strb	r3, [r7, #19]
      break;
 80024de:	e000      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024e8:	4b52      	ldr	r3, [pc, #328]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f6:	494f      	ldr	r1, [pc, #316]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024fe:	e001      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a0 	beq.w	8002652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a40      	ldr	r2, [pc, #256]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002544:	2301      	movs	r3, #1
 8002546:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800254e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002554:	f7fe fb8e 	bl	8000c74 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800255a:	e009      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255c:	f7fe fb8a 	bl	8000c74 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d902      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	74fb      	strb	r3, [r7, #19]
        break;
 800256e:	e005      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002570:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ef      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d15c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01f      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	429a      	cmp	r2, r3
 800259e:	d019      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	4a20      	ldr	r2, [pc, #128]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fb49 	bl	8000c74 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e4:	e00b      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fb45 	bl	8000c74 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d902      	bls.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	74fb      	strb	r3, [r7, #19]
            break;
 80025fc:	e006      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ec      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4904      	ldr	r1, [pc, #16]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800262a:	e009      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	74bb      	strb	r3, [r7, #18]
 8002630:	e006      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002640:	7c7b      	ldrb	r3, [r7, #17]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d105      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4ba6      	ldr	r3, [pc, #664]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4aa5      	ldr	r2, [pc, #660]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800265e:	4ba0      	ldr	r3, [pc, #640]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f023 0203 	bic.w	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	499c      	ldr	r1, [pc, #624]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002680:	4b97      	ldr	r3, [pc, #604]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f023 020c 	bic.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	4994      	ldr	r1, [pc, #592]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026a2:	4b8f      	ldr	r3, [pc, #572]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	498b      	ldr	r1, [pc, #556]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026c4:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4983      	ldr	r1, [pc, #524]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026e6:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	497a      	ldr	r1, [pc, #488]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002708:	4b75      	ldr	r3, [pc, #468]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4972      	ldr	r1, [pc, #456]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800272a:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002738:	4969      	ldr	r1, [pc, #420]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800275a:	4961      	ldr	r1, [pc, #388]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277c:	4958      	ldr	r1, [pc, #352]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	4950      	ldr	r1, [pc, #320]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027b2:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	4947      	ldr	r1, [pc, #284]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	493f      	ldr	r1, [pc, #252]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d028      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	4936      	ldr	r1, [pc, #216]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002814:	d106      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002816:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a31      	ldr	r2, [pc, #196]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002820:	60d3      	str	r3, [r2, #12]
 8002822:	e011      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f8c9 	bl	80029cc <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d028      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002862:	491f      	ldr	r1, [pc, #124]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002872:	d106      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
 8002880:	e011      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800288a:	d10c      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f89a 	bl	80029cc <RCCEx_PLLSAI1_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d02a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d0:	d108      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d2:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4a02      	ldr	r2, [pc, #8]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028dc:	60d3      	str	r3, [r2, #12]
 80028de:	e013      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80028e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f869 	bl	80029cc <RCCEx_PLLSAI1_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d02f      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002914:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002922:	4929      	ldr	r1, [pc, #164]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800292e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002932:	d10d      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	2102      	movs	r1, #2
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f846 	bl	80029cc <RCCEx_PLLSAI1_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d014      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	74bb      	strb	r3, [r7, #18]
 800294e:	e011      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3320      	adds	r3, #32
 800295e:	2102      	movs	r1, #2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f925 	bl	8002bb0 <RCCEx_PLLSAI2_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002990:	490d      	ldr	r1, [pc, #52]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b4:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029da:	4b74      	ldr	r3, [pc, #464]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d018      	beq.n	8002a18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029e6:	4b71      	ldr	r3, [pc, #452]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0203 	and.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10d      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
       ||
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029fe:	4b6b      	ldr	r3, [pc, #428]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d047      	beq.n	8002aa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e044      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d018      	beq.n	8002a52 <RCCEx_PLLSAI1_Config+0x86>
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d825      	bhi.n	8002a70 <RCCEx_PLLSAI1_Config+0xa4>
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d002      	beq.n	8002a2e <RCCEx_PLLSAI1_Config+0x62>
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d009      	beq.n	8002a40 <RCCEx_PLLSAI1_Config+0x74>
 8002a2c:	e020      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11d      	bne.n	8002a76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3e:	e01a      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a40:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e013      	b.n	8002a7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a52:	4b56      	ldr	r3, [pc, #344]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a5e:	4b53      	ldr	r3, [pc, #332]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a6e:	e006      	b.n	8002a7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e004      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	4943      	ldr	r1, [pc, #268]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d17c      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002aa8:	4b40      	ldr	r3, [pc, #256]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3f      	ldr	r2, [pc, #252]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab4:	f7fe f8de 	bl	8000c74 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aba:	e009      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002abc:	f7fe f8da 	bl	8000c74 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ace:	e005      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ad0:	4b36      	ldr	r3, [pc, #216]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ef      	bne.n	8002abc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d15f      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d110      	bne.n	8002b0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002af0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6892      	ldr	r2, [r2, #8]
 8002af8:	0211      	lsls	r1, r2, #8
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	06d2      	lsls	r2, r2, #27
 8002b00:	430a      	orrs	r2, r1
 8002b02:	492a      	ldr	r1, [pc, #168]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	610b      	str	r3, [r1, #16]
 8002b08:	e027      	b.n	8002b5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d112      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6892      	ldr	r2, [r2, #8]
 8002b20:	0211      	lsls	r1, r2, #8
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6912      	ldr	r2, [r2, #16]
 8002b26:	0852      	lsrs	r2, r2, #1
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	0552      	lsls	r2, r2, #21
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	491f      	ldr	r1, [pc, #124]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	610b      	str	r3, [r1, #16]
 8002b34:	e011      	b.n	8002b5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	0211      	lsls	r1, r2, #8
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6952      	ldr	r2, [r2, #20]
 8002b4c:	0852      	lsrs	r2, r2, #1
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	0652      	lsls	r2, r2, #25
 8002b52:	430a      	orrs	r2, r1
 8002b54:	4915      	ldr	r1, [pc, #84]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe f885 	bl	8000c74 <HAL_GetTick>
 8002b6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b6c:	e009      	b.n	8002b82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b6e:	f7fe f881 	bl	8000c74 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d902      	bls.n	8002b82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b80:	e005      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ef      	beq.n	8002b6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4903      	ldr	r1, [pc, #12]	; (8002bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000

08002bb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bbe:	4b69      	ldr	r3, [pc, #420]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d018      	beq.n	8002bfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bca:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0203 	and.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d10d      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002be2:	4b60      	ldr	r3, [pc, #384]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d047      	beq.n	8002c86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e044      	b.n	8002c86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d018      	beq.n	8002c36 <RCCEx_PLLSAI2_Config+0x86>
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d825      	bhi.n	8002c54 <RCCEx_PLLSAI2_Config+0xa4>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d002      	beq.n	8002c12 <RCCEx_PLLSAI2_Config+0x62>
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d009      	beq.n	8002c24 <RCCEx_PLLSAI2_Config+0x74>
 8002c10:	e020      	b.n	8002c54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c12:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11d      	bne.n	8002c5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c22:	e01a      	b.n	8002c5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c24:	4b4f      	ldr	r3, [pc, #316]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d116      	bne.n	8002c5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e013      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c36:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c42:	4b48      	ldr	r3, [pc, #288]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c52:	e006      	b.n	8002c62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e004      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	4938      	ldr	r1, [pc, #224]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d166      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c8c:	4b35      	ldr	r3, [pc, #212]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c98:	f7fd ffec 	bl	8000c74 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c9e:	e009      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ca0:	f7fd ffe8 	bl	8000c74 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d902      	bls.n	8002cb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002cb2:	e005      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cb4:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ef      	bne.n	8002ca0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d149      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d110      	bne.n	8002cee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6892      	ldr	r2, [r2, #8]
 8002cdc:	0211      	lsls	r1, r2, #8
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	06d2      	lsls	r2, r2, #27
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	491f      	ldr	r1, [pc, #124]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	614b      	str	r3, [r1, #20]
 8002cec:	e011      	b.n	8002d12 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	0211      	lsls	r1, r2, #8
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6912      	ldr	r2, [r2, #16]
 8002d04:	0852      	lsrs	r2, r2, #1
 8002d06:	3a01      	subs	r2, #1
 8002d08:	0652      	lsls	r2, r2, #25
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	4915      	ldr	r1, [pc, #84]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a13      	ldr	r2, [pc, #76]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fd ffa9 	bl	8000c74 <HAL_GetTick>
 8002d22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d24:	e009      	b.n	8002d3a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d26:	f7fd ffa5 	bl	8000c74 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d902      	bls.n	8002d3a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	73fb      	strb	r3, [r7, #15]
          break;
 8002d38:	e005      	b.n	8002d46 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ef      	beq.n	8002d26 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e095      	b.n	8002ea6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d8a:	d009      	beq.n	8002da0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
 8002d92:	e005      	b.n	8002da0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fddc 	bl	8000978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002de0:	d902      	bls.n	8002de8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e002      	b.n	8002dee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002df6:	d007      	beq.n	8002e08 <HAL_SPI_Init+0xa0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e00:	d002      	beq.n	8002e08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	ea42 0103 	orr.w	r1, r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	0c1b      	lsrs	r3, r3, #16
 8002e64:	f003 0204 	and.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e84:	ea42 0103 	orr.w	r1, r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e16c      	b.n	80031aa <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ede:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002ee6:	7dbb      	ldrb	r3, [r7, #22]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d00d      	beq.n	8002f08 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef2:	d106      	bne.n	8002f02 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002efc:	7dbb      	ldrb	r3, [r7, #22]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f06:	e14b      	b.n	80031a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f1e:	e13f      	b.n	80031a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d003      	beq.n	8002f34 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	887a      	ldrh	r2, [r7, #2]
 8002f5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002f7c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f86:	d908      	bls.n	8002f9a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	e06f      	b.n	800307a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fa8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d126      	bne.n	8003004 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fd0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fe0:	e010      	b.n	8003004 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ff0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d134      	bne.n	800307a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800301e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003026:	b29b      	uxth	r3, r3
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d111      	bne.n	8003054 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003046:	b29b      	uxth	r3, r3
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003052:	e012      	b.n	800307a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003062:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800306a:	b29b      	uxth	r3, r3
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	b29b      	uxth	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b04      	cmp	r3, #4
 8003084:	d108      	bne.n	8003098 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	4a4a      	ldr	r2, [pc, #296]	; (80031b4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	4a49      	ldr	r2, [pc, #292]	; (80031b8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c
 8003096:	e007      	b.n	80030a8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	4a47      	ldr	r2, [pc, #284]	; (80031bc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	4a45      	ldr	r2, [pc, #276]	; (80031c4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	2200      	movs	r2, #0
 80030b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	4619      	mov	r1, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80030d2:	f7fd ffc9 	bl	8001068 <HAL_DMA_Start_IT>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	f043 0210 	orr.w	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80030f4:	e054      	b.n	80031a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003112:	2200      	movs	r2, #0
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	2200      	movs	r2, #0
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	2200      	movs	r2, #0
 8003124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	4619      	mov	r1, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800313e:	f7fd ff93 	bl	8001068 <HAL_DMA_Start_IT>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003160:	e01e      	b.n	80031a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d007      	beq.n	8003180 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0220 	orr.w	r2, r2, #32
 800318e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0202 	orr.w	r2, r2, #2
 800319e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	08003351 	.word	0x08003351
 80031b8:	08003219 	.word	0x08003219
 80031bc:	0800336d 	.word	0x0800336d
 80031c0:	080032c1 	.word	0x080032c1
 80031c4:	08003389 	.word	0x08003389

080031c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003226:	f7fd fd25 	bl	8000c74 <HAL_GetTick>
 800322a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b20      	cmp	r3, #32
 8003238:	d03c      	beq.n	80032b4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0220 	bic.w	r2, r2, #32
 8003248:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10d      	bne.n	800326e <SPI_DMAReceiveCplt+0x56>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800325a:	d108      	bne.n	800326e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0203 	bic.w	r2, r2, #3
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	e007      	b.n	800327e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	2164      	movs	r1, #100	; 0x64
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f9be 	bl	8003604 <SPI_EndRxTransaction>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff ffa9 	bl	8003204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80032b2:	e002      	b.n	80032ba <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ff87 	bl	80031c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ce:	f7fd fcd1 	bl	8000c74 <HAL_GetTick>
 80032d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d030      	beq.n	8003344 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0220 	bic.w	r2, r2, #32
 80032f0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	2164      	movs	r1, #100	; 0x64
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9dc 	bl	80036b4 <SPI_EndRxTxTransaction>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0203 	bic.w	r2, r2, #3
 800331c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff ff61 	bl	8003204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003342:	e002      	b.n	800334a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7fd fa55 	bl	80007f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff ff3c 	bl	80031dc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff ff38 	bl	80031f0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0203 	bic.w	r2, r2, #3
 80033a4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff ff22 	bl	8003204 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033d8:	f7fd fc4c 	bl	8000c74 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033e8:	f7fd fc44 	bl	8000c74 <HAL_GetTick>
 80033ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	015b      	lsls	r3, r3, #5
 80033f4:	0d1b      	lsrs	r3, r3, #20
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	fb02 f303 	mul.w	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033fe:	e054      	b.n	80034aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003406:	d050      	beq.n	80034aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003408:	f7fd fc34 	bl	8000c74 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	429a      	cmp	r2, r3
 8003416:	d902      	bls.n	800341e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d13d      	bne.n	800349a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800342c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003436:	d111      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003440:	d004      	beq.n	800344c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d107      	bne.n	800345c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d10f      	bne.n	8003486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e017      	b.n	80034ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	bf0c      	ite	eq
 80034ba:	2301      	moveq	r3, #1
 80034bc:	2300      	movne	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d19b      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
 80034e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034ea:	f7fd fbc3 	bl	8000c74 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034fa:	f7fd fbbb 	bl	8000c74 <HAL_GetTick>
 80034fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003508:	4b3d      	ldr	r3, [pc, #244]	; (8003600 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00da      	lsls	r2, r3, #3
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	0d1b      	lsrs	r3, r3, #20
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003520:	e060      	b.n	80035e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003528:	d107      	bne.n	800353a <SPI_WaitFifoStateUntilTimeout+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003538:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003540:	d050      	beq.n	80035e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003542:	f7fd fb97 	bl	8000c74 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	429a      	cmp	r2, r3
 8003550:	d902      	bls.n	8003558 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d13d      	bne.n	80035d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003570:	d111      	bne.n	8003596 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357a:	d004      	beq.n	8003586 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003584:	d107      	bne.n	8003596 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003594:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359e:	d10f      	bne.n	80035c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e010      	b.n	80035f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d196      	bne.n	8003522 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3728      	adds	r7, #40	; 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000

08003604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003618:	d111      	bne.n	800363e <SPI_EndRxTransaction+0x3a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d004      	beq.n	800362e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362c:	d107      	bne.n	800363e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff febd 	bl	80033c8 <SPI_WaitFlagStateUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e023      	b.n	80036ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366c:	d11d      	bne.n	80036aa <SPI_EndRxTransaction+0xa6>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003676:	d004      	beq.n	8003682 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	d113      	bne.n	80036aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff22 	bl	80034d8 <SPI_WaitFifoStateUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e000      	b.n	80036ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f7ff ff03 	bl	80034d8 <SPI_WaitFifoStateUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e027      	b.n	8003738 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff fe68 	bl	80033c8 <SPI_WaitFlagStateUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e014      	b.n	8003738 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff fedc 	bl	80034d8 <SPI_WaitFifoStateUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e000      	b.n	8003738 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e040      	b.n	80037d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd f8a8 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f992 	bl	8003aa8 <UART_SetConfig>
 8003784:	4603      	mov	r3, r0
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e022      	b.n	80037d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fc3e 	bl	8004018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fcc5 	bl	800415c <UART_CheckIdleState>
 80037d2:	4603      	mov	r3, r0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 8082 	bne.w	80038fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_UART_Transmit+0x26>
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07a      	b.n	80038fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UART_Transmit+0x38>
 8003810:	2302      	movs	r3, #2
 8003812:	e073      	b.n	80038fc <HAL_UART_Transmit+0x120>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2221      	movs	r2, #33	; 0x21
 8003828:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800382a:	f7fd fa23 	bl	8000c74 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	88fa      	ldrh	r2, [r7, #6]
 8003834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x80>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800386c:	e02d      	b.n	80038ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fcb8 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e039      	b.n	80038fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881a      	ldrh	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389a:	b292      	uxth	r2, r2
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e008      	b.n	80038b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b292      	uxth	r2, r2
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1cb      	bne.n	800386e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2140      	movs	r1, #64	; 0x40
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fc84 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e005      	b.n	80038fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	2b20      	cmp	r3, #32
 800391a:	f040 80bf 	bne.w	8003a9c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_UART_Receive+0x26>
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0b7      	b.n	8003a9e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_UART_Receive+0x38>
 8003938:	2302      	movs	r3, #2
 800393a:	e0b0      	b.n	8003a9e <HAL_UART_Receive+0x19a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2222      	movs	r2, #34	; 0x22
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003958:	f7fd f98c 	bl	8000c74 <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d10e      	bne.n	8003996 <HAL_UART_Receive+0x92>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <HAL_UART_Receive+0x88>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003986:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800398a:	e02d      	b.n	80039e8 <HAL_UART_Receive+0xe4>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	22ff      	movs	r2, #255	; 0xff
 8003990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003994:	e028      	b.n	80039e8 <HAL_UART_Receive+0xe4>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_UART_Receive+0xb6>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <HAL_UART_Receive+0xac>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ae:	e01b      	b.n	80039e8 <HAL_UART_Receive+0xe4>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	227f      	movs	r2, #127	; 0x7f
 80039b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b8:	e016      	b.n	80039e8 <HAL_UART_Receive+0xe4>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d10d      	bne.n	80039e0 <HAL_UART_Receive+0xdc>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_UART_Receive+0xd2>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	227f      	movs	r2, #127	; 0x7f
 80039d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d4:	e008      	b.n	80039e8 <HAL_UART_Receive+0xe4>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	223f      	movs	r2, #63	; 0x3f
 80039da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039de:	e003      	b.n	80039e8 <HAL_UART_Receive+0xe4>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d108      	bne.n	8003a0c <HAL_UART_Receive+0x108>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e003      	b.n	8003a14 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a1c:	e033      	b.n	8003a86 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2120      	movs	r1, #32
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fbe0 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e032      	b.n	8003a9e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	8a7b      	ldrh	r3, [r7, #18]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	3302      	adds	r3, #2
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e00d      	b.n	8003a74 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	8a7b      	ldrh	r3, [r7, #18]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4013      	ands	r3, r2
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3301      	adds	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1c5      	bne.n	8003a1e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b08a      	sub	sp, #40	; 0x28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4ba4      	ldr	r3, [pc, #656]	; (8003d68 <UART_SetConfig+0x2c0>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a99      	ldr	r2, [pc, #612]	; (8003d6c <UART_SetConfig+0x2c4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	4313      	orrs	r3, r2
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a90      	ldr	r2, [pc, #576]	; (8003d70 <UART_SetConfig+0x2c8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d126      	bne.n	8003b80 <UART_SetConfig+0xd8>
 8003b32:	4b90      	ldr	r3, [pc, #576]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d81b      	bhi.n	8003b78 <UART_SetConfig+0xd0>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <UART_SetConfig+0xa0>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b69 	.word	0x08003b69
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b71 	.word	0x08003b71
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e116      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003b60:	2302      	movs	r3, #2
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e112      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6e:	e10e      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003b70:	2308      	movs	r3, #8
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e10a      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e106      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <UART_SetConfig+0x2d0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d138      	bne.n	8003bfc <UART_SetConfig+0x154>
 8003b8a:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d82d      	bhi.n	8003bf4 <UART_SetConfig+0x14c>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <UART_SetConfig+0xf8>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bd5 	.word	0x08003bd5
 8003ba4:	08003bf5 	.word	0x08003bf5
 8003ba8:	08003bf5 	.word	0x08003bf5
 8003bac:	08003bf5 	.word	0x08003bf5
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003bf5 	.word	0x08003bf5
 8003bb8:	08003bf5 	.word	0x08003bf5
 8003bbc:	08003bf5 	.word	0x08003bf5
 8003bc0:	08003bdd 	.word	0x08003bdd
 8003bc4:	08003bf5 	.word	0x08003bf5
 8003bc8:	08003bf5 	.word	0x08003bf5
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bed 	.word	0x08003bed
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bda:	e0d8      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be2:	e0d4      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e0d0      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e0cc      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e0c8      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a5e      	ldr	r2, [pc, #376]	; (8003d7c <UART_SetConfig+0x2d4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d125      	bne.n	8003c52 <UART_SetConfig+0x1aa>
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c10:	2b30      	cmp	r3, #48	; 0x30
 8003c12:	d016      	beq.n	8003c42 <UART_SetConfig+0x19a>
 8003c14:	2b30      	cmp	r3, #48	; 0x30
 8003c16:	d818      	bhi.n	8003c4a <UART_SetConfig+0x1a2>
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d00a      	beq.n	8003c32 <UART_SetConfig+0x18a>
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d814      	bhi.n	8003c4a <UART_SetConfig+0x1a2>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <UART_SetConfig+0x182>
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d008      	beq.n	8003c3a <UART_SetConfig+0x192>
 8003c28:	e00f      	b.n	8003c4a <UART_SetConfig+0x1a2>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c30:	e0ad      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c32:	2302      	movs	r3, #2
 8003c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c38:	e0a9      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c40:	e0a5      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c42:	2308      	movs	r3, #8
 8003c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c48:	e0a1      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c4a:	2310      	movs	r3, #16
 8003c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c50:	e09d      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <UART_SetConfig+0x2d8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d125      	bne.n	8003ca8 <UART_SetConfig+0x200>
 8003c5c:	4b45      	ldr	r3, [pc, #276]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c66:	2bc0      	cmp	r3, #192	; 0xc0
 8003c68:	d016      	beq.n	8003c98 <UART_SetConfig+0x1f0>
 8003c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c6c:	d818      	bhi.n	8003ca0 <UART_SetConfig+0x1f8>
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d00a      	beq.n	8003c88 <UART_SetConfig+0x1e0>
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d814      	bhi.n	8003ca0 <UART_SetConfig+0x1f8>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <UART_SetConfig+0x1d8>
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d008      	beq.n	8003c90 <UART_SetConfig+0x1e8>
 8003c7e:	e00f      	b.n	8003ca0 <UART_SetConfig+0x1f8>
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e082      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e07e      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e07a      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9e:	e076      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca6:	e072      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a35      	ldr	r2, [pc, #212]	; (8003d84 <UART_SetConfig+0x2dc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d12a      	bne.n	8003d08 <UART_SetConfig+0x260>
 8003cb2:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cc0:	d01a      	beq.n	8003cf8 <UART_SetConfig+0x250>
 8003cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cc6:	d81b      	bhi.n	8003d00 <UART_SetConfig+0x258>
 8003cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ccc:	d00c      	beq.n	8003ce8 <UART_SetConfig+0x240>
 8003cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd2:	d815      	bhi.n	8003d00 <UART_SetConfig+0x258>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <UART_SetConfig+0x238>
 8003cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cdc:	d008      	beq.n	8003cf0 <UART_SetConfig+0x248>
 8003cde:	e00f      	b.n	8003d00 <UART_SetConfig+0x258>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e052      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e04e      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e04a      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e046      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003d00:	2310      	movs	r3, #16
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d06:	e042      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <UART_SetConfig+0x2c4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d13a      	bne.n	8003d88 <UART_SetConfig+0x2e0>
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <UART_SetConfig+0x2cc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d20:	d01a      	beq.n	8003d58 <UART_SetConfig+0x2b0>
 8003d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d26:	d81b      	bhi.n	8003d60 <UART_SetConfig+0x2b8>
 8003d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2c:	d00c      	beq.n	8003d48 <UART_SetConfig+0x2a0>
 8003d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d32:	d815      	bhi.n	8003d60 <UART_SetConfig+0x2b8>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <UART_SetConfig+0x298>
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d008      	beq.n	8003d50 <UART_SetConfig+0x2a8>
 8003d3e:	e00f      	b.n	8003d60 <UART_SetConfig+0x2b8>
 8003d40:	2300      	movs	r3, #0
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e022      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e01e      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003d50:	2304      	movs	r3, #4
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e01a      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003d58:	2308      	movs	r3, #8
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e016      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003d60:	2310      	movs	r3, #16
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e012      	b.n	8003d8e <UART_SetConfig+0x2e6>
 8003d68:	efff69f3 	.word	0xefff69f3
 8003d6c:	40008000 	.word	0x40008000
 8003d70:	40013800 	.word	0x40013800
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40004400 	.word	0x40004400
 8003d7c:	40004800 	.word	0x40004800
 8003d80:	40004c00 	.word	0x40004c00
 8003d84:	40005000 	.word	0x40005000
 8003d88:	2310      	movs	r3, #16
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a9f      	ldr	r2, [pc, #636]	; (8004010 <UART_SetConfig+0x568>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d17a      	bne.n	8003e8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d824      	bhi.n	8003dea <UART_SetConfig+0x342>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <UART_SetConfig+0x300>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003deb 	.word	0x08003deb
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003ddb 	.word	0x08003ddb
 8003dbc:	08003deb 	.word	0x08003deb
 8003dc0:	08003deb 	.word	0x08003deb
 8003dc4:	08003deb 	.word	0x08003deb
 8003dc8:	08003de3 	.word	0x08003de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe fa76 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 8003dd0:	61f8      	str	r0, [r7, #28]
        break;
 8003dd2:	e010      	b.n	8003df6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd4:	4b8f      	ldr	r3, [pc, #572]	; (8004014 <UART_SetConfig+0x56c>)
 8003dd6:	61fb      	str	r3, [r7, #28]
        break;
 8003dd8:	e00d      	b.n	8003df6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dda:	f7fe f9d7 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8003dde:	61f8      	str	r0, [r7, #28]
        break;
 8003de0:	e009      	b.n	8003df6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	61fb      	str	r3, [r7, #28]
        break;
 8003de8:	e005      	b.n	8003df6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003df4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80fb 	beq.w	8003ff4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d305      	bcc.n	8003e1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d903      	bls.n	8003e22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e20:	e0e8      	b.n	8003ff4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2200      	movs	r2, #0
 8003e26:	461c      	mov	r4, r3
 8003e28:	4615      	mov	r5, r2
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	022b      	lsls	r3, r5, #8
 8003e34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e38:	0222      	lsls	r2, r4, #8
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	6849      	ldr	r1, [r1, #4]
 8003e3e:	0849      	lsrs	r1, r1, #1
 8003e40:	2000      	movs	r0, #0
 8003e42:	4688      	mov	r8, r1
 8003e44:	4681      	mov	r9, r0
 8003e46:	eb12 0a08 	adds.w	sl, r2, r8
 8003e4a:	eb43 0b09 	adc.w	fp, r3, r9
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e5c:	4650      	mov	r0, sl
 8003e5e:	4659      	mov	r1, fp
 8003e60:	f7fc f9c4 	bl	80001ec <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e72:	d308      	bcc.n	8003e86 <UART_SetConfig+0x3de>
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7a:	d204      	bcs.n	8003e86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	60da      	str	r2, [r3, #12]
 8003e84:	e0b6      	b.n	8003ff4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e8c:	e0b2      	b.n	8003ff4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e96:	d15e      	bne.n	8003f56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d828      	bhi.n	8003ef2 <UART_SetConfig+0x44a>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x400>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe f9f6 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 8003ed0:	61f8      	str	r0, [r7, #28]
        break;
 8003ed2:	e014      	b.n	8003efe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe fa08 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	61f8      	str	r0, [r7, #28]
        break;
 8003eda:	e010      	b.n	8003efe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b4d      	ldr	r3, [pc, #308]	; (8004014 <UART_SetConfig+0x56c>)
 8003ede:	61fb      	str	r3, [r7, #28]
        break;
 8003ee0:	e00d      	b.n	8003efe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe f953 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8003ee6:	61f8      	str	r0, [r7, #28]
        break;
 8003ee8:	e009      	b.n	8003efe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	61fb      	str	r3, [r7, #28]
        break;
 8003ef0:	e005      	b.n	8003efe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003efc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d077      	beq.n	8003ff4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005a      	lsls	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	441a      	add	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b0f      	cmp	r3, #15
 8003f1e:	d916      	bls.n	8003f4e <UART_SetConfig+0x4a6>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f26:	d212      	bcs.n	8003f4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f023 030f 	bic.w	r3, r3, #15
 8003f30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	8afb      	ldrh	r3, [r7, #22]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	8afa      	ldrh	r2, [r7, #22]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	e052      	b.n	8003ff4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f54:	e04e      	b.n	8003ff4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d827      	bhi.n	8003fae <UART_SetConfig+0x506>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <UART_SetConfig+0x4bc>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003f91 	.word	0x08003f91
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08003faf 	.word	0x08003faf
 8003f74:	08003f9f 	.word	0x08003f9f
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003faf 	.word	0x08003faf
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f88:	f7fe f998 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 8003f8c:	61f8      	str	r0, [r7, #28]
        break;
 8003f8e:	e014      	b.n	8003fba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe f9aa 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8003f94:	61f8      	str	r0, [r7, #28]
        break;
 8003f96:	e010      	b.n	8003fba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <UART_SetConfig+0x56c>)
 8003f9a:	61fb      	str	r3, [r7, #28]
        break;
 8003f9c:	e00d      	b.n	8003fba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe f8f5 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8003fa2:	61f8      	str	r0, [r7, #28]
        break;
 8003fa4:	e009      	b.n	8003fba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003faa:	61fb      	str	r3, [r7, #28]
        break;
 8003fac:	e005      	b.n	8003fba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fb8:	bf00      	nop
    }

    if (pclk != 0U)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d019      	beq.n	8003ff4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	085a      	lsrs	r2, r3, #1
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	441a      	add	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b0f      	cmp	r3, #15
 8003fd8:	d909      	bls.n	8003fee <UART_SetConfig+0x546>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe0:	d205      	bcs.n	8003fee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60da      	str	r2, [r3, #12]
 8003fec:	e002      	b.n	8003ff4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004000:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400e:	bf00      	nop
 8004010:	40008000 	.word	0x40008000
 8004014:	00f42400 	.word	0x00f42400

08004018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01a      	beq.n	800412e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004116:	d10a      	bne.n	800412e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800416c:	f7fc fd82 	bl	8000c74 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b08      	cmp	r3, #8
 800417e:	d10e      	bne.n	800419e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f82d 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e023      	b.n	80041e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d10e      	bne.n	80041ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f817 	bl	80041ee <UART_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e00d      	b.n	80041e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b09c      	sub	sp, #112	; 0x70
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fe:	e0a5      	b.n	800434c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004206:	f000 80a1 	beq.w	800434c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fc fd33 	bl	8000c74 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <UART_WaitOnFlagUntilTimeout+0x32>
 800421a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421c:	2b00      	cmp	r3, #0
 800421e:	d13e      	bne.n	800429e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004234:	667b      	str	r3, [r7, #100]	; 0x64
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004240:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800424c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e6      	bne.n	8004220 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	663b      	str	r3, [r7, #96]	; 0x60
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3308      	adds	r3, #8
 8004270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004272:	64ba      	str	r2, [r7, #72]	; 0x48
 8004274:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e5      	bne.n	8004252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e067      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d04f      	beq.n	800434c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ba:	d147      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
 80042e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e6      	bne.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	613b      	str	r3, [r7, #16]
   return(result);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004318:	623a      	str	r2, [r7, #32]
 800431a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	6a3a      	ldr	r2, [r7, #32]
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	61bb      	str	r3, [r7, #24]
   return(result);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e010      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	429a      	cmp	r2, r3
 8004368:	f43f af4a 	beq.w	8004200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3770      	adds	r7, #112	; 0x70
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <__libc_init_array>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4d0d      	ldr	r5, [pc, #52]	; (80043b0 <__libc_init_array+0x38>)
 800437c:	4c0d      	ldr	r4, [pc, #52]	; (80043b4 <__libc_init_array+0x3c>)
 800437e:	1b64      	subs	r4, r4, r5
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	2600      	movs	r6, #0
 8004384:	42a6      	cmp	r6, r4
 8004386:	d109      	bne.n	800439c <__libc_init_array+0x24>
 8004388:	4d0b      	ldr	r5, [pc, #44]	; (80043b8 <__libc_init_array+0x40>)
 800438a:	4c0c      	ldr	r4, [pc, #48]	; (80043bc <__libc_init_array+0x44>)
 800438c:	f000 f820 	bl	80043d0 <_init>
 8004390:	1b64      	subs	r4, r4, r5
 8004392:	10a4      	asrs	r4, r4, #2
 8004394:	2600      	movs	r6, #0
 8004396:	42a6      	cmp	r6, r4
 8004398:	d105      	bne.n	80043a6 <__libc_init_array+0x2e>
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a0:	4798      	blx	r3
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7ee      	b.n	8004384 <__libc_init_array+0xc>
 80043a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043aa:	4798      	blx	r3
 80043ac:	3601      	adds	r6, #1
 80043ae:	e7f2      	b.n	8004396 <__libc_init_array+0x1e>
 80043b0:	08004438 	.word	0x08004438
 80043b4:	08004438 	.word	0x08004438
 80043b8:	08004438 	.word	0x08004438
 80043bc:	0800443c 	.word	0x0800443c

080043c0 <memset>:
 80043c0:	4402      	add	r2, r0
 80043c2:	4603      	mov	r3, r0
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	f803 1b01 	strb.w	r1, [r3], #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <_init>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr

080043dc <_fini>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr
