
04_SPI_SD_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004738  08004738  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004740  08004740  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000024  0800476c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  0800476c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0c8  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002077  00000000  00000000  0002e11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00030da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002982d  00000000  00000000  000318e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edd2  00000000  00000000  0005b10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9e68  00000000  00000000  00069edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163d47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003068  00000000  00000000  00163d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080046d8 	.word	0x080046d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	080046d8 	.word	0x080046d8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 ff1a 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f809 	bl	800050e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8c2 	bl	8000684 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f856 	bl	80005b0 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000504:	f000 f880 	bl	8000608 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000508:	f003 fff2 	bl	80044f0 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x1c>

0800050e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b096      	sub	sp, #88	; 0x58
 8000512:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2244      	movs	r2, #68	; 0x44
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f004 f8d3 	bl	80046c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	463b      	mov	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000530:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000534:	f001 fa30 	bl	8001998 <HAL_PWREx_ControlVoltageScaling>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800053e:	f000 f8f9 	bl	8000734 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000542:	2301      	movs	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	2302      	movs	r3, #2
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000550:	2303      	movs	r3, #3
 8000552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000558:	2314      	movs	r3, #20
 800055a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055c:	2302      	movs	r3, #2
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fa79 	bl	8001a64 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000578:	f000 f8dc 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2303      	movs	r3, #3
 8000582:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	2104      	movs	r1, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fe7e 	bl	8002298 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a2:	f000 f8c7 	bl	8000734 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3758      	adds	r7, #88	; 0x58
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_LPUART1_UART_Init+0x50>)
 80005ee:	f003 fac9 	bl	8003b84 <HAL_UART_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80005f8:	f000 f89c 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000040 	.word	0x20000040
 8000604:	40008000 	.word	0x40008000

08000608 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_SPI1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <MX_SPI1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_SPI1_Init+0x74>)
 8000614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_SPI1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_SPI1_Init+0x74>)
 8000622:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000626:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_SPI1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_SPI1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_SPI1_Init+0x74>)
 8000636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_SPI1_Init+0x74>)
 800063e:	2210      	movs	r2, #16
 8000640:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_SPI1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_SPI1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_SPI1_Init+0x74>)
 8000656:	2207      	movs	r2, #7
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_SPI1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_SPI1_Init+0x74>)
 8000662:	2208      	movs	r2, #8
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_SPI1_Init+0x74>)
 8000668:	f002 fd04 	bl	8003074 <HAL_SPI_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f85f 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000c4 	.word	0x200000c4
 8000680:	40013000 	.word	0x40013000

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_GPIO_Init+0xa8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a23      	ldr	r2, [pc, #140]	; (800072c <MX_GPIO_Init+0xa8>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_GPIO_Init+0xa8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_GPIO_Init+0xa8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a1d      	ldr	r2, [pc, #116]	; (800072c <MX_GPIO_Init+0xa8>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_GPIO_Init+0xa8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_GPIO_Init+0xa8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a17      	ldr	r2, [pc, #92]	; (800072c <MX_GPIO_Init+0xa8>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_GPIO_Init+0xa8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_GPIO_Init+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <MX_GPIO_Init+0xa8>)
 80006e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_GPIO_Init+0xa8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006fa:	f001 f9a3 	bl	8001a44 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_GPIO_Init+0xac>)
 8000704:	f001 f922 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000708:	2310      	movs	r3, #16
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_GPIO_Init+0xac>)
 8000720:	f000 ff82 	bl	8001628 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	48000800 	.word	0x48000800

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	; 0x60
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	; 0x58
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b0ac      	sub	sp, #176	; 0xb0
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	228c      	movs	r2, #140	; 0x8c
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 ff8d 	bl	80046c8 <memset>
  if(huart->Instance==LPUART1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <HAL_UART_MspInit+0xb4>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d13d      	bne.n	8000834 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007b8:	2320      	movs	r3, #32
 80007ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007bc:	2300      	movs	r3, #0
 80007be:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 ff8b 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007d0:	f7ff ffb0 	bl	8000734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <HAL_UART_MspInit+0xb8>)
 80007d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_UART_MspInit+0xb8>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	65d3      	str	r3, [r2, #92]	; 0x5c
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_UART_MspInit+0xb8>)
 80007e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_UART_MspInit+0xb8>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <HAL_UART_MspInit+0xb8>)
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_UART_MspInit+0xb8>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000804:	f001 f91e 	bl	8001a44 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000808:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800080c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000822:	2308      	movs	r3, #8
 8000824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_UART_MspInit+0xbc>)
 8000830:	f000 fefa 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	37b0      	adds	r7, #176	; 0xb0
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40008000 	.word	0x40008000
 8000840:	40021000 	.word	0x40021000
 8000844:	48001800 	.word	0x48001800

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <HAL_SPI_MspInit+0x7c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d128      	bne.n	80008bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000874:	6613      	str	r3, [r2, #96]	; 0x60
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_SPI_MspInit+0x80>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089a:	23e0      	movs	r3, #224	; 0xe0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008aa:	2305      	movs	r3, #5
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 feb6 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013000 	.word	0x40013000
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 fd5c 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000948:	f7ff ffea 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f003 fe85 	bl	8004680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000976:	f7ff fdbb 	bl	80004f0 <main>

0800097a <LoopForever>:

LoopForever:
    b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800097c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000988:	08004748 	.word	0x08004748
  ldr r2, =_sbss
 800098c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000990:	20000148 	.word	0x20000148

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>
	...

08000998 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <SELECT+0x18>)
 80009a2:	f000 ffd3 	bl	800194c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 fd34 	bl	8001414 <HAL_Delay>
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	48000800 	.word	0x48000800

080009b4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <DESELECT+0x18>)
 80009be:	f000 ffc5 	bl	800194c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fd26 	bl	8001414 <HAL_Delay>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	48000800 	.word	0x48000800

080009d0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009da:	bf00      	nop
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <SPI_TxByte+0x30>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d1f8      	bne.n	80009dc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80009ea:	1df9      	adds	r1, r7, #7
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <SPI_TxByte+0x30>)
 80009f2:	f002 fbe2 	bl	80031ba <HAL_SPI_Transmit>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000c4 	.word	0x200000c4

08000a04 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a10:	bf00      	nop
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <SPI_TxBuffer+0x30>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d1f8      	bne.n	8000a12 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a20:	887a      	ldrh	r2, [r7, #2]
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <SPI_TxBuffer+0x30>)
 8000a28:	f002 fbc7 	bl	80031ba <HAL_SPI_Transmit>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000c4 	.word	0x200000c4

08000a38 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000a3e:	23ff      	movs	r3, #255	; 0xff
 8000a40:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a42:	bf00      	nop
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <SPI_RxByte+0x34>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d1f8      	bne.n	8000a44 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a52:	1dba      	adds	r2, r7, #6
 8000a54:	1df9      	adds	r1, r7, #7
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <SPI_RxByte+0x34>)
 8000a5e:	f002 fd1a 	bl	8003496 <HAL_SPI_TransmitReceive>

	return data;
 8000a62:	79bb      	ldrb	r3, [r7, #6]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000c4 	.word	0x200000c4

08000a70 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000a78:	f7ff ffde 	bl	8000a38 <SPI_RxByte>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	701a      	strb	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <SD_ReadyWait+0x30>)
 8000a94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a98:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000a9a:	f7ff ffcd 	bl	8000a38 <SPI_RxByte>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2bff      	cmp	r3, #255	; 0xff
 8000aa6:	d003      	beq.n	8000ab0 <SD_ReadyWait+0x24>
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SD_ReadyWait+0x30>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f4      	bne.n	8000a9a <SD_ReadyWait+0xe>

	return res;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000012a 	.word	0x2000012a

08000ac0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000ac6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000aca:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000acc:	f7ff ff72 	bl	80009b4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	e005      	b.n	8000ae2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ad6:	20ff      	movs	r0, #255	; 0xff
 8000ad8:	f7ff ff7a 	bl	80009d0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2b09      	cmp	r3, #9
 8000ae6:	ddf6      	ble.n	8000ad6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ae8:	f7ff ff56 	bl	8000998 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000aec:	2340      	movs	r3, #64	; 0x40
 8000aee:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000b00:	2395      	movs	r3, #149	; 0x95
 8000b02:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000b04:	463b      	mov	r3, r7
 8000b06:	2106      	movs	r1, #6
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff7b 	bl	8000a04 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b0e:	e002      	b.n	8000b16 <SD_PowerOn+0x56>
	{
		cnt--;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000b16:	f7ff ff8f 	bl	8000a38 <SPI_RxByte>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d002      	beq.n	8000b26 <SD_PowerOn+0x66>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f4      	bne.n	8000b10 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000b26:	f7ff ff45 	bl	80009b4 <DESELECT>
	SPI_TxByte(0XFF);
 8000b2a:	20ff      	movs	r0, #255	; 0xff
 8000b2c:	f7ff ff50 	bl	80009d0 <SPI_TxByte>

	PowerFlag = 1;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <SD_PowerOn+0x80>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000012d 	.word	0x2000012d

08000b44 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <SD_PowerOff+0x14>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	2000012d 	.word	0x2000012d

08000b5c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <SD_CheckPower+0x14>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000012d 	.word	0x2000012d

08000b74 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <SD_RxDataBlock+0x58>)
 8000b80:	22c8      	movs	r2, #200	; 0xc8
 8000b82:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000b84:	f7ff ff58 	bl	8000a38 <SPI_RxByte>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	2bff      	cmp	r3, #255	; 0xff
 8000b90:	d103      	bne.n	8000b9a <SD_RxDataBlock+0x26>
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <SD_RxDataBlock+0x58>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f4      	bne.n	8000b84 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2bfe      	cmp	r3, #254	; 0xfe
 8000b9e:	d001      	beq.n	8000ba4 <SD_RxDataBlock+0x30>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e00f      	b.n	8000bc4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff60 	bl	8000a70 <SPI_RxBytePtr>
	} while(len--);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	603a      	str	r2, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f4      	bne.n	8000ba4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000bba:	f7ff ff3d 	bl	8000a38 <SPI_RxByte>
	SPI_RxByte();
 8000bbe:	f7ff ff3b 	bl	8000a38 <SPI_RxByte>

	return TRUE;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000128 	.word	0x20000128

08000bd0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000be0:	f7ff ff54 	bl	8000a8c <SD_ReadyWait>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d001      	beq.n	8000bee <SD_TxDataBlock+0x1e>
 8000bea:	2300      	movs	r3, #0
 8000bec:	e02f      	b.n	8000c4e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff feed 	bl	80009d0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	2bfd      	cmp	r3, #253	; 0xfd
 8000bfa:	d020      	beq.n	8000c3e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff feff 	bl	8000a04 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000c06:	f7ff ff17 	bl	8000a38 <SPI_RxByte>
		SPI_RxByte();
 8000c0a:	f7ff ff15 	bl	8000a38 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000c0e:	e00b      	b.n	8000c28 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000c10:	f7ff ff12 	bl	8000a38 <SPI_RxByte>
 8000c14:	4603      	mov	r3, r0
 8000c16:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	f003 031f 	and.w	r3, r3, #31
 8000c1e:	2b05      	cmp	r3, #5
 8000c20:	d006      	beq.n	8000c30 <SD_TxDataBlock+0x60>
			i++;
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	3301      	adds	r3, #1
 8000c26:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000c28:	7bbb      	ldrb	r3, [r7, #14]
 8000c2a:	2b40      	cmp	r3, #64	; 0x40
 8000c2c:	d9f0      	bls.n	8000c10 <SD_TxDataBlock+0x40>
 8000c2e:	e000      	b.n	8000c32 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000c30:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000c32:	bf00      	nop
 8000c34:	f7ff ff00 	bl	8000a38 <SPI_RxByte>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0fa      	beq.n	8000c34 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	f003 031f 	and.w	r3, r3, #31
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d101      	bne.n	8000c4c <SD_TxDataBlock+0x7c>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	6039      	str	r1, [r7, #0]
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c62:	f7ff ff13 	bl	8000a8c <SD_ReadyWait>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2bff      	cmp	r3, #255	; 0xff
 8000c6a:	d001      	beq.n	8000c70 <SD_SendCmd+0x1a>
 8000c6c:	23ff      	movs	r3, #255	; 0xff
 8000c6e:	e042      	b.n	8000cf6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff feac 	bl	80009d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	0e1b      	lsrs	r3, r3, #24
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fea6 	bl	80009d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fea0 	bl	80009d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe9a 	bl	80009d0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fe95 	bl	80009d0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b40      	cmp	r3, #64	; 0x40
 8000caa:	d102      	bne.n	8000cb2 <SD_SendCmd+0x5c>
 8000cac:	2395      	movs	r3, #149	; 0x95
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e007      	b.n	8000cc2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b48      	cmp	r3, #72	; 0x48
 8000cb6:	d102      	bne.n	8000cbe <SD_SendCmd+0x68>
 8000cb8:	2387      	movs	r3, #135	; 0x87
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e001      	b.n	8000cc2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe83 	bl	80009d0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b4c      	cmp	r3, #76	; 0x4c
 8000cce:	d101      	bne.n	8000cd4 <SD_SendCmd+0x7e>
 8000cd0:	f7ff feb2 	bl	8000a38 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000cd8:	f7ff feae 	bl	8000a38 <SPI_RxByte>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ce0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da05      	bge.n	8000cf4 <SD_SendCmd+0x9e>
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	73bb      	strb	r3, [r7, #14]
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1f1      	bne.n	8000cd8 <SD_SendCmd+0x82>

	return res;
 8000cf4:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SD_disk_initialize+0x14>
 8000d10:	2301      	movs	r3, #1
 8000d12:	e0d1      	b.n	8000eb8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000d14:	4b6a      	ldr	r3, [pc, #424]	; (8000ec0 <SD_disk_initialize+0x1c0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <SD_disk_initialize+0x2a>
 8000d22:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <SD_disk_initialize+0x1c0>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	e0c6      	b.n	8000eb8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000d2a:	f7ff fec9 	bl	8000ac0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000d2e:	f7ff fe33 	bl	8000998 <SELECT>

	/* check disk type */
	type = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000d36:	2100      	movs	r1, #0
 8000d38:	2040      	movs	r0, #64	; 0x40
 8000d3a:	f7ff ff8c 	bl	8000c56 <SD_SendCmd>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	f040 80a1 	bne.w	8000e88 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000d46:	4b5f      	ldr	r3, [pc, #380]	; (8000ec4 <SD_disk_initialize+0x1c4>)
 8000d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d4c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d52:	2048      	movs	r0, #72	; 0x48
 8000d54:	f7ff ff7f 	bl	8000c56 <SD_SendCmd>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d155      	bne.n	8000e0a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e00c      	b.n	8000d7e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000d64:	7bfc      	ldrb	r4, [r7, #15]
 8000d66:	f7ff fe67 	bl	8000a38 <SPI_RxByte>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f104 0310 	add.w	r3, r4, #16
 8000d72:	443b      	add	r3, r7
 8000d74:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d9ef      	bls.n	8000d64 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000d84:	7abb      	ldrb	r3, [r7, #10]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d17e      	bne.n	8000e88 <SD_disk_initialize+0x188>
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	2baa      	cmp	r3, #170	; 0xaa
 8000d8e:	d17b      	bne.n	8000e88 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d90:	2100      	movs	r1, #0
 8000d92:	2077      	movs	r0, #119	; 0x77
 8000d94:	f7ff ff5f 	bl	8000c56 <SD_SendCmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d807      	bhi.n	8000dae <SD_disk_initialize+0xae>
 8000d9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000da2:	2069      	movs	r0, #105	; 0x69
 8000da4:	f7ff ff57 	bl	8000c56 <SD_SendCmd>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000dae:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <SD_disk_initialize+0x1c4>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1ec      	bne.n	8000d90 <SD_disk_initialize+0x90>
 8000db6:	e000      	b.n	8000dba <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000db8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000dba:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <SD_disk_initialize+0x1c4>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d062      	beq.n	8000e88 <SD_disk_initialize+0x188>
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	207a      	movs	r0, #122	; 0x7a
 8000dc6:	f7ff ff46 	bl	8000c56 <SD_SendCmd>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d15b      	bne.n	8000e88 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e00c      	b.n	8000df0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000dd6:	7bfc      	ldrb	r4, [r7, #15]
 8000dd8:	f7ff fe2e 	bl	8000a38 <SPI_RxByte>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	f104 0310 	add.w	r3, r4, #16
 8000de4:	443b      	add	r3, r7
 8000de6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	3301      	adds	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d9ef      	bls.n	8000dd6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000df6:	7a3b      	ldrb	r3, [r7, #8]
 8000df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SD_disk_initialize+0x104>
 8000e00:	230c      	movs	r3, #12
 8000e02:	e000      	b.n	8000e06 <SD_disk_initialize+0x106>
 8000e04:	2304      	movs	r3, #4
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	e03e      	b.n	8000e88 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2077      	movs	r0, #119	; 0x77
 8000e0e:	f7ff ff22 	bl	8000c56 <SD_SendCmd>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d808      	bhi.n	8000e2a <SD_disk_initialize+0x12a>
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2069      	movs	r0, #105	; 0x69
 8000e1c:	f7ff ff1b 	bl	8000c56 <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d801      	bhi.n	8000e2a <SD_disk_initialize+0x12a>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e000      	b.n	8000e2c <SD_disk_initialize+0x12c>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d10e      	bne.n	8000e52 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e34:	2100      	movs	r1, #0
 8000e36:	2077      	movs	r0, #119	; 0x77
 8000e38:	f7ff ff0d 	bl	8000c56 <SD_SendCmd>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d80e      	bhi.n	8000e60 <SD_disk_initialize+0x160>
 8000e42:	2100      	movs	r1, #0
 8000e44:	2069      	movs	r0, #105	; 0x69
 8000e46:	f7ff ff06 	bl	8000c56 <SD_SendCmd>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d107      	bne.n	8000e60 <SD_disk_initialize+0x160>
 8000e50:	e00c      	b.n	8000e6c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e52:	2100      	movs	r1, #0
 8000e54:	2041      	movs	r0, #65	; 0x41
 8000e56:	f7ff fefe 	bl	8000c56 <SD_SendCmd>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <SD_disk_initialize+0x1c4>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e2      	bne.n	8000e2e <SD_disk_initialize+0x12e>
 8000e68:	e000      	b.n	8000e6c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e6a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <SD_disk_initialize+0x1c4>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <SD_disk_initialize+0x184>
 8000e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e78:	2050      	movs	r0, #80	; 0x50
 8000e7a:	f7ff feec 	bl	8000c56 <SD_SendCmd>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SD_disk_initialize+0x188>
 8000e84:	2300      	movs	r3, #0
 8000e86:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <SD_disk_initialize+0x1c8>)
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000e8e:	f7ff fd91 	bl	80009b4 <DESELECT>
	SPI_RxByte();
 8000e92:	f7ff fdd1 	bl	8000a38 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d008      	beq.n	8000eae <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SD_disk_initialize+0x1c0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f023 0301 	bic.w	r3, r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SD_disk_initialize+0x1c0>)
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	e001      	b.n	8000eb2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000eae:	f7ff fe49 	bl	8000b44 <SD_PowerOff>
	}

	return Stat;
 8000eb2:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <SD_disk_initialize+0x1c0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	20000128 	.word	0x20000128
 8000ec8:	2000012c 	.word	0x2000012c

08000ecc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SD_disk_status+0x14>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e002      	b.n	8000ee6 <SD_disk_status+0x1a>
	return Stat;
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SD_disk_status+0x28>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <SD_disk_read+0x1c>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <SD_disk_read+0x20>
 8000f14:	2304      	movs	r3, #4
 8000f16:	e051      	b.n	8000fbc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <SD_disk_read+0xcc>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SD_disk_read+0x32>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e048      	b.n	8000fbc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <SD_disk_read+0xd0>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <SD_disk_read+0x44>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f3c:	f7ff fd2c 	bl	8000998 <SELECT>

	if (count == 1)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d111      	bne.n	8000f6a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	2051      	movs	r0, #81	; 0x51
 8000f4a:	f7ff fe84 	bl	8000c56 <SD_SendCmd>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d129      	bne.n	8000fa8 <SD_disk_read+0xb0>
 8000f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f58:	68b8      	ldr	r0, [r7, #8]
 8000f5a:	f7ff fe0b 	bl	8000b74 <SD_RxDataBlock>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d021      	beq.n	8000fa8 <SD_disk_read+0xb0>
 8000f64:	2300      	movs	r3, #0
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	e01e      	b.n	8000fa8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	2052      	movs	r0, #82	; 0x52
 8000f6e:	f7ff fe72 	bl	8000c56 <SD_SendCmd>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d117      	bne.n	8000fa8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f7ff fdf9 	bl	8000b74 <SD_RxDataBlock>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00a      	beq.n	8000f9e <SD_disk_read+0xa6>
				buff += 512;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f8e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ed      	bne.n	8000f78 <SD_disk_read+0x80>
 8000f9c:	e000      	b.n	8000fa0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f9e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	204c      	movs	r0, #76	; 0x4c
 8000fa4:	f7ff fe57 	bl	8000c56 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000fa8:	f7ff fd04 	bl	80009b4 <DESELECT>
	SPI_RxByte();
 8000fac:	f7ff fd44 	bl	8000a38 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf14      	ite	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	2300      	moveq	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000004 	.word	0x20000004
 8000fc8:	2000012c 	.word	0x2000012c

08000fcc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <SD_disk_write+0x1c>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <SD_disk_write+0x20>
 8000fe8:	2304      	movs	r3, #4
 8000fea:	e06b      	b.n	80010c4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000fec:	4b37      	ldr	r3, [pc, #220]	; (80010cc <SD_disk_write+0x100>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SD_disk_write+0x32>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e062      	b.n	80010c4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <SD_disk_write+0x100>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SD_disk_write+0x44>
 800100c:	2302      	movs	r3, #2
 800100e:	e059      	b.n	80010c4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <SD_disk_write+0x104>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <SD_disk_write+0x56>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	607b      	str	r3, [r7, #4]

	SELECT();
 8001022:	f7ff fcb9 	bl	8000998 <SELECT>

	if (count == 1)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d110      	bne.n	800104e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	2058      	movs	r0, #88	; 0x58
 8001030:	f7ff fe11 	bl	8000c56 <SD_SendCmd>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d13a      	bne.n	80010b0 <SD_disk_write+0xe4>
 800103a:	21fe      	movs	r1, #254	; 0xfe
 800103c:	68b8      	ldr	r0, [r7, #8]
 800103e:	f7ff fdc7 	bl	8000bd0 <SD_TxDataBlock>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d033      	beq.n	80010b0 <SD_disk_write+0xe4>
			count = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	e030      	b.n	80010b0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <SD_disk_write+0x104>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800105a:	2100      	movs	r1, #0
 800105c:	2077      	movs	r0, #119	; 0x77
 800105e:	f7ff fdfa 	bl	8000c56 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001062:	6839      	ldr	r1, [r7, #0]
 8001064:	2057      	movs	r0, #87	; 0x57
 8001066:	f7ff fdf6 	bl	8000c56 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	2059      	movs	r0, #89	; 0x59
 800106e:	f7ff fdf2 	bl	8000c56 <SD_SendCmd>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d11b      	bne.n	80010b0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001078:	21fc      	movs	r1, #252	; 0xfc
 800107a:	68b8      	ldr	r0, [r7, #8]
 800107c:	f7ff fda8 	bl	8000bd0 <SD_TxDataBlock>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00a      	beq.n	800109c <SD_disk_write+0xd0>
				buff += 512;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800108c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ee      	bne.n	8001078 <SD_disk_write+0xac>
 800109a:	e000      	b.n	800109e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800109c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800109e:	21fd      	movs	r1, #253	; 0xfd
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fd95 	bl	8000bd0 <SD_TxDataBlock>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <SD_disk_write+0xe4>
			{
				count = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80010b0:	f7ff fc80 	bl	80009b4 <DESELECT>
	SPI_RxByte();
 80010b4:	f7ff fcc0 	bl	8000a38 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf14      	ite	ne
 80010be:	2301      	movne	r3, #1
 80010c0:	2300      	moveq	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000004 	.word	0x20000004
 80010d0:	2000012c 	.word	0x2000012c

080010d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b08b      	sub	sp, #44	; 0x2c
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	603a      	str	r2, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	460b      	mov	r3, r1
 80010e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SD_disk_ioctl+0x1e>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e115      	b.n	800131e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d124      	bne.n	8001148 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d012      	beq.n	800112c <SD_disk_ioctl+0x58>
 8001106:	2b02      	cmp	r3, #2
 8001108:	dc1a      	bgt.n	8001140 <SD_disk_ioctl+0x6c>
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <SD_disk_ioctl+0x40>
 800110e:	2b01      	cmp	r3, #1
 8001110:	d006      	beq.n	8001120 <SD_disk_ioctl+0x4c>
 8001112:	e015      	b.n	8001140 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001114:	f7ff fd16 	bl	8000b44 <SD_PowerOff>
			res = RES_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800111e:	e0fc      	b.n	800131a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001120:	f7ff fcce 	bl	8000ac0 <SD_PowerOn>
			res = RES_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800112a:	e0f6      	b.n	800131a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	1c5c      	adds	r4, r3, #1
 8001130:	f7ff fd14 	bl	8000b5c <SD_CheckPower>
 8001134:	4603      	mov	r3, r0
 8001136:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800113e:	e0ec      	b.n	800131a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001140:	2304      	movs	r3, #4
 8001142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001146:	e0e8      	b.n	800131a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001148:	4b77      	ldr	r3, [pc, #476]	; (8001328 <SD_disk_ioctl+0x254>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SD_disk_ioctl+0x86>
 8001156:	2303      	movs	r3, #3
 8001158:	e0e1      	b.n	800131e <SD_disk_ioctl+0x24a>

		SELECT();
 800115a:	f7ff fc1d 	bl	8000998 <SELECT>

		switch (ctrl)
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2b0d      	cmp	r3, #13
 8001162:	f200 80cb 	bhi.w	80012fc <SD_disk_ioctl+0x228>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <SD_disk_ioctl+0x98>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	08001267 	.word	0x08001267
 8001170:	080011a5 	.word	0x080011a5
 8001174:	08001257 	.word	0x08001257
 8001178:	080012fd 	.word	0x080012fd
 800117c:	080012fd 	.word	0x080012fd
 8001180:	080012fd 	.word	0x080012fd
 8001184:	080012fd 	.word	0x080012fd
 8001188:	080012fd 	.word	0x080012fd
 800118c:	080012fd 	.word	0x080012fd
 8001190:	080012fd 	.word	0x080012fd
 8001194:	080012fd 	.word	0x080012fd
 8001198:	08001279 	.word	0x08001279
 800119c:	0800129d 	.word	0x0800129d
 80011a0:	080012c1 	.word	0x080012c1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80011a4:	2100      	movs	r1, #0
 80011a6:	2049      	movs	r0, #73	; 0x49
 80011a8:	f7ff fd55 	bl	8000c56 <SD_SendCmd>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 80a8 	bne.w	8001304 <SD_disk_ioctl+0x230>
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2110      	movs	r1, #16
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fcda 	bl	8000b74 <SD_RxDataBlock>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 809e 	beq.w	8001304 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80011c8:	7b3b      	ldrb	r3, [r7, #12]
 80011ca:	099b      	lsrs	r3, r3, #6
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10e      	bne.n	80011f0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80011d2:	7d7b      	ldrb	r3, [r7, #21]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	7d3b      	ldrb	r3, [r7, #20]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80011e6:	8bfb      	ldrh	r3, [r7, #30]
 80011e8:	029a      	lsls	r2, r3, #10
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e02e      	b.n	800124e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80011f0:	7c7b      	ldrb	r3, [r7, #17]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	7dbb      	ldrb	r3, [r7, #22]
 80011fa:	09db      	lsrs	r3, r3, #7
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4413      	add	r3, r2
 8001200:	b2da      	uxtb	r2, r3
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0306 	and.w	r3, r3, #6
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3302      	adds	r3, #2
 8001214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001218:	7d3b      	ldrb	r3, [r7, #20]
 800121a:	099b      	lsrs	r3, r3, #6
 800121c:	b2db      	uxtb	r3, r3
 800121e:	b29a      	uxth	r2, r3
 8001220:	7cfb      	ldrb	r3, [r7, #19]
 8001222:	b29b      	uxth	r3, r3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	b29b      	uxth	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	b29b      	uxth	r3, r3
 8001232:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001236:	b29b      	uxth	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	b29b      	uxth	r3, r3
 800123c:	3301      	adds	r3, #1
 800123e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001240:	8bfa      	ldrh	r2, [r7, #30]
 8001242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001246:	3b09      	subs	r3, #9
 8001248:	409a      	lsls	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001254:	e056      	b.n	8001304 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001264:	e055      	b.n	8001312 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001266:	f7ff fc11 	bl	8000a8c <SD_ReadyWait>
 800126a:	4603      	mov	r3, r0
 800126c:	2bff      	cmp	r3, #255	; 0xff
 800126e:	d14b      	bne.n	8001308 <SD_disk_ioctl+0x234>
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001276:	e047      	b.n	8001308 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001278:	2100      	movs	r1, #0
 800127a:	2049      	movs	r0, #73	; 0x49
 800127c:	f7ff fceb 	bl	8000c56 <SD_SendCmd>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d142      	bne.n	800130c <SD_disk_ioctl+0x238>
 8001286:	2110      	movs	r1, #16
 8001288:	6a38      	ldr	r0, [r7, #32]
 800128a:	f7ff fc73 	bl	8000b74 <SD_RxDataBlock>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d03b      	beq.n	800130c <SD_disk_ioctl+0x238>
 8001294:	2300      	movs	r3, #0
 8001296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800129a:	e037      	b.n	800130c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800129c:	2100      	movs	r1, #0
 800129e:	204a      	movs	r0, #74	; 0x4a
 80012a0:	f7ff fcd9 	bl	8000c56 <SD_SendCmd>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d132      	bne.n	8001310 <SD_disk_ioctl+0x23c>
 80012aa:	2110      	movs	r1, #16
 80012ac:	6a38      	ldr	r0, [r7, #32]
 80012ae:	f7ff fc61 	bl	8000b74 <SD_RxDataBlock>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d02b      	beq.n	8001310 <SD_disk_ioctl+0x23c>
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012be:	e027      	b.n	8001310 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80012c0:	2100      	movs	r1, #0
 80012c2:	207a      	movs	r0, #122	; 0x7a
 80012c4:	f7ff fcc7 	bl	8000c56 <SD_SendCmd>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012d4:	e00b      	b.n	80012ee <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80012d6:	6a3c      	ldr	r4, [r7, #32]
 80012d8:	1c63      	adds	r3, r4, #1
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	f7ff fbac 	bl	8000a38 <SPI_RxByte>
 80012e0:	4603      	mov	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80012e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e8:	3301      	adds	r3, #1
 80012ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d9ef      	bls.n	80012d6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80012fc:	2304      	movs	r3, #4
 80012fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001302:	e006      	b.n	8001312 <SD_disk_ioctl+0x23e>
			break;
 8001304:	bf00      	nop
 8001306:	e004      	b.n	8001312 <SD_disk_ioctl+0x23e>
			break;
 8001308:	bf00      	nop
 800130a:	e002      	b.n	8001312 <SD_disk_ioctl+0x23e>
			break;
 800130c:	bf00      	nop
 800130e:	e000      	b.n	8001312 <SD_disk_ioctl+0x23e>
			break;
 8001310:	bf00      	nop
		}

		DESELECT();
 8001312:	f7ff fb4f 	bl	80009b4 <DESELECT>
		SPI_RxByte();
 8001316:	f7ff fb8f 	bl	8000a38 <SPI_RxByte>
	}

	return res;
 800131a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800131e:	4618      	mov	r0, r3
 8001320:	372c      	adds	r7, #44	; 0x2c
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f942 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133c:	2000      	movs	r0, #0
 800133e:	f000 f80d 	bl	800135c <HAL_InitTick>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	e001      	b.n	8001352 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800134e:	f7ff f9f7 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001352:	79fb      	ldrb	r3, [r7, #7]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_InitTick+0x6c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d023      	beq.n	80013b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_InitTick+0x70>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_InitTick+0x6c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f941 	bl	800160e <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10f      	bne.n	80013b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d809      	bhi.n	80013ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a0:	f000 f919 	bl	80015d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_InitTick+0x74>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e007      	b.n	80013bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e004      	b.n	80013bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e001      	b.n	80013bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000000c 	.word	0x2000000c
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	20000130 	.word	0x20000130

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000130 	.word	0x20000130

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000000c 	.word	0x2000000c

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff47 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff5c 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffb0 	bl	800157c <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e166      	b.n	8001906 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8158 	beq.w	8001900 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x40>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d017      	beq.n	8001706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d123      	bne.n	800175a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0203 	and.w	r2, r3, #3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80b2 	beq.w	8001900 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179c:	4b61      	ldr	r3, [pc, #388]	; (8001924 <HAL_GPIO_Init+0x2fc>)
 800179e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a0:	4a60      	ldr	r2, [pc, #384]	; (8001924 <HAL_GPIO_Init+0x2fc>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6613      	str	r3, [r2, #96]	; 0x60
 80017a8:	4b5e      	ldr	r3, [pc, #376]	; (8001924 <HAL_GPIO_Init+0x2fc>)
 80017aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b4:	4a5c      	ldr	r2, [pc, #368]	; (8001928 <HAL_GPIO_Init+0x300>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017de:	d02b      	beq.n	8001838 <HAL_GPIO_Init+0x210>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_GPIO_Init+0x304>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d025      	beq.n	8001834 <HAL_GPIO_Init+0x20c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a51      	ldr	r2, [pc, #324]	; (8001930 <HAL_GPIO_Init+0x308>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d01f      	beq.n	8001830 <HAL_GPIO_Init+0x208>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_GPIO_Init+0x30c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d019      	beq.n	800182c <HAL_GPIO_Init+0x204>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_Init+0x310>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_GPIO_Init+0x200>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_Init+0x314>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00d      	beq.n	8001824 <HAL_GPIO_Init+0x1fc>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_Init+0x318>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x1f8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_GPIO_Init+0x31c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_GPIO_Init+0x1f4>
 8001818:	2307      	movs	r3, #7
 800181a:	e00e      	b.n	800183a <HAL_GPIO_Init+0x212>
 800181c:	2308      	movs	r3, #8
 800181e:	e00c      	b.n	800183a <HAL_GPIO_Init+0x212>
 8001820:	2306      	movs	r3, #6
 8001822:	e00a      	b.n	800183a <HAL_GPIO_Init+0x212>
 8001824:	2305      	movs	r3, #5
 8001826:	e008      	b.n	800183a <HAL_GPIO_Init+0x212>
 8001828:	2304      	movs	r3, #4
 800182a:	e006      	b.n	800183a <HAL_GPIO_Init+0x212>
 800182c:	2303      	movs	r3, #3
 800182e:	e004      	b.n	800183a <HAL_GPIO_Init+0x212>
 8001830:	2302      	movs	r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x212>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_GPIO_Init+0x212>
 8001838:	2300      	movs	r3, #0
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	f002 0203 	and.w	r2, r2, #3
 8001840:	0092      	lsls	r2, r2, #2
 8001842:	4093      	lsls	r3, r2
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800184a:	4937      	ldr	r1, [pc, #220]	; (8001928 <HAL_GPIO_Init+0x300>)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001858:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <HAL_GPIO_Init+0x320>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800187c:	4a32      	ldr	r2, [pc, #200]	; (8001948 <HAL_GPIO_Init+0x320>)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_GPIO_Init+0x320>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a6:	4a28      	ldr	r2, [pc, #160]	; (8001948 <HAL_GPIO_Init+0x320>)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_GPIO_Init+0x320>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_GPIO_Init+0x320>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_GPIO_Init+0x320>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <HAL_GPIO_Init+0x320>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	f47f ae91 	bne.w	8001638 <HAL_GPIO_Init+0x10>
  }
}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	48000400 	.word	0x48000400
 8001930:	48000800 	.word	0x48000800
 8001934:	48000c00 	.word	0x48000c00
 8001938:	48001000 	.word	0x48001000
 800193c:	48001400 	.word	0x48001400
 8001940:	48001800 	.word	0x48001800
 8001944:	48001c00 	.word	0x48001c00
 8001948:	40010400 	.word	0x40010400

0800194c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001968:	e002      	b.n	8001970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <HAL_PWREx_GetVoltageRange+0x18>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007000 	.word	0x40007000

08001998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a6:	d130      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b4:	d038      	beq.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2232      	movs	r2, #50	; 0x32
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	3301      	adds	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019dc:	e002      	b.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f0:	d102      	bne.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f2      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a04:	d110      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e00f      	b.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a16:	d007      	beq.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	431bde83 	.word	0x431bde83

08001a44 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6053      	str	r3, [r2, #4]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f000 bc08 	b.w	8002288 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a78:	4b96      	ldr	r3, [pc, #600]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a82:	4b94      	ldr	r3, [pc, #592]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80e4 	beq.w	8001c62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4c>
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	f040 808b 	bne.w	8001bbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 8087 	bne.w	8001bbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab0:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x64>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e3df      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x7e>
 8001ad8:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae0:	e005      	b.n	8001aee <HAL_RCC_OscConfig+0x8a>
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d223      	bcs.n	8001b3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fd92 	bl	8002620 <RCC_SetFlashLatencyFromMSIRange>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e3c0      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b06:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a72      	ldr	r2, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	496d      	ldr	r1, [pc, #436]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4968      	ldr	r1, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	e025      	b.n	8001b86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3a:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4960      	ldr	r1, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b58:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	495b      	ldr	r1, [pc, #364]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 fd52 	bl	8002620 <RCC_SetFlashLatencyFromMSIRange>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e380      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b86:	f000 fc87 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	4950      	ldr	r1, [pc, #320]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001b98:	5ccb      	ldrb	r3, [r1, r3]
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_RCC_OscConfig+0x278>)
 8001ba4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fbd6 	bl	800135c <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d052      	beq.n	8001c60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	e364      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d032      	beq.n	8001c2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a42      	ldr	r2, [pc, #264]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fc13 	bl	80013fc <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7ff fc0f 	bl	80013fc <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e34d      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bec:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a35      	ldr	r2, [pc, #212]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4930      	ldr	r1, [pc, #192]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	492b      	ldr	r1, [pc, #172]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
 8001c2a:	e01a      	b.n	8001c62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fbe0 	bl	80013fc <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c40:	f7ff fbdc 	bl	80013fc <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e31a      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1dc>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d073      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x21c>
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d10e      	bne.n	8001c98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d10b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d063      	beq.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d15f      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e2f7      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e025      	b.n	8001cfc <HAL_RCC_OscConfig+0x298>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d114      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x280>
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a02      	ldr	r2, [pc, #8]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e013      	b.n	8001cfc <HAL_RCC_OscConfig+0x298>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	080046f0 	.word	0x080046f0
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	4ba0      	ldr	r3, [pc, #640]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a9f      	ldr	r2, [pc, #636]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b9d      	ldr	r3, [pc, #628]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a9c      	ldr	r2, [pc, #624]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb7a 	bl	80013fc <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fb76 	bl	80013fc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e2b4      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	4b92      	ldr	r3, [pc, #584]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x2a8>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fb66 	bl	80013fc <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fb62 	bl	80013fc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e2a0      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d46:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2d0>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d060      	beq.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_OscConfig+0x310>
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d119      	bne.n	8001da2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d116      	bne.n	8001da2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x328>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e27d      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	4973      	ldr	r1, [pc, #460]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da0:	e040      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d023      	beq.n	8001df2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001daa:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6e      	ldr	r2, [pc, #440]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fb21 	bl	80013fc <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fb1d 	bl	80013fc <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e25b      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	495f      	ldr	r1, [pc, #380]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
 8001df0:	e018      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fafd 	bl	80013fc <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff faf9 	bl	80013fc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e237      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e38:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	4a4a      	ldr	r2, [pc, #296]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff fad8 	bl	80013fc <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff fad4 	bl	80013fc <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e212      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ef      	beq.n	8001e50 <HAL_RCC_OscConfig+0x3ec>
 8001e70:	e01b      	b.n	8001eaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e78:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fabb 	bl	80013fc <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fab7 	bl	80013fc <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1f5      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ef      	bne.n	8001e8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80a6 	beq.w	8002004 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d118      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efc:	f7ff fa7e 	bl	80013fc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7ff fa7a 	bl	80013fc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1b8      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_RCC_OscConfig+0x508>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d108      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4d8>
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3a:	e029      	b.n	8001f90 <HAL_RCC_OscConfig+0x52c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d115      	bne.n	8001f70 <HAL_RCC_OscConfig+0x50c>
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x52c>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	4b9d      	ldr	r3, [pc, #628]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a9c      	ldr	r2, [pc, #624]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f80:	4b99      	ldr	r3, [pc, #612]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a98      	ldr	r2, [pc, #608]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff fa30 	bl	80013fc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fa2c 	bl	80013fc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e168      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb6:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ed      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x53c>
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fa19 	bl	80013fc <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff fa15 	bl	80013fc <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e151      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe4:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ed      	bne.n	8001fce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8001ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002002:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d03c      	beq.n	800208a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01c      	beq.n	8002052 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002018:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 800201a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800201e:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff f9e8 	bl	80013fc <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002030:	f7ff f9e4 	bl	80013fc <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e122      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002042:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002044:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCC_OscConfig+0x5cc>
 8002050:	e01b      	b.n	800208a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002058:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7ff f9cb 	bl	80013fc <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206a:	f7ff f9c7 	bl	80013fc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e105      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800207c:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 800207e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ef      	bne.n	800206a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80f9 	beq.w	8002286 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	2b02      	cmp	r3, #2
 800209a:	f040 80cf 	bne.w	800223c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800209e:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0203 	and.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d12c      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	3b01      	subs	r3, #1
 80020be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d123      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d11b      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d113      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	3b01      	subs	r3, #1
 80020f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d109      	bne.n	800210c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	3b01      	subs	r3, #1
 8002106:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d071      	beq.n	80021f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d068      	beq.n	80021e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800211e:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0ac      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2d      	ldr	r2, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002138:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800213a:	f7ff f95f 	bl	80013fc <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff f95b 	bl	80013fc <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e099      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCC_OscConfig+0x788>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002170:	3a01      	subs	r2, #1
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800217a:	0212      	lsls	r2, r2, #8
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002182:	0852      	lsrs	r2, r2, #1
 8002184:	3a01      	subs	r2, #1
 8002186:	0552      	lsls	r2, r2, #21
 8002188:	4311      	orrs	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800218e:	0852      	lsrs	r2, r2, #1
 8002190:	3a01      	subs	r2, #1
 8002192:	0652      	lsls	r2, r2, #25
 8002194:	4311      	orrs	r1, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800219a:	06d2      	lsls	r2, r2, #27
 800219c:	430a      	orrs	r2, r1
 800219e:	4912      	ldr	r1, [pc, #72]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021bc:	f7ff f91e 	bl	80013fc <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f91a 	bl	80013fc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e058      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_RCC_OscConfig+0x784>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e2:	e050      	b.n	8002286 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04f      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d144      	bne.n	8002286 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002212:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002214:	f7ff f8f2 	bl	80013fc <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7ff f8ee 	bl	80013fc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e02c      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x7b8>
 800223a:	e024      	b.n	8002286 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d01f      	beq.n	8002282 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7ff f8d5 	bl	80013fc <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7ff f8d1 	bl	80013fc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e00f      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4905      	ldr	r1, [pc, #20]	; (8002290 <HAL_RCC_OscConfig+0x82c>)
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_OscConfig+0x830>)
 800227c:	4013      	ands	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e001      	b.n	8002286 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	feeefffc 	.word	0xfeeefffc

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0e7      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b75      	ldr	r3, [pc, #468]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b72      	ldr	r3, [pc, #456]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	4970      	ldr	r1, [pc, #448]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b6e      	ldr	r3, [pc, #440]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cf      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d010      	beq.n	800230a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d908      	bls.n	800230a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4960      	ldr	r1, [pc, #384]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04c      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231e:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d121      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e0a6      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	4b54      	ldr	r3, [pc, #336]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e09a      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e08e      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e086      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4943      	ldr	r1, [pc, #268]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7ff f83c 	bl	80013fc <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7ff f838 	bl	80013fc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e06e      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d208      	bcs.n	80023de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	492b      	ldr	r1, [pc, #172]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d210      	bcs.n	800240e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 0207 	bic.w	r2, r3, #7
 80023f4:	4923      	ldr	r1, [pc, #140]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCC_ClockConfig+0x1ec>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e036      	b.n	800247c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4918      	ldr	r1, [pc, #96]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4910      	ldr	r1, [pc, #64]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800244c:	f000 f824 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	490b      	ldr	r1, [pc, #44]	; (800248c <HAL_RCC_ClockConfig+0x1f4>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800246a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1fc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe ff73 	bl	800135c <HAL_InitTick>
 8002476:	4603      	mov	r3, r0
 8002478:	72fb      	strb	r3, [r7, #11]

  return status;
 800247a:	7afb      	ldrb	r3, [r7, #11]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	080046f0 	.word	0x080046f0
 8002490:	20000000 	.word	0x20000000
 8002494:	20000008 	.word	0x20000008

08002498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a6:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x34>
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d121      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d11e      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024cc:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e005      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f4:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d102      	bne.n	8002516 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	e004      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d101      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800251c:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_RCC_GetSysClockFreq+0x114>)
 800251e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d134      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d003      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0xa6>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d003      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0xac>
 800253c:	e005      	b.n	800254a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002540:	617b      	str	r3, [r7, #20]
      break;
 8002542:	e005      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002546:	617b      	str	r3, [r7, #20]
      break;
 8002548:	e002      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	617b      	str	r3, [r7, #20]
      break;
 800254e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	3301      	adds	r3, #1
 800255c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	fb03 f202 	mul.w	r2, r3, r2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	0e5b      	lsrs	r3, r3, #25
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	3301      	adds	r3, #1
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002590:	69bb      	ldr	r3, [r7, #24]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08004708 	.word	0x08004708
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	007a1200 	.word	0x007a1200

080025b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4904      	ldr	r1, [pc, #16]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08004700 	.word	0x08004700

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025f8:	f7ff ffda 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0adb      	lsrs	r3, r3, #11
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCC_GetPCLK2Freq+0x28>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08004700 	.word	0x08004700

08002620 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002638:	f7ff f9a0 	bl	800197c <HAL_PWREx_GetVoltageRange>
 800263c:	6178      	str	r0, [r7, #20]
 800263e:	e014      	b.n	800266a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6593      	str	r3, [r2, #88]	; 0x58
 800264c:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002658:	f7ff f990 	bl	800197c <HAL_PWREx_GetVoltageRange>
 800265c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002670:	d10b      	bne.n	800268a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d919      	bls.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2ba0      	cmp	r3, #160	; 0xa0
 800267c:	d902      	bls.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800267e:	2302      	movs	r3, #2
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	e013      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002684:	2301      	movs	r3, #1
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	e010      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d902      	bls.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002690:	2303      	movs	r3, #3
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	e00a      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	d102      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800269c:	2302      	movs	r3, #2
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e004      	b.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b70      	cmp	r3, #112	; 0x70
 80026a6:	d101      	bne.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a8:	2301      	movs	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 0207 	bic.w	r2, r3, #7
 80026b4:	4909      	ldr	r1, [pc, #36]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40022000 	.word	0x40022000

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e8:	2300      	movs	r3, #0
 80026ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026ec:	2300      	movs	r3, #0
 80026ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d041      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002704:	d02a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002706:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800270a:	d824      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800270c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002712:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002716:	d81e      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800271c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002720:	d010      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002722:	e018      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002724:	4b86      	ldr	r3, [pc, #536]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4a85      	ldr	r2, [pc, #532]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002730:	e015      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f000 facd 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002742:	e00c      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3320      	adds	r3, #32
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fbb6 	bl	8002ebc <RCCEx_PLLSAI2_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002754:	e003      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	74fb      	strb	r3, [r7, #19]
      break;
 800275a:	e000      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800275c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002764:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002772:	4973      	ldr	r1, [pc, #460]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800277a:	e001      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d041      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002790:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002794:	d02a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002796:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800279a:	d824      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800279c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a0:	d008      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027a6:	d81e      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d010      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027b2:	e018      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a61      	ldr	r2, [pc, #388]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c0:	e015      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fa85 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3320      	adds	r3, #32
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fb6e 	bl	8002ebc <RCCEx_PLLSAI2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027f4:	4b52      	ldr	r3, [pc, #328]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002802:	494f      	ldr	r1, [pc, #316]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a0 	beq.w	800295e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	4a40      	ldr	r2, [pc, #256]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	; 0x58
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002860:	f7fe fdcc 	bl	80013fc <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe fdc8 	bl	80013fc <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	74fb      	strb	r3, [r7, #19]
        break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d15c      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01f      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d019      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fd87 	bl	80013fc <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f0:	e00b      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe fd83 	bl	80013fc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d902      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	74fb      	strb	r3, [r7, #19]
            break;
 8002908:	e006      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ec      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002936:	e009      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
 800293c:	e006      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294c:	7c7b      	ldrb	r3, [r7, #17]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4ba6      	ldr	r3, [pc, #664]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	4aa5      	ldr	r2, [pc, #660]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296a:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f023 0203 	bic.w	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	499c      	ldr	r1, [pc, #624]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800298c:	4b97      	ldr	r3, [pc, #604]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 020c 	bic.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	4994      	ldr	r1, [pc, #592]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ae:	4b8f      	ldr	r3, [pc, #572]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	498b      	ldr	r1, [pc, #556]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029d0:	4b86      	ldr	r3, [pc, #536]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4983      	ldr	r1, [pc, #524]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029f2:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	497a      	ldr	r1, [pc, #488]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4972      	ldr	r1, [pc, #456]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	4969      	ldr	r1, [pc, #420]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a58:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a66:	4961      	ldr	r1, [pc, #388]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a88:	4958      	ldr	r1, [pc, #352]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	4950      	ldr	r1, [pc, #320]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002abe:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4947      	ldr	r1, [pc, #284]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ae0:	4b42      	ldr	r3, [pc, #264]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	493f      	ldr	r1, [pc, #252]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d028      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b02:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4936      	ldr	r1, [pc, #216]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b20:	d106      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b22:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4a31      	ldr	r2, [pc, #196]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2c:	60d3      	str	r3, [r2, #12]
 8002b2e:	e011      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f8c9 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d028      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	491f      	ldr	r1, [pc, #124]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8a:	60d3      	str	r3, [r2, #12]
 8002b8c:	e011      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f89a 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bde:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a02      	ldr	r2, [pc, #8]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be8:	60d3      	str	r3, [r2, #12]
 8002bea:	e013      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002bec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f869 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d02f      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c20:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2e:	4929      	ldr	r1, [pc, #164]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3e:	d10d      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f846 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d014      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002c56:	7cfb      	ldrb	r3, [r7, #19]
 8002c58:	74bb      	strb	r3, [r7, #18]
 8002c5a:	e011      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3320      	adds	r3, #32
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f925 	bl	8002ebc <RCCEx_PLLSAI2_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c76:	7cfb      	ldrb	r3, [r7, #19]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9c:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00b      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ce6:	4b74      	ldr	r3, [pc, #464]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cf2:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d10d      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
       ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
       ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d047      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e044      	b.n	8002dae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d018      	beq.n	8002d5e <RCCEx_PLLSAI1_Config+0x86>
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d825      	bhi.n	8002d7c <RCCEx_PLLSAI1_Config+0xa4>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d002      	beq.n	8002d3a <RCCEx_PLLSAI1_Config+0x62>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d009      	beq.n	8002d4c <RCCEx_PLLSAI1_Config+0x74>
 8002d38:	e020      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11d      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e01a      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d4c:	4b5a      	ldr	r3, [pc, #360]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e013      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d6a:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d7a:	e006      	b.n	8002d8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e004      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d92:	4b49      	ldr	r3, [pc, #292]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	430b      	orrs	r3, r1
 8002da8:	4943      	ldr	r1, [pc, #268]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d17c      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3f      	ldr	r2, [pc, #252]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fb1c 	bl	80013fc <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dc6:	e009      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dc8:	f7fe fb18 	bl	80013fc <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d902      	bls.n	8002ddc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dda:	e005      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ef      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d15f      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d110      	bne.n	8002e16 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002dfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	0211      	lsls	r1, r2, #8
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	06d2      	lsls	r2, r2, #27
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	492a      	ldr	r1, [pc, #168]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	610b      	str	r3, [r1, #16]
 8002e14:	e027      	b.n	8002e66 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d112      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6892      	ldr	r2, [r2, #8]
 8002e2c:	0211      	lsls	r1, r2, #8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6912      	ldr	r2, [r2, #16]
 8002e32:	0852      	lsrs	r2, r2, #1
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0552      	lsls	r2, r2, #21
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	491f      	ldr	r1, [pc, #124]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	610b      	str	r3, [r1, #16]
 8002e40:	e011      	b.n	8002e66 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	0211      	lsls	r1, r2, #8
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6952      	ldr	r2, [r2, #20]
 8002e58:	0852      	lsrs	r2, r2, #1
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	0652      	lsls	r2, r2, #25
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	4915      	ldr	r1, [pc, #84]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fac3 	bl	80013fc <HAL_GetTick>
 8002e76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e78:	e009      	b.n	8002e8e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e7a:	f7fe fabf 	bl	80013fc <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d902      	bls.n	8002e8e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e8c:	e005      	b.n	8002e9a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ef      	beq.n	8002e7a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eca:	4b69      	ldr	r3, [pc, #420]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d10d      	bne.n	8002f02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eee:	4b60      	ldr	r3, [pc, #384]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
       ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d047      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e044      	b.n	8002f92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d018      	beq.n	8002f42 <RCCEx_PLLSAI2_Config+0x86>
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d825      	bhi.n	8002f60 <RCCEx_PLLSAI2_Config+0xa4>
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <RCCEx_PLLSAI2_Config+0x62>
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d009      	beq.n	8002f30 <RCCEx_PLLSAI2_Config+0x74>
 8002f1c:	e020      	b.n	8002f60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1e:	4b54      	ldr	r3, [pc, #336]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11d      	bne.n	8002f66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2e:	e01a      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f30:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d116      	bne.n	8002f6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e013      	b.n	8002f6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4e:	4b48      	ldr	r3, [pc, #288]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5e:	e006      	b.n	8002f6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e004      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	4938      	ldr	r1, [pc, #224]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d166      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a34      	ldr	r2, [pc, #208]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fa2a 	bl	80013fc <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fac:	f7fe fa26 	bl	80013fc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ef      	bne.n	8002fac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d149      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d110      	bne.n	8002ffa <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68d2      	ldr	r2, [r2, #12]
 8002fee:	06d2      	lsls	r2, r2, #27
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	491f      	ldr	r1, [pc, #124]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
 8002ff8:	e011      	b.n	800301e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003002:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	0211      	lsls	r1, r2, #8
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6912      	ldr	r2, [r2, #16]
 8003010:	0852      	lsrs	r2, r2, #1
 8003012:	3a01      	subs	r2, #1
 8003014:	0652      	lsls	r2, r2, #25
 8003016:	430a      	orrs	r2, r1
 8003018:	4915      	ldr	r1, [pc, #84]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003028:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7fe f9e7 	bl	80013fc <HAL_GetTick>
 800302e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003030:	e009      	b.n	8003046 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003032:	f7fe f9e3 	bl	80013fc <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d902      	bls.n	8003046 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	73fb      	strb	r3, [r7, #15]
          break;
 8003044:	e005      	b.n	8003052 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ef      	beq.n	8003032 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e095      	b.n	80031b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003096:	d009      	beq.n	80030ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
 800309e:	e005      	b.n	80030ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd fbbe 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ec:	d902      	bls.n	80030f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	e002      	b.n	80030fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003102:	d007      	beq.n	8003114 <HAL_SPI_Init+0xa0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800310c:	d002      	beq.n	8003114 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	ea42 0103 	orr.w	r1, r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	f003 0204 	and.w	r2, r3, #4
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003190:	ea42 0103 	orr.w	r1, r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b088      	sub	sp, #32
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_SPI_Transmit+0x22>
 80031d8:	2302      	movs	r3, #2
 80031da:	e158      	b.n	800348e <HAL_SPI_Transmit+0x2d4>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e4:	f7fe f90a 	bl	80013fc <HAL_GetTick>
 80031e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fe:	e13d      	b.n	800347c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x52>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003210:	e134      	b.n	800347c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325c:	d10f      	bne.n	800327e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d007      	beq.n	800329c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800329a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032a4:	d94b      	bls.n	800333e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_Transmit+0xfa>
 80032ae:	8afb      	ldrh	r3, [r7, #22]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d13e      	bne.n	8003332 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	1c9a      	adds	r2, r3, #2
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032d8:	e02b      	b.n	8003332 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d112      	bne.n	800330e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	1c9a      	adds	r2, r3, #2
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800330c:	e011      	b.n	8003332 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800330e:	f7fe f875 	bl	80013fc <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d803      	bhi.n	8003326 <HAL_SPI_Transmit+0x16c>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003324:	d102      	bne.n	800332c <HAL_SPI_Transmit+0x172>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003330:	e0a4      	b.n	800347c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ce      	bne.n	80032da <HAL_SPI_Transmit+0x120>
 800333c:	e07c      	b.n	8003438 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_SPI_Transmit+0x192>
 8003346:	8afb      	ldrh	r3, [r7, #22]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d170      	bne.n	800342e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d912      	bls.n	800337c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	1c9a      	adds	r2, r3, #2
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b02      	subs	r3, #2
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800337a:	e058      	b.n	800342e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033a2:	e044      	b.n	800342e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d12b      	bne.n	800340a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d912      	bls.n	80033e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	881a      	ldrh	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	1c9a      	adds	r2, r3, #2
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b02      	subs	r3, #2
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033e0:	e025      	b.n	800342e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003408:	e011      	b.n	800342e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800340a:	f7fd fff7 	bl	80013fc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d803      	bhi.n	8003422 <HAL_SPI_Transmit+0x268>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003420:	d102      	bne.n	8003428 <HAL_SPI_Transmit+0x26e>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800342c:	e026      	b.n	800347c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1b5      	bne.n	80033a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	6839      	ldr	r1, [r7, #0]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fb5b 	bl	8003af8 <SPI_EndRxTxTransaction>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e000      	b.n	800347c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800347a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800348c:	7ffb      	ldrb	r3, [r7, #31]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b08a      	sub	sp, #40	; 0x28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034a4:	2301      	movs	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x26>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e1fb      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x41e>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c4:	f7fd ff9a 	bl	80013fc <HAL_GetTick>
 80034c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034e0:	7efb      	ldrb	r3, [r7, #27]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d00e      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x6e>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ec:	d106      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x66>
 80034f6:	7efb      	ldrb	r3, [r7, #27]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d003      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003502:	e1cd      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_SPI_TransmitReceive+0x80>
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800351c:	e1c0      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b04      	cmp	r3, #4
 8003528:	d003      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2205      	movs	r2, #5
 800352e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	887a      	ldrh	r2, [r7, #2]
 8003542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	887a      	ldrh	r2, [r7, #2]
 800354a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	887a      	ldrh	r2, [r7, #2]
 800355e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003574:	d802      	bhi.n	800357c <HAL_SPI_TransmitReceive+0xe6>
 8003576:	8a3b      	ldrh	r3, [r7, #16]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d908      	bls.n	800358e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	e007      	b.n	800359e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800359c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d007      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c4:	d97c      	bls.n	80036c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x13e>
 80035ce:	8a7b      	ldrh	r3, [r7, #18]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d169      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f8:	e056      	b.n	80036a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x1aa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x1aa>
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	2b01      	cmp	r3, #1
 8003616:	d113      	bne.n	8003640 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d11c      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x1f2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	b292      	uxth	r2, r2
 8003666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	1c9a      	adds	r2, r3, #2
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003684:	2301      	movs	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003688:	f7fd feb8 	bl	80013fc <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003694:	429a      	cmp	r2, r3
 8003696:	d807      	bhi.n	80036a8 <HAL_SPI_TransmitReceive+0x212>
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369e:	d003      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80036a6:	e0fb      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1a3      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x164>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d19d      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x164>
 80036be:	e0df      	b.n	8003880 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x23a>
 80036c8:	8a7b      	ldrh	r3, [r7, #18]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	f040 80cb 	bne.w	8003866 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d912      	bls.n	8003700 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	1c9a      	adds	r2, r3, #2
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b02      	subs	r3, #2
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036fe:	e0b2      	b.n	8003866 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003726:	e09e      	b.n	8003866 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d134      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x30a>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02f      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x30a>
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	2b01      	cmp	r3, #1
 8003744:	d12c      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d912      	bls.n	8003776 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	1c9a      	adds	r2, r3, #2
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b02      	subs	r3, #2
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003774:	e012      	b.n	800379c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d148      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x3aa>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d042      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d923      	bls.n	800380e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	b292      	uxth	r2, r2
 80037d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b02      	subs	r3, #2
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d81f      	bhi.n	800383c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	e016      	b.n	800383c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f103 020c 	add.w	r2, r3, #12
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003840:	f7fd fddc 	bl	80013fc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384c:	429a      	cmp	r2, r3
 800384e:	d803      	bhi.n	8003858 <HAL_SPI_TransmitReceive+0x3c2>
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003856:	d102      	bne.n	800385e <HAL_SPI_TransmitReceive+0x3c8>
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003864:	e01c      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f47f af5b 	bne.w	8003728 <HAL_SPI_TransmitReceive+0x292>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f47f af54 	bne.w	8003728 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f937 	bl	8003af8 <SPI_EndRxTxTransaction>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	661a      	str	r2, [r3, #96]	; 0x60
 800389c:	e000      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800389e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3728      	adds	r7, #40	; 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038cc:	f7fd fd96 	bl	80013fc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038dc:	f7fd fd8e 	bl	80013fc <HAL_GetTick>
 80038e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	0d1b      	lsrs	r3, r3, #20
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f2:	e054      	b.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fa:	d050      	beq.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038fc:	f7fd fd7e 	bl	80013fc <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	429a      	cmp	r2, r3
 800390a:	d902      	bls.n	8003912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13d      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d111      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003934:	d004      	beq.n	8003940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d107      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d10f      	bne.n	800397a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e017      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3b01      	subs	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d19b      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000000 	.word	0x20000000

080039cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039de:	f7fd fd0d 	bl	80013fc <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	4413      	add	r3, r2
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80039ee:	f7fd fd05 	bl	80013fc <HAL_GetTick>
 80039f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039fc:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00da      	lsls	r2, r3, #3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	0d1b      	lsrs	r3, r3, #20
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a14:	e060      	b.n	8003ad8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a1c:	d107      	bne.n	8003a2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a34:	d050      	beq.n	8003ad8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a36:	f7fd fce1 	bl	80013fc <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d902      	bls.n	8003a4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d13d      	bne.n	8003ac8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a64:	d111      	bne.n	8003a8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a6e:	d004      	beq.n	8003a7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a78:	d107      	bne.n	8003a8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a92:	d10f      	bne.n	8003ab4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e010      	b.n	8003aea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d196      	bne.n	8003a16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3728      	adds	r7, #40	; 0x28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000000 	.word	0x20000000

08003af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff ff5b 	bl	80039cc <SPI_WaitFifoStateUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e027      	b.n	8003b7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7ff fec0 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e014      	b.n	8003b7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff ff34 	bl	80039cc <SPI_WaitFifoStateUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e000      	b.n	8003b7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e040      	b.n	8003c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fc fdee 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	; 0x24
 8003bb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f82c 	bl	8003c20 <UART_SetConfig>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e022      	b.n	8003c18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fad8 	bl	8004190 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fb5f 	bl	80042d4 <UART_CheckIdleState>
 8003c16:	4603      	mov	r3, r0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b08a      	sub	sp, #40	; 0x28
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4ba4      	ldr	r3, [pc, #656]	; (8003ee0 <UART_SetConfig+0x2c0>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a99      	ldr	r2, [pc, #612]	; (8003ee4 <UART_SetConfig+0x2c4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a90      	ldr	r2, [pc, #576]	; (8003ee8 <UART_SetConfig+0x2c8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d126      	bne.n	8003cf8 <UART_SetConfig+0xd8>
 8003caa:	4b90      	ldr	r3, [pc, #576]	; (8003eec <UART_SetConfig+0x2cc>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d81b      	bhi.n	8003cf0 <UART_SetConfig+0xd0>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0xa0>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003ce1 	.word	0x08003ce1
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ce9 	.word	0x08003ce9
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e116      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e112      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e10e      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e10a      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e106      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7c      	ldr	r2, [pc, #496]	; (8003ef0 <UART_SetConfig+0x2d0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d138      	bne.n	8003d74 <UART_SetConfig+0x154>
 8003d02:	4b7a      	ldr	r3, [pc, #488]	; (8003eec <UART_SetConfig+0x2cc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	d82d      	bhi.n	8003d6c <UART_SetConfig+0x14c>
 8003d10:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <UART_SetConfig+0xf8>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d6d 	.word	0x08003d6d
 8003d20:	08003d6d 	.word	0x08003d6d
 8003d24:	08003d6d 	.word	0x08003d6d
 8003d28:	08003d5d 	.word	0x08003d5d
 8003d2c:	08003d6d 	.word	0x08003d6d
 8003d30:	08003d6d 	.word	0x08003d6d
 8003d34:	08003d6d 	.word	0x08003d6d
 8003d38:	08003d55 	.word	0x08003d55
 8003d3c:	08003d6d 	.word	0x08003d6d
 8003d40:	08003d6d 	.word	0x08003d6d
 8003d44:	08003d6d 	.word	0x08003d6d
 8003d48:	08003d65 	.word	0x08003d65
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d52:	e0d8      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003d54:	2302      	movs	r3, #2
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5a:	e0d4      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e0d0      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003d64:	2308      	movs	r3, #8
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e0cc      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003d6c:	2310      	movs	r3, #16
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e0c8      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5e      	ldr	r2, [pc, #376]	; (8003ef4 <UART_SetConfig+0x2d4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d125      	bne.n	8003dca <UART_SetConfig+0x1aa>
 8003d7e:	4b5b      	ldr	r3, [pc, #364]	; (8003eec <UART_SetConfig+0x2cc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d016      	beq.n	8003dba <UART_SetConfig+0x19a>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d818      	bhi.n	8003dc2 <UART_SetConfig+0x1a2>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d00a      	beq.n	8003daa <UART_SetConfig+0x18a>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d814      	bhi.n	8003dc2 <UART_SetConfig+0x1a2>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <UART_SetConfig+0x182>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d008      	beq.n	8003db2 <UART_SetConfig+0x192>
 8003da0:	e00f      	b.n	8003dc2 <UART_SetConfig+0x1a2>
 8003da2:	2300      	movs	r3, #0
 8003da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da8:	e0ad      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003daa:	2302      	movs	r3, #2
 8003dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db0:	e0a9      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003db2:	2304      	movs	r3, #4
 8003db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db8:	e0a5      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc0:	e0a1      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003dc2:	2310      	movs	r3, #16
 8003dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc8:	e09d      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a4a      	ldr	r2, [pc, #296]	; (8003ef8 <UART_SetConfig+0x2d8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d125      	bne.n	8003e20 <UART_SetConfig+0x200>
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <UART_SetConfig+0x2cc>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dde:	2bc0      	cmp	r3, #192	; 0xc0
 8003de0:	d016      	beq.n	8003e10 <UART_SetConfig+0x1f0>
 8003de2:	2bc0      	cmp	r3, #192	; 0xc0
 8003de4:	d818      	bhi.n	8003e18 <UART_SetConfig+0x1f8>
 8003de6:	2b80      	cmp	r3, #128	; 0x80
 8003de8:	d00a      	beq.n	8003e00 <UART_SetConfig+0x1e0>
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d814      	bhi.n	8003e18 <UART_SetConfig+0x1f8>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <UART_SetConfig+0x1d8>
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d008      	beq.n	8003e08 <UART_SetConfig+0x1e8>
 8003df6:	e00f      	b.n	8003e18 <UART_SetConfig+0x1f8>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfe:	e082      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e06:	e07e      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0e:	e07a      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e10:	2308      	movs	r3, #8
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e076      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1e:	e072      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a35      	ldr	r2, [pc, #212]	; (8003efc <UART_SetConfig+0x2dc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d12a      	bne.n	8003e80 <UART_SetConfig+0x260>
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <UART_SetConfig+0x2cc>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d01a      	beq.n	8003e70 <UART_SetConfig+0x250>
 8003e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e3e:	d81b      	bhi.n	8003e78 <UART_SetConfig+0x258>
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d00c      	beq.n	8003e60 <UART_SetConfig+0x240>
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4a:	d815      	bhi.n	8003e78 <UART_SetConfig+0x258>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <UART_SetConfig+0x238>
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e54:	d008      	beq.n	8003e68 <UART_SetConfig+0x248>
 8003e56:	e00f      	b.n	8003e78 <UART_SetConfig+0x258>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5e:	e052      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e66:	e04e      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6e:	e04a      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e70:	2308      	movs	r3, #8
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e76:	e046      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7e:	e042      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <UART_SetConfig+0x2c4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d13a      	bne.n	8003f00 <UART_SetConfig+0x2e0>
 8003e8a:	4b18      	ldr	r3, [pc, #96]	; (8003eec <UART_SetConfig+0x2cc>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e98:	d01a      	beq.n	8003ed0 <UART_SetConfig+0x2b0>
 8003e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e9e:	d81b      	bhi.n	8003ed8 <UART_SetConfig+0x2b8>
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea4:	d00c      	beq.n	8003ec0 <UART_SetConfig+0x2a0>
 8003ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eaa:	d815      	bhi.n	8003ed8 <UART_SetConfig+0x2b8>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <UART_SetConfig+0x298>
 8003eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb4:	d008      	beq.n	8003ec8 <UART_SetConfig+0x2a8>
 8003eb6:	e00f      	b.n	8003ed8 <UART_SetConfig+0x2b8>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e022      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec6:	e01e      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e01a      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed6:	e016      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e012      	b.n	8003f06 <UART_SetConfig+0x2e6>
 8003ee0:	efff69f3 	.word	0xefff69f3
 8003ee4:	40008000 	.word	0x40008000
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40004400 	.word	0x40004400
 8003ef4:	40004800 	.word	0x40004800
 8003ef8:	40004c00 	.word	0x40004c00
 8003efc:	40005000 	.word	0x40005000
 8003f00:	2310      	movs	r3, #16
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a9f      	ldr	r2, [pc, #636]	; (8004188 <UART_SetConfig+0x568>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d17a      	bne.n	8004006 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d824      	bhi.n	8003f62 <UART_SetConfig+0x342>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <UART_SetConfig+0x300>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f45 	.word	0x08003f45
 8003f24:	08003f63 	.word	0x08003f63
 8003f28:	08003f4d 	.word	0x08003f4d
 8003f2c:	08003f63 	.word	0x08003f63
 8003f30:	08003f53 	.word	0x08003f53
 8003f34:	08003f63 	.word	0x08003f63
 8003f38:	08003f63 	.word	0x08003f63
 8003f3c:	08003f63 	.word	0x08003f63
 8003f40:	08003f5b 	.word	0x08003f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f44:	f7fe fb40 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8003f48:	61f8      	str	r0, [r7, #28]
        break;
 8003f4a:	e010      	b.n	8003f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f4c:	4b8f      	ldr	r3, [pc, #572]	; (800418c <UART_SetConfig+0x56c>)
 8003f4e:	61fb      	str	r3, [r7, #28]
        break;
 8003f50:	e00d      	b.n	8003f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f52:	f7fe faa1 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8003f56:	61f8      	str	r0, [r7, #28]
        break;
 8003f58:	e009      	b.n	8003f6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5e:	61fb      	str	r3, [r7, #28]
        break;
 8003f60:	e005      	b.n	8003f6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80fb 	beq.w	800416c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d305      	bcc.n	8003f92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d903      	bls.n	8003f9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f98:	e0e8      	b.n	800416c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	461c      	mov	r4, r3
 8003fa0:	4615      	mov	r5, r2
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	022b      	lsls	r3, r5, #8
 8003fac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fb0:	0222      	lsls	r2, r4, #8
 8003fb2:	68f9      	ldr	r1, [r7, #12]
 8003fb4:	6849      	ldr	r1, [r1, #4]
 8003fb6:	0849      	lsrs	r1, r1, #1
 8003fb8:	2000      	movs	r0, #0
 8003fba:	4688      	mov	r8, r1
 8003fbc:	4681      	mov	r9, r0
 8003fbe:	eb12 0a08 	adds.w	sl, r2, r8
 8003fc2:	eb43 0b09 	adc.w	fp, r3, r9
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd4:	4650      	mov	r0, sl
 8003fd6:	4659      	mov	r1, fp
 8003fd8:	f7fc f908 	bl	80001ec <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fea:	d308      	bcc.n	8003ffe <UART_SetConfig+0x3de>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff2:	d204      	bcs.n	8003ffe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	e0b6      	b.n	800416c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004004:	e0b2      	b.n	800416c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400e:	d15e      	bne.n	80040ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004014:	2b08      	cmp	r3, #8
 8004016:	d828      	bhi.n	800406a <UART_SetConfig+0x44a>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x400>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004045 	.word	0x08004045
 8004024:	0800404d 	.word	0x0800404d
 8004028:	08004055 	.word	0x08004055
 800402c:	0800406b 	.word	0x0800406b
 8004030:	0800405b 	.word	0x0800405b
 8004034:	0800406b 	.word	0x0800406b
 8004038:	0800406b 	.word	0x0800406b
 800403c:	0800406b 	.word	0x0800406b
 8004040:	08004063 	.word	0x08004063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7fe fac0 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8004048:	61f8      	str	r0, [r7, #28]
        break;
 800404a:	e014      	b.n	8004076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800404c:	f7fe fad2 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8004050:	61f8      	str	r0, [r7, #28]
        break;
 8004052:	e010      	b.n	8004076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004054:	4b4d      	ldr	r3, [pc, #308]	; (800418c <UART_SetConfig+0x56c>)
 8004056:	61fb      	str	r3, [r7, #28]
        break;
 8004058:	e00d      	b.n	8004076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405a:	f7fe fa1d 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 800405e:	61f8      	str	r0, [r7, #28]
        break;
 8004060:	e009      	b.n	8004076 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	61fb      	str	r3, [r7, #28]
        break;
 8004068:	e005      	b.n	8004076 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d077      	beq.n	800416c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	005a      	lsls	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	441a      	add	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d916      	bls.n	80040c6 <UART_SetConfig+0x4a6>
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409e:	d212      	bcs.n	80040c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f023 030f 	bic.w	r3, r3, #15
 80040a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	8afb      	ldrh	r3, [r7, #22]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	8afa      	ldrh	r2, [r7, #22]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	e052      	b.n	800416c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040cc:	e04e      	b.n	800416c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d827      	bhi.n	8004126 <UART_SetConfig+0x506>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <UART_SetConfig+0x4bc>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004101 	.word	0x08004101
 80040e0:	08004109 	.word	0x08004109
 80040e4:	08004111 	.word	0x08004111
 80040e8:	08004127 	.word	0x08004127
 80040ec:	08004117 	.word	0x08004117
 80040f0:	08004127 	.word	0x08004127
 80040f4:	08004127 	.word	0x08004127
 80040f8:	08004127 	.word	0x08004127
 80040fc:	0800411f 	.word	0x0800411f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004100:	f7fe fa62 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8004104:	61f8      	str	r0, [r7, #28]
        break;
 8004106:	e014      	b.n	8004132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004108:	f7fe fa74 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 800410c:	61f8      	str	r0, [r7, #28]
        break;
 800410e:	e010      	b.n	8004132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004110:	4b1e      	ldr	r3, [pc, #120]	; (800418c <UART_SetConfig+0x56c>)
 8004112:	61fb      	str	r3, [r7, #28]
        break;
 8004114:	e00d      	b.n	8004132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004116:	f7fe f9bf 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 800411a:	61f8      	str	r0, [r7, #28]
        break;
 800411c:	e009      	b.n	8004132 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800411e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004122:	61fb      	str	r3, [r7, #28]
        break;
 8004124:	e005      	b.n	8004132 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004130:	bf00      	nop
    }

    if (pclk != 0U)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d019      	beq.n	800416c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	085a      	lsrs	r2, r3, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	fbb2 f3f3 	udiv	r3, r2, r3
 800414a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b0f      	cmp	r3, #15
 8004150:	d909      	bls.n	8004166 <UART_SetConfig+0x546>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d205      	bcs.n	8004166 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	e002      	b.n	800416c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004178:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800417c:	4618      	mov	r0, r3
 800417e:	3728      	adds	r7, #40	; 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	40008000 	.word	0x40008000
 800418c:	00f42400 	.word	0x00f42400

08004190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01a      	beq.n	80042a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800428e:	d10a      	bne.n	80042a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af02      	add	r7, sp, #8
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e4:	f7fd f88a 	bl	80013fc <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d10e      	bne.n	8004316 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f82d 	bl	8004366 <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e023      	b.n	800435e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d10e      	bne.n	8004342 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f817 	bl	8004366 <UART_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00d      	b.n	800435e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b09c      	sub	sp, #112	; 0x70
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	4613      	mov	r3, r2
 8004374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004376:	e0a5      	b.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800437e:	f000 80a1 	beq.w	80044c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fd f83b 	bl	80013fc <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <UART_WaitOnFlagUntilTimeout+0x32>
 8004392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004394:	2b00      	cmp	r3, #0
 8004396:	d13e      	bne.n	8004416 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ac:	667b      	str	r3, [r7, #100]	; 0x64
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e6      	bne.n	8004398 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3308      	adds	r3, #8
 80043d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	663b      	str	r3, [r7, #96]	; 0x60
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3308      	adds	r3, #8
 80043e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80043ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e067      	b.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d04f      	beq.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004432:	d147      	bne.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
 800445e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e6      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3308      	adds	r3, #8
 8004476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	613b      	str	r3, [r7, #16]
   return(result);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	66bb      	str	r3, [r7, #104]	; 0x68
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3308      	adds	r3, #8
 800448e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004490:	623a      	str	r2, [r7, #32]
 8004492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	69f9      	ldr	r1, [r7, #28]
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	61bb      	str	r3, [r7, #24]
   return(result);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e010      	b.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69da      	ldr	r2, [r3, #28]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	429a      	cmp	r2, r3
 80044e0:	f43f af4a 	beq.w	8004378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3770      	adds	r7, #112	; 0x70
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80044f4:	4904      	ldr	r1, [pc, #16]	; (8004508 <MX_FATFS_Init+0x18>)
 80044f6:	4805      	ldr	r0, [pc, #20]	; (800450c <MX_FATFS_Init+0x1c>)
 80044f8:	f000 f8b2 	bl	8004660 <FATFS_LinkDriver>
 80044fc:	4603      	mov	r3, r0
 80044fe:	461a      	mov	r2, r3
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <MX_FATFS_Init+0x20>)
 8004502:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000138 	.word	0x20000138
 800450c:	20000010 	.word	0x20000010
 8004510:	20000134 	.word	0x20000134

08004514 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc fbed 	bl	8000d00 <SD_disk_initialize>
 8004526:	4603      	mov	r3, r0
 8004528:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	4603      	mov	r3, r0
 800453a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fc fcc4 	bl	8000ecc <SD_disk_status>
 8004544:	4603      	mov	r3, r0
 8004546:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4603      	mov	r3, r0
 800455e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004560:	7bf8      	ldrb	r0, [r7, #15]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	f7fc fcc6 	bl	8000ef8 <SD_disk_read>
 800456c:	4603      	mov	r3, r0
 800456e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004588:	7bf8      	ldrb	r0, [r7, #15]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	f7fc fd1c 	bl	8000fcc <SD_disk_write>
 8004594:	4603      	mov	r3, r0
 8004596:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	603a      	str	r2, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
 80045ac:	460b      	mov	r3, r1
 80045ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	79b9      	ldrb	r1, [r7, #6]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fc fd8c 	bl	80010d4 <SD_disk_ioctl>
 80045bc:	4603      	mov	r3, r0
 80045be:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045e0:	7a5b      	ldrb	r3, [r3, #9]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d131      	bne.n	800464c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045ea:	7a5b      	ldrb	r3, [r3, #9]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045f2:	2100      	movs	r1, #0
 80045f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045f8:	7a5b      	ldrb	r3, [r3, #9]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <FATFS_LinkDriverEx+0x94>)
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004608:	7a5b      	ldrb	r3, [r3, #9]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004610:	4413      	add	r3, r2
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004618:	7a5b      	ldrb	r3, [r3, #9]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	b2d1      	uxtb	r1, r2
 8004620:	4a0e      	ldr	r2, [pc, #56]	; (800465c <FATFS_LinkDriverEx+0x94>)
 8004622:	7251      	strb	r1, [r2, #9]
 8004624:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004626:	7dbb      	ldrb	r3, [r7, #22]
 8004628:	3330      	adds	r3, #48	; 0x30
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3301      	adds	r3, #1
 8004634:	223a      	movs	r2, #58	; 0x3a
 8004636:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3302      	adds	r3, #2
 800463c:	222f      	movs	r2, #47	; 0x2f
 800463e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3303      	adds	r3, #3
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	2000013c 	.word	0x2000013c

08004660 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800466a:	2200      	movs	r2, #0
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ffaa 	bl	80045c8 <FATFS_LinkDriverEx>
 8004674:	4603      	mov	r3, r0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <__libc_init_array>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4d0d      	ldr	r5, [pc, #52]	; (80046b8 <__libc_init_array+0x38>)
 8004684:	4c0d      	ldr	r4, [pc, #52]	; (80046bc <__libc_init_array+0x3c>)
 8004686:	1b64      	subs	r4, r4, r5
 8004688:	10a4      	asrs	r4, r4, #2
 800468a:	2600      	movs	r6, #0
 800468c:	42a6      	cmp	r6, r4
 800468e:	d109      	bne.n	80046a4 <__libc_init_array+0x24>
 8004690:	4d0b      	ldr	r5, [pc, #44]	; (80046c0 <__libc_init_array+0x40>)
 8004692:	4c0c      	ldr	r4, [pc, #48]	; (80046c4 <__libc_init_array+0x44>)
 8004694:	f000 f820 	bl	80046d8 <_init>
 8004698:	1b64      	subs	r4, r4, r5
 800469a:	10a4      	asrs	r4, r4, #2
 800469c:	2600      	movs	r6, #0
 800469e:	42a6      	cmp	r6, r4
 80046a0:	d105      	bne.n	80046ae <__libc_init_array+0x2e>
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a8:	4798      	blx	r3
 80046aa:	3601      	adds	r6, #1
 80046ac:	e7ee      	b.n	800468c <__libc_init_array+0xc>
 80046ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b2:	4798      	blx	r3
 80046b4:	3601      	adds	r6, #1
 80046b6:	e7f2      	b.n	800469e <__libc_init_array+0x1e>
 80046b8:	08004740 	.word	0x08004740
 80046bc:	08004740 	.word	0x08004740
 80046c0:	08004740 	.word	0x08004740
 80046c4:	08004744 	.word	0x08004744

080046c8 <memset>:
 80046c8:	4402      	add	r2, r0
 80046ca:	4603      	mov	r3, r0
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d100      	bne.n	80046d2 <memset+0xa>
 80046d0:	4770      	bx	lr
 80046d2:	f803 1b01 	strb.w	r1, [r3], #1
 80046d6:	e7f9      	b.n	80046cc <memset+0x4>

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
