
05_QSPI_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006228  08006228  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006230  08006230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  080062a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080062a8  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eec7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a0  00000000  00000000  0002ef67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00031208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00031e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac61  00000000  00000000  000329d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef6c  00000000  00000000  0005d631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd9bc  00000000  00000000  0006c59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039bc  00000000  00000000  00169fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e68 	.word	0x08005e68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005e68 	.word	0x08005e68

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 faf7 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f875 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f911 	bl	80007c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005a6:	f000 f8b7 	bl	8000718 <MX_LPUART1_UART_Init>
  MX_QUADSPI_Init();
 80005aa:	f000 f8e1 	bl	8000770 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the Flash */
  Flash_Init();
 80005ae:	f000 fd0d 	bl	8000fcc <Flash_Init>
  /* Initialize the circular buffer */
  FlashCircularBufferInit(&fcb);
 80005b2:	482d      	ldr	r0, [pc, #180]	; (8000668 <main+0xd4>)
 80005b4:	f000 fb1b 	bl	8000bee <FlashCircularBufferInit>
		  	  	  	  	  .run_time_hours = 2,
						  .water_meter_version = 1
  };
#else
	  data_info readStudent;
	  data_info Student_data = { .name ="Pratham\r\n",
 80005b8:	4a2c      	ldr	r2, [pc, #176]	; (800066c <main+0xd8>)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//  /* Read Flash ID */
//  BSP_QSPI_ReadID(temp_buff);
//  HAL_Delay(1000);

  /* To erase whole chip un-comment the below section */
  Flash_Erase(QSPI_ERASE_LEN_ALL,0);
 80005c2:	2100      	movs	r1, #0
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 fd17 	bl	8000ff8 <Flash_Erase>
  waitForFlashbusy();
 80005ca:	f001 fac1 	bl	8001b50 <waitForFlashbusy>
//  Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK5_ADDR);
//  Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK6_ADDR);
//  Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK7_ADDR);

  /* Wait for the chip erase */
  waitForFlashbusy();
 80005ce:	f001 fabf 	bl	8001b50 <waitForFlashbusy>
		  sensor_data.run_time_hours += 1;
	  }
#else
	  fcb_status Writestatus;

	  Writestatus = WriteDatasetToFlash(&fcb, &Student_data, sizeof(data_info));
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	220c      	movs	r2, #12
 80005d6:	4619      	mov	r1, r3
 80005d8:	4823      	ldr	r0, [pc, #140]	; (8000668 <main+0xd4>)
 80005da:	f000 fb25 	bl	8000c28 <WriteDatasetToFlash>
 80005de:	4603      	mov	r3, r0
 80005e0:	77fb      	strb	r3, [r7, #31]
	  if(Writestatus != FCB_OK)
 80005e2:	7ffb      	ldrb	r3, [r7, #31]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d004      	beq.n	80005f2 <main+0x5e>
	  {
		  printf("FCB: Flash Write Failed!\r\n");
 80005e8:	4821      	ldr	r0, [pc, #132]	; (8000670 <main+0xdc>)
 80005ea:	f004 fcbf 	bl	8004f6c <puts>
		  return 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e035      	b.n	800065e <main+0xca>
	  }

	  /* Wait for some time */
	  HAL_Delay(3000);
 80005f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f6:	f001 fb3d 	bl	8001c74 <HAL_Delay>
	  /* Wait for some time to debug */
	  HAL_Delay(3000);

  sensor_data.water_meter_version = 2;
#else
	memset(&readStudent, 0x00, sizeof(readStudent));
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	220c      	movs	r2, #12
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f004 fc24 	bl	8004e50 <memset>

	fcb_status Readstatus;

	Readstatus = ReadDatasetFromFlash(&fcb, &readStudent, sizeof(readStudent));
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	220c      	movs	r2, #12
 800060e:	4619      	mov	r1, r3
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <main+0xd4>)
 8000612:	f000 fb97 	bl	8000d44 <ReadDatasetFromFlash>
 8000616:	4603      	mov	r3, r0
 8000618:	77bb      	strb	r3, [r7, #30]
	if (Readstatus != FCB_OK) {
 800061a:	7fbb      	ldrb	r3, [r7, #30]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <main+0x96>
		printf("FCB: Flash Read Failed!\r\n");
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <main+0xe0>)
 8000622:	f004 fca3 	bl	8004f6c <puts>
		return 1;
 8000626:	2301      	movs	r3, #1
 8000628:	e019      	b.n	800065e <main+0xca>
	}

	/* Wait for some time */
	HAL_Delay(3000);
 800062a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800062e:	f001 fb21 	bl	8001c74 <HAL_Delay>

	/* print the data */
	printf("\r\n");
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <main+0xe4>)
 8000634:	f004 fc9a 	bl	8004f6c <puts>
	printf("Data Read from the Flash is: \r\n");
 8000638:	4810      	ldr	r0, [pc, #64]	; (800067c <main+0xe8>)
 800063a:	f004 fc97 	bl	8004f6c <puts>
	printf("Name:   %s", readStudent.name);
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	4619      	mov	r1, r3
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <main+0xec>)
 8000644:	f004 fc0c 	bl	8004e60 <iprintf>
	printf("Age:      %d\r\n", readStudent.age);
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	4619      	mov	r1, r3
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <main+0xf0>)
 800064e:	f004 fc07 	bl	8004e60 <iprintf>
	printf("Gender: %c\r\n", readStudent.gender);
 8000652:	7e3b      	ldrb	r3, [r7, #24]
 8000654:	4619      	mov	r1, r3
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <main+0xf4>)
 8000658:	f004 fc02 	bl	8004e60 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0xc8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800065e:	4618      	mov	r0, r3
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000160 	.word	0x20000160
 800066c:	08005f30 	.word	0x08005f30
 8000670:	08005ea8 	.word	0x08005ea8
 8000674:	08005ec4 	.word	0x08005ec4
 8000678:	08005ee0 	.word	0x08005ee0
 800067c:	08005ee4 	.word	0x08005ee4
 8000680:	08005f04 	.word	0x08005f04
 8000684:	08005f10 	.word	0x08005f10
 8000688:	08005f20 	.word	0x08005f20

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b096      	sub	sp, #88	; 0x58
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	2244      	movs	r2, #68	; 0x44
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fbd8 	bl	8004e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b2:	f001 fe7b 	bl	80023ac <HAL_PWREx_ControlVoltageScaling>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006bc:	f000 f8a8 	bl	8000810 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2340      	movs	r3, #64	; 0x40
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fb3e 	bl	8002d58 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006e2:	f000 f895 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 ff44 	bl	800358c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800070a:	f000 f881 	bl	8000810 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3758      	adds	r7, #88	; 0x58
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_LPUART1_UART_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000756:	f003 fe07 	bl	8004368 <HAL_UART_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f856 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000008c 	.word	0x2000008c
 800076c:	40008000 	.word	0x40008000

08000770 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_QUADSPI_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 0;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 8000782:	2204      	movs	r2, #4
 8000784:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 21;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 800078e:	2215      	movs	r2, #21
 8000790:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_QUADSPI_Init+0x50>)
 80007ac:	f001 fe64 	bl	8002478 <HAL_QSPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 f82b 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000110 	.word	0x20000110
 80007c4:	a0001000 	.word	0xa0001000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0x44>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <MX_GPIO_Init+0x44>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_GPIO_Init+0x44>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_GPIO_Init+0x44>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <MX_GPIO_Init+0x44>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_GPIO_Init+0x44>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80007fe:	f001 fe2b 	bl	8002458 <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0ac      	sub	sp, #176	; 0xb0
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	228c      	movs	r2, #140	; 0x8c
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f004 fae3 	bl	8004e50 <memset>
  if(huart->Instance==LPUART1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a22      	ldr	r2, [pc, #136]	; (8000918 <HAL_UART_MspInit+0xb4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d13d      	bne.n	8000910 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000894:	2320      	movs	r3, #32
 8000896:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000898:	2300      	movs	r3, #0
 800089a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 f897 	bl	80039d4 <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008ac:	f7ff ffb0 	bl	8000810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <HAL_UART_MspInit+0xb8>)
 80008b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <HAL_UART_MspInit+0xb8>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_UART_MspInit+0xb8>)
 80008be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_UART_MspInit+0xb8>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <HAL_UART_MspInit+0xb8>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_MspInit+0xb8>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80008e0:	f001 fdba 	bl	8002458 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80008e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008fe:	2308      	movs	r3, #8
 8000900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000904:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_UART_MspInit+0xbc>)
 800090c:	f001 fabc 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	37b0      	adds	r7, #176	; 0xb0
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40008000 	.word	0x40008000
 800091c:	40021000 	.word	0x40021000
 8000920:	48001800 	.word	0x48001800

08000924 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_QSPI_MspInit+0x7c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d128      	bne.n	8000998 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_QSPI_MspInit+0x80>)
 8000948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <HAL_QSPI_MspInit+0x80>)
 800094c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000950:	6513      	str	r3, [r2, #80]	; 0x50
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_QSPI_MspInit+0x80>)
 8000954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_QSPI_MspInit+0x80>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_QSPI_MspInit+0x80>)
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_QSPI_MspInit+0x80>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000976:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800097a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000988:	230a      	movs	r3, #10
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_QSPI_MspInit+0x84>)
 8000994:	f001 fa78 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	a0001000 	.word	0xa0001000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48001000 	.word	0x48001000

080009ac <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_QSPI_MspDeInit+0x30>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10a      	bne.n	80009d4 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_QSPI_MspDeInit+0x34>)
 80009c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_QSPI_MspDeInit+0x34>)
 80009c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009c8:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80009ca:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <HAL_QSPI_MspDeInit+0x38>)
 80009d0:	f001 fbec 	bl	80021ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	a0001000 	.word	0xa0001000
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48001000 	.word	0x48001000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f001 f8fe 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
  }

  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <_write+0x28>)
 8000a90:	f003 fcb8 	bl	8004404 <HAL_UART_Transmit>
  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000008c 	.word	0x2000008c

08000aa4 <_close>:

int _close(int file)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000acc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_isatty>:

int _isatty(int file)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f004 f95e 	bl	8004dfc <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20050000 	.word	0x20050000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	2000015c 	.word	0x2000015c
 8000b74:	200001d8 	.word	0x200001d8

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f004 f91d 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bce:	f7ff fce1 	bl	8000594 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be0:	08006238 	.word	0x08006238
  ldr r2, =_sbss
 8000be4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000be8:	200001d4 	.word	0x200001d4

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>

08000bee <FlashCircularBufferInit>:
 * @brief  Function to Initialize Circular Buffer
 * @param  buffer    Pointer to flash circular buffer
 * @retval None
*/
void FlashCircularBufferInit(flash_circular_buffer* buffer)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  buffer->tx_data = NULL;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
  buffer->rx_data = NULL;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  buffer->head = FLASH_BUFFER_START_ADDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  buffer->tail = FLASH_BUFFER_START_ADDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  buffer->data_available = false;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	741a      	strb	r2, [r3, #16]
  buffer->memory_available = true;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	745a      	strb	r2, [r3, #17]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <WriteDatasetToFlash>:
  return err_code;

}
#else
fcb_status WriteDatasetToFlash(flash_circular_buffer* buffer, void* dataToBuffer, uint16_t length)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	4613      	mov	r3, r2
 8000c34:	80fb      	strh	r3, [r7, #6]
  uint32_t dst_addr,next_addr,err_code,data_len;
  uint32_t current_addr;
  uint32_t head_sector, tail_sector;

  buffer->tx_data = (data_info*)dataToBuffer;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	601a      	str	r2, [r3, #0]
  dst_addr = buffer->head;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	61fb      	str	r3, [r7, #28]
  data_len = sizeof(data_info);
 8000c42:	230c      	movs	r3, #12
 8000c44:	61bb      	str	r3, [r7, #24]


  /* Calculate next address */  
  if((buffer->head + data_len) >= FLASH_BUFFER_SIZE)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a36      	ldr	r2, [pc, #216]	; (8000d28 <WriteDatasetToFlash+0x100>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d902      	bls.n	8000c5a <WriteDatasetToFlash+0x32>
  {
    next_addr = FLASH_BUFFER_START_ADDR;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
 8000c58:	e004      	b.n	8000c64 <WriteDatasetToFlash+0x3c>
  }
  else
  {
    next_addr = (unsigned int)(buffer->head + data_len);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4413      	add	r3, r2
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  }

  
  /*Check whether the buffer head and tail sectors are going to overlap*/
  if(buffer->tail > buffer->head)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d91b      	bls.n	8000ca8 <WriteDatasetToFlash+0x80>
  {
    // if the difference is less than 4096
    if((buffer->tail - buffer->head) < QSPI_BLOCK_SIZE_64K)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7e:	d213      	bcs.n	8000ca8 <WriteDatasetToFlash+0x80>
    {
      //Calculate current sector number from the address
      head_sector = next_addr / QSPI_BLOCK_SIZE_64K;
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	617b      	str	r3, [r7, #20]
      tail_sector = buffer->tail / QSPI_BLOCK_SIZE_64K;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	613b      	str	r3, [r7, #16]

      /*Check whether head and tail sector are same */
      if(head_sector == tail_sector)
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d108      	bne.n	8000ca8 <WriteDatasetToFlash+0x80>
      {
        printf("FCB : No empty locations to write\r\n. Next Addr: %lu  Tail: %u\n",next_addr,buffer->tail);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c9e:	4823      	ldr	r0, [pc, #140]	; (8000d2c <WriteDatasetToFlash+0x104>)
 8000ca0:	f004 f8de 	bl	8004e60 <iprintf>
        return FCB_ADDR_ON_SAME_SECTOR;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	e03b      	b.n	8000d20 <WriteDatasetToFlash+0xf8>
  /* Check availablity of free memory locations */
 /* Not storing the data into the location just before the circular buffer tail 
 (meaning that the head would advance to the current location of the tail),
  we're about to overflow the buffer and so we don't write the character or
  advance the head. */
  if(next_addr != buffer->tail)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d02c      	beq.n	8000d0c <WriteDatasetToFlash+0xe4>
  {
    /* Write data to flash and increment the head position */
    err_code = Flash_Write(buffer->tx_data, data_len, dst_addr);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	69b9      	ldr	r1, [r7, #24]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f9e4 	bl	8001088 <Flash_Write>
 8000cc0:	6238      	str	r0, [r7, #32]

    if(err_code == QSPI_OK)
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d113      	bne.n	8000cf0 <WriteDatasetToFlash+0xc8>
    {
      buffer->head = buffer->head + data_len;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	441a      	add	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	609a      	str	r2, [r3, #8]
      buffer->data_available = true;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	741a      	strb	r2, [r3, #16]
      printf("Flash Buffer Current Head: %d, Tail: %d \n",fcb.head,fcb.tail);
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <WriteDatasetToFlash+0x108>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <WriteDatasetToFlash+0x108>)
 8000ce0:	68d2      	ldr	r2, [r2, #12]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <WriteDatasetToFlash+0x10c>)
 8000ce6:	f004 f8bb 	bl	8004e60 <iprintf>
      err_code = QSPI_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
 8000cee:	e004      	b.n	8000cfa <WriteDatasetToFlash+0xd2>
    }
    else
    {
      printf("FCB: Write Operation Failed\n");
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <WriteDatasetToFlash+0x110>)
 8000cf2:	f004 f93b 	bl	8004f6c <puts>
      err_code = QSPI_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	623b      	str	r3, [r7, #32]
    }

    
    /*Reset the circular buffer head to start position,
     if the head has reached the end address of memory */  
    if(buffer->head == FLASH_BUFFER_END_ADDR)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <WriteDatasetToFlash+0x114>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d10b      	bne.n	8000d1c <WriteDatasetToFlash+0xf4>
    {
      buffer->head = FLASH_BUFFER_START_ADDR;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	e007      	b.n	8000d1c <WriteDatasetToFlash+0xf4>
    }
  }
  else
  {
    buffer->memory_available = false;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	745a      	strb	r2, [r3, #17]
    err_code = FCB_NO_EMPTY_LOCATIONS;
 8000d12:	2304      	movs	r3, #4
 8000d14:	623b      	str	r3, [r7, #32]
    printf("FCB Status: No empty locations");
 8000d16:	480a      	ldr	r0, [pc, #40]	; (8000d40 <WriteDatasetToFlash+0x118>)
 8000d18:	f004 f8a2 	bl	8004e60 <iprintf>
  }
  
  return err_code;
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	b2db      	uxtb	r3, r3

}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	0001fff7 	.word	0x0001fff7
 8000d2c:	08005f3c 	.word	0x08005f3c
 8000d30:	20000160 	.word	0x20000160
 8000d34:	08005f7c 	.word	0x08005f7c
 8000d38:	08005fa8 	.word	0x08005fa8
 8000d3c:	0001fff8 	.word	0x0001fff8
 8000d40:	08005fc4 	.word	0x08005fc4

08000d44 <ReadDatasetFromFlash>:

  return err_code;
}
#else
fcb_status ReadDatasetFromFlash(flash_circular_buffer* buffer,void* rcvBuffer,uint32_t length)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t src_addr,data_len,err_code;

	  /* Storing recieve buffer */
  buffer->rx_data = (data_info*)rcvBuffer;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	605a      	str	r2, [r3, #4]

  data_len = length;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	61bb      	str	r3, [r7, #24]
  src_addr = buffer->tail;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	617b      	str	r3, [r7, #20]

  /*Check wether data is available to read from flash */  
  if(src_addr != buffer->head)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d02b      	beq.n	8000dc2 <ReadDatasetFromFlash+0x7e>
  {
      err_code = Flash_Read(buffer->rx_data, data_len,src_addr);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	69b9      	ldr	r1, [r7, #24]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f9a4 	bl	80010c0 <Flash_Read>
 8000d78:	61f8      	str	r0, [r7, #28]

      if(err_code == FCB_OK)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10e      	bne.n	8000d9e <ReadDatasetFromFlash+0x5a>
      {
        buffer->tail = buffer->tail + data_len;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	441a      	add	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	60da      	str	r2, [r3, #12]
        printf("Flash Buffer Current Head: %d, Tail: %d \n",fcb.head,fcb.tail);
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <ReadDatasetFromFlash+0x9c>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <ReadDatasetFromFlash+0x9c>)
 8000d92:	68d2      	ldr	r2, [r2, #12]
 8000d94:	4619      	mov	r1, r3
 8000d96:	4813      	ldr	r0, [pc, #76]	; (8000de4 <ReadDatasetFromFlash+0xa0>)
 8000d98:	f004 f862 	bl	8004e60 <iprintf>
 8000d9c:	e004      	b.n	8000da8 <ReadDatasetFromFlash+0x64>
      }
      else
      {
        err_code = FCB_READ_ERROR;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
        printf("FCB: Read Operation failed");
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <ReadDatasetFromFlash+0xa4>)
 8000da4:	f004 f85c 	bl	8004e60 <iprintf>
      }   

    /*Reset the circular buffer tail to start position,
     if the tail has reached the end address of memory */  
    if(buffer->tail == FLASH_BUFFER_END_ADDR)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <ReadDatasetFromFlash+0xa8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d102      	bne.n	8000db8 <ReadDatasetFromFlash+0x74>
    {
      /* Reset the tail position */
      buffer->tail = FLASH_BUFFER_START_ADDR;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
    }
    
    /* Erase the read sector if the buffer head isn't locating memory
     in that sector */
      EraseFlashSector(buffer,src_addr);
 8000db8:	6979      	ldr	r1, [r7, #20]
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f81a 	bl	8000df4 <EraseFlashSector>
 8000dc0:	e007      	b.n	8000dd2 <ReadDatasetFromFlash+0x8e>
      
  }
  else
  {
    buffer->data_available = false;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	741a      	strb	r2, [r3, #16]
    printf("FCB Status: No data available to read\n");
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <ReadDatasetFromFlash+0xac>)
 8000dca:	f004 f8cf 	bl	8004f6c <puts>
    err_code = FCB_NO_DATA_AVAILABLE;
 8000dce:	2306      	movs	r3, #6
 8000dd0:	61fb      	str	r3, [r7, #28]
  }

  return err_code;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	b2db      	uxtb	r3, r3
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3720      	adds	r7, #32
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000160 	.word	0x20000160
 8000de4:	08005f7c 	.word	0x08005f7c
 8000de8:	08005fe4 	.word	0x08005fe4
 8000dec:	0001fff8 	.word	0x0001fff8
 8000df0:	08006000 	.word	0x08006000

08000df4 <EraseFlashSector>:
 return  err_code;

}
#else
fcb_status EraseFlashSector(flash_circular_buffer* buffer,uint32_t sector_addr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t err_code = FCB_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]


 /* Erase the previosuly read sector as soon as the current flash buffer tail
  position points to adddress on the next */
 switch(buffer->tail)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	4a62      	ldr	r2, [pc, #392]	; (8000f90 <EraseFlashSector+0x19c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d057      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e0c:	4a60      	ldr	r2, [pc, #384]	; (8000f90 <EraseFlashSector+0x19c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f200 80b7 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e14:	4a5f      	ldr	r2, [pc, #380]	; (8000f94 <EraseFlashSector+0x1a0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d050      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e1a:	4a5e      	ldr	r2, [pc, #376]	; (8000f94 <EraseFlashSector+0x1a0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	f200 80b0 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e22:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8000e26:	d049      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e28:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8000e2c:	f200 80a9 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e30:	4a59      	ldr	r2, [pc, #356]	; (8000f98 <EraseFlashSector+0x1a4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d042      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <EraseFlashSector+0x1a4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	f200 80a2 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e3e:	4a57      	ldr	r2, [pc, #348]	; (8000f9c <EraseFlashSector+0x1a8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d03b      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e44:	4a55      	ldr	r2, [pc, #340]	; (8000f9c <EraseFlashSector+0x1a8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	f200 809b 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e4c:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <EraseFlashSector+0x1ac>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d034      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e52:	4a53      	ldr	r2, [pc, #332]	; (8000fa0 <EraseFlashSector+0x1ac>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	f200 8094 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e5a:	4a52      	ldr	r2, [pc, #328]	; (8000fa4 <EraseFlashSector+0x1b0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d02d      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e60:	4a50      	ldr	r2, [pc, #320]	; (8000fa4 <EraseFlashSector+0x1b0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	f200 808d 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e68:	4a4f      	ldr	r2, [pc, #316]	; (8000fa8 <EraseFlashSector+0x1b4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d026      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e6e:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <EraseFlashSector+0x1b4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f200 8086 	bhi.w	8000f82 <EraseFlashSector+0x18e>
 8000e76:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <EraseFlashSector+0x1b8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d01f      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <EraseFlashSector+0x1b8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d87f      	bhi.n	8000f82 <EraseFlashSector+0x18e>
 8000e82:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <EraseFlashSector+0x1bc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d019      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e88:	f1b3 1f05 	cmp.w	r3, #327685	; 0x50005
 8000e8c:	d279      	bcs.n	8000f82 <EraseFlashSector+0x18e>
 8000e8e:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <EraseFlashSector+0x1c0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d013      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000e94:	4a47      	ldr	r2, [pc, #284]	; (8000fb4 <EraseFlashSector+0x1c0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d873      	bhi.n	8000f82 <EraseFlashSector+0x18e>
 8000e9a:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <EraseFlashSector+0x1c4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d00d      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000ea0:	4a45      	ldr	r2, [pc, #276]	; (8000fb8 <EraseFlashSector+0x1c4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d86d      	bhi.n	8000f82 <EraseFlashSector+0x18e>
 8000ea6:	4a45      	ldr	r2, [pc, #276]	; (8000fbc <EraseFlashSector+0x1c8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d007      	beq.n	8000ebc <EraseFlashSector+0xc8>
 8000eac:	4a43      	ldr	r2, [pc, #268]	; (8000fbc <EraseFlashSector+0x1c8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d867      	bhi.n	8000f82 <EraseFlashSector+0x18e>
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d04a      	beq.n	8000f4c <EraseFlashSector+0x158>
 8000eb6:	4a42      	ldr	r2, [pc, #264]	; (8000fc0 <EraseFlashSector+0x1cc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d162      	bne.n	8000f82 <EraseFlashSector+0x18e>
   case ((BLOCK14_ADDR - ((QSPI_BLOCK_SIZE_64K * 14) % sizeof(data_info)) + sizeof(data_info))):

       /* Check if buffer head position is ahead or behind
        the tail position. If head position is greate than
        tail erase the previos sector */
       if(buffer->head > buffer->tail)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d918      	bls.n	8000efa <EraseFlashSector+0x106>
       {
         err_code = Flash_Erase(QSPI_ERASE_LEN_64KB,sector_addr - sizeof(data_info));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	3b0c      	subs	r3, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f892 	bl	8000ff8 <Flash_Erase>
 8000ed4:	60f8      	str	r0, [r7, #12]

         if(err_code == QSPI_OK)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10b      	bne.n	8000ef4 <EraseFlashSector+0x100>
         {
           printf("FCB : Erased Sector Address: %lu\n",sector_addr- sizeof(data_info));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	3b0c      	subs	r3, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4838      	ldr	r0, [pc, #224]	; (8000fc4 <EraseFlashSector+0x1d0>)
 8000ee4:	f003 ffbc 	bl	8004e60 <iprintf>
           HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fec3 	bl	8001c74 <HAL_Delay>
           err_code = FCB_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
           printf("FCB: Header sector and Tail sector matches.\r\nCant erase memory\n");
           err_code = FCB_ADDR_ON_SAME_SECTOR;
         }
       }

      break;
 8000ef2:	e046      	b.n	8000f82 <EraseFlashSector+0x18e>
           err_code = FCB_ERASE_ERROR;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	60fb      	str	r3, [r7, #12]
      break;
 8000ef8:	e043      	b.n	8000f82 <EraseFlashSector+0x18e>
         if((int)(buffer->head/QSPI_BLOCK_SIZE_64K) != (int)((buffer->tail - sizeof(data_info))/QSPI_BLOCK_SIZE_64K))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	461a      	mov	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	3b0c      	subs	r3, #12
 8000f08:	0c1b      	lsrs	r3, r3, #16
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d018      	beq.n	8000f40 <EraseFlashSector+0x14c>
           err_code = Flash_Erase(QSPI_ERASE_LEN_64KB,sector_addr - sizeof(data_info));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3b0c      	subs	r3, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	2002      	movs	r0, #2
 8000f16:	f000 f86f 	bl	8000ff8 <Flash_Erase>
 8000f1a:	60f8      	str	r0, [r7, #12]
           if(err_code == QSPI_OK)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10b      	bne.n	8000f3a <EraseFlashSector+0x146>
             printf("FCB : Erased Sector Address: %lu\n",sector_addr- sizeof(data_info));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3b0c      	subs	r3, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4826      	ldr	r0, [pc, #152]	; (8000fc4 <EraseFlashSector+0x1d0>)
 8000f2a:	f003 ff99 	bl	8004e60 <iprintf>
             HAL_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 fea0 	bl	8001c74 <HAL_Delay>
             err_code = FCB_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
      break;
 8000f38:	e023      	b.n	8000f82 <EraseFlashSector+0x18e>
             err_code = FCB_ERASE_ERROR;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	60fb      	str	r3, [r7, #12]
      break;
 8000f3e:	e020      	b.n	8000f82 <EraseFlashSector+0x18e>
           printf("FCB: Header sector and Tail sector matches.\r\nCant erase memory\n");
 8000f40:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <EraseFlashSector+0x1d4>)
 8000f42:	f004 f813 	bl	8004f6c <puts>
           err_code = FCB_ADDR_ON_SAME_SECTOR;
 8000f46:	2305      	movs	r3, #5
 8000f48:	60fb      	str	r3, [r7, #12]
      break;
 8000f4a:	e01a      	b.n	8000f82 <EraseFlashSector+0x18e>

      /* Event generated when tail rollsover the buffer */
     case FLASH_BUFFER_START_ADDR :
       /* Check if the buffer header position is not overlapping
       the last sector in the flash buffer */
       if((int)(buffer->head/QSPI_BLOCK_SIZE_64K) != ((FLASH_BUFFER_END_ADDR - sizeof(data_info))/QSPI_BLOCK_SIZE_64K))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d014      	beq.n	8000f80 <EraseFlashSector+0x18c>
       {
         err_code = Flash_Erase(QSPI_ERASE_LEN_64KB,sector_addr - sizeof(data_info));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3b0c      	subs	r3, #12
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f000 f84b 	bl	8000ff8 <Flash_Erase>
 8000f62:	60f8      	str	r0, [r7, #12]

         if(err_code == QSPI_OK)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10a      	bne.n	8000f80 <EraseFlashSector+0x18c>
         {
           printf("FCB : Erased Sector Address: %lu\n",sector_addr- sizeof(data_info));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3b0c      	subs	r3, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <EraseFlashSector+0x1d0>)
 8000f72:	f003 ff75 	bl	8004e60 <iprintf>
           HAL_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 fe7c 	bl	8001c74 <HAL_Delay>
           err_code = FCB_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
         }
       }
      break;
 8000f80:	bf00      	nop

 }


 return  err_code;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	b2db      	uxtb	r3, r3

}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	000e0004 	.word	0x000e0004
 8000f94:	000d0008 	.word	0x000d0008
 8000f98:	000b0004 	.word	0x000b0004
 8000f9c:	000a0008 	.word	0x000a0008
 8000fa0:	0009000c 	.word	0x0009000c
 8000fa4:	00080004 	.word	0x00080004
 8000fa8:	00070008 	.word	0x00070008
 8000fac:	0006000c 	.word	0x0006000c
 8000fb0:	00050004 	.word	0x00050004
 8000fb4:	00040008 	.word	0x00040008
 8000fb8:	0003000c 	.word	0x0003000c
 8000fbc:	00020004 	.word	0x00020004
 8000fc0:	00010008 	.word	0x00010008
 8000fc4:	08006028 	.word	0x08006028
 8000fc8:	0800604c 	.word	0x0800604c

08000fcc <Flash_Init>:
 * @brief  Function to initialize External Flash Memory
 * @param  None      
 * @retval BSP status
*/
uint32_t Flash_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
    int32_t err_code = QSPI_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]

    err_code = BSP_QSPI_Init();
 8000fd6:	f000 f88f 	bl	80010f8 <BSP_QSPI_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	607b      	str	r3, [r7, #4]
    if(err_code != QSPI_OK)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <Flash_Init+0x1e>
    {
      printf("QSPI Flash Initialization failed\r\n");
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <Flash_Init+0x28>)
 8000fe6:	f003 ffc1 	bl	8004f6c <puts>
    }

    return err_code;
 8000fea:	687b      	ldr	r3, [r7, #4]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0800608c 	.word	0x0800608c

08000ff8 <Flash_Erase>:
                                       QSPI_ERASE_LEN_ALL
 * @param  start_address  Start Address to Erase data
 * @retval BSP status
*/
uint32_t Flash_Erase(qspi_erase_len len,uint32_t start_address)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
    int32_t err_code = QSPI_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]

    switch (len)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d01e      	beq.n	800104c <Flash_Erase+0x54>
 800100e:	2b03      	cmp	r3, #3
 8001010:	dc27      	bgt.n	8001062 <Flash_Erase+0x6a>
 8001012:	2b01      	cmp	r3, #1
 8001014:	d002      	beq.n	800101c <Flash_Erase+0x24>
 8001016:	2b02      	cmp	r3, #2
 8001018:	d00c      	beq.n	8001034 <Flash_Erase+0x3c>
    		printf("FLASH : Erase failed\r\n");
    	}
    	break;

    default:
    	break;
 800101a:	e022      	b.n	8001062 <Flash_Erase+0x6a>
    	err_code = BSP_QSPI_Erase_Sector(start_address);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f000 f99f 	bl	8001360 <BSP_QSPI_Erase_Sector>
 8001022:	4603      	mov	r3, r0
 8001024:	60fb      	str	r3, [r7, #12]
    	if(err_code != QSPI_OK)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d01c      	beq.n	8001066 <Flash_Erase+0x6e>
    		printf("Sector : Erase failed\r\n");
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <Flash_Erase+0x84>)
 800102e:	f003 ff9d 	bl	8004f6c <puts>
    	break;
 8001032:	e018      	b.n	8001066 <Flash_Erase+0x6e>
    	err_code = BSP_QSPI_Erase_Block(start_address);
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f000 f9d7 	bl	80013e8 <BSP_QSPI_Erase_Block>
 800103a:	4603      	mov	r3, r0
 800103c:	60fb      	str	r3, [r7, #12]
    	if(err_code != QSPI_OK)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d012      	beq.n	800106a <Flash_Erase+0x72>
    		printf("Block : Erase failed\r\n");
 8001044:	480e      	ldr	r0, [pc, #56]	; (8001080 <Flash_Erase+0x88>)
 8001046:	f003 ff91 	bl	8004f6c <puts>
    	break;
 800104a:	e00e      	b.n	800106a <Flash_Erase+0x72>
    	err_code = BSP_QSPI_Erase_Chip();
 800104c:	f000 fa10 	bl	8001470 <BSP_QSPI_Erase_Chip>
 8001050:	4603      	mov	r3, r0
 8001052:	60fb      	str	r3, [r7, #12]
    	if(err_code != QSPI_OK)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <Flash_Erase+0x76>
    		printf("FLASH : Erase failed\r\n");
 800105a:	480a      	ldr	r0, [pc, #40]	; (8001084 <Flash_Erase+0x8c>)
 800105c:	f003 ff86 	bl	8004f6c <puts>
    	break;
 8001060:	e005      	b.n	800106e <Flash_Erase+0x76>
    	break;
 8001062:	bf00      	nop
 8001064:	e004      	b.n	8001070 <Flash_Erase+0x78>
    	break;
 8001066:	bf00      	nop
 8001068:	e002      	b.n	8001070 <Flash_Erase+0x78>
    	break;
 800106a:	bf00      	nop
 800106c:	e000      	b.n	8001070 <Flash_Erase+0x78>
    	break;
 800106e:	bf00      	nop
    }

    return err_code;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	080060b0 	.word	0x080060b0
 8001080:	080060c8 	.word	0x080060c8
 8001084:	080060e0 	.word	0x080060e0

08001088 <Flash_Write>:
 * @param  tx_buffer_length   length of data to be written
 * @param  dst_address        Destination address to write data
 * @retval BSP status
*/
uint32_t Flash_Write(void * p_tx_buffer,size_t tx_buffer_length,uint32_t dst_address)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    int32_t err_code = QSPI_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

    err_code = BSP_QSPI_Write(p_tx_buffer,dst_address,tx_buffer_length);
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 f8e1 	bl	8001264 <BSP_QSPI_Write>
 80010a2:	4603      	mov	r3, r0
 80010a4:	617b      	str	r3, [r7, #20]
    if(err_code != QSPI_OK)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <Flash_Write+0x2a>
    {
       printf("FLASH : Flash write operation failed\r\n");
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <Flash_Write+0x34>)
 80010ae:	f003 ff5d 	bl	8004f6c <puts>
    }

    return err_code;
 80010b2:	697b      	ldr	r3, [r7, #20]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	080060f8 	.word	0x080060f8

080010c0 <Flash_Read>:
 * @param  rx_buffer_length   length of data to be read
 * @param  src_address        Source address to read data from 
 * @retval BSP status
*/
uint32_t Flash_Read(void * p_rx_buffer,size_t rx_buffer_length,uint32_t src_address)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
    int32_t err_code = QSPI_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

    err_code = BSP_QSPI_Read(p_rx_buffer, src_address, rx_buffer_length);
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f879 	bl	80011cc <BSP_QSPI_Read>
 80010da:	4603      	mov	r3, r0
 80010dc:	617b      	str	r3, [r7, #20]
    if(err_code != QSPI_OK)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <Flash_Read+0x2a>
    {
       printf("FLASH : Flash read operation failed\r\n");
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <Flash_Read+0x34>)
 80010e6:	f003 ff41 	bl	8004f6c <puts>
    }
        
    return err_code;
 80010ea:	697b      	ldr	r3, [r7, #20]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08006120 	.word	0x08006120

080010f8 <BSP_QSPI_Init>:

/**
 * @brief  Initializes the QSPI interface.
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Init(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
	QSPIHandle.Instance = QUADSPI;
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001100:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <BSP_QSPI_Init+0xd0>)
 8001102:	601a      	str	r2, [r3, #0]
	/* Call the DeInit function to reset the driver */
	if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK) {
 8001104:	482f      	ldr	r0, [pc, #188]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001106:	f001 fa33 	bl	8002570 <HAL_QSPI_DeInit>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <BSP_QSPI_Init+0x1c>
		return QSPI_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e053      	b.n	80011bc <BSP_QSPI_Init+0xc4>

	/* System level initialization */
//	BSP_QSPI_MspInit(&QSPIHandle, NULL);

	/* QSPI initialization */
	QSPIHandle.Init.ClockPrescaler = 0;
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
	QSPIHandle.Init.FifoThreshold = 4;
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 800111c:	2204      	movs	r2, #4
 800111e:	609a      	str	r2, [r3, #8]
	QSPIHandle.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800112a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <BSP_QSPI_Init+0x4a>
  {
    return 32U;
 800113e:	2320      	movs	r3, #32
 8001140:	e003      	b.n	800114a <BSP_QSPI_Init+0x52>
  }
  return __builtin_clz(value);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	b2db      	uxtb	r3, r3
	QSPIHandle.Init.FlashSize = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 800114a:	3b01      	subs	r3, #1
 800114c:	461a      	mov	r2, r3
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001150:	611a      	str	r2, [r3, #16]
	QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
	QSPIHandle.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
	QSPIHandle.Init.FlashID = QSPI_FLASH_ID_1;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
	QSPIHandle.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]

	if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK) {
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 800116c:	f001 f984 	bl	8002478 <HAL_QSPI_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <BSP_QSPI_Init+0x82>
		return QSPI_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e020      	b.n	80011bc <BSP_QSPI_Init+0xc4>
	}

	/* QSPI memory reset */
	if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK) {
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 800117c:	f000 f9ea 	bl	8001554 <QSPI_ResetMemory>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <BSP_QSPI_Init+0x92>
		return QSPI_NOT_SUPPORTED;
 8001186:	2304      	movs	r3, #4
 8001188:	e018      	b.n	80011bc <BSP_QSPI_Init+0xc4>
	}

	/* Put QSPI memory in QPI mode */
	if (QSPI_EnterMemory_QPI(&QSPIHandle) != QSPI_OK) {
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 800118c:	f000 fc08 	bl	80019a0 <QSPI_EnterMemory_QPI>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <BSP_QSPI_Init+0xa2>
		return QSPI_NOT_SUPPORTED;
 8001196:	2304      	movs	r3, #4
 8001198:	e010      	b.n	80011bc <BSP_QSPI_Init+0xc4>
	}

	/* Set the QSPI memory in 4-bytes address mode */
	if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK) {
 800119a:	480a      	ldr	r0, [pc, #40]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 800119c:	f000 fb02 	bl	80017a4 <QSPI_EnterFourBytesAddress>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <BSP_QSPI_Init+0xb2>
		return QSPI_NOT_SUPPORTED;
 80011a6:	2304      	movs	r3, #4
 80011a8:	e008      	b.n	80011bc <BSP_QSPI_Init+0xc4>
	}

	/* Configuration of the dummy cycles on QSPI memory side */
	if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK) {
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <BSP_QSPI_Init+0xcc>)
 80011ac:	f000 fb35 	bl	800181a <QSPI_DummyCyclesCfg>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <BSP_QSPI_Init+0xc2>
		return QSPI_NOT_SUPPORTED;
 80011b6:	2304      	movs	r3, #4
 80011b8:	e000      	b.n	80011bc <BSP_QSPI_Init+0xc4>
	}

	return QSPI_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000174 	.word	0x20000174
 80011c8:	a0001000 	.word	0xa0001000

080011cc <BSP_QSPI_Read>:
 * @param  pData: Pointer to data to be read
 * @param  ReadAddr: Read start address
 * @param  Size: Size of data to read
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint8_t ret = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80011de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.Instruction = READ_CMD;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	623b      	str	r3, [r7, #32]
	s_command.Address = ReadAddr;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DataMode = QSPI_DATA_1_LINE;
 80011fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DummyCycles = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.NbData = Size;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800120e:	2300      	movs	r3, #0
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001212:	2300      	movs	r3, #0
 8001214:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Configure the command */
	if ((ret = HAL_QSPI_Command(&QSPIHandle, &s_command,
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4619      	mov	r1, r3
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <BSP_QSPI_Read+0x94>)
 8001222:	f001 f9c9 	bl	80025b8 <HAL_QSPI_Command>
 8001226:	4603      	mov	r3, r0
 8001228:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800122c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <BSP_QSPI_Read+0x6c>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e00f      	b.n	8001258 <BSP_QSPI_Read+0x8c>
	}

	/* Reception of the data */
	if ((ret = HAL_QSPI_Receive(&QSPIHandle, pData,
 8001238:	f241 3288 	movw	r2, #5000	; 0x1388
 800123c:	68f9      	ldr	r1, [r7, #12]
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <BSP_QSPI_Read+0x94>)
 8001240:	f001 faaa 	bl	8002798 <HAL_QSPI_Receive>
 8001244:	4603      	mov	r3, r0
 8001246:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800124a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <BSP_QSPI_Read+0x8a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <BSP_QSPI_Read+0x8c>
	}

	return QSPI_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3750      	adds	r7, #80	; 0x50
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000174 	.word	0x20000174

08001264 <BSP_QSPI_Write>:
 * @param  WriteAddr: Write start address
 * @param  Size: Size of data to write
 * @retval QSPI memory status
 */

uint8_t BSP_QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b096      	sub	sp, #88	; 0x58
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_size = MX25L512_PAGE_SIZE - (WriteAddr % MX25L512_PAGE_SIZE);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001278:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > Size) {
 800127a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d901      	bls.n	8001286 <BSP_QSPI_Write+0x22>
		current_size = Size;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = WriteAddr;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = WriteAddr + Size;
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Initialize the program command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.Instruction = PAGE_PROG_CMD;
 8001298:	2302      	movs	r3, #2
 800129a:	617b      	str	r3, [r7, #20]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800129c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80012a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a6:	623b      	str	r3, [r7, #32]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DataMode          = QSPI_DATA_1_LINE;
 80012ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DummyCycles = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80012ba:	2300      	movs	r3, #0
 80012bc:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80012be:	2300      	movs	r3, #0
 80012c0:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Perform the write page by page */
	do {
		s_command.Address = current_addr;
 80012c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012c4:	61bb      	str	r3, [r7, #24]
		s_command.NbData = current_size;
 80012c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Enable write operations */
		if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <BSP_QSPI_Write+0xf8>)
 80012cc:	f000 fbb4 	bl	8001a38 <QSPI_WriteEnable>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <BSP_QSPI_Write+0x76>
			return QSPI_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e03b      	b.n	8001352 <BSP_QSPI_Write+0xee>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4619      	mov	r1, r3
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <BSP_QSPI_Write+0xf8>)
 80012e6:	f001 f967 	bl	80025b8 <HAL_QSPI_Command>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <BSP_QSPI_Write+0x90>
				HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
			return QSPI_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e02e      	b.n	8001352 <BSP_QSPI_Write+0xee>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&QSPIHandle, pData,
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <BSP_QSPI_Write+0xf8>)
 80012fc:	f001 f9ba 	bl	8002674 <HAL_QSPI_Transmit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <BSP_QSPI_Write+0xa6>
				HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
			return QSPI_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e023      	b.n	8001352 <BSP_QSPI_Write+0xee>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady(&QSPIHandle,
 800130a:	f241 3188 	movw	r1, #5000	; 0x1388
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <BSP_QSPI_Write+0xf8>)
 8001310:	f000 fbe6 	bl	8001ae0 <QSPI_AutoPollingMemReady>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <BSP_QSPI_Write+0xba>
				HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
			return QSPI_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e019      	b.n	8001352 <BSP_QSPI_Write+0xee>
		}
		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 800131e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001322:	4413      	add	r3, r2
 8001324:	653b      	str	r3, [r7, #80]	; 0x50
		pData += current_size;
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MX25L512_PAGE_SIZE) > end_addr) ?
 800132e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001330:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MX25L512_PAGE_SIZE;
 8001334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001336:	429a      	cmp	r2, r3
 8001338:	d203      	bcs.n	8001342 <BSP_QSPI_Write+0xde>
 800133a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800133c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	e001      	b.n	8001346 <BSP_QSPI_Write+0xe2>
 8001342:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 8001346:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr < end_addr);
 8001348:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800134a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800134c:	429a      	cmp	r2, r3
 800134e:	d3b8      	bcc.n	80012c2 <BSP_QSPI_Write+0x5e>

	return QSPI_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3758      	adds	r7, #88	; 0x58
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000174 	.word	0x20000174

08001360 <BSP_QSPI_Erase_Sector>:
/**
 * @brief  Erases the specified sector of the QSPI memory.
 * @param  SectorAddress: Sector address to erase
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Erase_Sector(uint32_t SectorAddress) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b090      	sub	sp, #64	; 0x40
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the erase command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136c:	623b      	str	r3, [r7, #32]
	s_command.Instruction = SECTOR_ERASE_CMD;
 800136e:	2320      	movs	r3, #32
 8001370:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8001372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	617b      	str	r3, [r7, #20]
	s_command.Address = SectorAddress;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001392:	2300      	movs	r3, #0
 8001394:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001396:	2300      	movs	r3, #0
 8001398:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Enable write operations */
	if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 800139a:	4812      	ldr	r0, [pc, #72]	; (80013e4 <BSP_QSPI_Erase_Sector+0x84>)
 800139c:	f000 fb4c 	bl	8001a38 <QSPI_WriteEnable>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <BSP_QSPI_Erase_Sector+0x4a>
		return QSPI_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e017      	b.n	80013da <BSP_QSPI_Erase_Sector+0x7a>
	}

	/* Send the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4619      	mov	r1, r3
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <BSP_QSPI_Erase_Sector+0x84>)
 80013b6:	f001 f8ff 	bl	80025b8 <HAL_QSPI_Command>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <BSP_QSPI_Erase_Sector+0x64>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00a      	b.n	80013da <BSP_QSPI_Erase_Sector+0x7a>
	}

	/* Configure automatic polling mode to wait for end of erase */
	if (QSPI_AutoPollingMemReady(&QSPIHandle,
 80013c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <BSP_QSPI_Erase_Sector+0x84>)
 80013ca:	f000 fb89 	bl	8001ae0 <QSPI_AutoPollingMemReady>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <BSP_QSPI_Erase_Sector+0x78>
			MX25L512_SECTOR_ERASE_MAX_TIME) != QSPI_OK) {
		return QSPI_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <BSP_QSPI_Erase_Sector+0x7a>
	}

	return QSPI_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3740      	adds	r7, #64	; 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000174 	.word	0x20000174

080013e8 <BSP_QSPI_Erase_Block>:
/**
 * @brief  Erases the specified block of the QSPI memory.
 * @param  BlockAddress: Block address to erase
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b090      	sub	sp, #64	; 0x40
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the erase command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80013f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f4:	623b      	str	r3, [r7, #32]
	s_command.Instruction = BLOCK_ERASE_64KB;
 80013f6:	23d8      	movs	r3, #216	; 0xd8
 80013f8:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80013fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	617b      	str	r3, [r7, #20]
	s_command.Address = BlockAddress;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800141e:	2300      	movs	r3, #0
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Enable write operations */
	if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 8001422:	4812      	ldr	r0, [pc, #72]	; (800146c <BSP_QSPI_Erase_Block+0x84>)
 8001424:	f000 fb08 	bl	8001a38 <QSPI_WriteEnable>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <BSP_QSPI_Erase_Block+0x4a>
		return QSPI_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e017      	b.n	8001462 <BSP_QSPI_Erase_Block+0x7a>
	}

	/* Send the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4619      	mov	r1, r3
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <BSP_QSPI_Erase_Block+0x84>)
 800143e:	f001 f8bb 	bl	80025b8 <HAL_QSPI_Command>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <BSP_QSPI_Erase_Block+0x64>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e00a      	b.n	8001462 <BSP_QSPI_Erase_Block+0x7a>
	}

	/* Configure automatic polling mode to wait for end of erase */
	if (QSPI_AutoPollingMemReady(&QSPIHandle,
 800144c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <BSP_QSPI_Erase_Block+0x84>)
 8001452:	f000 fb45 	bl	8001ae0 <QSPI_AutoPollingMemReady>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <BSP_QSPI_Erase_Block+0x78>
			MX25L512_SECTOR_ERASE_MAX_TIME) != QSPI_OK) {
		return QSPI_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <BSP_QSPI_Erase_Block+0x7a>
	}

	return QSPI_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3740      	adds	r7, #64	; 0x40
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000174 	.word	0x20000174

08001470 <BSP_QSPI_Erase_Chip>:

/**
 * @brief  Erases the entire QSPI memory.
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Erase_Chip(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;

	/* Initialize the erase command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147a:	61bb      	str	r3, [r7, #24]
	s_command.Instruction = BULK_ERASE_CMD;
 800147c:	23c7      	movs	r3, #199	; 0xc7
 800147e:	603b      	str	r3, [r7, #0]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
	s_command.DataMode = QSPI_DATA_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DummyCycles = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Enable write operations */
	if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <BSP_QSPI_Erase_Chip+0x60>)
 800149e:	f000 facb 	bl	8001a38 <QSPI_WriteEnable>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <BSP_QSPI_Erase_Chip+0x3c>
		return QSPI_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e00c      	b.n	80014c6 <BSP_QSPI_Erase_Chip+0x56>
	}

	/* Send the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 80014ac:	463b      	mov	r3, r7
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4619      	mov	r1, r3
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <BSP_QSPI_Erase_Chip+0x60>)
 80014b6:	f001 f87f 	bl	80025b8 <HAL_QSPI_Command>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <BSP_QSPI_Erase_Chip+0x54>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <BSP_QSPI_Erase_Chip+0x56>
//	/* Configure automatic polling mode to wait for end of erase */
//	if (QSPI_AutoPollingMemReady(&QSPIHandle,
//			MX25L512_BULK_ERASE_MAX_TIME) != QSPI_OK) {
//		return QSPI_ERROR;
//	}
	return QSPI_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3738      	adds	r7, #56	; 0x38
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000174 	.word	0x20000174

080014d4 <BSP_QSPI_GetStatus>:

/**
 * @brief  Reads current status of the QSPI memory.
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_GetStatus(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b090      	sub	sp, #64	; 0x40
 80014d8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	uint8_t reg;

	/* Initialize the read flag status register command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	623b      	str	r3, [r7, #32]
	s_command.Instruction = READ_STATUS_REG_CMD;
 80014e0:	2305      	movs	r3, #5
 80014e2:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_1_LINE;
 80014ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
	s_command.NbData = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014fe:	2300      	movs	r3, #0
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001502:	2300      	movs	r3, #0
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Configure the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4619      	mov	r1, r3
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <BSP_QSPI_GetStatus+0x7c>)
 8001512:	f001 f851 	bl	80025b8 <HAL_QSPI_Command>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <BSP_QSPI_GetStatus+0x4c>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e013      	b.n	8001548 <BSP_QSPI_GetStatus+0x74>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001520:	1dfb      	adds	r3, r7, #7
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4619      	mov	r1, r3
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <BSP_QSPI_GetStatus+0x7c>)
 800152a:	f001 f935 	bl	8002798 <HAL_QSPI_Receive>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <BSP_QSPI_GetStatus+0x64>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e007      	b.n	8001548 <BSP_QSPI_GetStatus+0x74>
	}

	/* Check the value of the register*/
	if ((reg & MX25L512_SR_WIP) == 0) {
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <BSP_QSPI_GetStatus+0x72>
		return QSPI_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <BSP_QSPI_GetStatus+0x74>
	} else {
		return QSPI_BUSY;
 8001546:	2302      	movs	r3, #2
	}
}
 8001548:	4618      	mov	r0, r3
 800154a:	3740      	adds	r7, #64	; 0x40
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000174 	.word	0x20000174

08001554 <QSPI_ResetMemory>:
/**
 * @brief  This function reset the QSPI memory.
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b098      	sub	sp, #96	; 0x60
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	QSPI_AutoPollingTypeDef s_config;
	uint8_t reg;

	/* Send command RESET command in QPI mode (QUAD I/Os) */
	/* Initialize the reset enable command */
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800155c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001560:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = RESET_ENABLE_CMD;
 8001562:	2366      	movs	r3, #102	; 0x66
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800156a:	2300      	movs	r3, #0
 800156c:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_NONE;
 800156e:	2300      	movs	r3, #0
 8001570:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800157a:	2300      	movs	r3, #0
 800157c:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800157e:	2300      	movs	r3, #0
 8001580:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4619      	mov	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f001 f813 	bl	80025b8 <HAL_QSPI_Command>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <QSPI_ResetMemory+0x48>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0ff      	b.n	800179c <QSPI_ResetMemory+0x248>
	}
	/* Send the reset memory command */
	s_command.Instruction = RESET_MEMORY_CMD;
 800159c:	2399      	movs	r3, #153	; 0x99
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80015a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4619      	mov	r1, r3
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f001 f804 	bl	80025b8 <HAL_QSPI_Command>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <QSPI_ResetMemory+0x66>
			!= HAL_OK) {
		return QSPI_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0f0      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* Send command RESET command in SPI mode */
	/* Initialize the reset enable command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = RESET_ENABLE_CMD;
 80015c0:	2366      	movs	r3, #102	; 0x66
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80015c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fff2 	bl	80025b8 <HAL_QSPI_Command>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <QSPI_ResetMemory+0x8a>
			!= HAL_OK) {
		return QSPI_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0de      	b.n	800179c <QSPI_ResetMemory+0x248>
	}
	/* Send the reset memory command */
	s_command.Instruction = RESET_MEMORY_CMD;
 80015de:	2399      	movs	r3, #153	; 0x99
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4619      	mov	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 ffe3 	bl	80025b8 <HAL_QSPI_Command>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <QSPI_ResetMemory+0xa8>
			!= HAL_OK) {
		return QSPI_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0cf      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
	HAL_Delay(1000);
 80015fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001600:	f000 fb38 	bl	8001c74 <HAL_Delay>

	/* Configure automatic polling mode to wait the WIP bit=0 */
	s_config.Match = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
	s_config.Mask = MX25L512_SR_WIP;
 8001608:	2301      	movs	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
	s_config.StatusBytesSize = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
	s_config.Interval = 0x10;
 8001614:	2310      	movs	r3, #16
 8001616:	61bb      	str	r3, [r7, #24]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800161e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001622:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001624:	2305      	movs	r3, #5
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800162c:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 800162e:	f107 0210 	add.w	r2, r7, #16
 8001632:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001636:	f241 3388 	movw	r3, #5000	; 0x1388
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f001 f949 	bl	80028d2 <HAL_QSPI_AutoPolling>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <QSPI_ResetMemory+0xf6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0a8      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* Initialize the reading of status register */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001650:	2305      	movs	r3, #5
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001654:	2300      	movs	r3, #0
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001658:	2300      	movs	r3, #0
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_1_LINE;
 800165c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.NbData = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800166e:	2300      	movs	r3, #0
 8001670:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001672:	2300      	movs	r3, #0
 8001674:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4619      	mov	r1, r3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 ff99 	bl	80025b8 <HAL_QSPI_Command>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <QSPI_ResetMemory+0x13c>
			!= HAL_OK) {
		return QSPI_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e085      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001690:	f107 030f 	add.w	r3, r7, #15
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f001 f87c 	bl	8002798 <HAL_QSPI_Receive>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <QSPI_ResetMemory+0x156>
			!= HAL_OK) {
		return QSPI_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e078      	b.n	800179c <QSPI_ResetMemory+0x248>
#ifdef DEBUG
//  DEBUG_PRINTF("Status Reg : %02x\r\n",reg);
#endif
	/* Enable write operations, command in 1 bit */
	/* Enable write operations */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = WRITE_ENABLE_CMD;
 80016b0:	2306      	movs	r3, #6
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_NONE;
 80016bc:	2300      	movs	r3, #0
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80016c8:	2300      	movs	r3, #0
 80016ca:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80016cc:	2300      	movs	r3, #0
 80016ce:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80016d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 ff6c 	bl	80025b8 <HAL_QSPI_Command>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <QSPI_ResetMemory+0x196>
			!= HAL_OK) {
		return QSPI_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e058      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* Configure automatic polling mode to wait for write enabling */
	s_config.Match = MX25L512_SR_WREN;
 80016ea:	2302      	movs	r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
	s_config.Mask = MX25L512_SR_WREN;
 80016ee:	2302      	movs	r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
	s_config.StatusBytesSize = 1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
	s_config.Interval = 0x10;
 80016fa:	2310      	movs	r3, #16
 80016fc:	61bb      	str	r3, [r7, #24]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80016fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001702:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.Instruction = READ_STATUS_REG_CMD;
 8001704:	2305      	movs	r3, #5
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170c:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 800170e:	f107 0210 	add.w	r2, r7, #16
 8001712:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001716:	f241 3388 	movw	r3, #5000	; 0x1388
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f001 f8d9 	bl	80028d2 <HAL_QSPI_AutoPolling>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <QSPI_ResetMemory+0x1d6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e038      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* Update the configuration register with new dummy cycles */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800172a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001730:	2301      	movs	r3, #1
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001738:	2300      	movs	r3, #0
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_1_LINE;
 800173c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.NbData = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800174e:	2300      	movs	r3, #0
 8001750:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001752:	2300      	movs	r3, #0
 8001754:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
	reg |= MX25L512_SR_QUADEN;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	b2db      	uxtb	r3, r3
 800175e:	73fb      	strb	r3, [r7, #15]

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 ff24 	bl	80025b8 <HAL_QSPI_Command>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <QSPI_ResetMemory+0x226>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e010      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* Transmission of the data */
	if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800177a:	f107 030f 	add.w	r3, r7, #15
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 ff75 	bl	8002674 <HAL_QSPI_Transmit>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <QSPI_ResetMemory+0x240>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e003      	b.n	800179c <QSPI_ResetMemory+0x248>
	}

	/* 40ms  Write Status/Configuration Register Cycle Time */
	HAL_Delay(40);
 8001794:	2028      	movs	r0, #40	; 0x28
 8001796:	f000 fa6d 	bl	8001c74 <HAL_Delay>

	return QSPI_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3760      	adds	r7, #96	; 0x60
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <QSPI_EnterFourBytesAddress>:
/**
 * @brief  This function set the QSPI memory in 4-byte address mode
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b090      	sub	sp, #64	; 0x40
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	623b      	str	r3, [r7, #32]
	s_command.Instruction = ENTER_4_BYTE_ADDR_MODE_CMD;
 80017b2:	23b7      	movs	r3, #183	; 0xb7
 80017b4:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_NONE;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Enable write operations */
	if (QSPI_WriteEnable(hqspi) != QSPI_OK) {
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f930 	bl	8001a38 <QSPI_WriteEnable>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <QSPI_EnterFourBytesAddress+0x3e>
		return QSPI_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e017      	b.n	8001812 <QSPI_EnterFourBytesAddress+0x6e>
	}

	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4619      	mov	r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fee3 	bl	80025b8 <HAL_QSPI_Command>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <QSPI_EnterFourBytesAddress+0x58>
			!= HAL_OK) {
		return QSPI_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e00a      	b.n	8001812 <QSPI_EnterFourBytesAddress+0x6e>
	}

	/* Configure automatic polling mode to wait the memory is ready */
	if (QSPI_AutoPollingMemReady(hqspi,
 80017fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f96d 	bl	8001ae0 <QSPI_AutoPollingMemReady>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <QSPI_EnterFourBytesAddress+0x6c>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
		return QSPI_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <QSPI_EnterFourBytesAddress+0x6e>
	}

	return QSPI_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3740      	adds	r7, #64	; 0x40
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <QSPI_DummyCyclesCfg>:
/**
 * @brief  This function configure the dummy cycles on memory side.
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b094      	sub	sp, #80	; 0x50
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint8_t reg[2];

	/* Initialize the reading of status register */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001828:	2305      	movs	r3, #5
 800182a:	60fb      	str	r3, [r7, #12]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DummyCycles = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
	s_command.NbData = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001846:	2300      	movs	r3, #0
 8001848:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800184a:	2300      	movs	r3, #0
 800184c:	643b      	str	r3, [r7, #64]	; 0x40

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fead 	bl	80025b8 <HAL_QSPI_Command>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <QSPI_DummyCyclesCfg+0x4e>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e097      	b.n	8001998 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 ff90 	bl	8002798 <HAL_QSPI_Receive>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <QSPI_DummyCyclesCfg+0x68>
			!= HAL_OK) {
		return QSPI_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e08a      	b.n	8001998 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Initialize the reading of configuration register */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.Instruction = READ_CFG_REG_CMD;
 8001888:	2315      	movs	r3, #21
 800188a:	60fb      	str	r3, [r7, #12]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DummyCycles = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
	s_command.NbData = 1;
 800189e:	2301      	movs	r3, #1
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80018aa:	2300      	movs	r3, #0
 80018ac:	643b      	str	r3, [r7, #64]	; 0x40

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fe7d 	bl	80025b8 <HAL_QSPI_Command>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <QSPI_DummyCyclesCfg+0xae>
			!= HAL_OK) {
		return QSPI_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e067      	b.n	8001998 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	3301      	adds	r3, #1
 80018ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 ff5f 	bl	8002798 <HAL_QSPI_Receive>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <QSPI_DummyCyclesCfg+0xca>
			!= HAL_OK) {
		return QSPI_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e059      	b.n	8001998 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Enable write operations */
	if (QSPI_WriteEnable(hqspi) != QSPI_OK) {
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f8a7 	bl	8001a38 <QSPI_WriteEnable>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <QSPI_DummyCyclesCfg+0xda>
		return QSPI_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e051      	b.n	8001998 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Update the configuration register with new dummy cycles */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80018f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80018fa:	2301      	movs	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DummyCycles = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
	s_command.NbData = 2;
 8001910:	2302      	movs	r3, #2
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40

	/* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
	MODIFY_REG(reg[1], MX25L512_CR_NB_DUMMY,
 8001920:	7a7b      	ldrb	r3, [r7, #9]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001928:	b25a      	sxtb	r2, r3
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 800193a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <QSPI_DummyCyclesCfg+0x12a>
    return 32U;
 8001940:	2320      	movs	r3, #32
 8001942:	e003      	b.n	800194c <QSPI_DummyCyclesCfg+0x132>
  return __builtin_clz(value);
 8001944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4619      	mov	r1, r3
 800194e:	2303      	movs	r3, #3
 8001950:	408b      	lsls	r3, r1
 8001952:	b25b      	sxtb	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	b25b      	sxtb	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	727b      	strb	r3, [r7, #9]
			(MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));

	/* Configure the write volatile configuration register command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4619      	mov	r1, r3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fe26 	bl	80025b8 <HAL_QSPI_Command>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <QSPI_DummyCyclesCfg+0x15c>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e010      	b.n	8001998 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Transmission of the data */
	if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fe77 	bl	8002674 <HAL_QSPI_Transmit>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <QSPI_DummyCyclesCfg+0x176>
			!= HAL_OK) {
		return QSPI_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e003      	b.n	8001998 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* 40ms  Write Status/Configuration Register Cycle Time */
	HAL_Delay(40);
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f000 f96f 	bl	8001c74 <HAL_Delay>

	return QSPI_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3750      	adds	r7, #80	; 0x50
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <QSPI_EnterMemory_QPI>:
/**
 * @brief  This function put QSPI memory in QPI mode (quad I/O).
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_EnterMemory_QPI(QSPI_HandleTypeDef *hqspi) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b096      	sub	sp, #88	; 0x58
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	QSPI_AutoPollingTypeDef s_config;

	/* Initialize the QPI enable command */
	/* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80019a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction = ENTER_QUAD_CMD;
 80019ae:	2335      	movs	r3, #53	; 0x35
 80019b0:	623b      	str	r3, [r7, #32]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DataMode = QSPI_DATA_NONE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DummyCycles = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80019c6:	2300      	movs	r3, #0
 80019c8:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80019ca:	2300      	movs	r3, #0
 80019cc:	657b      	str	r3, [r7, #84]	; 0x54

	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80019ce:	f107 0320 	add.w	r3, r7, #32
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fded 	bl	80025b8 <HAL_QSPI_Command>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <QSPI_EnterMemory_QPI+0x48>
			!= HAL_OK) {
		return QSPI_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e023      	b.n	8001a30 <QSPI_EnterMemory_QPI+0x90>
	}

	/* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
	s_config.Match = MX25L512_SR_QUADEN;
 80019e8:	2340      	movs	r3, #64	; 0x40
 80019ea:	60bb      	str	r3, [r7, #8]
	s_config.Mask = MX25L512_SR_QUADEN | MX25L512_SR_WIP;
 80019ec:	2341      	movs	r3, #65	; 0x41
 80019ee:	60fb      	str	r3, [r7, #12]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
	s_config.StatusBytesSize = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
	s_config.Interval = 0x10;
 80019f8:	2310      	movs	r3, #16
 80019fa:	613b      	str	r3, [r7, #16]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80019fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a00:	61fb      	str	r3, [r7, #28]

	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001a08:	2305      	movs	r3, #5
 8001a0a:	623b      	str	r3, [r7, #32]
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a10:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8001a12:	f107 0208 	add.w	r2, r7, #8
 8001a16:	f107 0120 	add.w	r1, r7, #32
 8001a1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 ff57 	bl	80028d2 <HAL_QSPI_AutoPolling>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <QSPI_EnterMemory_QPI+0x8e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <QSPI_EnterMemory_QPI+0x90>
	}

	return QSPI_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3758      	adds	r7, #88	; 0x58
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <QSPI_WriteEnable>:
/**
 * @brief  This function send a Write Enable and wait it is effective.
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b098      	sub	sp, #96	; 0x60
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	QSPI_AutoPollingTypeDef s_config;
	uint8_t ret = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/* Enable write operations */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.Instruction = WRITE_ENABLE_CMD;
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DataMode = QSPI_DATA_NONE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DummyCycles = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a64:	2300      	movs	r3, #0
 8001a66:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	65bb      	str	r3, [r7, #88]	; 0x58

	if ((ret = HAL_QSPI_Command(hqspi, &s_command,
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fd9e 	bl	80025b8 <HAL_QSPI_Command>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <QSPI_WriteEnable+0x56>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e024      	b.n	8001ad8 <QSPI_WriteEnable+0xa0>
	}

	/* Configure automatic polling mode to wait for write enabling */
	s_config.Match = 0x02;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	60fb      	str	r3, [r7, #12]
	s_config.Mask = 0x02;
 8001a92:	2302      	movs	r3, #2
 8001a94:	613b      	str	r3, [r7, #16]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
	s_config.StatusBytesSize = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	61bb      	str	r3, [r7, #24]
	s_config.Interval = 0x10;
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	617b      	str	r3, [r7, #20]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa6:	623b      	str	r3, [r7, #32]

	s_command.Instruction = READ_STATUS_REG_CMD;
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48

	if ((ret = HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8001ab2:	f107 020c 	add.w	r2, r7, #12
 8001ab6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001aba:	f241 3388 	movw	r3, #5000	; 0x1388
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 ff07 	bl	80028d2 <HAL_QSPI_AutoPolling>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <QSPI_WriteEnable+0x9e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <QSPI_WriteEnable+0xa0>
	}

	return QSPI_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3760      	adds	r7, #96	; 0x60
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <QSPI_AutoPollingMemReady>:
 * @param  hqspi: QSPI handle
 * @param  Timeout
 * @retval None
 */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi,
		uint32_t Timeout) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b096      	sub	sp, #88	; 0x58
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef s_command;
	QSPI_AutoPollingTypeDef s_config;

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001af0:	2305      	movs	r3, #5
 8001af2:	623b      	str	r3, [r7, #32]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b00:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DummyCycles = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	657b      	str	r3, [r7, #84]	; 0x54

	s_config.Match = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
	s_config.Mask = MX25L512_SR_WIP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
	s_config.StatusBytesSize = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
	s_config.Interval = 0x10;
 8001b22:	2310      	movs	r3, #16
 8001b24:	613b      	str	r3, [r7, #16]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2a:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK) {
 8001b2c:	f107 0208 	add.w	r2, r7, #8
 8001b30:	f107 0120 	add.w	r1, r7, #32
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fecb 	bl	80028d2 <HAL_QSPI_AutoPolling>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <QSPI_AutoPollingMemReady+0x66>
		return QSPI_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <QSPI_AutoPollingMemReady+0x68>
	}

	return QSPI_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3758      	adds	r7, #88	; 0x58
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <waitForFlashbusy>:

/**
 * @brief  this function chack the BUSY flash of flash.
 * @retval None
 */
uint8_t waitForFlashbusy(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	uint32_t Tickstart = HAL_GetTick();
 8001b56:	f000 f881 	bl	8001c5c <HAL_GetTick>
 8001b5a:	6078      	str	r0, [r7, #4]
	while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 8001b5c:	e009      	b.n	8001b72 <waitForFlashbusy+0x22>
		/* Check for the Timeout */
		if (FLASH_STATUSE_TIMEOUT != HAL_MAX_DELAY) {
			if (((HAL_GetTick() - Tickstart) > FLASH_STATUSE_TIMEOUT)
 8001b5e:	f000 f87d 	bl	8001c5c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <waitForFlashbusy+0x38>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <waitForFlashbusy+0x22>
					|| (FLASH_STATUSE_TIMEOUT == 0U)) {

				return (QSPI_BUSY);
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e005      	b.n	8001b7e <waitForFlashbusy+0x2e>
	while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 8001b72:	f7ff fcaf 	bl	80014d4 <BSP_QSPI_GetStatus>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d0f0      	beq.n	8001b5e <waitForFlashbusy+0xe>
			}
		}
	}
	return (QSPI_OK);
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	00030d40 	.word	0x00030d40

08001b8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b96:	2003      	movs	r0, #3
 8001b98:	f000 f942 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 f80d 	bl	8001bbc <HAL_InitTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	e001      	b.n	8001bb2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bae:	f7fe fe35 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_InitTick+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_InitTick+0x70>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_InitTick+0x6c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f941 	bl	8001e6e <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d809      	bhi.n	8001c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c00:	f000 f919 	bl	8001e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_InitTick+0x74>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e004      	b.n	8001c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e001      	b.n	8001c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	200001c0 	.word	0x200001c0

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	200001c0 	.word	0x200001c0

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff47 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff5c 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffb0 	bl	8001ddc <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e166      	b.n	8002166 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8158 	beq.w	8002160 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <HAL_GPIO_Init+0x40>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d130      	bne.n	8001f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efe:	2201      	movs	r2, #1
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 0201 	and.w	r2, r3, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d017      	beq.n	8001f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d123      	bne.n	8001fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80b2 	beq.w	8002160 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffc:	4b61      	ldr	r3, [pc, #388]	; (8002184 <HAL_GPIO_Init+0x2fc>)
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	4a60      	ldr	r2, [pc, #384]	; (8002184 <HAL_GPIO_Init+0x2fc>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6613      	str	r3, [r2, #96]	; 0x60
 8002008:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <HAL_GPIO_Init+0x2fc>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002014:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <HAL_GPIO_Init+0x300>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800203e:	d02b      	beq.n	8002098 <HAL_GPIO_Init+0x210>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_GPIO_Init+0x304>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d025      	beq.n	8002094 <HAL_GPIO_Init+0x20c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a51      	ldr	r2, [pc, #324]	; (8002190 <HAL_GPIO_Init+0x308>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d01f      	beq.n	8002090 <HAL_GPIO_Init+0x208>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a50      	ldr	r2, [pc, #320]	; (8002194 <HAL_GPIO_Init+0x30c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d019      	beq.n	800208c <HAL_GPIO_Init+0x204>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a4f      	ldr	r2, [pc, #316]	; (8002198 <HAL_GPIO_Init+0x310>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_GPIO_Init+0x200>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4e      	ldr	r2, [pc, #312]	; (800219c <HAL_GPIO_Init+0x314>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00d      	beq.n	8002084 <HAL_GPIO_Init+0x1fc>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <HAL_GPIO_Init+0x318>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x1f8>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a4c      	ldr	r2, [pc, #304]	; (80021a4 <HAL_GPIO_Init+0x31c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_GPIO_Init+0x1f4>
 8002078:	2307      	movs	r3, #7
 800207a:	e00e      	b.n	800209a <HAL_GPIO_Init+0x212>
 800207c:	2308      	movs	r3, #8
 800207e:	e00c      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002080:	2306      	movs	r3, #6
 8002082:	e00a      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002084:	2305      	movs	r3, #5
 8002086:	e008      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002088:	2304      	movs	r3, #4
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x212>
 800208c:	2303      	movs	r3, #3
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x212>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020aa:	4937      	ldr	r1, [pc, #220]	; (8002188 <HAL_GPIO_Init+0x300>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b8:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_GPIO_Init+0x320>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020dc:	4a32      	ldr	r2, [pc, #200]	; (80021a8 <HAL_GPIO_Init+0x320>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_GPIO_Init+0x320>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <HAL_GPIO_Init+0x320>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_GPIO_Init+0x320>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_GPIO_Init+0x320>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_GPIO_Init+0x320>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_GPIO_Init+0x320>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f ae91 	bne.w	8001e98 <HAL_GPIO_Init+0x10>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	48001400 	.word	0x48001400
 80021a0:	48001800 	.word	0x48001800
 80021a4:	48001c00 	.word	0x48001c00
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80021ba:	e0c9      	b.n	8002350 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80021bc:	2201      	movs	r2, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80bc 	beq.w	800234a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80021d2:	4a66      	ldr	r2, [pc, #408]	; (800236c <HAL_GPIO_DeInit+0x1c0>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021fa:	d02b      	beq.n	8002254 <HAL_GPIO_DeInit+0xa8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d025      	beq.n	8002250 <HAL_GPIO_DeInit+0xa4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <HAL_GPIO_DeInit+0x1c8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01f      	beq.n	800224c <HAL_GPIO_DeInit+0xa0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a5a      	ldr	r2, [pc, #360]	; (8002378 <HAL_GPIO_DeInit+0x1cc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d019      	beq.n	8002248 <HAL_GPIO_DeInit+0x9c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a59      	ldr	r2, [pc, #356]	; (800237c <HAL_GPIO_DeInit+0x1d0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_DeInit+0x98>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_GPIO_DeInit+0x1d4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_DeInit+0x94>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a57      	ldr	r2, [pc, #348]	; (8002384 <HAL_GPIO_DeInit+0x1d8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_DeInit+0x90>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_GPIO_DeInit+0x1dc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_DeInit+0x8c>
 8002234:	2307      	movs	r3, #7
 8002236:	e00e      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 8002238:	2308      	movs	r3, #8
 800223a:	e00c      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 800223c:	2306      	movs	r3, #6
 800223e:	e00a      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 8002240:	2305      	movs	r3, #5
 8002242:	e008      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 8002244:	2304      	movs	r3, #4
 8002246:	e006      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 8002248:	2303      	movs	r3, #3
 800224a:	e004      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 800224c:	2302      	movs	r3, #2
 800224e:	e002      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_GPIO_DeInit+0xaa>
 8002254:	2300      	movs	r3, #0
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	f002 0203 	and.w	r2, r2, #3
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	4093      	lsls	r3, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	429a      	cmp	r2, r3
 8002264:	d132      	bne.n	80022cc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	4947      	ldr	r1, [pc, #284]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 8002270:	4013      	ands	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002274:	4b45      	ldr	r3, [pc, #276]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	4943      	ldr	r1, [pc, #268]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 800227e:	4013      	ands	r3, r2
 8002280:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002282:	4b42      	ldr	r3, [pc, #264]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	4940      	ldr	r1, [pc, #256]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 800228c:	4013      	ands	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	493c      	ldr	r1, [pc, #240]	; (800238c <HAL_GPIO_DeInit+0x1e0>)
 800229a:	4013      	ands	r3, r2
 800229c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80022ae:	4a2f      	ldr	r2, [pc, #188]	; (800236c <HAL_GPIO_DeInit+0x1c0>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43da      	mvns	r2, r3
 80022be:	482b      	ldr	r0, [pc, #172]	; (800236c <HAL_GPIO_DeInit+0x1c0>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	400a      	ands	r2, r1
 80022c6:	3302      	adds	r3, #2
 80022c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	2103      	movs	r1, #3
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	08d2      	lsrs	r2, r2, #3
 8002300:	4019      	ands	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2103      	movs	r1, #3
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	2101      	movs	r1, #1
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2103      	movs	r1, #3
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	401a      	ands	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f af2f 	bne.w	80021bc <HAL_GPIO_DeInit+0x10>
  }
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40010000 	.word	0x40010000
 8002370:	48000400 	.word	0x48000400
 8002374:	48000800 	.word	0x48000800
 8002378:	48000c00 	.word	0x48000c00
 800237c:	48001000 	.word	0x48001000
 8002380:	48001400 	.word	0x48001400
 8002384:	48001800 	.word	0x48001800
 8002388:	48001c00 	.word	0x48001c00
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40007000 	.word	0x40007000

080023ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ba:	d130      	bne.n	800241e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d038      	beq.n	800243c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d2:	4a1e      	ldr	r2, [pc, #120]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2232      	movs	r2, #50	; 0x32
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	3301      	adds	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f0:	e002      	b.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002404:	d102      	bne.n	800240c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f2      	bne.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002418:	d110      	bne.n	800243c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e00f      	b.n	800243e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242a:	d007      	beq.n	800243c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002434:	4a05      	ldr	r2, [pc, #20]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40007000 	.word	0x40007000
 8002450:	20000000 	.word	0x20000000
 8002454:	431bde83 	.word	0x431bde83

08002458 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_PWREx_EnableVddIO2+0x1c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002466:	6053      	str	r3, [r2, #4]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40007000 	.word	0x40007000

08002478 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff fbec 	bl	8001c5c <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e069      	b.n	8002564 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fe fa3d 	bl	8000924 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80024aa:	f241 3188 	movw	r1, #5000	; 0x1388
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa86 	bl	80029c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	021a      	lsls	r2, r3, #8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2120      	movs	r1, #32
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fa7e 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80024e4:	7afb      	ldrb	r3, [r7, #11]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d137      	bne.n	800255a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024f4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6852      	ldr	r2, [r2, #4]
 80024fc:	0611      	lsls	r1, r2, #24
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68d2      	ldr	r2, [r2, #12]
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	69d2      	ldr	r2, [r2, #28]
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6a12      	ldr	r2, [r2, #32]
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_QSPI_Init+0xf4>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6912      	ldr	r2, [r2, #16]
 8002526:	0411      	lsls	r1, r2, #16
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6952      	ldr	r2, [r2, #20]
 800252c:	4311      	orrs	r1, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6992      	ldr	r2, [r2, #24]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002562:	7afb      	ldrb	r3, [r7, #11]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	ffe0f8fe 	.word	0xffe0f8fe

08002570 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e016      	b.n	80025b0 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fa0a 	bl	80009ac <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff fb4a 	bl	8001c5c <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_QSPI_Command+0x22>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e048      	b.n	800266c <HAL_QSPI_Command+0xb4>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d137      	bne.n	800265e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2200      	movs	r2, #0
 8002604:	2120      	movs	r1, #32
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f9e8 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d125      	bne.n	8002662 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002616:	2200      	movs	r2, #0
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fa15 	bl	8002a4a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b00      	cmp	r3, #0
 8002626:	d115      	bne.n	8002654 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2201      	movs	r2, #1
 8002630:	2102      	movs	r1, #2
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f9d2 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2202      	movs	r2, #2
 8002648:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002652:	e006      	b.n	8002662 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800265c:	e001      	b.n	8002662 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff faea 	bl	8001c5c <HAL_GetTick>
 8002688:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3320      	adds	r3, #32
 8002690:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_QSPI_Transmit+0x2e>
 800269e:	2302      	movs	r3, #2
 80026a0:	e076      	b.n	8002790 <HAL_QSPI_Transmit+0x11c>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d165      	bne.n	8002782 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d056      	beq.n	8002770 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2212      	movs	r2, #18
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80026f6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80026f8:	e01b      	b.n	8002732 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2201      	movs	r2, #1
 8002702:	2104      	movs	r1, #4
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f969 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800270e:	7ffb      	ldrb	r3, [r7, #31]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d113      	bne.n	800273c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1df      	bne.n	80026fa <HAL_QSPI_Transmit+0x86>
 800273a:	e000      	b.n	800273e <HAL_QSPI_Transmit+0xca>
          break;
 800273c:	bf00      	nop
      }

      if (status == HAL_OK)
 800273e:	7ffb      	ldrb	r3, [r7, #31]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d110      	bne.n	8002766 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2201      	movs	r2, #1
 800274c:	2102      	movs	r1, #2
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f944 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002758:	7ffb      	ldrb	r3, [r7, #31]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800276e:	e00a      	b.n	8002786 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f043 0208 	orr.w	r2, r3, #8
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	77fb      	strb	r3, [r7, #31]
 8002780:	e001      	b.n	8002786 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002782:	2302      	movs	r3, #2
 8002784:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800278e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff fa58 	bl	8001c5c <HAL_GetTick>
 80027ac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3320      	adds	r3, #32
 80027bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_QSPI_Receive+0x36>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e07d      	b.n	80028ca <HAL_QSPI_Receive+0x132>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d16c      	bne.n	80028bc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d05d      	beq.n	80028aa <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2222      	movs	r2, #34	; 0x22
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002826:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002830:	e01c      	b.n	800286c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2201      	movs	r2, #1
 800283a:	2106      	movs	r1, #6
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f8cd 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d114      	bne.n	8002876 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	1e5a      	subs	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1de      	bne.n	8002832 <HAL_QSPI_Receive+0x9a>
 8002874:	e000      	b.n	8002878 <HAL_QSPI_Receive+0xe0>
          break;
 8002876:	bf00      	nop
      }

      if (status == HAL_OK)
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d110      	bne.n	80028a0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2201      	movs	r2, #1
 8002886:	2102      	movs	r1, #2
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f8a7 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002892:	7ffb      	ldrb	r3, [r7, #31]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2202      	movs	r2, #2
 800289e:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028a8:	e00a      	b.n	80028c0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f043 0208 	orr.w	r2, r3, #8
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	77fb      	strb	r3, [r7, #31]
 80028ba:	e001      	b.n	80028c0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
 80028be:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80028c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b088      	sub	sp, #32
 80028d6:	af02      	add	r7, sp, #8
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff f9bc 	bl	8001c5c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_QSPI_AutoPolling+0x24>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e060      	b.n	80029b8 <HAL_QSPI_AutoPolling+0xe6>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d14f      	bne.n	80029aa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2242      	movs	r2, #66	; 0x42
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2200      	movs	r2, #0
 8002920:	2120      	movs	r1, #32
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f85a 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d13d      	bne.n	80029ae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6852      	ldr	r2, [r2, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6892      	ldr	r2, [r2, #8]
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002968:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f866 	bl	8002a4a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2201      	movs	r2, #1
 8002986:	2108      	movs	r1, #8
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f827 	bl	80029dc <QSPI_WaitFlagStateUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2208      	movs	r2, #8
 800299e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029a8:	e001      	b.n	80029ae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	649a      	str	r2, [r3, #72]	; 0x48
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029ec:	e01a      	b.n	8002a24 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f4:	d016      	beq.n	8002a24 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7ff f931 	bl	8001c5c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	f043 0201 	orr.w	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e00e      	b.n	8002a42 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf14      	ite	ne
 8002a32:	2301      	movne	r3, #1
 8002a34:	2300      	moveq	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1d6      	bne.n	80029ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <QSPI_Config+0x28>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002a64:	d005      	beq.n	8002a72 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80b9 	beq.w	8002bee <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05f      	beq.n	8002b44 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	6892      	ldr	r2, [r2, #8]
 8002a8c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d031      	beq.n	8002afa <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	049b      	lsls	r3, r3, #18
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	ea42 0103 	orr.w	r1, r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002aea:	f000 812e 	beq.w	8002d4a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	6852      	ldr	r2, [r2, #4]
 8002af6:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002af8:	e127      	b.n	8002d4a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	049b      	lsls	r3, r3, #18
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	ea42 0103 	orr.w	r1, r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	615a      	str	r2, [r3, #20]
}
 8002b42:	e102      	b.n	8002d4a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02e      	beq.n	8002baa <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	049b      	lsls	r3, r3, #18
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	ea42 0103 	orr.w	r1, r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b9a:	f000 80d6 	beq.w	8002d4a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	6852      	ldr	r2, [r2, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
}
 8002ba8:	e0cf      	b.n	8002d4a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	049b      	lsls	r3, r3, #18
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	ea42 0103 	orr.w	r1, r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	615a      	str	r2, [r3, #20]
}
 8002bec:	e0ad      	b.n	8002d4a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d058      	beq.n	8002ca8 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	6892      	ldr	r2, [r2, #8]
 8002bfe:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02d      	beq.n	8002c64 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	049b      	lsls	r3, r3, #18
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	ea42 0103 	orr.w	r1, r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c56:	d078      	beq.n	8002d4a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	6852      	ldr	r2, [r2, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	e072      	b.n	8002d4a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	431a      	orrs	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	049b      	lsls	r3, r3, #18
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	ea42 0103 	orr.w	r1, r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]
}
 8002ca6:	e050      	b.n	8002d4a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d02a      	beq.n	8002d06 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	049b      	lsls	r3, r3, #18
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cf8:	d027      	beq.n	8002d4a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	6852      	ldr	r2, [r2, #4]
 8002d02:	619a      	str	r2, [r3, #24]
}
 8002d04:	e021      	b.n	8002d4a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01d      	beq.n	8002d4a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	049b      	lsls	r3, r3, #18
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	615a      	str	r2, [r3, #20]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f000 bc08 	b.w	800357c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6c:	4b96      	ldr	r3, [pc, #600]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d76:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80e4 	beq.w	8002f56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4c>
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	f040 808b 	bne.w	8002eb2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	f040 8087 	bne.w	8002eb2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_OscConfig+0x64>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e3df      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1a      	ldr	r2, [r3, #32]
 8002dc0:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x7e>
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd4:	e005      	b.n	8002de2 <HAL_RCC_OscConfig+0x8a>
 8002dd6:	4b7c      	ldr	r3, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d223      	bcs.n	8002e2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fd92 	bl	8003914 <RCC_SetFlashLatencyFromMSIRange>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e3c0      	b.n	800357c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfa:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a72      	ldr	r2, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e00:	f043 0308 	orr.w	r3, r3, #8
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	496d      	ldr	r1, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e18:	4b6b      	ldr	r3, [pc, #428]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	4968      	ldr	r1, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
 8002e2c:	e025      	b.n	8002e7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2e:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a65      	ldr	r2, [pc, #404]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e34:	f043 0308 	orr.w	r3, r3, #8
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4960      	ldr	r1, [pc, #384]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	495b      	ldr	r1, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fd52 	bl	8003914 <RCC_SetFlashLatencyFromMSIRange>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e380      	b.n	800357c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e7a:	f000 fc87 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	4950      	ldr	r1, [pc, #320]	; (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <HAL_RCC_OscConfig+0x278>)
 8002e98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fe8c 	bl	8001bbc <HAL_InitTick>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d052      	beq.n	8002f54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	e364      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d032      	beq.n	8002f20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fec9 	bl	8001c5c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ece:	f7fe fec5 	bl	8001c5c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e34d      	b.n	800357c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a35      	ldr	r2, [pc, #212]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	f043 0308 	orr.w	r3, r3, #8
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4930      	ldr	r1, [pc, #192]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	492b      	ldr	r1, [pc, #172]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
 8002f1e:	e01a      	b.n	8002f56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a28      	ldr	r2, [pc, #160]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fe96 	bl	8001c5c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f34:	f7fe fe92 	bl	8001c5c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e31a      	b.n	800357c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1dc>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d073      	beq.n	800304a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_OscConfig+0x21c>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d10e      	bne.n	8002f8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d10b      	bne.n	8002f8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d063      	beq.n	8003048 <HAL_RCC_OscConfig+0x2f0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d15f      	bne.n	8003048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e2f7      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d106      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e025      	b.n	8002ff0 <HAL_RCC_OscConfig+0x298>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d114      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x280>
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a02      	ldr	r2, [pc, #8]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e013      	b.n	8002ff0 <HAL_RCC_OscConfig+0x298>
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08006148 	.word	0x08006148
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004
 8002fd8:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a9f      	ldr	r2, [pc, #636]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b9d      	ldr	r3, [pc, #628]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a9c      	ldr	r2, [pc, #624]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe30 	bl	8001c5c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fe2c 	bl	8001c5c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e2b4      	b.n	800357c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	4b92      	ldr	r3, [pc, #584]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x2a8>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe fe1c 	bl	8001c5c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fe18 	bl	8001c5c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e2a0      	b.n	800357c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d0>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d060      	beq.n	8003118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x310>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d119      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d116      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003068:	4b7c      	ldr	r3, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_OscConfig+0x328>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e27d      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	4973      	ldr	r1, [pc, #460]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003094:	e040      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d023      	beq.n	80030e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe fdd7 	bl	8001c5c <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe fdd3 	bl	8001c5c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e25b      	b.n	800357c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b62      	ldr	r3, [pc, #392]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	495f      	ldr	r1, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b5d      	ldr	r3, [pc, #372]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5c      	ldr	r2, [pc, #368]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fdb3 	bl	8001c5c <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe fdaf 	bl	8001c5c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e237      	b.n	800357c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d03c      	beq.n	800319e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7fe fd8e 	bl	8001c5c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fd8a 	bl	8001c5c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e212      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCC_OscConfig+0x3ec>
 8003164:	e01b      	b.n	800319e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	4a3b      	ldr	r2, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fd71 	bl	8001c5c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe fd6d 	bl	8001c5c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1f5      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003190:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ef      	bne.n	800317e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a6 	beq.w	80032f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b0:	4b2a      	ldr	r3, [pc, #168]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	; 0x58
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d118      	bne.n	8003216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fd34 	bl	8001c5c <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f8:	f7fe fd30 	bl	8001c5c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1b8      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x4d8>
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800322e:	e029      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d115      	bne.n	8003264 <HAL_RCC_OscConfig+0x50c>
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a03      	ldr	r2, [pc, #12]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40007000 	.word	0x40007000
 8003264:	4b9d      	ldr	r3, [pc, #628]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a9c      	ldr	r2, [pc, #624]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003274:	4b99      	ldr	r3, [pc, #612]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a98      	ldr	r2, [pc, #608]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d016      	beq.n	80032ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fe fce6 	bl	8001c5c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fe fce2 	bl	8001c5c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e168      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ed      	beq.n	8003294 <HAL_RCC_OscConfig+0x53c>
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fe fccf 	bl	8001c5c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe fccb 	bl	8001c5c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e151      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d8:	4b80      	ldr	r3, [pc, #512]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ed      	bne.n	80032c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	4a7a      	ldr	r2, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d03c      	beq.n	800337e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01c      	beq.n	8003346 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800330c:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 800330e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003312:	4a72      	ldr	r2, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fe fc9e 	bl	8001c5c <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003324:	f7fe fc9a 	bl	8001c5c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e122      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003336:	4b69      	ldr	r3, [pc, #420]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ef      	beq.n	8003324 <HAL_RCC_OscConfig+0x5cc>
 8003344:	e01b      	b.n	800337e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334c:	4a63      	ldr	r2, [pc, #396]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003356:	f7fe fc81 	bl	8001c5c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800335e:	f7fe fc7d 	bl	8001c5c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e105      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003370:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1ef      	bne.n	800335e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80f9 	beq.w	800357a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	2b02      	cmp	r3, #2
 800338e:	f040 80cf 	bne.w	8003530 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003392:	4b52      	ldr	r3, [pc, #328]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0203 	and.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d12c      	bne.n	8003400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	3b01      	subs	r3, #1
 80033b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d123      	bne.n	8003400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d11b      	bne.n	8003400 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d113      	bne.n	8003400 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d109      	bne.n	8003400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	3b01      	subs	r3, #1
 80033fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d071      	beq.n	80034e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d068      	beq.n	80034d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003406:	4b35      	ldr	r3, [pc, #212]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003412:	4b32      	ldr	r3, [pc, #200]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0ac      	b.n	800357c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2d      	ldr	r2, [pc, #180]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800342e:	f7fe fc15 	bl	8001c5c <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe fc11 	bl	8001c5c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e099      	b.n	800357c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f0      	bne.n	8003436 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003454:	4b21      	ldr	r3, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_RCC_OscConfig+0x788>)
 800345a:	4013      	ands	r3, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003464:	3a01      	subs	r2, #1
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800346e:	0212      	lsls	r2, r2, #8
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0552      	lsls	r2, r2, #21
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003482:	0852      	lsrs	r2, r2, #1
 8003484:	3a01      	subs	r2, #1
 8003486:	0652      	lsls	r2, r2, #25
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800348e:	06d2      	lsls	r2, r2, #27
 8003490:	430a      	orrs	r2, r1
 8003492:	4912      	ldr	r1, [pc, #72]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 8003494:	4313      	orrs	r3, r2
 8003496:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0f      	ldr	r2, [pc, #60]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 800349e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034b0:	f7fe fbd4 	bl	8001c5c <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe fbd0 	bl	8001c5c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e058      	b.n	800357c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d6:	e050      	b.n	800357a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e04f      	b.n	800357c <HAL_RCC_OscConfig+0x824>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d144      	bne.n	800357a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a23      	ldr	r2, [pc, #140]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 80034f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 8003502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003506:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003508:	f7fe fba8 	bl	8001c5c <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe fba4 	bl	8001c5c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e02c      	b.n	800357c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x7b8>
 800352e:	e024      	b.n	800357a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d01f      	beq.n	8003576 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 800353c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fb8b 	bl	8001c5c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe fb87 	bl	8001c5c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e00f      	b.n	800357c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	4905      	ldr	r1, [pc, #20]	; (8003584 <HAL_RCC_OscConfig+0x82c>)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_OscConfig+0x830>)
 8003570:	4013      	ands	r3, r2
 8003572:	60cb      	str	r3, [r1, #12]
 8003574:	e001      	b.n	800357a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	feeefffc 	.word	0xfeeefffc

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0e7      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b75      	ldr	r3, [pc, #468]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d910      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b72      	ldr	r3, [pc, #456]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 0207 	bic.w	r2, r3, #7
 80035b6:	4970      	ldr	r1, [pc, #448]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b6e      	ldr	r3, [pc, #440]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0cf      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	4b66      	ldr	r3, [pc, #408]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d908      	bls.n	80035fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b63      	ldr	r3, [pc, #396]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4960      	ldr	r1, [pc, #384]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04c      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	4b5a      	ldr	r3, [pc, #360]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d121      	bne.n	8003662 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0a6      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362a:	4b54      	ldr	r3, [pc, #336]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e09a      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003642:	4b4e      	ldr	r3, [pc, #312]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e08e      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003652:	4b4a      	ldr	r3, [pc, #296]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e086      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b46      	ldr	r3, [pc, #280]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4943      	ldr	r1, [pc, #268]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fe faf2 	bl	8001c5c <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fe faee 	bl	8001c5c <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e06e      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b3a      	ldr	r3, [pc, #232]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d010      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b31      	ldr	r3, [pc, #196]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036bc:	429a      	cmp	r2, r3
 80036be:	d208      	bcs.n	80036d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	492b      	ldr	r1, [pc, #172]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d210      	bcs.n	8003702 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 0207 	bic.w	r2, r3, #7
 80036e8:	4923      	ldr	r1, [pc, #140]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f0:	4b21      	ldr	r3, [pc, #132]	; (8003778 <HAL_RCC_ClockConfig+0x1ec>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e036      	b.n	8003770 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370e:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4918      	ldr	r1, [pc, #96]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4910      	ldr	r1, [pc, #64]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003740:	f000 f824 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	490b      	ldr	r1, [pc, #44]	; (8003780 <HAL_RCC_ClockConfig+0x1f4>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1f8>)
 800375e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1fc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fa29 	bl	8001bbc <HAL_InitTick>
 800376a:	4603      	mov	r3, r0
 800376c:	72fb      	strb	r3, [r7, #11]

  return status;
 800376e:	7afb      	ldrb	r3, [r7, #11]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40022000 	.word	0x40022000
 800377c:	40021000 	.word	0x40021000
 8003780:	08006148 	.word	0x08006148
 8003784:	20000000 	.word	0x20000000
 8003788:	20000004 	.word	0x20000004

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d121      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d11e      	bne.n	80037fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037c0:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e005      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037e8:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b04      	cmp	r3, #4
 8003802:	d102      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_GetSysClockFreq+0x110>)
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	e004      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d101      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d134      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0xa6>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d003      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0xac>
 8003830:	e005      	b.n	800383e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_RCC_GetSysClockFreq+0x110>)
 8003834:	617b      	str	r3, [r7, #20]
      break;
 8003836:	e005      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800383a:	617b      	str	r3, [r7, #20]
      break;
 800383c:	e002      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	617b      	str	r3, [r7, #20]
      break;
 8003842:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	3301      	adds	r3, #1
 8003850:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	fb03 f202 	mul.w	r2, r3, r2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_GetSysClockFreq+0x108>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	0e5b      	lsrs	r3, r3, #25
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	3301      	adds	r3, #1
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003884:	69bb      	ldr	r3, [r7, #24]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	08006160 	.word	0x08006160
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000000 	.word	0x20000000

080038bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4904      	ldr	r1, [pc, #16]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08006158 	.word	0x08006158

080038e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038ec:	f7ff ffda 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	0adb      	lsrs	r3, r3, #11
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	4904      	ldr	r1, [pc, #16]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	08006158 	.word	0x08006158

08003914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800392c:	f7fe fd30 	bl	8002390 <HAL_PWREx_GetVoltageRange>
 8003930:	6178      	str	r0, [r7, #20]
 8003932:	e014      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	4a24      	ldr	r2, [pc, #144]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	6593      	str	r3, [r2, #88]	; 0x58
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800394c:	f7fe fd20 	bl	8002390 <HAL_PWREx_GetVoltageRange>
 8003950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003964:	d10b      	bne.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d919      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2ba0      	cmp	r3, #160	; 0xa0
 8003970:	d902      	bls.n	8003978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003972:	2302      	movs	r3, #2
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e013      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003978:	2301      	movs	r3, #1
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e010      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d902      	bls.n	800398a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003984:	2303      	movs	r3, #3
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	e00a      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d102      	bne.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003990:	2302      	movs	r3, #2
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	e004      	b.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b70      	cmp	r3, #112	; 0x70
 800399a:	d101      	bne.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800399c:	2301      	movs	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0207 	bic.w	r2, r3, #7
 80039a8:	4909      	ldr	r1, [pc, #36]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039dc:	2300      	movs	r3, #0
 80039de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039e0:	2300      	movs	r3, #0
 80039e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d041      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039f8:	d02a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039fe:	d824      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a04:	d008      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a0a:	d81e      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a14:	d010      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a16:	e018      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a18:	4b86      	ldr	r3, [pc, #536]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a85      	ldr	r2, [pc, #532]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a24:	e015      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 facd 	bl	8003fcc <RCCEx_PLLSAI1_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a36:	e00c      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3320      	adds	r3, #32
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fbb6 	bl	80041b0 <RCCEx_PLLSAI2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a48:	e003      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a4e:	e000      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a58:	4b76      	ldr	r3, [pc, #472]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a66:	4973      	ldr	r1, [pc, #460]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d041      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a88:	d02a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a8e:	d824      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a94:	d008      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a9a:	d81e      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aa6:	e018      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aa8:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a61      	ldr	r2, [pc, #388]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab4:	e015      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fa85 	bl	8003fcc <RCCEx_PLLSAI1_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ac6:	e00c      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3320      	adds	r3, #32
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fb6e 	bl	80041b0 <RCCEx_PLLSAI2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ad8:	e003      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ae8:	4b52      	ldr	r3, [pc, #328]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	494f      	ldr	r1, [pc, #316]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003afe:	e001      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7cfb      	ldrb	r3, [r7, #19]
 8003b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a0 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b16:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b36:	6593      	str	r3, [r2, #88]	; 0x58
 8003b38:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b48:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a3a      	ldr	r2, [pc, #232]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b54:	f7fe f882 	bl	8001c5c <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b5a:	e009      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fe f87e 	bl	8001c5c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b6e:	e005      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b70:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ef      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d15c      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b82:	4b2c      	ldr	r3, [pc, #176]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01f      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d019      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe f83d 	bl	8001c5c <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be4:	e00b      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fe f839 	bl	8001c5c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d902      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	74fb      	strb	r3, [r7, #19]
            break;
 8003bfc:	e006      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ec      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	4904      	ldr	r1, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c2a:	e009      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4ba6      	ldr	r3, [pc, #664]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4aa5      	ldr	r2, [pc, #660]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c5e:	4ba0      	ldr	r3, [pc, #640]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f023 0203 	bic.w	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	499c      	ldr	r1, [pc, #624]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c80:	4b97      	ldr	r3, [pc, #604]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f023 020c 	bic.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	4994      	ldr	r1, [pc, #592]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ca2:	4b8f      	ldr	r3, [pc, #572]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	498b      	ldr	r1, [pc, #556]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cc4:	4b86      	ldr	r3, [pc, #536]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	4983      	ldr	r1, [pc, #524]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ce6:	4b7e      	ldr	r3, [pc, #504]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	497a      	ldr	r1, [pc, #488]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d08:	4b75      	ldr	r3, [pc, #468]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	4972      	ldr	r1, [pc, #456]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	4969      	ldr	r1, [pc, #420]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5a:	4961      	ldr	r1, [pc, #388]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	4958      	ldr	r1, [pc, #352]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d90:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	4950      	ldr	r1, [pc, #320]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db2:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	4947      	ldr	r1, [pc, #284]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dd4:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dda:	f023 0203 	bic.w	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	493f      	ldr	r1, [pc, #252]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d028      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4936      	ldr	r1, [pc, #216]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4a31      	ldr	r2, [pc, #196]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e20:	60d3      	str	r3, [r2, #12]
 8003e22:	e011      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f8c9 	bl	8003fcc <RCCEx_PLLSAI1_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d028      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e54:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	491f      	ldr	r1, [pc, #124]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e72:	d106      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e74:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e7e:	60d3      	str	r3, [r2, #12]
 8003e80:	e011      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f89a 	bl	8003fcc <RCCEx_PLLSAI1_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec0:	4907      	ldr	r1, [pc, #28]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed2:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a02      	ldr	r2, [pc, #8]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003edc:	60d3      	str	r3, [r2, #12]
 8003ede:	e013      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003ee0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f869 	bl	8003fcc <RCCEx_PLLSAI1_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02f      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f14:	4b2c      	ldr	r3, [pc, #176]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f22:	4929      	ldr	r1, [pc, #164]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f846 	bl	8003fcc <RCCEx_PLLSAI1_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d014      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	74bb      	strb	r3, [r7, #18]
 8003f4e:	e011      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3320      	adds	r3, #32
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f925 	bl	80041b0 <RCCEx_PLLSAI2_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f90:	490d      	ldr	r1, [pc, #52]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fa4:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000

08003fcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fda:	4b74      	ldr	r3, [pc, #464]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d018      	beq.n	8004018 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fe6:	4b71      	ldr	r3, [pc, #452]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0203 	and.w	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d10d      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
       ||
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ffe:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
       ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d047      	beq.n	80040a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	e044      	b.n	80040a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d018      	beq.n	8004052 <RCCEx_PLLSAI1_Config+0x86>
 8004020:	2b03      	cmp	r3, #3
 8004022:	d825      	bhi.n	8004070 <RCCEx_PLLSAI1_Config+0xa4>
 8004024:	2b01      	cmp	r3, #1
 8004026:	d002      	beq.n	800402e <RCCEx_PLLSAI1_Config+0x62>
 8004028:	2b02      	cmp	r3, #2
 800402a:	d009      	beq.n	8004040 <RCCEx_PLLSAI1_Config+0x74>
 800402c:	e020      	b.n	8004070 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d11d      	bne.n	8004076 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800403e:	e01a      	b.n	8004076 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004040:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004048:	2b00      	cmp	r3, #0
 800404a:	d116      	bne.n	800407a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004050:	e013      	b.n	800407a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004052:	4b56      	ldr	r3, [pc, #344]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800405e:	4b53      	ldr	r3, [pc, #332]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800406e:	e006      	b.n	800407e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      break;
 8004074:	e004      	b.n	8004080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004076:	bf00      	nop
 8004078:	e002      	b.n	8004080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004086:	4b49      	ldr	r3, [pc, #292]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	430b      	orrs	r3, r1
 800409c:	4943      	ldr	r1, [pc, #268]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d17c      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040a8:	4b40      	ldr	r3, [pc, #256]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3f      	ldr	r2, [pc, #252]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b4:	f7fd fdd2 	bl	8001c5c <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ba:	e009      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040bc:	f7fd fdce 	bl	8001c5c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d902      	bls.n	80040d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	73fb      	strb	r3, [r7, #15]
        break;
 80040ce:	e005      	b.n	80040dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ef      	bne.n	80040bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d15f      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d110      	bne.n	800410a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80040f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6892      	ldr	r2, [r2, #8]
 80040f8:	0211      	lsls	r1, r2, #8
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68d2      	ldr	r2, [r2, #12]
 80040fe:	06d2      	lsls	r2, r2, #27
 8004100:	430a      	orrs	r2, r1
 8004102:	492a      	ldr	r1, [pc, #168]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	610b      	str	r3, [r1, #16]
 8004108:	e027      	b.n	800415a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d112      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004110:	4b26      	ldr	r3, [pc, #152]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004118:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6892      	ldr	r2, [r2, #8]
 8004120:	0211      	lsls	r1, r2, #8
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6912      	ldr	r2, [r2, #16]
 8004126:	0852      	lsrs	r2, r2, #1
 8004128:	3a01      	subs	r2, #1
 800412a:	0552      	lsls	r2, r2, #21
 800412c:	430a      	orrs	r2, r1
 800412e:	491f      	ldr	r1, [pc, #124]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	610b      	str	r3, [r1, #16]
 8004134:	e011      	b.n	800415a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800413e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	0211      	lsls	r1, r2, #8
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6952      	ldr	r2, [r2, #20]
 800414c:	0852      	lsrs	r2, r2, #1
 800414e:	3a01      	subs	r2, #1
 8004150:	0652      	lsls	r2, r2, #25
 8004152:	430a      	orrs	r2, r1
 8004154:	4915      	ldr	r1, [pc, #84]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800415a:	4b14      	ldr	r3, [pc, #80]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a13      	ldr	r2, [pc, #76]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004160:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004164:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fd fd79 	bl	8001c5c <HAL_GetTick>
 800416a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800416c:	e009      	b.n	8004182 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800416e:	f7fd fd75 	bl	8001c5c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d902      	bls.n	8004182 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	73fb      	strb	r3, [r7, #15]
          break;
 8004180:	e005      	b.n	800418e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ef      	beq.n	800416e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4903      	ldr	r1, [pc, #12]	; (80041ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000

080041b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041be:	4b69      	ldr	r3, [pc, #420]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d018      	beq.n	80041fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041ca:	4b66      	ldr	r3, [pc, #408]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0203 	and.w	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d10d      	bne.n	80041f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
       ||
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041e2:	4b60      	ldr	r3, [pc, #384]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
       ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d047      	beq.n	8004286 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	e044      	b.n	8004286 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d018      	beq.n	8004236 <RCCEx_PLLSAI2_Config+0x86>
 8004204:	2b03      	cmp	r3, #3
 8004206:	d825      	bhi.n	8004254 <RCCEx_PLLSAI2_Config+0xa4>
 8004208:	2b01      	cmp	r3, #1
 800420a:	d002      	beq.n	8004212 <RCCEx_PLLSAI2_Config+0x62>
 800420c:	2b02      	cmp	r3, #2
 800420e:	d009      	beq.n	8004224 <RCCEx_PLLSAI2_Config+0x74>
 8004210:	e020      	b.n	8004254 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004212:	4b54      	ldr	r3, [pc, #336]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d11d      	bne.n	800425a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004222:	e01a      	b.n	800425a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004224:	4b4f      	ldr	r3, [pc, #316]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d116      	bne.n	800425e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004234:	e013      	b.n	800425e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004236:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10f      	bne.n	8004262 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004242:	4b48      	ldr	r3, [pc, #288]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004252:	e006      	b.n	8004262 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      break;
 8004258:	e004      	b.n	8004264 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004262:	bf00      	nop
    }

    if(status == HAL_OK)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800426a:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6819      	ldr	r1, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	430b      	orrs	r3, r1
 8004280:	4938      	ldr	r1, [pc, #224]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d166      	bne.n	800435a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800428c:	4b35      	ldr	r3, [pc, #212]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a34      	ldr	r2, [pc, #208]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004298:	f7fd fce0 	bl	8001c5c <HAL_GetTick>
 800429c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800429e:	e009      	b.n	80042b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042a0:	f7fd fcdc 	bl	8001c5c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d902      	bls.n	80042b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	73fb      	strb	r3, [r7, #15]
        break;
 80042b2:	e005      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1ef      	bne.n	80042a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d149      	bne.n	800435a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6892      	ldr	r2, [r2, #8]
 80042dc:	0211      	lsls	r1, r2, #8
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68d2      	ldr	r2, [r2, #12]
 80042e2:	06d2      	lsls	r2, r2, #27
 80042e4:	430a      	orrs	r2, r1
 80042e6:	491f      	ldr	r1, [pc, #124]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	614b      	str	r3, [r1, #20]
 80042ec:	e011      	b.n	8004312 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6892      	ldr	r2, [r2, #8]
 80042fe:	0211      	lsls	r1, r2, #8
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6912      	ldr	r2, [r2, #16]
 8004304:	0852      	lsrs	r2, r2, #1
 8004306:	3a01      	subs	r2, #1
 8004308:	0652      	lsls	r2, r2, #25
 800430a:	430a      	orrs	r2, r1
 800430c:	4915      	ldr	r1, [pc, #84]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a13      	ldr	r2, [pc, #76]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7fd fc9d 	bl	8001c5c <HAL_GetTick>
 8004322:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004324:	e009      	b.n	800433a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004326:	f7fd fc99 	bl	8001c5c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d902      	bls.n	800433a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	73fb      	strb	r3, [r7, #15]
          break;
 8004338:	e005      	b.n	8004346 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ef      	beq.n	8004326 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	4903      	ldr	r1, [pc, #12]	; (8004364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e040      	b.n	80043fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fa6a 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8c0 	bl	800452c <UART_SetConfig>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e022      	b.n	80043fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fb6c 	bl	8004a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fbf3 	bl	8004be0 <UART_CheckIdleState>
 80043fa:	4603      	mov	r3, r0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004418:	2b20      	cmp	r3, #32
 800441a:	f040 8082 	bne.w	8004522 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_Transmit+0x26>
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e07a      	b.n	8004524 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_UART_Transmit+0x38>
 8004438:	2302      	movs	r3, #2
 800443a:	e073      	b.n	8004524 <HAL_UART_Transmit+0x120>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2221      	movs	r2, #33	; 0x21
 8004450:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004452:	f7fd fc03 	bl	8001c5c <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d108      	bne.n	8004484 <HAL_UART_Transmit+0x80>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004494:	e02d      	b.n	80044f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2200      	movs	r2, #0
 800449e:	2180      	movs	r1, #128	; 0x80
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fbe6 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e039      	b.n	8004524 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c2:	b292      	uxth	r2, r2
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3302      	adds	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e008      	b.n	80044e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	b292      	uxth	r2, r2
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1cb      	bne.n	8004496 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	2140      	movs	r1, #64	; 0x40
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fbb2 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e005      	b.n	8004524 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	431a      	orrs	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4ba4      	ldr	r3, [pc, #656]	; (80047ec <UART_SetConfig+0x2c0>)
 800455c:	4013      	ands	r3, r2
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004564:	430b      	orrs	r3, r1
 8004566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a99      	ldr	r2, [pc, #612]	; (80047f0 <UART_SetConfig+0x2c4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	4313      	orrs	r3, r2
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a90      	ldr	r2, [pc, #576]	; (80047f4 <UART_SetConfig+0x2c8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d126      	bne.n	8004604 <UART_SetConfig+0xd8>
 80045b6:	4b90      	ldr	r3, [pc, #576]	; (80047f8 <UART_SetConfig+0x2cc>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d81b      	bhi.n	80045fc <UART_SetConfig+0xd0>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0xa0>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045f5 	.word	0x080045f5
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e2:	e116      	b.n	8004812 <UART_SetConfig+0x2e6>
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e112      	b.n	8004812 <UART_SetConfig+0x2e6>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e10e      	b.n	8004812 <UART_SetConfig+0x2e6>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e10a      	b.n	8004812 <UART_SetConfig+0x2e6>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e106      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7c      	ldr	r2, [pc, #496]	; (80047fc <UART_SetConfig+0x2d0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d138      	bne.n	8004680 <UART_SetConfig+0x154>
 800460e:	4b7a      	ldr	r3, [pc, #488]	; (80047f8 <UART_SetConfig+0x2cc>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b0c      	cmp	r3, #12
 800461a:	d82d      	bhi.n	8004678 <UART_SetConfig+0x14c>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <UART_SetConfig+0xf8>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004659 	.word	0x08004659
 8004628:	08004679 	.word	0x08004679
 800462c:	08004679 	.word	0x08004679
 8004630:	08004679 	.word	0x08004679
 8004634:	08004669 	.word	0x08004669
 8004638:	08004679 	.word	0x08004679
 800463c:	08004679 	.word	0x08004679
 8004640:	08004679 	.word	0x08004679
 8004644:	08004661 	.word	0x08004661
 8004648:	08004679 	.word	0x08004679
 800464c:	08004679 	.word	0x08004679
 8004650:	08004679 	.word	0x08004679
 8004654:	08004671 	.word	0x08004671
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e0d8      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004660:	2302      	movs	r3, #2
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e0d4      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e0d0      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e0cc      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e0c8      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5e      	ldr	r2, [pc, #376]	; (8004800 <UART_SetConfig+0x2d4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d125      	bne.n	80046d6 <UART_SetConfig+0x1aa>
 800468a:	4b5b      	ldr	r3, [pc, #364]	; (80047f8 <UART_SetConfig+0x2cc>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d016      	beq.n	80046c6 <UART_SetConfig+0x19a>
 8004698:	2b30      	cmp	r3, #48	; 0x30
 800469a:	d818      	bhi.n	80046ce <UART_SetConfig+0x1a2>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d00a      	beq.n	80046b6 <UART_SetConfig+0x18a>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d814      	bhi.n	80046ce <UART_SetConfig+0x1a2>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <UART_SetConfig+0x182>
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d008      	beq.n	80046be <UART_SetConfig+0x192>
 80046ac:	e00f      	b.n	80046ce <UART_SetConfig+0x1a2>
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b4:	e0ad      	b.n	8004812 <UART_SetConfig+0x2e6>
 80046b6:	2302      	movs	r3, #2
 80046b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046bc:	e0a9      	b.n	8004812 <UART_SetConfig+0x2e6>
 80046be:	2304      	movs	r3, #4
 80046c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c4:	e0a5      	b.n	8004812 <UART_SetConfig+0x2e6>
 80046c6:	2308      	movs	r3, #8
 80046c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046cc:	e0a1      	b.n	8004812 <UART_SetConfig+0x2e6>
 80046ce:	2310      	movs	r3, #16
 80046d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d4:	e09d      	b.n	8004812 <UART_SetConfig+0x2e6>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4a      	ldr	r2, [pc, #296]	; (8004804 <UART_SetConfig+0x2d8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d125      	bne.n	800472c <UART_SetConfig+0x200>
 80046e0:	4b45      	ldr	r3, [pc, #276]	; (80047f8 <UART_SetConfig+0x2cc>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046ea:	2bc0      	cmp	r3, #192	; 0xc0
 80046ec:	d016      	beq.n	800471c <UART_SetConfig+0x1f0>
 80046ee:	2bc0      	cmp	r3, #192	; 0xc0
 80046f0:	d818      	bhi.n	8004724 <UART_SetConfig+0x1f8>
 80046f2:	2b80      	cmp	r3, #128	; 0x80
 80046f4:	d00a      	beq.n	800470c <UART_SetConfig+0x1e0>
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d814      	bhi.n	8004724 <UART_SetConfig+0x1f8>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <UART_SetConfig+0x1d8>
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d008      	beq.n	8004714 <UART_SetConfig+0x1e8>
 8004702:	e00f      	b.n	8004724 <UART_SetConfig+0x1f8>
 8004704:	2300      	movs	r3, #0
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e082      	b.n	8004812 <UART_SetConfig+0x2e6>
 800470c:	2302      	movs	r3, #2
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004712:	e07e      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004714:	2304      	movs	r3, #4
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e07a      	b.n	8004812 <UART_SetConfig+0x2e6>
 800471c:	2308      	movs	r3, #8
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e076      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004724:	2310      	movs	r3, #16
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e072      	b.n	8004812 <UART_SetConfig+0x2e6>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a35      	ldr	r2, [pc, #212]	; (8004808 <UART_SetConfig+0x2dc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d12a      	bne.n	800478c <UART_SetConfig+0x260>
 8004736:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <UART_SetConfig+0x2cc>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004744:	d01a      	beq.n	800477c <UART_SetConfig+0x250>
 8004746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800474a:	d81b      	bhi.n	8004784 <UART_SetConfig+0x258>
 800474c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004750:	d00c      	beq.n	800476c <UART_SetConfig+0x240>
 8004752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004756:	d815      	bhi.n	8004784 <UART_SetConfig+0x258>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <UART_SetConfig+0x238>
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d008      	beq.n	8004774 <UART_SetConfig+0x248>
 8004762:	e00f      	b.n	8004784 <UART_SetConfig+0x258>
 8004764:	2300      	movs	r3, #0
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476a:	e052      	b.n	8004812 <UART_SetConfig+0x2e6>
 800476c:	2302      	movs	r3, #2
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004772:	e04e      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004774:	2304      	movs	r3, #4
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477a:	e04a      	b.n	8004812 <UART_SetConfig+0x2e6>
 800477c:	2308      	movs	r3, #8
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e046      	b.n	8004812 <UART_SetConfig+0x2e6>
 8004784:	2310      	movs	r3, #16
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e042      	b.n	8004812 <UART_SetConfig+0x2e6>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <UART_SetConfig+0x2c4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d13a      	bne.n	800480c <UART_SetConfig+0x2e0>
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <UART_SetConfig+0x2cc>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a4:	d01a      	beq.n	80047dc <UART_SetConfig+0x2b0>
 80047a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047aa:	d81b      	bhi.n	80047e4 <UART_SetConfig+0x2b8>
 80047ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b0:	d00c      	beq.n	80047cc <UART_SetConfig+0x2a0>
 80047b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b6:	d815      	bhi.n	80047e4 <UART_SetConfig+0x2b8>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <UART_SetConfig+0x298>
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c0:	d008      	beq.n	80047d4 <UART_SetConfig+0x2a8>
 80047c2:	e00f      	b.n	80047e4 <UART_SetConfig+0x2b8>
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ca:	e022      	b.n	8004812 <UART_SetConfig+0x2e6>
 80047cc:	2302      	movs	r3, #2
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e01e      	b.n	8004812 <UART_SetConfig+0x2e6>
 80047d4:	2304      	movs	r3, #4
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e01a      	b.n	8004812 <UART_SetConfig+0x2e6>
 80047dc:	2308      	movs	r3, #8
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e016      	b.n	8004812 <UART_SetConfig+0x2e6>
 80047e4:	2310      	movs	r3, #16
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e012      	b.n	8004812 <UART_SetConfig+0x2e6>
 80047ec:	efff69f3 	.word	0xefff69f3
 80047f0:	40008000 	.word	0x40008000
 80047f4:	40013800 	.word	0x40013800
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40004400 	.word	0x40004400
 8004800:	40004800 	.word	0x40004800
 8004804:	40004c00 	.word	0x40004c00
 8004808:	40005000 	.word	0x40005000
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a9f      	ldr	r2, [pc, #636]	; (8004a94 <UART_SetConfig+0x568>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d17a      	bne.n	8004912 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800481c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004820:	2b08      	cmp	r3, #8
 8004822:	d824      	bhi.n	800486e <UART_SetConfig+0x342>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <UART_SetConfig+0x300>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004851 	.word	0x08004851
 8004830:	0800486f 	.word	0x0800486f
 8004834:	08004859 	.word	0x08004859
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800485f 	.word	0x0800485f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	0800486f 	.word	0x0800486f
 8004848:	0800486f 	.word	0x0800486f
 800484c:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004850:	f7ff f834 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8004854:	61f8      	str	r0, [r7, #28]
        break;
 8004856:	e010      	b.n	800487a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b8f      	ldr	r3, [pc, #572]	; (8004a98 <UART_SetConfig+0x56c>)
 800485a:	61fb      	str	r3, [r7, #28]
        break;
 800485c:	e00d      	b.n	800487a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe ff95 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004862:	61f8      	str	r0, [r7, #28]
        break;
 8004864:	e009      	b.n	800487a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	61fb      	str	r3, [r7, #28]
        break;
 800486c:	e005      	b.n	800487a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004878:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80fb 	beq.w	8004a78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	429a      	cmp	r2, r3
 8004890:	d305      	bcc.n	800489e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d903      	bls.n	80048a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048a4:	e0e8      	b.n	8004a78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2200      	movs	r2, #0
 80048aa:	461c      	mov	r4, r3
 80048ac:	4615      	mov	r5, r2
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	022b      	lsls	r3, r5, #8
 80048b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048bc:	0222      	lsls	r2, r4, #8
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	6849      	ldr	r1, [r1, #4]
 80048c2:	0849      	lsrs	r1, r1, #1
 80048c4:	2000      	movs	r0, #0
 80048c6:	4688      	mov	r8, r1
 80048c8:	4681      	mov	r9, r0
 80048ca:	eb12 0a08 	adds.w	sl, r2, r8
 80048ce:	eb43 0b09 	adc.w	fp, r3, r9
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048e0:	4650      	mov	r0, sl
 80048e2:	4659      	mov	r1, fp
 80048e4:	f7fb fcd4 	bl	8000290 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f6:	d308      	bcc.n	800490a <UART_SetConfig+0x3de>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fe:	d204      	bcs.n	800490a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	60da      	str	r2, [r3, #12]
 8004908:	e0b6      	b.n	8004a78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004910:	e0b2      	b.n	8004a78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491a:	d15e      	bne.n	80049da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800491c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004920:	2b08      	cmp	r3, #8
 8004922:	d828      	bhi.n	8004976 <UART_SetConfig+0x44a>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <UART_SetConfig+0x400>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	08004951 	.word	0x08004951
 8004930:	08004959 	.word	0x08004959
 8004934:	08004961 	.word	0x08004961
 8004938:	08004977 	.word	0x08004977
 800493c:	08004967 	.word	0x08004967
 8004940:	08004977 	.word	0x08004977
 8004944:	08004977 	.word	0x08004977
 8004948:	08004977 	.word	0x08004977
 800494c:	0800496f 	.word	0x0800496f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004950:	f7fe ffb4 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8004954:	61f8      	str	r0, [r7, #28]
        break;
 8004956:	e014      	b.n	8004982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7fe ffc6 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 800495c:	61f8      	str	r0, [r7, #28]
        break;
 800495e:	e010      	b.n	8004982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004960:	4b4d      	ldr	r3, [pc, #308]	; (8004a98 <UART_SetConfig+0x56c>)
 8004962:	61fb      	str	r3, [r7, #28]
        break;
 8004964:	e00d      	b.n	8004982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004966:	f7fe ff11 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800496a:	61f8      	str	r0, [r7, #28]
        break;
 800496c:	e009      	b.n	8004982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	61fb      	str	r3, [r7, #28]
        break;
 8004974:	e005      	b.n	8004982 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d077      	beq.n	8004a78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005a      	lsls	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	085b      	lsrs	r3, r3, #1
 8004992:	441a      	add	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b0f      	cmp	r3, #15
 80049a2:	d916      	bls.n	80049d2 <UART_SetConfig+0x4a6>
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d212      	bcs.n	80049d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f023 030f 	bic.w	r3, r3, #15
 80049b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	8afb      	ldrh	r3, [r7, #22]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	8afa      	ldrh	r2, [r7, #22]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	e052      	b.n	8004a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049d8:	e04e      	b.n	8004a78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d827      	bhi.n	8004a32 <UART_SetConfig+0x506>
 80049e2:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <UART_SetConfig+0x4bc>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a1d 	.word	0x08004a1d
 80049f4:	08004a33 	.word	0x08004a33
 80049f8:	08004a23 	.word	0x08004a23
 80049fc:	08004a33 	.word	0x08004a33
 8004a00:	08004a33 	.word	0x08004a33
 8004a04:	08004a33 	.word	0x08004a33
 8004a08:	08004a2b 	.word	0x08004a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a0c:	f7fe ff56 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8004a10:	61f8      	str	r0, [r7, #28]
        break;
 8004a12:	e014      	b.n	8004a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a14:	f7fe ff68 	bl	80038e8 <HAL_RCC_GetPCLK2Freq>
 8004a18:	61f8      	str	r0, [r7, #28]
        break;
 8004a1a:	e010      	b.n	8004a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a1c:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <UART_SetConfig+0x56c>)
 8004a1e:	61fb      	str	r3, [r7, #28]
        break;
 8004a20:	e00d      	b.n	8004a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a22:	f7fe feb3 	bl	800378c <HAL_RCC_GetSysClockFreq>
 8004a26:	61f8      	str	r0, [r7, #28]
        break;
 8004a28:	e009      	b.n	8004a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2e:	61fb      	str	r3, [r7, #28]
        break;
 8004a30:	e005      	b.n	8004a3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d019      	beq.n	8004a78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	085a      	lsrs	r2, r3, #1
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b0f      	cmp	r3, #15
 8004a5c:	d909      	bls.n	8004a72 <UART_SetConfig+0x546>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d205      	bcs.n	8004a72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
 8004a70:	e002      	b.n	8004a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3728      	adds	r7, #40	; 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a92:	bf00      	nop
 8004a94:	40008000 	.word	0x40008000
 8004a98:	00f42400 	.word	0x00f42400

08004a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01a      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9a:	d10a      	bne.n	8004bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bf0:	f7fd f834 	bl	8001c5c <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d10e      	bne.n	8004c22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f82d 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e023      	b.n	8004c6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d10e      	bne.n	8004c4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f817 	bl	8004c72 <UART_WaitOnFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e00d      	b.n	8004c6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b09c      	sub	sp, #112	; 0x70
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	e0a5      	b.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8a:	f000 80a1 	beq.w	8004dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fc ffe5 	bl	8001c5c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13e      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e6      	bne.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	663b      	str	r3, [r7, #96]	; 0x60
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e5      	bne.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e067      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d04f      	beq.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3e:	d147      	bne.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d48:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e6      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d9c:	623a      	str	r2, [r7, #32]
 8004d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e010      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	f43f af4a 	beq.w	8004c84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3770      	adds	r7, #112	; 0x70
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <__errno>:
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <__errno+0x8>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4d0d      	ldr	r5, [pc, #52]	; (8004e40 <__libc_init_array+0x38>)
 8004e0c:	4c0d      	ldr	r4, [pc, #52]	; (8004e44 <__libc_init_array+0x3c>)
 8004e0e:	1b64      	subs	r4, r4, r5
 8004e10:	10a4      	asrs	r4, r4, #2
 8004e12:	2600      	movs	r6, #0
 8004e14:	42a6      	cmp	r6, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	4d0b      	ldr	r5, [pc, #44]	; (8004e48 <__libc_init_array+0x40>)
 8004e1a:	4c0c      	ldr	r4, [pc, #48]	; (8004e4c <__libc_init_array+0x44>)
 8004e1c:	f001 f824 	bl	8005e68 <_init>
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	2600      	movs	r6, #0
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e30:	4798      	blx	r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3a:	4798      	blx	r3
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	08006230 	.word	0x08006230
 8004e44:	08006230 	.word	0x08006230
 8004e48:	08006230 	.word	0x08006230
 8004e4c:	08006234 	.word	0x08006234

08004e50 <memset>:
 8004e50:	4402      	add	r2, r0
 8004e52:	4603      	mov	r3, r0
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d100      	bne.n	8004e5a <memset+0xa>
 8004e58:	4770      	bx	lr
 8004e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5e:	e7f9      	b.n	8004e54 <memset+0x4>

08004e60 <iprintf>:
 8004e60:	b40f      	push	{r0, r1, r2, r3}
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <iprintf+0x2c>)
 8004e64:	b513      	push	{r0, r1, r4, lr}
 8004e66:	681c      	ldr	r4, [r3, #0]
 8004e68:	b124      	cbz	r4, 8004e74 <iprintf+0x14>
 8004e6a:	69a3      	ldr	r3, [r4, #24]
 8004e6c:	b913      	cbnz	r3, 8004e74 <iprintf+0x14>
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f000 fa5e 	bl	8005330 <__sinit>
 8004e74:	ab05      	add	r3, sp, #20
 8004e76:	9a04      	ldr	r2, [sp, #16]
 8004e78:	68a1      	ldr	r1, [r4, #8]
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 fc67 	bl	8005750 <_vfiprintf_r>
 8004e82:	b002      	add	sp, #8
 8004e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e88:	b004      	add	sp, #16
 8004e8a:	4770      	bx	lr
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <_puts_r>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	460e      	mov	r6, r1
 8004e94:	4605      	mov	r5, r0
 8004e96:	b118      	cbz	r0, 8004ea0 <_puts_r+0x10>
 8004e98:	6983      	ldr	r3, [r0, #24]
 8004e9a:	b90b      	cbnz	r3, 8004ea0 <_puts_r+0x10>
 8004e9c:	f000 fa48 	bl	8005330 <__sinit>
 8004ea0:	69ab      	ldr	r3, [r5, #24]
 8004ea2:	68ac      	ldr	r4, [r5, #8]
 8004ea4:	b913      	cbnz	r3, 8004eac <_puts_r+0x1c>
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 fa42 	bl	8005330 <__sinit>
 8004eac:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <_puts_r+0xd0>)
 8004eae:	429c      	cmp	r4, r3
 8004eb0:	d120      	bne.n	8004ef4 <_puts_r+0x64>
 8004eb2:	686c      	ldr	r4, [r5, #4]
 8004eb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb6:	07db      	lsls	r3, r3, #31
 8004eb8:	d405      	bmi.n	8004ec6 <_puts_r+0x36>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	0598      	lsls	r0, r3, #22
 8004ebe:	d402      	bmi.n	8004ec6 <_puts_r+0x36>
 8004ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec2:	f000 fad3 	bl	800546c <__retarget_lock_acquire_recursive>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	0719      	lsls	r1, r3, #28
 8004eca:	d51d      	bpl.n	8004f08 <_puts_r+0x78>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	b1db      	cbz	r3, 8004f08 <_puts_r+0x78>
 8004ed0:	3e01      	subs	r6, #1
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	60a3      	str	r3, [r4, #8]
 8004edc:	bb39      	cbnz	r1, 8004f2e <_puts_r+0x9e>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da38      	bge.n	8004f54 <_puts_r+0xc4>
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	210a      	movs	r1, #10
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 f848 	bl	8004f7c <__swbuf_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d011      	beq.n	8004f14 <_puts_r+0x84>
 8004ef0:	250a      	movs	r5, #10
 8004ef2:	e011      	b.n	8004f18 <_puts_r+0x88>
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <_puts_r+0xd4>)
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	d101      	bne.n	8004efe <_puts_r+0x6e>
 8004efa:	68ac      	ldr	r4, [r5, #8]
 8004efc:	e7da      	b.n	8004eb4 <_puts_r+0x24>
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <_puts_r+0xd8>)
 8004f00:	429c      	cmp	r4, r3
 8004f02:	bf08      	it	eq
 8004f04:	68ec      	ldreq	r4, [r5, #12]
 8004f06:	e7d5      	b.n	8004eb4 <_puts_r+0x24>
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f000 f888 	bl	8005020 <__swsetup_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d0dd      	beq.n	8004ed0 <_puts_r+0x40>
 8004f14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004f18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f1a:	07da      	lsls	r2, r3, #31
 8004f1c:	d405      	bmi.n	8004f2a <_puts_r+0x9a>
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	059b      	lsls	r3, r3, #22
 8004f22:	d402      	bmi.n	8004f2a <_puts_r+0x9a>
 8004f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f26:	f000 faa2 	bl	800546e <__retarget_lock_release_recursive>
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	bd70      	pop	{r4, r5, r6, pc}
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	da04      	bge.n	8004f3c <_puts_r+0xac>
 8004f32:	69a2      	ldr	r2, [r4, #24]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	dc06      	bgt.n	8004f46 <_puts_r+0xb6>
 8004f38:	290a      	cmp	r1, #10
 8004f3a:	d004      	beq.n	8004f46 <_puts_r+0xb6>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	6022      	str	r2, [r4, #0]
 8004f42:	7019      	strb	r1, [r3, #0]
 8004f44:	e7c5      	b.n	8004ed2 <_puts_r+0x42>
 8004f46:	4622      	mov	r2, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 f817 	bl	8004f7c <__swbuf_r>
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d1bf      	bne.n	8004ed2 <_puts_r+0x42>
 8004f52:	e7df      	b.n	8004f14 <_puts_r+0x84>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	250a      	movs	r5, #10
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	6022      	str	r2, [r4, #0]
 8004f5c:	701d      	strb	r5, [r3, #0]
 8004f5e:	e7db      	b.n	8004f18 <_puts_r+0x88>
 8004f60:	080061b4 	.word	0x080061b4
 8004f64:	080061d4 	.word	0x080061d4
 8004f68:	08006194 	.word	0x08006194

08004f6c <puts>:
 8004f6c:	4b02      	ldr	r3, [pc, #8]	; (8004f78 <puts+0xc>)
 8004f6e:	4601      	mov	r1, r0
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	f7ff bf8d 	b.w	8004e90 <_puts_r>
 8004f76:	bf00      	nop
 8004f78:	2000000c 	.word	0x2000000c

08004f7c <__swbuf_r>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	460e      	mov	r6, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	4605      	mov	r5, r0
 8004f84:	b118      	cbz	r0, 8004f8e <__swbuf_r+0x12>
 8004f86:	6983      	ldr	r3, [r0, #24]
 8004f88:	b90b      	cbnz	r3, 8004f8e <__swbuf_r+0x12>
 8004f8a:	f000 f9d1 	bl	8005330 <__sinit>
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <__swbuf_r+0x98>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d12b      	bne.n	8004fec <__swbuf_r+0x70>
 8004f94:	686c      	ldr	r4, [r5, #4]
 8004f96:	69a3      	ldr	r3, [r4, #24]
 8004f98:	60a3      	str	r3, [r4, #8]
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	071a      	lsls	r2, r3, #28
 8004f9e:	d52f      	bpl.n	8005000 <__swbuf_r+0x84>
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	b36b      	cbz	r3, 8005000 <__swbuf_r+0x84>
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	1ac0      	subs	r0, r0, r3
 8004faa:	6963      	ldr	r3, [r4, #20]
 8004fac:	b2f6      	uxtb	r6, r6
 8004fae:	4283      	cmp	r3, r0
 8004fb0:	4637      	mov	r7, r6
 8004fb2:	dc04      	bgt.n	8004fbe <__swbuf_r+0x42>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 f926 	bl	8005208 <_fflush_r>
 8004fbc:	bb30      	cbnz	r0, 800500c <__swbuf_r+0x90>
 8004fbe:	68a3      	ldr	r3, [r4, #8]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	60a3      	str	r3, [r4, #8]
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	701e      	strb	r6, [r3, #0]
 8004fcc:	6963      	ldr	r3, [r4, #20]
 8004fce:	3001      	adds	r0, #1
 8004fd0:	4283      	cmp	r3, r0
 8004fd2:	d004      	beq.n	8004fde <__swbuf_r+0x62>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	07db      	lsls	r3, r3, #31
 8004fd8:	d506      	bpl.n	8004fe8 <__swbuf_r+0x6c>
 8004fda:	2e0a      	cmp	r6, #10
 8004fdc:	d104      	bne.n	8004fe8 <__swbuf_r+0x6c>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 f911 	bl	8005208 <_fflush_r>
 8004fe6:	b988      	cbnz	r0, 800500c <__swbuf_r+0x90>
 8004fe8:	4638      	mov	r0, r7
 8004fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <__swbuf_r+0x9c>)
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	d101      	bne.n	8004ff6 <__swbuf_r+0x7a>
 8004ff2:	68ac      	ldr	r4, [r5, #8]
 8004ff4:	e7cf      	b.n	8004f96 <__swbuf_r+0x1a>
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <__swbuf_r+0xa0>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	bf08      	it	eq
 8004ffc:	68ec      	ldreq	r4, [r5, #12]
 8004ffe:	e7ca      	b.n	8004f96 <__swbuf_r+0x1a>
 8005000:	4621      	mov	r1, r4
 8005002:	4628      	mov	r0, r5
 8005004:	f000 f80c 	bl	8005020 <__swsetup_r>
 8005008:	2800      	cmp	r0, #0
 800500a:	d0cb      	beq.n	8004fa4 <__swbuf_r+0x28>
 800500c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005010:	e7ea      	b.n	8004fe8 <__swbuf_r+0x6c>
 8005012:	bf00      	nop
 8005014:	080061b4 	.word	0x080061b4
 8005018:	080061d4 	.word	0x080061d4
 800501c:	08006194 	.word	0x08006194

08005020 <__swsetup_r>:
 8005020:	4b32      	ldr	r3, [pc, #200]	; (80050ec <__swsetup_r+0xcc>)
 8005022:	b570      	push	{r4, r5, r6, lr}
 8005024:	681d      	ldr	r5, [r3, #0]
 8005026:	4606      	mov	r6, r0
 8005028:	460c      	mov	r4, r1
 800502a:	b125      	cbz	r5, 8005036 <__swsetup_r+0x16>
 800502c:	69ab      	ldr	r3, [r5, #24]
 800502e:	b913      	cbnz	r3, 8005036 <__swsetup_r+0x16>
 8005030:	4628      	mov	r0, r5
 8005032:	f000 f97d 	bl	8005330 <__sinit>
 8005036:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <__swsetup_r+0xd0>)
 8005038:	429c      	cmp	r4, r3
 800503a:	d10f      	bne.n	800505c <__swsetup_r+0x3c>
 800503c:	686c      	ldr	r4, [r5, #4]
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005044:	0719      	lsls	r1, r3, #28
 8005046:	d42c      	bmi.n	80050a2 <__swsetup_r+0x82>
 8005048:	06dd      	lsls	r5, r3, #27
 800504a:	d411      	bmi.n	8005070 <__swsetup_r+0x50>
 800504c:	2309      	movs	r3, #9
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800505a:	e03e      	b.n	80050da <__swsetup_r+0xba>
 800505c:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <__swsetup_r+0xd4>)
 800505e:	429c      	cmp	r4, r3
 8005060:	d101      	bne.n	8005066 <__swsetup_r+0x46>
 8005062:	68ac      	ldr	r4, [r5, #8]
 8005064:	e7eb      	b.n	800503e <__swsetup_r+0x1e>
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <__swsetup_r+0xd8>)
 8005068:	429c      	cmp	r4, r3
 800506a:	bf08      	it	eq
 800506c:	68ec      	ldreq	r4, [r5, #12]
 800506e:	e7e6      	b.n	800503e <__swsetup_r+0x1e>
 8005070:	0758      	lsls	r0, r3, #29
 8005072:	d512      	bpl.n	800509a <__swsetup_r+0x7a>
 8005074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005076:	b141      	cbz	r1, 800508a <__swsetup_r+0x6a>
 8005078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800507c:	4299      	cmp	r1, r3
 800507e:	d002      	beq.n	8005086 <__swsetup_r+0x66>
 8005080:	4630      	mov	r0, r6
 8005082:	f000 fa5b 	bl	800553c <_free_r>
 8005086:	2300      	movs	r3, #0
 8005088:	6363      	str	r3, [r4, #52]	; 0x34
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	2300      	movs	r3, #0
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	f043 0308 	orr.w	r3, r3, #8
 80050a0:	81a3      	strh	r3, [r4, #12]
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	b94b      	cbnz	r3, 80050ba <__swsetup_r+0x9a>
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b0:	d003      	beq.n	80050ba <__swsetup_r+0x9a>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4630      	mov	r0, r6
 80050b6:	f000 fa01 	bl	80054bc <__smakebuf_r>
 80050ba:	89a0      	ldrh	r0, [r4, #12]
 80050bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050c0:	f010 0301 	ands.w	r3, r0, #1
 80050c4:	d00a      	beq.n	80050dc <__swsetup_r+0xbc>
 80050c6:	2300      	movs	r3, #0
 80050c8:	60a3      	str	r3, [r4, #8]
 80050ca:	6963      	ldr	r3, [r4, #20]
 80050cc:	425b      	negs	r3, r3
 80050ce:	61a3      	str	r3, [r4, #24]
 80050d0:	6923      	ldr	r3, [r4, #16]
 80050d2:	b943      	cbnz	r3, 80050e6 <__swsetup_r+0xc6>
 80050d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050d8:	d1ba      	bne.n	8005050 <__swsetup_r+0x30>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	0781      	lsls	r1, r0, #30
 80050de:	bf58      	it	pl
 80050e0:	6963      	ldrpl	r3, [r4, #20]
 80050e2:	60a3      	str	r3, [r4, #8]
 80050e4:	e7f4      	b.n	80050d0 <__swsetup_r+0xb0>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e7f7      	b.n	80050da <__swsetup_r+0xba>
 80050ea:	bf00      	nop
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	080061b4 	.word	0x080061b4
 80050f4:	080061d4 	.word	0x080061d4
 80050f8:	08006194 	.word	0x08006194

080050fc <__sflush_r>:
 80050fc:	898a      	ldrh	r2, [r1, #12]
 80050fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005102:	4605      	mov	r5, r0
 8005104:	0710      	lsls	r0, r2, #28
 8005106:	460c      	mov	r4, r1
 8005108:	d458      	bmi.n	80051bc <__sflush_r+0xc0>
 800510a:	684b      	ldr	r3, [r1, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	dc05      	bgt.n	800511c <__sflush_r+0x20>
 8005110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	dc02      	bgt.n	800511c <__sflush_r+0x20>
 8005116:	2000      	movs	r0, #0
 8005118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800511c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800511e:	2e00      	cmp	r6, #0
 8005120:	d0f9      	beq.n	8005116 <__sflush_r+0x1a>
 8005122:	2300      	movs	r3, #0
 8005124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005128:	682f      	ldr	r7, [r5, #0]
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	d032      	beq.n	8005194 <__sflush_r+0x98>
 800512e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	075a      	lsls	r2, r3, #29
 8005134:	d505      	bpl.n	8005142 <__sflush_r+0x46>
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	1ac0      	subs	r0, r0, r3
 800513a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800513c:	b10b      	cbz	r3, 8005142 <__sflush_r+0x46>
 800513e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005140:	1ac0      	subs	r0, r0, r3
 8005142:	2300      	movs	r3, #0
 8005144:	4602      	mov	r2, r0
 8005146:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005148:	6a21      	ldr	r1, [r4, #32]
 800514a:	4628      	mov	r0, r5
 800514c:	47b0      	blx	r6
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	d106      	bne.n	8005162 <__sflush_r+0x66>
 8005154:	6829      	ldr	r1, [r5, #0]
 8005156:	291d      	cmp	r1, #29
 8005158:	d82c      	bhi.n	80051b4 <__sflush_r+0xb8>
 800515a:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <__sflush_r+0x108>)
 800515c:	40ca      	lsrs	r2, r1
 800515e:	07d6      	lsls	r6, r2, #31
 8005160:	d528      	bpl.n	80051b4 <__sflush_r+0xb8>
 8005162:	2200      	movs	r2, #0
 8005164:	6062      	str	r2, [r4, #4]
 8005166:	04d9      	lsls	r1, r3, #19
 8005168:	6922      	ldr	r2, [r4, #16]
 800516a:	6022      	str	r2, [r4, #0]
 800516c:	d504      	bpl.n	8005178 <__sflush_r+0x7c>
 800516e:	1c42      	adds	r2, r0, #1
 8005170:	d101      	bne.n	8005176 <__sflush_r+0x7a>
 8005172:	682b      	ldr	r3, [r5, #0]
 8005174:	b903      	cbnz	r3, 8005178 <__sflush_r+0x7c>
 8005176:	6560      	str	r0, [r4, #84]	; 0x54
 8005178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800517a:	602f      	str	r7, [r5, #0]
 800517c:	2900      	cmp	r1, #0
 800517e:	d0ca      	beq.n	8005116 <__sflush_r+0x1a>
 8005180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005184:	4299      	cmp	r1, r3
 8005186:	d002      	beq.n	800518e <__sflush_r+0x92>
 8005188:	4628      	mov	r0, r5
 800518a:	f000 f9d7 	bl	800553c <_free_r>
 800518e:	2000      	movs	r0, #0
 8005190:	6360      	str	r0, [r4, #52]	; 0x34
 8005192:	e7c1      	b.n	8005118 <__sflush_r+0x1c>
 8005194:	6a21      	ldr	r1, [r4, #32]
 8005196:	2301      	movs	r3, #1
 8005198:	4628      	mov	r0, r5
 800519a:	47b0      	blx	r6
 800519c:	1c41      	adds	r1, r0, #1
 800519e:	d1c7      	bne.n	8005130 <__sflush_r+0x34>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0c4      	beq.n	8005130 <__sflush_r+0x34>
 80051a6:	2b1d      	cmp	r3, #29
 80051a8:	d001      	beq.n	80051ae <__sflush_r+0xb2>
 80051aa:	2b16      	cmp	r3, #22
 80051ac:	d101      	bne.n	80051b2 <__sflush_r+0xb6>
 80051ae:	602f      	str	r7, [r5, #0]
 80051b0:	e7b1      	b.n	8005116 <__sflush_r+0x1a>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	e7ad      	b.n	8005118 <__sflush_r+0x1c>
 80051bc:	690f      	ldr	r7, [r1, #16]
 80051be:	2f00      	cmp	r7, #0
 80051c0:	d0a9      	beq.n	8005116 <__sflush_r+0x1a>
 80051c2:	0793      	lsls	r3, r2, #30
 80051c4:	680e      	ldr	r6, [r1, #0]
 80051c6:	bf08      	it	eq
 80051c8:	694b      	ldreq	r3, [r1, #20]
 80051ca:	600f      	str	r7, [r1, #0]
 80051cc:	bf18      	it	ne
 80051ce:	2300      	movne	r3, #0
 80051d0:	eba6 0807 	sub.w	r8, r6, r7
 80051d4:	608b      	str	r3, [r1, #8]
 80051d6:	f1b8 0f00 	cmp.w	r8, #0
 80051da:	dd9c      	ble.n	8005116 <__sflush_r+0x1a>
 80051dc:	6a21      	ldr	r1, [r4, #32]
 80051de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051e0:	4643      	mov	r3, r8
 80051e2:	463a      	mov	r2, r7
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b0      	blx	r6
 80051e8:	2800      	cmp	r0, #0
 80051ea:	dc06      	bgt.n	80051fa <__sflush_r+0xfe>
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051f2:	81a3      	strh	r3, [r4, #12]
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f8:	e78e      	b.n	8005118 <__sflush_r+0x1c>
 80051fa:	4407      	add	r7, r0
 80051fc:	eba8 0800 	sub.w	r8, r8, r0
 8005200:	e7e9      	b.n	80051d6 <__sflush_r+0xda>
 8005202:	bf00      	nop
 8005204:	20400001 	.word	0x20400001

08005208 <_fflush_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	4605      	mov	r5, r0
 800520e:	460c      	mov	r4, r1
 8005210:	b913      	cbnz	r3, 8005218 <_fflush_r+0x10>
 8005212:	2500      	movs	r5, #0
 8005214:	4628      	mov	r0, r5
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	b118      	cbz	r0, 8005222 <_fflush_r+0x1a>
 800521a:	6983      	ldr	r3, [r0, #24]
 800521c:	b90b      	cbnz	r3, 8005222 <_fflush_r+0x1a>
 800521e:	f000 f887 	bl	8005330 <__sinit>
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <_fflush_r+0x6c>)
 8005224:	429c      	cmp	r4, r3
 8005226:	d11b      	bne.n	8005260 <_fflush_r+0x58>
 8005228:	686c      	ldr	r4, [r5, #4]
 800522a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ef      	beq.n	8005212 <_fflush_r+0xa>
 8005232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005234:	07d0      	lsls	r0, r2, #31
 8005236:	d404      	bmi.n	8005242 <_fflush_r+0x3a>
 8005238:	0599      	lsls	r1, r3, #22
 800523a:	d402      	bmi.n	8005242 <_fflush_r+0x3a>
 800523c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800523e:	f000 f915 	bl	800546c <__retarget_lock_acquire_recursive>
 8005242:	4628      	mov	r0, r5
 8005244:	4621      	mov	r1, r4
 8005246:	f7ff ff59 	bl	80050fc <__sflush_r>
 800524a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800524c:	07da      	lsls	r2, r3, #31
 800524e:	4605      	mov	r5, r0
 8005250:	d4e0      	bmi.n	8005214 <_fflush_r+0xc>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	059b      	lsls	r3, r3, #22
 8005256:	d4dd      	bmi.n	8005214 <_fflush_r+0xc>
 8005258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800525a:	f000 f908 	bl	800546e <__retarget_lock_release_recursive>
 800525e:	e7d9      	b.n	8005214 <_fflush_r+0xc>
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <_fflush_r+0x70>)
 8005262:	429c      	cmp	r4, r3
 8005264:	d101      	bne.n	800526a <_fflush_r+0x62>
 8005266:	68ac      	ldr	r4, [r5, #8]
 8005268:	e7df      	b.n	800522a <_fflush_r+0x22>
 800526a:	4b04      	ldr	r3, [pc, #16]	; (800527c <_fflush_r+0x74>)
 800526c:	429c      	cmp	r4, r3
 800526e:	bf08      	it	eq
 8005270:	68ec      	ldreq	r4, [r5, #12]
 8005272:	e7da      	b.n	800522a <_fflush_r+0x22>
 8005274:	080061b4 	.word	0x080061b4
 8005278:	080061d4 	.word	0x080061d4
 800527c:	08006194 	.word	0x08006194

08005280 <std>:
 8005280:	2300      	movs	r3, #0
 8005282:	b510      	push	{r4, lr}
 8005284:	4604      	mov	r4, r0
 8005286:	e9c0 3300 	strd	r3, r3, [r0]
 800528a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800528e:	6083      	str	r3, [r0, #8]
 8005290:	8181      	strh	r1, [r0, #12]
 8005292:	6643      	str	r3, [r0, #100]	; 0x64
 8005294:	81c2      	strh	r2, [r0, #14]
 8005296:	6183      	str	r3, [r0, #24]
 8005298:	4619      	mov	r1, r3
 800529a:	2208      	movs	r2, #8
 800529c:	305c      	adds	r0, #92	; 0x5c
 800529e:	f7ff fdd7 	bl	8004e50 <memset>
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <std+0x38>)
 80052a4:	6263      	str	r3, [r4, #36]	; 0x24
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <std+0x3c>)
 80052a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <std+0x40>)
 80052ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <std+0x44>)
 80052b0:	6224      	str	r4, [r4, #32]
 80052b2:	6323      	str	r3, [r4, #48]	; 0x30
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	bf00      	nop
 80052b8:	08005cf9 	.word	0x08005cf9
 80052bc:	08005d1b 	.word	0x08005d1b
 80052c0:	08005d53 	.word	0x08005d53
 80052c4:	08005d77 	.word	0x08005d77

080052c8 <_cleanup_r>:
 80052c8:	4901      	ldr	r1, [pc, #4]	; (80052d0 <_cleanup_r+0x8>)
 80052ca:	f000 b8af 	b.w	800542c <_fwalk_reent>
 80052ce:	bf00      	nop
 80052d0:	08005209 	.word	0x08005209

080052d4 <__sfmoreglue>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	2268      	movs	r2, #104	; 0x68
 80052d8:	1e4d      	subs	r5, r1, #1
 80052da:	4355      	muls	r5, r2
 80052dc:	460e      	mov	r6, r1
 80052de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052e2:	f000 f997 	bl	8005614 <_malloc_r>
 80052e6:	4604      	mov	r4, r0
 80052e8:	b140      	cbz	r0, 80052fc <__sfmoreglue+0x28>
 80052ea:	2100      	movs	r1, #0
 80052ec:	e9c0 1600 	strd	r1, r6, [r0]
 80052f0:	300c      	adds	r0, #12
 80052f2:	60a0      	str	r0, [r4, #8]
 80052f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052f8:	f7ff fdaa 	bl	8004e50 <memset>
 80052fc:	4620      	mov	r0, r4
 80052fe:	bd70      	pop	{r4, r5, r6, pc}

08005300 <__sfp_lock_acquire>:
 8005300:	4801      	ldr	r0, [pc, #4]	; (8005308 <__sfp_lock_acquire+0x8>)
 8005302:	f000 b8b3 	b.w	800546c <__retarget_lock_acquire_recursive>
 8005306:	bf00      	nop
 8005308:	200001c5 	.word	0x200001c5

0800530c <__sfp_lock_release>:
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__sfp_lock_release+0x8>)
 800530e:	f000 b8ae 	b.w	800546e <__retarget_lock_release_recursive>
 8005312:	bf00      	nop
 8005314:	200001c5 	.word	0x200001c5

08005318 <__sinit_lock_acquire>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__sinit_lock_acquire+0x8>)
 800531a:	f000 b8a7 	b.w	800546c <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	200001c6 	.word	0x200001c6

08005324 <__sinit_lock_release>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__sinit_lock_release+0x8>)
 8005326:	f000 b8a2 	b.w	800546e <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	200001c6 	.word	0x200001c6

08005330 <__sinit>:
 8005330:	b510      	push	{r4, lr}
 8005332:	4604      	mov	r4, r0
 8005334:	f7ff fff0 	bl	8005318 <__sinit_lock_acquire>
 8005338:	69a3      	ldr	r3, [r4, #24]
 800533a:	b11b      	cbz	r3, 8005344 <__sinit+0x14>
 800533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005340:	f7ff bff0 	b.w	8005324 <__sinit_lock_release>
 8005344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005348:	6523      	str	r3, [r4, #80]	; 0x50
 800534a:	4b13      	ldr	r3, [pc, #76]	; (8005398 <__sinit+0x68>)
 800534c:	4a13      	ldr	r2, [pc, #76]	; (800539c <__sinit+0x6c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	62a2      	str	r2, [r4, #40]	; 0x28
 8005352:	42a3      	cmp	r3, r4
 8005354:	bf04      	itt	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	61a3      	streq	r3, [r4, #24]
 800535a:	4620      	mov	r0, r4
 800535c:	f000 f820 	bl	80053a0 <__sfp>
 8005360:	6060      	str	r0, [r4, #4]
 8005362:	4620      	mov	r0, r4
 8005364:	f000 f81c 	bl	80053a0 <__sfp>
 8005368:	60a0      	str	r0, [r4, #8]
 800536a:	4620      	mov	r0, r4
 800536c:	f000 f818 	bl	80053a0 <__sfp>
 8005370:	2200      	movs	r2, #0
 8005372:	60e0      	str	r0, [r4, #12]
 8005374:	2104      	movs	r1, #4
 8005376:	6860      	ldr	r0, [r4, #4]
 8005378:	f7ff ff82 	bl	8005280 <std>
 800537c:	68a0      	ldr	r0, [r4, #8]
 800537e:	2201      	movs	r2, #1
 8005380:	2109      	movs	r1, #9
 8005382:	f7ff ff7d 	bl	8005280 <std>
 8005386:	68e0      	ldr	r0, [r4, #12]
 8005388:	2202      	movs	r2, #2
 800538a:	2112      	movs	r1, #18
 800538c:	f7ff ff78 	bl	8005280 <std>
 8005390:	2301      	movs	r3, #1
 8005392:	61a3      	str	r3, [r4, #24]
 8005394:	e7d2      	b.n	800533c <__sinit+0xc>
 8005396:	bf00      	nop
 8005398:	08006190 	.word	0x08006190
 800539c:	080052c9 	.word	0x080052c9

080053a0 <__sfp>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	4607      	mov	r7, r0
 80053a4:	f7ff ffac 	bl	8005300 <__sfp_lock_acquire>
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <__sfp+0x84>)
 80053aa:	681e      	ldr	r6, [r3, #0]
 80053ac:	69b3      	ldr	r3, [r6, #24]
 80053ae:	b913      	cbnz	r3, 80053b6 <__sfp+0x16>
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7ff ffbd 	bl	8005330 <__sinit>
 80053b6:	3648      	adds	r6, #72	; 0x48
 80053b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053bc:	3b01      	subs	r3, #1
 80053be:	d503      	bpl.n	80053c8 <__sfp+0x28>
 80053c0:	6833      	ldr	r3, [r6, #0]
 80053c2:	b30b      	cbz	r3, 8005408 <__sfp+0x68>
 80053c4:	6836      	ldr	r6, [r6, #0]
 80053c6:	e7f7      	b.n	80053b8 <__sfp+0x18>
 80053c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053cc:	b9d5      	cbnz	r5, 8005404 <__sfp+0x64>
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <__sfp+0x88>)
 80053d0:	60e3      	str	r3, [r4, #12]
 80053d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053d6:	6665      	str	r5, [r4, #100]	; 0x64
 80053d8:	f000 f847 	bl	800546a <__retarget_lock_init_recursive>
 80053dc:	f7ff ff96 	bl	800530c <__sfp_lock_release>
 80053e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80053e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053e8:	6025      	str	r5, [r4, #0]
 80053ea:	61a5      	str	r5, [r4, #24]
 80053ec:	2208      	movs	r2, #8
 80053ee:	4629      	mov	r1, r5
 80053f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053f4:	f7ff fd2c 	bl	8004e50 <memset>
 80053f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005400:	4620      	mov	r0, r4
 8005402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005404:	3468      	adds	r4, #104	; 0x68
 8005406:	e7d9      	b.n	80053bc <__sfp+0x1c>
 8005408:	2104      	movs	r1, #4
 800540a:	4638      	mov	r0, r7
 800540c:	f7ff ff62 	bl	80052d4 <__sfmoreglue>
 8005410:	4604      	mov	r4, r0
 8005412:	6030      	str	r0, [r6, #0]
 8005414:	2800      	cmp	r0, #0
 8005416:	d1d5      	bne.n	80053c4 <__sfp+0x24>
 8005418:	f7ff ff78 	bl	800530c <__sfp_lock_release>
 800541c:	230c      	movs	r3, #12
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	e7ee      	b.n	8005400 <__sfp+0x60>
 8005422:	bf00      	nop
 8005424:	08006190 	.word	0x08006190
 8005428:	ffff0001 	.word	0xffff0001

0800542c <_fwalk_reent>:
 800542c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005430:	4606      	mov	r6, r0
 8005432:	4688      	mov	r8, r1
 8005434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005438:	2700      	movs	r7, #0
 800543a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800543e:	f1b9 0901 	subs.w	r9, r9, #1
 8005442:	d505      	bpl.n	8005450 <_fwalk_reent+0x24>
 8005444:	6824      	ldr	r4, [r4, #0]
 8005446:	2c00      	cmp	r4, #0
 8005448:	d1f7      	bne.n	800543a <_fwalk_reent+0xe>
 800544a:	4638      	mov	r0, r7
 800544c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005450:	89ab      	ldrh	r3, [r5, #12]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d907      	bls.n	8005466 <_fwalk_reent+0x3a>
 8005456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800545a:	3301      	adds	r3, #1
 800545c:	d003      	beq.n	8005466 <_fwalk_reent+0x3a>
 800545e:	4629      	mov	r1, r5
 8005460:	4630      	mov	r0, r6
 8005462:	47c0      	blx	r8
 8005464:	4307      	orrs	r7, r0
 8005466:	3568      	adds	r5, #104	; 0x68
 8005468:	e7e9      	b.n	800543e <_fwalk_reent+0x12>

0800546a <__retarget_lock_init_recursive>:
 800546a:	4770      	bx	lr

0800546c <__retarget_lock_acquire_recursive>:
 800546c:	4770      	bx	lr

0800546e <__retarget_lock_release_recursive>:
 800546e:	4770      	bx	lr

08005470 <__swhatbuf_r>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	460e      	mov	r6, r1
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	2900      	cmp	r1, #0
 800547a:	b096      	sub	sp, #88	; 0x58
 800547c:	4614      	mov	r4, r2
 800547e:	461d      	mov	r5, r3
 8005480:	da08      	bge.n	8005494 <__swhatbuf_r+0x24>
 8005482:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	602a      	str	r2, [r5, #0]
 800548a:	061a      	lsls	r2, r3, #24
 800548c:	d410      	bmi.n	80054b0 <__swhatbuf_r+0x40>
 800548e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005492:	e00e      	b.n	80054b2 <__swhatbuf_r+0x42>
 8005494:	466a      	mov	r2, sp
 8005496:	f000 fc95 	bl	8005dc4 <_fstat_r>
 800549a:	2800      	cmp	r0, #0
 800549c:	dbf1      	blt.n	8005482 <__swhatbuf_r+0x12>
 800549e:	9a01      	ldr	r2, [sp, #4]
 80054a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80054a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80054a8:	425a      	negs	r2, r3
 80054aa:	415a      	adcs	r2, r3
 80054ac:	602a      	str	r2, [r5, #0]
 80054ae:	e7ee      	b.n	800548e <__swhatbuf_r+0x1e>
 80054b0:	2340      	movs	r3, #64	; 0x40
 80054b2:	2000      	movs	r0, #0
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	b016      	add	sp, #88	; 0x58
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080054bc <__smakebuf_r>:
 80054bc:	898b      	ldrh	r3, [r1, #12]
 80054be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054c0:	079d      	lsls	r5, r3, #30
 80054c2:	4606      	mov	r6, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	d507      	bpl.n	80054d8 <__smakebuf_r+0x1c>
 80054c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	6123      	str	r3, [r4, #16]
 80054d0:	2301      	movs	r3, #1
 80054d2:	6163      	str	r3, [r4, #20]
 80054d4:	b002      	add	sp, #8
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	ab01      	add	r3, sp, #4
 80054da:	466a      	mov	r2, sp
 80054dc:	f7ff ffc8 	bl	8005470 <__swhatbuf_r>
 80054e0:	9900      	ldr	r1, [sp, #0]
 80054e2:	4605      	mov	r5, r0
 80054e4:	4630      	mov	r0, r6
 80054e6:	f000 f895 	bl	8005614 <_malloc_r>
 80054ea:	b948      	cbnz	r0, 8005500 <__smakebuf_r+0x44>
 80054ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f0:	059a      	lsls	r2, r3, #22
 80054f2:	d4ef      	bmi.n	80054d4 <__smakebuf_r+0x18>
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	e7e3      	b.n	80054c8 <__smakebuf_r+0xc>
 8005500:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <__smakebuf_r+0x7c>)
 8005502:	62b3      	str	r3, [r6, #40]	; 0x28
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	6020      	str	r0, [r4, #0]
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	81a3      	strh	r3, [r4, #12]
 800550e:	9b00      	ldr	r3, [sp, #0]
 8005510:	6163      	str	r3, [r4, #20]
 8005512:	9b01      	ldr	r3, [sp, #4]
 8005514:	6120      	str	r0, [r4, #16]
 8005516:	b15b      	cbz	r3, 8005530 <__smakebuf_r+0x74>
 8005518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551c:	4630      	mov	r0, r6
 800551e:	f000 fc63 	bl	8005de8 <_isatty_r>
 8005522:	b128      	cbz	r0, 8005530 <__smakebuf_r+0x74>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	89a0      	ldrh	r0, [r4, #12]
 8005532:	4305      	orrs	r5, r0
 8005534:	81a5      	strh	r5, [r4, #12]
 8005536:	e7cd      	b.n	80054d4 <__smakebuf_r+0x18>
 8005538:	080052c9 	.word	0x080052c9

0800553c <_free_r>:
 800553c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800553e:	2900      	cmp	r1, #0
 8005540:	d044      	beq.n	80055cc <_free_r+0x90>
 8005542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005546:	9001      	str	r0, [sp, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	f1a1 0404 	sub.w	r4, r1, #4
 800554e:	bfb8      	it	lt
 8005550:	18e4      	addlt	r4, r4, r3
 8005552:	f000 fc6b 	bl	8005e2c <__malloc_lock>
 8005556:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <_free_r+0x94>)
 8005558:	9801      	ldr	r0, [sp, #4]
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	b933      	cbnz	r3, 800556c <_free_r+0x30>
 800555e:	6063      	str	r3, [r4, #4]
 8005560:	6014      	str	r4, [r2, #0]
 8005562:	b003      	add	sp, #12
 8005564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005568:	f000 bc66 	b.w	8005e38 <__malloc_unlock>
 800556c:	42a3      	cmp	r3, r4
 800556e:	d908      	bls.n	8005582 <_free_r+0x46>
 8005570:	6825      	ldr	r5, [r4, #0]
 8005572:	1961      	adds	r1, r4, r5
 8005574:	428b      	cmp	r3, r1
 8005576:	bf01      	itttt	eq
 8005578:	6819      	ldreq	r1, [r3, #0]
 800557a:	685b      	ldreq	r3, [r3, #4]
 800557c:	1949      	addeq	r1, r1, r5
 800557e:	6021      	streq	r1, [r4, #0]
 8005580:	e7ed      	b.n	800555e <_free_r+0x22>
 8005582:	461a      	mov	r2, r3
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b10b      	cbz	r3, 800558c <_free_r+0x50>
 8005588:	42a3      	cmp	r3, r4
 800558a:	d9fa      	bls.n	8005582 <_free_r+0x46>
 800558c:	6811      	ldr	r1, [r2, #0]
 800558e:	1855      	adds	r5, r2, r1
 8005590:	42a5      	cmp	r5, r4
 8005592:	d10b      	bne.n	80055ac <_free_r+0x70>
 8005594:	6824      	ldr	r4, [r4, #0]
 8005596:	4421      	add	r1, r4
 8005598:	1854      	adds	r4, r2, r1
 800559a:	42a3      	cmp	r3, r4
 800559c:	6011      	str	r1, [r2, #0]
 800559e:	d1e0      	bne.n	8005562 <_free_r+0x26>
 80055a0:	681c      	ldr	r4, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	6053      	str	r3, [r2, #4]
 80055a6:	4421      	add	r1, r4
 80055a8:	6011      	str	r1, [r2, #0]
 80055aa:	e7da      	b.n	8005562 <_free_r+0x26>
 80055ac:	d902      	bls.n	80055b4 <_free_r+0x78>
 80055ae:	230c      	movs	r3, #12
 80055b0:	6003      	str	r3, [r0, #0]
 80055b2:	e7d6      	b.n	8005562 <_free_r+0x26>
 80055b4:	6825      	ldr	r5, [r4, #0]
 80055b6:	1961      	adds	r1, r4, r5
 80055b8:	428b      	cmp	r3, r1
 80055ba:	bf04      	itt	eq
 80055bc:	6819      	ldreq	r1, [r3, #0]
 80055be:	685b      	ldreq	r3, [r3, #4]
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	bf04      	itt	eq
 80055c4:	1949      	addeq	r1, r1, r5
 80055c6:	6021      	streq	r1, [r4, #0]
 80055c8:	6054      	str	r4, [r2, #4]
 80055ca:	e7ca      	b.n	8005562 <_free_r+0x26>
 80055cc:	b003      	add	sp, #12
 80055ce:	bd30      	pop	{r4, r5, pc}
 80055d0:	200001c8 	.word	0x200001c8

080055d4 <sbrk_aligned>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	4e0e      	ldr	r6, [pc, #56]	; (8005610 <sbrk_aligned+0x3c>)
 80055d8:	460c      	mov	r4, r1
 80055da:	6831      	ldr	r1, [r6, #0]
 80055dc:	4605      	mov	r5, r0
 80055de:	b911      	cbnz	r1, 80055e6 <sbrk_aligned+0x12>
 80055e0:	f000 fb7a 	bl	8005cd8 <_sbrk_r>
 80055e4:	6030      	str	r0, [r6, #0]
 80055e6:	4621      	mov	r1, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f000 fb75 	bl	8005cd8 <_sbrk_r>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	d00a      	beq.n	8005608 <sbrk_aligned+0x34>
 80055f2:	1cc4      	adds	r4, r0, #3
 80055f4:	f024 0403 	bic.w	r4, r4, #3
 80055f8:	42a0      	cmp	r0, r4
 80055fa:	d007      	beq.n	800560c <sbrk_aligned+0x38>
 80055fc:	1a21      	subs	r1, r4, r0
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fb6a 	bl	8005cd8 <_sbrk_r>
 8005604:	3001      	adds	r0, #1
 8005606:	d101      	bne.n	800560c <sbrk_aligned+0x38>
 8005608:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800560c:	4620      	mov	r0, r4
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	200001cc 	.word	0x200001cc

08005614 <_malloc_r>:
 8005614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005618:	1ccd      	adds	r5, r1, #3
 800561a:	f025 0503 	bic.w	r5, r5, #3
 800561e:	3508      	adds	r5, #8
 8005620:	2d0c      	cmp	r5, #12
 8005622:	bf38      	it	cc
 8005624:	250c      	movcc	r5, #12
 8005626:	2d00      	cmp	r5, #0
 8005628:	4607      	mov	r7, r0
 800562a:	db01      	blt.n	8005630 <_malloc_r+0x1c>
 800562c:	42a9      	cmp	r1, r5
 800562e:	d905      	bls.n	800563c <_malloc_r+0x28>
 8005630:	230c      	movs	r3, #12
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	2600      	movs	r6, #0
 8005636:	4630      	mov	r0, r6
 8005638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800563c:	4e2e      	ldr	r6, [pc, #184]	; (80056f8 <_malloc_r+0xe4>)
 800563e:	f000 fbf5 	bl	8005e2c <__malloc_lock>
 8005642:	6833      	ldr	r3, [r6, #0]
 8005644:	461c      	mov	r4, r3
 8005646:	bb34      	cbnz	r4, 8005696 <_malloc_r+0x82>
 8005648:	4629      	mov	r1, r5
 800564a:	4638      	mov	r0, r7
 800564c:	f7ff ffc2 	bl	80055d4 <sbrk_aligned>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	4604      	mov	r4, r0
 8005654:	d14d      	bne.n	80056f2 <_malloc_r+0xde>
 8005656:	6834      	ldr	r4, [r6, #0]
 8005658:	4626      	mov	r6, r4
 800565a:	2e00      	cmp	r6, #0
 800565c:	d140      	bne.n	80056e0 <_malloc_r+0xcc>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	4631      	mov	r1, r6
 8005662:	4638      	mov	r0, r7
 8005664:	eb04 0803 	add.w	r8, r4, r3
 8005668:	f000 fb36 	bl	8005cd8 <_sbrk_r>
 800566c:	4580      	cmp	r8, r0
 800566e:	d13a      	bne.n	80056e6 <_malloc_r+0xd2>
 8005670:	6821      	ldr	r1, [r4, #0]
 8005672:	3503      	adds	r5, #3
 8005674:	1a6d      	subs	r5, r5, r1
 8005676:	f025 0503 	bic.w	r5, r5, #3
 800567a:	3508      	adds	r5, #8
 800567c:	2d0c      	cmp	r5, #12
 800567e:	bf38      	it	cc
 8005680:	250c      	movcc	r5, #12
 8005682:	4629      	mov	r1, r5
 8005684:	4638      	mov	r0, r7
 8005686:	f7ff ffa5 	bl	80055d4 <sbrk_aligned>
 800568a:	3001      	adds	r0, #1
 800568c:	d02b      	beq.n	80056e6 <_malloc_r+0xd2>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	442b      	add	r3, r5
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	e00e      	b.n	80056b4 <_malloc_r+0xa0>
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	1b52      	subs	r2, r2, r5
 800569a:	d41e      	bmi.n	80056da <_malloc_r+0xc6>
 800569c:	2a0b      	cmp	r2, #11
 800569e:	d916      	bls.n	80056ce <_malloc_r+0xba>
 80056a0:	1961      	adds	r1, r4, r5
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	6025      	str	r5, [r4, #0]
 80056a6:	bf18      	it	ne
 80056a8:	6059      	strne	r1, [r3, #4]
 80056aa:	6863      	ldr	r3, [r4, #4]
 80056ac:	bf08      	it	eq
 80056ae:	6031      	streq	r1, [r6, #0]
 80056b0:	5162      	str	r2, [r4, r5]
 80056b2:	604b      	str	r3, [r1, #4]
 80056b4:	4638      	mov	r0, r7
 80056b6:	f104 060b 	add.w	r6, r4, #11
 80056ba:	f000 fbbd 	bl	8005e38 <__malloc_unlock>
 80056be:	f026 0607 	bic.w	r6, r6, #7
 80056c2:	1d23      	adds	r3, r4, #4
 80056c4:	1af2      	subs	r2, r6, r3
 80056c6:	d0b6      	beq.n	8005636 <_malloc_r+0x22>
 80056c8:	1b9b      	subs	r3, r3, r6
 80056ca:	50a3      	str	r3, [r4, r2]
 80056cc:	e7b3      	b.n	8005636 <_malloc_r+0x22>
 80056ce:	6862      	ldr	r2, [r4, #4]
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	bf0c      	ite	eq
 80056d4:	6032      	streq	r2, [r6, #0]
 80056d6:	605a      	strne	r2, [r3, #4]
 80056d8:	e7ec      	b.n	80056b4 <_malloc_r+0xa0>
 80056da:	4623      	mov	r3, r4
 80056dc:	6864      	ldr	r4, [r4, #4]
 80056de:	e7b2      	b.n	8005646 <_malloc_r+0x32>
 80056e0:	4634      	mov	r4, r6
 80056e2:	6876      	ldr	r6, [r6, #4]
 80056e4:	e7b9      	b.n	800565a <_malloc_r+0x46>
 80056e6:	230c      	movs	r3, #12
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	4638      	mov	r0, r7
 80056ec:	f000 fba4 	bl	8005e38 <__malloc_unlock>
 80056f0:	e7a1      	b.n	8005636 <_malloc_r+0x22>
 80056f2:	6025      	str	r5, [r4, #0]
 80056f4:	e7de      	b.n	80056b4 <_malloc_r+0xa0>
 80056f6:	bf00      	nop
 80056f8:	200001c8 	.word	0x200001c8

080056fc <__sfputc_r>:
 80056fc:	6893      	ldr	r3, [r2, #8]
 80056fe:	3b01      	subs	r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	b410      	push	{r4}
 8005704:	6093      	str	r3, [r2, #8]
 8005706:	da08      	bge.n	800571a <__sfputc_r+0x1e>
 8005708:	6994      	ldr	r4, [r2, #24]
 800570a:	42a3      	cmp	r3, r4
 800570c:	db01      	blt.n	8005712 <__sfputc_r+0x16>
 800570e:	290a      	cmp	r1, #10
 8005710:	d103      	bne.n	800571a <__sfputc_r+0x1e>
 8005712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005716:	f7ff bc31 	b.w	8004f7c <__swbuf_r>
 800571a:	6813      	ldr	r3, [r2, #0]
 800571c:	1c58      	adds	r0, r3, #1
 800571e:	6010      	str	r0, [r2, #0]
 8005720:	7019      	strb	r1, [r3, #0]
 8005722:	4608      	mov	r0, r1
 8005724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005728:	4770      	bx	lr

0800572a <__sfputs_r>:
 800572a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572c:	4606      	mov	r6, r0
 800572e:	460f      	mov	r7, r1
 8005730:	4614      	mov	r4, r2
 8005732:	18d5      	adds	r5, r2, r3
 8005734:	42ac      	cmp	r4, r5
 8005736:	d101      	bne.n	800573c <__sfputs_r+0x12>
 8005738:	2000      	movs	r0, #0
 800573a:	e007      	b.n	800574c <__sfputs_r+0x22>
 800573c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005740:	463a      	mov	r2, r7
 8005742:	4630      	mov	r0, r6
 8005744:	f7ff ffda 	bl	80056fc <__sfputc_r>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d1f3      	bne.n	8005734 <__sfputs_r+0xa>
 800574c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005750 <_vfiprintf_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	460d      	mov	r5, r1
 8005756:	b09d      	sub	sp, #116	; 0x74
 8005758:	4614      	mov	r4, r2
 800575a:	4698      	mov	r8, r3
 800575c:	4606      	mov	r6, r0
 800575e:	b118      	cbz	r0, 8005768 <_vfiprintf_r+0x18>
 8005760:	6983      	ldr	r3, [r0, #24]
 8005762:	b90b      	cbnz	r3, 8005768 <_vfiprintf_r+0x18>
 8005764:	f7ff fde4 	bl	8005330 <__sinit>
 8005768:	4b89      	ldr	r3, [pc, #548]	; (8005990 <_vfiprintf_r+0x240>)
 800576a:	429d      	cmp	r5, r3
 800576c:	d11b      	bne.n	80057a6 <_vfiprintf_r+0x56>
 800576e:	6875      	ldr	r5, [r6, #4]
 8005770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005772:	07d9      	lsls	r1, r3, #31
 8005774:	d405      	bmi.n	8005782 <_vfiprintf_r+0x32>
 8005776:	89ab      	ldrh	r3, [r5, #12]
 8005778:	059a      	lsls	r2, r3, #22
 800577a:	d402      	bmi.n	8005782 <_vfiprintf_r+0x32>
 800577c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800577e:	f7ff fe75 	bl	800546c <__retarget_lock_acquire_recursive>
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	071b      	lsls	r3, r3, #28
 8005786:	d501      	bpl.n	800578c <_vfiprintf_r+0x3c>
 8005788:	692b      	ldr	r3, [r5, #16]
 800578a:	b9eb      	cbnz	r3, 80057c8 <_vfiprintf_r+0x78>
 800578c:	4629      	mov	r1, r5
 800578e:	4630      	mov	r0, r6
 8005790:	f7ff fc46 	bl	8005020 <__swsetup_r>
 8005794:	b1c0      	cbz	r0, 80057c8 <_vfiprintf_r+0x78>
 8005796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005798:	07dc      	lsls	r4, r3, #31
 800579a:	d50e      	bpl.n	80057ba <_vfiprintf_r+0x6a>
 800579c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a0:	b01d      	add	sp, #116	; 0x74
 80057a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a6:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <_vfiprintf_r+0x244>)
 80057a8:	429d      	cmp	r5, r3
 80057aa:	d101      	bne.n	80057b0 <_vfiprintf_r+0x60>
 80057ac:	68b5      	ldr	r5, [r6, #8]
 80057ae:	e7df      	b.n	8005770 <_vfiprintf_r+0x20>
 80057b0:	4b79      	ldr	r3, [pc, #484]	; (8005998 <_vfiprintf_r+0x248>)
 80057b2:	429d      	cmp	r5, r3
 80057b4:	bf08      	it	eq
 80057b6:	68f5      	ldreq	r5, [r6, #12]
 80057b8:	e7da      	b.n	8005770 <_vfiprintf_r+0x20>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	0598      	lsls	r0, r3, #22
 80057be:	d4ed      	bmi.n	800579c <_vfiprintf_r+0x4c>
 80057c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c2:	f7ff fe54 	bl	800546e <__retarget_lock_release_recursive>
 80057c6:	e7e9      	b.n	800579c <_vfiprintf_r+0x4c>
 80057c8:	2300      	movs	r3, #0
 80057ca:	9309      	str	r3, [sp, #36]	; 0x24
 80057cc:	2320      	movs	r3, #32
 80057ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80057d6:	2330      	movs	r3, #48	; 0x30
 80057d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800599c <_vfiprintf_r+0x24c>
 80057dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057e0:	f04f 0901 	mov.w	r9, #1
 80057e4:	4623      	mov	r3, r4
 80057e6:	469a      	mov	sl, r3
 80057e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ec:	b10a      	cbz	r2, 80057f2 <_vfiprintf_r+0xa2>
 80057ee:	2a25      	cmp	r2, #37	; 0x25
 80057f0:	d1f9      	bne.n	80057e6 <_vfiprintf_r+0x96>
 80057f2:	ebba 0b04 	subs.w	fp, sl, r4
 80057f6:	d00b      	beq.n	8005810 <_vfiprintf_r+0xc0>
 80057f8:	465b      	mov	r3, fp
 80057fa:	4622      	mov	r2, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff ff93 	bl	800572a <__sfputs_r>
 8005804:	3001      	adds	r0, #1
 8005806:	f000 80aa 	beq.w	800595e <_vfiprintf_r+0x20e>
 800580a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800580c:	445a      	add	r2, fp
 800580e:	9209      	str	r2, [sp, #36]	; 0x24
 8005810:	f89a 3000 	ldrb.w	r3, [sl]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80a2 	beq.w	800595e <_vfiprintf_r+0x20e>
 800581a:	2300      	movs	r3, #0
 800581c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005824:	f10a 0a01 	add.w	sl, sl, #1
 8005828:	9304      	str	r3, [sp, #16]
 800582a:	9307      	str	r3, [sp, #28]
 800582c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005830:	931a      	str	r3, [sp, #104]	; 0x68
 8005832:	4654      	mov	r4, sl
 8005834:	2205      	movs	r2, #5
 8005836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800583a:	4858      	ldr	r0, [pc, #352]	; (800599c <_vfiprintf_r+0x24c>)
 800583c:	f7fa fcd8 	bl	80001f0 <memchr>
 8005840:	9a04      	ldr	r2, [sp, #16]
 8005842:	b9d8      	cbnz	r0, 800587c <_vfiprintf_r+0x12c>
 8005844:	06d1      	lsls	r1, r2, #27
 8005846:	bf44      	itt	mi
 8005848:	2320      	movmi	r3, #32
 800584a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800584e:	0713      	lsls	r3, r2, #28
 8005850:	bf44      	itt	mi
 8005852:	232b      	movmi	r3, #43	; 0x2b
 8005854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005858:	f89a 3000 	ldrb.w	r3, [sl]
 800585c:	2b2a      	cmp	r3, #42	; 0x2a
 800585e:	d015      	beq.n	800588c <_vfiprintf_r+0x13c>
 8005860:	9a07      	ldr	r2, [sp, #28]
 8005862:	4654      	mov	r4, sl
 8005864:	2000      	movs	r0, #0
 8005866:	f04f 0c0a 	mov.w	ip, #10
 800586a:	4621      	mov	r1, r4
 800586c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005870:	3b30      	subs	r3, #48	; 0x30
 8005872:	2b09      	cmp	r3, #9
 8005874:	d94e      	bls.n	8005914 <_vfiprintf_r+0x1c4>
 8005876:	b1b0      	cbz	r0, 80058a6 <_vfiprintf_r+0x156>
 8005878:	9207      	str	r2, [sp, #28]
 800587a:	e014      	b.n	80058a6 <_vfiprintf_r+0x156>
 800587c:	eba0 0308 	sub.w	r3, r0, r8
 8005880:	fa09 f303 	lsl.w	r3, r9, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	46a2      	mov	sl, r4
 800588a:	e7d2      	b.n	8005832 <_vfiprintf_r+0xe2>
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	1d19      	adds	r1, r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	9103      	str	r1, [sp, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	bfbb      	ittet	lt
 8005898:	425b      	neglt	r3, r3
 800589a:	f042 0202 	orrlt.w	r2, r2, #2
 800589e:	9307      	strge	r3, [sp, #28]
 80058a0:	9307      	strlt	r3, [sp, #28]
 80058a2:	bfb8      	it	lt
 80058a4:	9204      	strlt	r2, [sp, #16]
 80058a6:	7823      	ldrb	r3, [r4, #0]
 80058a8:	2b2e      	cmp	r3, #46	; 0x2e
 80058aa:	d10c      	bne.n	80058c6 <_vfiprintf_r+0x176>
 80058ac:	7863      	ldrb	r3, [r4, #1]
 80058ae:	2b2a      	cmp	r3, #42	; 0x2a
 80058b0:	d135      	bne.n	800591e <_vfiprintf_r+0x1ce>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	9203      	str	r2, [sp, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bfb8      	it	lt
 80058be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058c2:	3402      	adds	r4, #2
 80058c4:	9305      	str	r3, [sp, #20]
 80058c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059ac <_vfiprintf_r+0x25c>
 80058ca:	7821      	ldrb	r1, [r4, #0]
 80058cc:	2203      	movs	r2, #3
 80058ce:	4650      	mov	r0, sl
 80058d0:	f7fa fc8e 	bl	80001f0 <memchr>
 80058d4:	b140      	cbz	r0, 80058e8 <_vfiprintf_r+0x198>
 80058d6:	2340      	movs	r3, #64	; 0x40
 80058d8:	eba0 000a 	sub.w	r0, r0, sl
 80058dc:	fa03 f000 	lsl.w	r0, r3, r0
 80058e0:	9b04      	ldr	r3, [sp, #16]
 80058e2:	4303      	orrs	r3, r0
 80058e4:	3401      	adds	r4, #1
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ec:	482c      	ldr	r0, [pc, #176]	; (80059a0 <_vfiprintf_r+0x250>)
 80058ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058f2:	2206      	movs	r2, #6
 80058f4:	f7fa fc7c 	bl	80001f0 <memchr>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d03f      	beq.n	800597c <_vfiprintf_r+0x22c>
 80058fc:	4b29      	ldr	r3, [pc, #164]	; (80059a4 <_vfiprintf_r+0x254>)
 80058fe:	bb1b      	cbnz	r3, 8005948 <_vfiprintf_r+0x1f8>
 8005900:	9b03      	ldr	r3, [sp, #12]
 8005902:	3307      	adds	r3, #7
 8005904:	f023 0307 	bic.w	r3, r3, #7
 8005908:	3308      	adds	r3, #8
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590e:	443b      	add	r3, r7
 8005910:	9309      	str	r3, [sp, #36]	; 0x24
 8005912:	e767      	b.n	80057e4 <_vfiprintf_r+0x94>
 8005914:	fb0c 3202 	mla	r2, ip, r2, r3
 8005918:	460c      	mov	r4, r1
 800591a:	2001      	movs	r0, #1
 800591c:	e7a5      	b.n	800586a <_vfiprintf_r+0x11a>
 800591e:	2300      	movs	r3, #0
 8005920:	3401      	adds	r4, #1
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	4619      	mov	r1, r3
 8005926:	f04f 0c0a 	mov.w	ip, #10
 800592a:	4620      	mov	r0, r4
 800592c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005930:	3a30      	subs	r2, #48	; 0x30
 8005932:	2a09      	cmp	r2, #9
 8005934:	d903      	bls.n	800593e <_vfiprintf_r+0x1ee>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0c5      	beq.n	80058c6 <_vfiprintf_r+0x176>
 800593a:	9105      	str	r1, [sp, #20]
 800593c:	e7c3      	b.n	80058c6 <_vfiprintf_r+0x176>
 800593e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005942:	4604      	mov	r4, r0
 8005944:	2301      	movs	r3, #1
 8005946:	e7f0      	b.n	800592a <_vfiprintf_r+0x1da>
 8005948:	ab03      	add	r3, sp, #12
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	462a      	mov	r2, r5
 800594e:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <_vfiprintf_r+0x258>)
 8005950:	a904      	add	r1, sp, #16
 8005952:	4630      	mov	r0, r6
 8005954:	f3af 8000 	nop.w
 8005958:	4607      	mov	r7, r0
 800595a:	1c78      	adds	r0, r7, #1
 800595c:	d1d6      	bne.n	800590c <_vfiprintf_r+0x1bc>
 800595e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005960:	07d9      	lsls	r1, r3, #31
 8005962:	d405      	bmi.n	8005970 <_vfiprintf_r+0x220>
 8005964:	89ab      	ldrh	r3, [r5, #12]
 8005966:	059a      	lsls	r2, r3, #22
 8005968:	d402      	bmi.n	8005970 <_vfiprintf_r+0x220>
 800596a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800596c:	f7ff fd7f 	bl	800546e <__retarget_lock_release_recursive>
 8005970:	89ab      	ldrh	r3, [r5, #12]
 8005972:	065b      	lsls	r3, r3, #25
 8005974:	f53f af12 	bmi.w	800579c <_vfiprintf_r+0x4c>
 8005978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800597a:	e711      	b.n	80057a0 <_vfiprintf_r+0x50>
 800597c:	ab03      	add	r3, sp, #12
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	462a      	mov	r2, r5
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <_vfiprintf_r+0x258>)
 8005984:	a904      	add	r1, sp, #16
 8005986:	4630      	mov	r0, r6
 8005988:	f000 f880 	bl	8005a8c <_printf_i>
 800598c:	e7e4      	b.n	8005958 <_vfiprintf_r+0x208>
 800598e:	bf00      	nop
 8005990:	080061b4 	.word	0x080061b4
 8005994:	080061d4 	.word	0x080061d4
 8005998:	08006194 	.word	0x08006194
 800599c:	080061f4 	.word	0x080061f4
 80059a0:	080061fe 	.word	0x080061fe
 80059a4:	00000000 	.word	0x00000000
 80059a8:	0800572b 	.word	0x0800572b
 80059ac:	080061fa 	.word	0x080061fa

080059b0 <_printf_common>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	4616      	mov	r6, r2
 80059b6:	4699      	mov	r9, r3
 80059b8:	688a      	ldr	r2, [r1, #8]
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	bfb8      	it	lt
 80059c4:	4613      	movlt	r3, r2
 80059c6:	6033      	str	r3, [r6, #0]
 80059c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059cc:	4607      	mov	r7, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	b10a      	cbz	r2, 80059d6 <_printf_common+0x26>
 80059d2:	3301      	adds	r3, #1
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	0699      	lsls	r1, r3, #26
 80059da:	bf42      	ittt	mi
 80059dc:	6833      	ldrmi	r3, [r6, #0]
 80059de:	3302      	addmi	r3, #2
 80059e0:	6033      	strmi	r3, [r6, #0]
 80059e2:	6825      	ldr	r5, [r4, #0]
 80059e4:	f015 0506 	ands.w	r5, r5, #6
 80059e8:	d106      	bne.n	80059f8 <_printf_common+0x48>
 80059ea:	f104 0a19 	add.w	sl, r4, #25
 80059ee:	68e3      	ldr	r3, [r4, #12]
 80059f0:	6832      	ldr	r2, [r6, #0]
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dc26      	bgt.n	8005a46 <_printf_common+0x96>
 80059f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059fc:	1e13      	subs	r3, r2, #0
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	bf18      	it	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	0692      	lsls	r2, r2, #26
 8005a06:	d42b      	bmi.n	8005a60 <_printf_common+0xb0>
 8005a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c0      	blx	r8
 8005a12:	3001      	adds	r0, #1
 8005a14:	d01e      	beq.n	8005a54 <_printf_common+0xa4>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	68e5      	ldr	r5, [r4, #12]
 8005a1a:	6832      	ldr	r2, [r6, #0]
 8005a1c:	f003 0306 	and.w	r3, r3, #6
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	bf08      	it	eq
 8005a24:	1aad      	subeq	r5, r5, r2
 8005a26:	68a3      	ldr	r3, [r4, #8]
 8005a28:	6922      	ldr	r2, [r4, #16]
 8005a2a:	bf0c      	ite	eq
 8005a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a30:	2500      	movne	r5, #0
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bfc4      	itt	gt
 8005a36:	1a9b      	subgt	r3, r3, r2
 8005a38:	18ed      	addgt	r5, r5, r3
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	341a      	adds	r4, #26
 8005a3e:	42b5      	cmp	r5, r6
 8005a40:	d11a      	bne.n	8005a78 <_printf_common+0xc8>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e008      	b.n	8005a58 <_printf_common+0xa8>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4652      	mov	r2, sl
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	47c0      	blx	r8
 8005a50:	3001      	adds	r0, #1
 8005a52:	d103      	bne.n	8005a5c <_printf_common+0xac>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	e7c6      	b.n	80059ee <_printf_common+0x3e>
 8005a60:	18e1      	adds	r1, r4, r3
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	2030      	movs	r0, #48	; 0x30
 8005a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a6a:	4422      	add	r2, r4
 8005a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a74:	3302      	adds	r3, #2
 8005a76:	e7c7      	b.n	8005a08 <_printf_common+0x58>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c0      	blx	r8
 8005a82:	3001      	adds	r0, #1
 8005a84:	d0e6      	beq.n	8005a54 <_printf_common+0xa4>
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7d9      	b.n	8005a3e <_printf_common+0x8e>
	...

08005a8c <_printf_i>:
 8005a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	7e0f      	ldrb	r7, [r1, #24]
 8005a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a94:	2f78      	cmp	r7, #120	; 0x78
 8005a96:	4691      	mov	r9, r2
 8005a98:	4680      	mov	r8, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	469a      	mov	sl, r3
 8005a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aa2:	d807      	bhi.n	8005ab4 <_printf_i+0x28>
 8005aa4:	2f62      	cmp	r7, #98	; 0x62
 8005aa6:	d80a      	bhi.n	8005abe <_printf_i+0x32>
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f000 80d8 	beq.w	8005c5e <_printf_i+0x1d2>
 8005aae:	2f58      	cmp	r7, #88	; 0x58
 8005ab0:	f000 80a3 	beq.w	8005bfa <_printf_i+0x16e>
 8005ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005abc:	e03a      	b.n	8005b34 <_printf_i+0xa8>
 8005abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ac2:	2b15      	cmp	r3, #21
 8005ac4:	d8f6      	bhi.n	8005ab4 <_printf_i+0x28>
 8005ac6:	a101      	add	r1, pc, #4	; (adr r1, 8005acc <_printf_i+0x40>)
 8005ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b39 	.word	0x08005b39
 8005ad4:	08005ab5 	.word	0x08005ab5
 8005ad8:	08005ab5 	.word	0x08005ab5
 8005adc:	08005ab5 	.word	0x08005ab5
 8005ae0:	08005ab5 	.word	0x08005ab5
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005ab5 	.word	0x08005ab5
 8005aec:	08005ab5 	.word	0x08005ab5
 8005af0:	08005ab5 	.word	0x08005ab5
 8005af4:	08005ab5 	.word	0x08005ab5
 8005af8:	08005c45 	.word	0x08005c45
 8005afc:	08005b69 	.word	0x08005b69
 8005b00:	08005c27 	.word	0x08005c27
 8005b04:	08005ab5 	.word	0x08005ab5
 8005b08:	08005ab5 	.word	0x08005ab5
 8005b0c:	08005c67 	.word	0x08005c67
 8005b10:	08005ab5 	.word	0x08005ab5
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005ab5 	.word	0x08005ab5
 8005b1c:	08005ab5 	.word	0x08005ab5
 8005b20:	08005c2f 	.word	0x08005c2f
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	602a      	str	r2, [r5, #0]
 8005b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0a3      	b.n	8005c80 <_printf_i+0x1f4>
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	6829      	ldr	r1, [r5, #0]
 8005b3c:	0606      	lsls	r6, r0, #24
 8005b3e:	f101 0304 	add.w	r3, r1, #4
 8005b42:	d50a      	bpl.n	8005b5a <_printf_i+0xce>
 8005b44:	680e      	ldr	r6, [r1, #0]
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	da03      	bge.n	8005b54 <_printf_i+0xc8>
 8005b4c:	232d      	movs	r3, #45	; 0x2d
 8005b4e:	4276      	negs	r6, r6
 8005b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b54:	485e      	ldr	r0, [pc, #376]	; (8005cd0 <_printf_i+0x244>)
 8005b56:	230a      	movs	r3, #10
 8005b58:	e019      	b.n	8005b8e <_printf_i+0x102>
 8005b5a:	680e      	ldr	r6, [r1, #0]
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b62:	bf18      	it	ne
 8005b64:	b236      	sxthne	r6, r6
 8005b66:	e7ef      	b.n	8005b48 <_printf_i+0xbc>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	6820      	ldr	r0, [r4, #0]
 8005b6c:	1d19      	adds	r1, r3, #4
 8005b6e:	6029      	str	r1, [r5, #0]
 8005b70:	0601      	lsls	r1, r0, #24
 8005b72:	d501      	bpl.n	8005b78 <_printf_i+0xec>
 8005b74:	681e      	ldr	r6, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <_printf_i+0xf2>
 8005b78:	0646      	lsls	r6, r0, #25
 8005b7a:	d5fb      	bpl.n	8005b74 <_printf_i+0xe8>
 8005b7c:	881e      	ldrh	r6, [r3, #0]
 8005b7e:	4854      	ldr	r0, [pc, #336]	; (8005cd0 <_printf_i+0x244>)
 8005b80:	2f6f      	cmp	r7, #111	; 0x6f
 8005b82:	bf0c      	ite	eq
 8005b84:	2308      	moveq	r3, #8
 8005b86:	230a      	movne	r3, #10
 8005b88:	2100      	movs	r1, #0
 8005b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b8e:	6865      	ldr	r5, [r4, #4]
 8005b90:	60a5      	str	r5, [r4, #8]
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	bfa2      	ittt	ge
 8005b96:	6821      	ldrge	r1, [r4, #0]
 8005b98:	f021 0104 	bicge.w	r1, r1, #4
 8005b9c:	6021      	strge	r1, [r4, #0]
 8005b9e:	b90e      	cbnz	r6, 8005ba4 <_printf_i+0x118>
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	d04d      	beq.n	8005c40 <_printf_i+0x1b4>
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005baa:	fb03 6711 	mls	r7, r3, r1, r6
 8005bae:	5dc7      	ldrb	r7, [r0, r7]
 8005bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bb4:	4637      	mov	r7, r6
 8005bb6:	42bb      	cmp	r3, r7
 8005bb8:	460e      	mov	r6, r1
 8005bba:	d9f4      	bls.n	8005ba6 <_printf_i+0x11a>
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d10b      	bne.n	8005bd8 <_printf_i+0x14c>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	07de      	lsls	r6, r3, #31
 8005bc4:	d508      	bpl.n	8005bd8 <_printf_i+0x14c>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	6861      	ldr	r1, [r4, #4]
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	bfde      	ittt	le
 8005bce:	2330      	movle	r3, #48	; 0x30
 8005bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bd8:	1b52      	subs	r2, r2, r5
 8005bda:	6122      	str	r2, [r4, #16]
 8005bdc:	f8cd a000 	str.w	sl, [sp]
 8005be0:	464b      	mov	r3, r9
 8005be2:	aa03      	add	r2, sp, #12
 8005be4:	4621      	mov	r1, r4
 8005be6:	4640      	mov	r0, r8
 8005be8:	f7ff fee2 	bl	80059b0 <_printf_common>
 8005bec:	3001      	adds	r0, #1
 8005bee:	d14c      	bne.n	8005c8a <_printf_i+0x1fe>
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf4:	b004      	add	sp, #16
 8005bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfa:	4835      	ldr	r0, [pc, #212]	; (8005cd0 <_printf_i+0x244>)
 8005bfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c00:	6829      	ldr	r1, [r5, #0]
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c08:	6029      	str	r1, [r5, #0]
 8005c0a:	061d      	lsls	r5, r3, #24
 8005c0c:	d514      	bpl.n	8005c38 <_printf_i+0x1ac>
 8005c0e:	07df      	lsls	r7, r3, #31
 8005c10:	bf44      	itt	mi
 8005c12:	f043 0320 	orrmi.w	r3, r3, #32
 8005c16:	6023      	strmi	r3, [r4, #0]
 8005c18:	b91e      	cbnz	r6, 8005c22 <_printf_i+0x196>
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	f023 0320 	bic.w	r3, r3, #32
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	2310      	movs	r3, #16
 8005c24:	e7b0      	b.n	8005b88 <_printf_i+0xfc>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f043 0320 	orr.w	r3, r3, #32
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	2378      	movs	r3, #120	; 0x78
 8005c30:	4828      	ldr	r0, [pc, #160]	; (8005cd4 <_printf_i+0x248>)
 8005c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c36:	e7e3      	b.n	8005c00 <_printf_i+0x174>
 8005c38:	0659      	lsls	r1, r3, #25
 8005c3a:	bf48      	it	mi
 8005c3c:	b2b6      	uxthmi	r6, r6
 8005c3e:	e7e6      	b.n	8005c0e <_printf_i+0x182>
 8005c40:	4615      	mov	r5, r2
 8005c42:	e7bb      	b.n	8005bbc <_printf_i+0x130>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	6826      	ldr	r6, [r4, #0]
 8005c48:	6961      	ldr	r1, [r4, #20]
 8005c4a:	1d18      	adds	r0, r3, #4
 8005c4c:	6028      	str	r0, [r5, #0]
 8005c4e:	0635      	lsls	r5, r6, #24
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	d501      	bpl.n	8005c58 <_printf_i+0x1cc>
 8005c54:	6019      	str	r1, [r3, #0]
 8005c56:	e002      	b.n	8005c5e <_printf_i+0x1d2>
 8005c58:	0670      	lsls	r0, r6, #25
 8005c5a:	d5fb      	bpl.n	8005c54 <_printf_i+0x1c8>
 8005c5c:	8019      	strh	r1, [r3, #0]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	4615      	mov	r5, r2
 8005c64:	e7ba      	b.n	8005bdc <_printf_i+0x150>
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	602a      	str	r2, [r5, #0]
 8005c6c:	681d      	ldr	r5, [r3, #0]
 8005c6e:	6862      	ldr	r2, [r4, #4]
 8005c70:	2100      	movs	r1, #0
 8005c72:	4628      	mov	r0, r5
 8005c74:	f7fa fabc 	bl	80001f0 <memchr>
 8005c78:	b108      	cbz	r0, 8005c7e <_printf_i+0x1f2>
 8005c7a:	1b40      	subs	r0, r0, r5
 8005c7c:	6060      	str	r0, [r4, #4]
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	6123      	str	r3, [r4, #16]
 8005c82:	2300      	movs	r3, #0
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c88:	e7a8      	b.n	8005bdc <_printf_i+0x150>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d0ab      	beq.n	8005bf0 <_printf_i+0x164>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	079b      	lsls	r3, r3, #30
 8005c9c:	d413      	bmi.n	8005cc6 <_printf_i+0x23a>
 8005c9e:	68e0      	ldr	r0, [r4, #12]
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	4298      	cmp	r0, r3
 8005ca4:	bfb8      	it	lt
 8005ca6:	4618      	movlt	r0, r3
 8005ca8:	e7a4      	b.n	8005bf4 <_printf_i+0x168>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4632      	mov	r2, r6
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	47d0      	blx	sl
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d09b      	beq.n	8005bf0 <_printf_i+0x164>
 8005cb8:	3501      	adds	r5, #1
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	9903      	ldr	r1, [sp, #12]
 8005cbe:	1a5b      	subs	r3, r3, r1
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dcf2      	bgt.n	8005caa <_printf_i+0x21e>
 8005cc4:	e7eb      	b.n	8005c9e <_printf_i+0x212>
 8005cc6:	2500      	movs	r5, #0
 8005cc8:	f104 0619 	add.w	r6, r4, #25
 8005ccc:	e7f5      	b.n	8005cba <_printf_i+0x22e>
 8005cce:	bf00      	nop
 8005cd0:	08006205 	.word	0x08006205
 8005cd4:	08006216 	.word	0x08006216

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d06      	ldr	r5, [pc, #24]	; (8005cf4 <_sbrk_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fa ff12 	bl	8000b0c <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	200001d0 	.word	0x200001d0

08005cf8 <__sread>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d00:	f000 f8a0 	bl	8005e44 <_read_r>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	bfab      	itete	ge
 8005d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d0c:	181b      	addge	r3, r3, r0
 8005d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d12:	bfac      	ite	ge
 8005d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d16:	81a3      	strhlt	r3, [r4, #12]
 8005d18:	bd10      	pop	{r4, pc}

08005d1a <__swrite>:
 8005d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1e:	461f      	mov	r7, r3
 8005d20:	898b      	ldrh	r3, [r1, #12]
 8005d22:	05db      	lsls	r3, r3, #23
 8005d24:	4605      	mov	r5, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	4616      	mov	r6, r2
 8005d2a:	d505      	bpl.n	8005d38 <__swrite+0x1e>
 8005d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d30:	2302      	movs	r3, #2
 8005d32:	2200      	movs	r2, #0
 8005d34:	f000 f868 	bl	8005e08 <_lseek_r>
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	4632      	mov	r2, r6
 8005d46:	463b      	mov	r3, r7
 8005d48:	4628      	mov	r0, r5
 8005d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4e:	f000 b817 	b.w	8005d80 <_write_r>

08005d52 <__sseek>:
 8005d52:	b510      	push	{r4, lr}
 8005d54:	460c      	mov	r4, r1
 8005d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5a:	f000 f855 	bl	8005e08 <_lseek_r>
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	bf15      	itete	ne
 8005d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d6e:	81a3      	strheq	r3, [r4, #12]
 8005d70:	bf18      	it	ne
 8005d72:	81a3      	strhne	r3, [r4, #12]
 8005d74:	bd10      	pop	{r4, pc}

08005d76 <__sclose>:
 8005d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7a:	f000 b813 	b.w	8005da4 <_close_r>
	...

08005d80 <_write_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d07      	ldr	r5, [pc, #28]	; (8005da0 <_write_r+0x20>)
 8005d84:	4604      	mov	r4, r0
 8005d86:	4608      	mov	r0, r1
 8005d88:	4611      	mov	r1, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	602a      	str	r2, [r5, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f7fa fe72 	bl	8000a78 <_write>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_write_r+0x1e>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_write_r+0x1e>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	200001d0 	.word	0x200001d0

08005da4 <_close_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4d06      	ldr	r5, [pc, #24]	; (8005dc0 <_close_r+0x1c>)
 8005da8:	2300      	movs	r3, #0
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	f7fa fe78 	bl	8000aa4 <_close>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_close_r+0x1a>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_close_r+0x1a>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	200001d0 	.word	0x200001d0

08005dc4 <_fstat_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d07      	ldr	r5, [pc, #28]	; (8005de4 <_fstat_r+0x20>)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	602b      	str	r3, [r5, #0]
 8005dd2:	f7fa fe73 	bl	8000abc <_fstat>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	d102      	bne.n	8005de0 <_fstat_r+0x1c>
 8005dda:	682b      	ldr	r3, [r5, #0]
 8005ddc:	b103      	cbz	r3, 8005de0 <_fstat_r+0x1c>
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	bd38      	pop	{r3, r4, r5, pc}
 8005de2:	bf00      	nop
 8005de4:	200001d0 	.word	0x200001d0

08005de8 <_isatty_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d06      	ldr	r5, [pc, #24]	; (8005e04 <_isatty_r+0x1c>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fa fe72 	bl	8000adc <_isatty>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_isatty_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_isatty_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	200001d0 	.word	0x200001d0

08005e08 <_lseek_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4d07      	ldr	r5, [pc, #28]	; (8005e28 <_lseek_r+0x20>)
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	4608      	mov	r0, r1
 8005e10:	4611      	mov	r1, r2
 8005e12:	2200      	movs	r2, #0
 8005e14:	602a      	str	r2, [r5, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	f7fa fe6b 	bl	8000af2 <_lseek>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d102      	bne.n	8005e26 <_lseek_r+0x1e>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	b103      	cbz	r3, 8005e26 <_lseek_r+0x1e>
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	200001d0 	.word	0x200001d0

08005e2c <__malloc_lock>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__malloc_lock+0x8>)
 8005e2e:	f7ff bb1d 	b.w	800546c <__retarget_lock_acquire_recursive>
 8005e32:	bf00      	nop
 8005e34:	200001c4 	.word	0x200001c4

08005e38 <__malloc_unlock>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__malloc_unlock+0x8>)
 8005e3a:	f7ff bb18 	b.w	800546e <__retarget_lock_release_recursive>
 8005e3e:	bf00      	nop
 8005e40:	200001c4 	.word	0x200001c4

08005e44 <_read_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d07      	ldr	r5, [pc, #28]	; (8005e64 <_read_r+0x20>)
 8005e48:	4604      	mov	r4, r0
 8005e4a:	4608      	mov	r0, r1
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f7fa fdf2 	bl	8000a3c <_read>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_read_r+0x1e>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_read_r+0x1e>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	200001d0 	.word	0x200001d0

08005e68 <_init>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr

08005e74 <_fini>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr
