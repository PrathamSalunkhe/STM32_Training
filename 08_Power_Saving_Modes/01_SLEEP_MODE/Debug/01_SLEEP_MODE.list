
01_SLEEP_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd8  08004dd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de0  08004de0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08004e58  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004e58  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e415  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002162  00000000  00000000  0002e4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00030618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00031160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029aaf  00000000  00000000  00031bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3e0  00000000  00000000  0005b67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9cc9  00000000  00000000  00068a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003350  00000000  00000000  00162778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004c7c 	.word	0x08004c7c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08004c7c 	.word	0x08004c7c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&hlpuart1, &Rx_data, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <HAL_UART_RxCpltCallback+0x20>)
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <HAL_UART_RxCpltCallback+0x24>)
 80004fe:	f002 fbf5 	bl	8002cec <HAL_UART_Receive_IT>
	printf("Woke up from SLEEP MODE by UART\r\n");
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <HAL_UART_RxCpltCallback+0x28>)
 8000504:	f003 ff2a 	bl	800435c <puts>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000110 	.word	0x20000110
 8000514:	2000008c 	.word	0x2000008c
 8000518:	08004c94 	.word	0x08004c94

0800051c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	printf("Woke up from SLEEP MODE by EXTI\r\n");
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <HAL_GPIO_EXTI_Callback+0x20>)
 8000528:	f003 ff18 	bl	800435c <puts>
	HAL_ResumeTick();
 800052c:	f000 fb68 	bl	8000c00 <HAL_ResumeTick>
	HAL_PWR_DisableSleepOnExit();
 8000530:	f000 ff26 	bl	8001380 <HAL_PWR_DisableSleepOnExit>
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	08004cb8 	.word	0x08004cb8

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fab2 	bl	8000aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f841 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8b1 	bl	80006b4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000552:	f000 f883 	bl	800065c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&hlpuart1, &Rx_data, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	4918      	ldr	r1, [pc, #96]	; (80005bc <main+0x7c>)
 800055a:	4819      	ldr	r0, [pc, #100]	; (80005c0 <main+0x80>)
 800055c:	f002 fbc6 	bl	8002cec <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Going into sleep mode after 5 seconds\r\n");
 8000560:	4818      	ldr	r0, [pc, #96]	; (80005c4 <main+0x84>)
 8000562:	f003 fefb 	bl	800435c <puts>

	  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	4817      	ldr	r0, [pc, #92]	; (80005c8 <main+0x88>)
 800056c:	f000 fe7a 	bl	8001264 <HAL_GPIO_WritePin>
  	  HAL_Delay(5000);
 8000570:	f241 3088 	movw	r0, #5000	; 0x1388
 8000574:	f000 fb10 	bl	8000b98 <HAL_Delay>

/*    Suspend Tick increment to prevent wakeup by Systick interrupt.
	  Otherwise the Systick interrupt will wake up the device within 1ms (HAL time base)
*/
	  HAL_SuspendTick();
 8000578:	f000 fb32 	bl	8000be0 <HAL_SuspendTick>

	  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, 0);  // Just to indicate that the sleep mode is activated
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	4811      	ldr	r0, [pc, #68]	; (80005c8 <main+0x88>)
 8000582:	f000 fe6f 	bl	8001264 <HAL_GPIO_WritePin>

	  HAL_PWR_EnableSleepOnExit();
 8000586:	f000 feeb 	bl	8001360 <HAL_PWR_EnableSleepOnExit>

	 /* Enter Sleep Mode , wake up is done once User push-button is pressed */
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);	//interrupt for woke up
 800058a:	2101      	movs	r1, #1
 800058c:	2000      	movs	r0, #0
 800058e:	f000 feb3 	bl	80012f8 <HAL_PWR_EnterSLEEPMode>

     /*Resume Tick interrupt if disabled prior to sleep mode entry*/
//	  HAL_ResumeTick();


	  printf("Woke up from SLEEP MODE in main loop\r\n");
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <main+0x8c>)
 8000594:	f003 fee2 	bl	800435c <puts>

	  for (int i=0; i<20; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	e009      	b.n	80005b2 <main+0x72>
	  {
		  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <main+0x88>)
 80005a2:	f000 fe77 	bl	8001294 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80005a6:	2064      	movs	r0, #100	; 0x64
 80005a8:	f000 faf6 	bl	8000b98 <HAL_Delay>
	  for (int i=0; i<20; i++)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b13      	cmp	r3, #19
 80005b6:	ddf2      	ble.n	800059e <main+0x5e>
	  printf("Going into sleep mode after 5 seconds\r\n");
 80005b8:	e7d2      	b.n	8000560 <main+0x20>
 80005ba:	bf00      	nop
 80005bc:	20000110 	.word	0x20000110
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	08004cdc 	.word	0x08004cdc
 80005c8:	48000800 	.word	0x48000800
 80005cc:	08004d04 	.word	0x08004d04

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fe46 	bl	8004270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f6:	f000 fee1 	bl	80013bc <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f8ae 	bl	8000760 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2340      	movs	r3, #64	; 0x40
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000612:	2300      	movs	r3, #0
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4618      	mov	r0, r3
 800061c:	f000 ff7c 	bl	8001518 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000626:	f000 f89b 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062e:	2301      	movs	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fb81 	bl	8001d4c <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000650:	f000 f886 	bl	8000760 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3758      	adds	r7, #88	; 0x58
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_LPUART1_UART_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_LPUART1_UART_Init+0x50>)
 800069a:	f002 fa45 	bl	8002b28 <HAL_UART_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 f85c 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	40008000 	.word	0x40008000

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_GPIO_Init+0xa4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <MX_GPIO_Init+0xa4>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_GPIO_Init+0xa4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_GPIO_Init+0xa4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_GPIO_Init+0xa4>)
 80006e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_GPIO_Init+0xa4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006fa:	f000 feb5 	bl	8001468 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	4816      	ldr	r0, [pc, #88]	; (800075c <MX_GPIO_Init+0xa8>)
 8000704:	f000 fdae 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4619      	mov	r1, r3
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <MX_GPIO_Init+0xa8>)
 8000720:	f000 fc0e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_GPIO_Init+0xa8>)
 800073c:	f000 fc00 	bl	8000f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2028      	movs	r0, #40	; 0x28
 8000746:	f000 fb46 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f000 fb5f 	bl	8000e0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	; 0x60
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	; 0x58
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0ac      	sub	sp, #176	; 0xb0
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	228c      	movs	r2, #140	; 0x8c
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 fd4b 	bl	8004270 <memset>
  if(huart->Instance==LPUART1)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a26      	ldr	r2, [pc, #152]	; (8000878 <HAL_UART_MspInit+0xc4>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d145      	bne.n	8000870 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007e4:	2320      	movs	r3, #32
 80007e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fccf 	bl	8002194 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007fc:	f7ff ffb0 	bl	8000760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <HAL_UART_MspInit+0xc8>)
 8000802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000804:	4a1d      	ldr	r2, [pc, #116]	; (800087c <HAL_UART_MspInit+0xc8>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_UART_MspInit+0xc8>)
 800080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_UART_MspInit+0xc8>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <HAL_UART_MspInit+0xc8>)
 800081e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_UART_MspInit+0xc8>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000830:	f000 fe1a 	bl	8001468 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000834:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800084e:	2308      	movs	r3, #8
 8000850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000854:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000858:	4619      	mov	r1, r3
 800085a:	4809      	ldr	r0, [pc, #36]	; (8000880 <HAL_UART_MspInit+0xcc>)
 800085c:	f000 fb70 	bl	8000f40 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2046      	movs	r0, #70	; 0x46
 8000866:	f000 fab6 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800086a:	2046      	movs	r0, #70	; 0x46
 800086c:	f000 facf 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	37b0      	adds	r7, #176	; 0xb0
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40008000 	.word	0x40008000
 800087c:	40021000 	.word	0x40021000
 8000880:	48001800 	.word	0x48001800

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler+0x4>

0800088a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f942 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008e0:	f000 fcf2 	bl	80012c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <LPUART1_IRQHandler+0x10>)
 80008ee:	f002 fa53 	bl	8002d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000008c 	.word	0x2000008c

080008fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e00a      	b.n	8000924 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800090e:	f3af 8000 	nop.w
 8000912:	4601      	mov	r1, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf0      	blt.n	800090e <_read+0x12>
  }

  return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	b29a      	uxth	r2, r3
 8000948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <_write+0x28>)
 8000950:	f002 f938 	bl	8002bc4 <HAL_UART_Transmit>
  return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000008c 	.word	0x2000008c

08000964 <_close>:

int _close(int file)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098c:	605a      	str	r2, [r3, #4]
  return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_isatty>:

int _isatty(int file)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a4:	2301      	movs	r3, #1
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f003 fc0e 	bl	800421c <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20050000 	.word	0x20050000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	20000114 	.word	0x20000114
 8000a34:	20000130 	.word	0x20000130

08000a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff ffea 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f003 fbcd 	bl	8004228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8e:	f7ff fd57 	bl	8000540 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa0:	08004de8 	.word	0x08004de8
  ldr r2, =_sbss
 8000aa4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa8:	2000012c 	.word	0x2000012c

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>

08000aae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f981 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 f80e 	bl	8000ae0 <HAL_InitTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	e001      	b.n	8000ad4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad0:	f7ff fe4c 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_InitTick+0x6c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d023      	beq.n	8000b3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_InitTick+0x70>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_InitTick+0x6c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f98d 	bl	8000e2a <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10f      	bne.n	8000b36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d809      	bhi.n	8000b30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	f000 f957 	bl	8000dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_InitTick+0x74>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	e007      	b.n	8000b40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e004      	b.n	8000b40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e001      	b.n	8000b40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000118 	.word	0x20000118

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000118 	.word	0x20000118

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff ffee 	bl	8000b80 <HAL_GetTick>
 8000ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bb0:	d005      	beq.n	8000bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_Delay+0x44>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffde 	bl	8000b80 <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <HAL_Delay+0x28>
  {
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008

08000be0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_SuspendTick+0x1c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_SuspendTick+0x1c>)
 8000bea:	f023 0302 	bic.w	r3, r3, #2
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_ResumeTick+0x1c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_ResumeTick+0x1c>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff3e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff31 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d008      	beq.n	8000e6c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e022      	b.n	8000eb2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 020e 	bic.w	r2, r2, #14
 8000e7a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	f003 021c 	and.w	r2, r3, #28
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d005      	beq.n	8000ee2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2204      	movs	r2, #4
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e029      	b.n	8000f36 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 020e 	bic.w	r2, r2, #14
 8000ef0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f003 021c 	and.w	r2, r3, #28
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	4798      	blx	r3
    }
  }
  return status;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e166      	b.n	800121e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8158 	beq.w	8001218 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d005      	beq.n	8000f80 <HAL_GPIO_Init+0x40>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d130      	bne.n	8000fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	091b      	lsrs	r3, r3, #4
 8000fcc:	f003 0201 	and.w	r2, r3, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d017      	beq.n	800101e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d123      	bne.n	8001072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0203 	and.w	r2, r3, #3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 80b2 	beq.w	8001218 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b61      	ldr	r3, [pc, #388]	; (800123c <HAL_GPIO_Init+0x2fc>)
 80010b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b8:	4a60      	ldr	r2, [pc, #384]	; (800123c <HAL_GPIO_Init+0x2fc>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6613      	str	r3, [r2, #96]	; 0x60
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <HAL_GPIO_Init+0x2fc>)
 80010c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010cc:	4a5c      	ldr	r2, [pc, #368]	; (8001240 <HAL_GPIO_Init+0x300>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f6:	d02b      	beq.n	8001150 <HAL_GPIO_Init+0x210>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x304>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d025      	beq.n	800114c <HAL_GPIO_Init+0x20c>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a51      	ldr	r2, [pc, #324]	; (8001248 <HAL_GPIO_Init+0x308>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d01f      	beq.n	8001148 <HAL_GPIO_Init+0x208>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a50      	ldr	r2, [pc, #320]	; (800124c <HAL_GPIO_Init+0x30c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d019      	beq.n	8001144 <HAL_GPIO_Init+0x204>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x310>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x200>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x314>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1fc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x318>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1f8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x31c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1f4>
 8001130:	2307      	movs	r3, #7
 8001132:	e00e      	b.n	8001152 <HAL_GPIO_Init+0x212>
 8001134:	2308      	movs	r3, #8
 8001136:	e00c      	b.n	8001152 <HAL_GPIO_Init+0x212>
 8001138:	2306      	movs	r3, #6
 800113a:	e00a      	b.n	8001152 <HAL_GPIO_Init+0x212>
 800113c:	2305      	movs	r3, #5
 800113e:	e008      	b.n	8001152 <HAL_GPIO_Init+0x212>
 8001140:	2304      	movs	r3, #4
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x212>
 8001144:	2303      	movs	r3, #3
 8001146:	e004      	b.n	8001152 <HAL_GPIO_Init+0x212>
 8001148:	2302      	movs	r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x212>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_GPIO_Init+0x212>
 8001150:	2300      	movs	r3, #0
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4093      	lsls	r3, r2
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001162:	4937      	ldr	r1, [pc, #220]	; (8001240 <HAL_GPIO_Init+0x300>)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001170:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <HAL_GPIO_Init+0x320>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001194:	4a32      	ldr	r2, [pc, #200]	; (8001260 <HAL_GPIO_Init+0x320>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_GPIO_Init+0x320>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <HAL_GPIO_Init+0x320>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_GPIO_Init+0x320>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e8:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <HAL_GPIO_Init+0x320>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_GPIO_Init+0x320>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_GPIO_Init+0x320>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	f47f ae91 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	48000400 	.word	0x48000400
 8001248:	48000800 	.word	0x48000800
 800124c:	48000c00 	.word	0x48000c00
 8001250:	48001000 	.word	0x48001000
 8001254:	48001400 	.word	0x48001400
 8001258:	48001800 	.word	0x48001800
 800125c:	48001c00 	.word	0x48001c00
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001280:	e002      	b.n	8001288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4013      	ands	r3, r2
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43d9      	mvns	r1, r3
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	400b      	ands	r3, r1
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	619a      	str	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f918 	bl	800051c <HAL_GPIO_EXTI_Callback>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_PWR_EnterSLEEPMode+0x60>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001316:	d10e      	bne.n	8001336 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001318:	f000 f8c6 	bl	80014a8 <HAL_PWREx_DisableLowPowerRunMode>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8001322:	e016      	b.n	8001352 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_PWR_EnterSLEEPMode+0x60>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001330:	d001      	beq.n	8001336 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001332:	f000 f8a9 	bl	8001488 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_PWR_EnterSLEEPMode+0x64>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_PWR_EnterSLEEPMode+0x64>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001348:	bf30      	wfi
 800134a:	e002      	b.n	8001352 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800134c:	bf40      	sev
    __WFE();
 800134e:	bf20      	wfe
    __WFE();
 8001350:	bf20      	wfe
  }

}
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40007000 	.word	0x40007000
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	6113      	str	r3, [r2, #16]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_PWR_DisableSleepOnExit+0x1c>)
 800138a:	f023 0302 	bic.w	r3, r3, #2
 800138e:	6113      	str	r3, [r2, #16]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40007000 	.word	0x40007000

080013bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ca:	d130      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d8:	d038      	beq.n	800144c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2232      	movs	r2, #50	; 0x32
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	3301      	adds	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001400:	e002      	b.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3b01      	subs	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001414:	d102      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f2      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001428:	d110      	bne.n	800144c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e00f      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d007      	beq.n	800144c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40007000 	.word	0x40007000
 8001460:	20000000 	.word	0x20000000
 8001464:	431bde83 	.word	0x431bde83

08001468 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_PWREx_EnableVddIO2+0x1c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	6053      	str	r3, [r2, #4]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40007000 	.word	0x40007000

08001488 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40007000 	.word	0x40007000

080014a8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80014b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2232      	movs	r2, #50	; 0x32
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9b      	lsrs	r3, r3, #18
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80014d0:	e002      	b.n	80014d8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e4:	d102      	bne.n	80014ec <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f2      	bne.n	80014d2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f8:	d101      	bne.n	80014fe <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e000      	b.n	8001500 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40007000 	.word	0x40007000
 8001510:	20000000 	.word	0x20000000
 8001514:	431bde83 	.word	0x431bde83

08001518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f000 bc08 	b.w	8001d3c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152c:	4b96      	ldr	r3, [pc, #600]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001536:	4b94      	ldr	r3, [pc, #592]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80e4 	beq.w	8001716 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <HAL_RCC_OscConfig+0x4c>
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	f040 808b 	bne.w	8001672 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2b01      	cmp	r3, #1
 8001560:	f040 8087 	bne.w	8001672 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001564:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_OscConfig+0x64>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e3df      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <HAL_RCC_OscConfig+0x7e>
 800158c:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001594:	e005      	b.n	80015a2 <HAL_RCC_OscConfig+0x8a>
 8001596:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d223      	bcs.n	80015ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fd92 	bl	80020d4 <RCC_SetFlashLatencyFromMSIRange>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e3c0      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ba:	4b73      	ldr	r3, [pc, #460]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a72      	ldr	r2, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b70      	ldr	r3, [pc, #448]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	496d      	ldr	r1, [pc, #436]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d8:	4b6b      	ldr	r3, [pc, #428]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	4968      	ldr	r1, [pc, #416]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e025      	b.n	800163a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ee:	4b66      	ldr	r3, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a65      	ldr	r2, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4960      	ldr	r1, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160c:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	495b      	ldr	r1, [pc, #364]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fd52 	bl	80020d4 <RCC_SetFlashLatencyFromMSIRange>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e380      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800163a:	f000 fc87 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 800163e:	4602      	mov	r2, r0
 8001640:	4b51      	ldr	r3, [pc, #324]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	4950      	ldr	r1, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x274>)
 800164c:	5ccb      	ldrb	r3, [r1, r3]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	4a4e      	ldr	r2, [pc, #312]	; (8001790 <HAL_RCC_OscConfig+0x278>)
 8001658:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800165a:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <HAL_RCC_OscConfig+0x27c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa3e 	bl	8000ae0 <HAL_InitTick>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d052      	beq.n	8001714 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	e364      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d032      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800167a:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a42      	ldr	r2, [pc, #264]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001686:	f7ff fa7b 	bl	8000b80 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800168e:	f7ff fa77 	bl	8000b80 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e34d      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a35      	ldr	r2, [pc, #212]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4930      	ldr	r1, [pc, #192]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	492b      	ldr	r1, [pc, #172]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
 80016de:	e01a      	b.n	8001716 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a28      	ldr	r2, [pc, #160]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa48 	bl	8000b80 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f4:	f7ff fa44 	bl	8000b80 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e31a      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1dc>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d073      	beq.n	800180a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d005      	beq.n	8001734 <HAL_RCC_OscConfig+0x21c>
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d10e      	bne.n	800174c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d10b      	bne.n	800174c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d063      	beq.n	8001808 <HAL_RCC_OscConfig+0x2f0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d15f      	bne.n	8001808 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e2f7      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d106      	bne.n	8001764 <HAL_RCC_OscConfig+0x24c>
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e025      	b.n	80017b0 <HAL_RCC_OscConfig+0x298>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d114      	bne.n	8001798 <HAL_RCC_OscConfig+0x280>
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a02      	ldr	r2, [pc, #8]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e013      	b.n	80017b0 <HAL_RCC_OscConfig+0x298>
 8001788:	40021000 	.word	0x40021000
 800178c:	08004d2c 	.word	0x08004d2c
 8001790:	20000000 	.word	0x20000000
 8001794:	20000004 	.word	0x20000004
 8001798:	4ba0      	ldr	r3, [pc, #640]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a9f      	ldr	r2, [pc, #636]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b9d      	ldr	r3, [pc, #628]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a9c      	ldr	r2, [pc, #624]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff f9e2 	bl	8000b80 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff f9de 	bl	8000b80 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e2b4      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2a8>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff f9ce 	bl	8000b80 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff f9ca 	bl	8000b80 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e2a0      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2d0>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d060      	beq.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d005      	beq.n	8001828 <HAL_RCC_OscConfig+0x310>
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d119      	bne.n	8001856 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d116      	bne.n	8001856 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001828:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x328>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e27d      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	4973      	ldr	r1, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001854:	e040      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d023      	beq.n	80018a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff f989 	bl	8000b80 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff f985 	bl	8000b80 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e25b      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001884:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001890:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	495f      	ldr	r1, [pc, #380]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e018      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff f965 	bl	8000b80 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff f961 	bl	8000b80 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e237      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d03c      	beq.n	800195e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01c      	beq.n	8001926 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f940 	bl	8000b80 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff f93c 	bl	8000b80 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e212      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ef      	beq.n	8001904 <HAL_RCC_OscConfig+0x3ec>
 8001924:	e01b      	b.n	800195e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192c:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff f923 	bl	8000b80 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff f91f 	bl	8000b80 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e1f5      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001950:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ef      	bne.n	800193e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80a6 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001986:	6593      	str	r3, [r2, #88]	; 0x58
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001994:	2301      	movs	r3, #1
 8001996:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d118      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b0:	f7ff f8e6 	bl	8000b80 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b8:	f7ff f8e2 	bl	8000b80 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1b8      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_RCC_OscConfig+0x508>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4d8>
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ee:	e029      	b.n	8001a44 <HAL_RCC_OscConfig+0x52c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	d115      	bne.n	8001a24 <HAL_RCC_OscConfig+0x50c>
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a18:	e014      	b.n	8001a44 <HAL_RCC_OscConfig+0x52c>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	4b9d      	ldr	r3, [pc, #628]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a9c      	ldr	r2, [pc, #624]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a34:	4b99      	ldr	r3, [pc, #612]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a98      	ldr	r2, [pc, #608]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d016      	beq.n	8001a7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f898 	bl	8000b80 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff f894 	bl	8000b80 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e168      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ed      	beq.n	8001a54 <HAL_RCC_OscConfig+0x53c>
 8001a78:	e015      	b.n	8001aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7ff f881 	bl	8000b80 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff f87d 	bl	8000b80 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e151      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a98:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ed      	bne.n	8001a82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b7b      	ldr	r3, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a7a      	ldr	r2, [pc, #488]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d03c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001acc:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad2:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f850 	bl	8000b80 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae4:	f7ff f84c 	bl	8000b80 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e122      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001af6:	4b69      	ldr	r3, [pc, #420]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ef      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x5cc>
 8001b04:	e01b      	b.n	8001b3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b06:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b0c:	4a63      	ldr	r2, [pc, #396]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff f833 	bl	8000b80 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1e:	f7ff f82f 	bl	8000b80 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e105      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b30:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ef      	bne.n	8001b1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80f9 	beq.w	8001d3a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	f040 80cf 	bne.w	8001cf0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b52:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0203 	and.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d12c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	3b01      	subs	r3, #1
 8001b72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d123      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d11b      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d113      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d109      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d071      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d068      	beq.n	8001c98 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bc6:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bd2:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0ac      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bee:	f7fe ffc7 	bl	8000b80 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7fe ffc3 	bl	8000b80 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e099      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x788>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c24:	3a01      	subs	r2, #1
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c2e:	0212      	lsls	r2, r2, #8
 8001c30:	4311      	orrs	r1, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c36:	0852      	lsrs	r2, r2, #1
 8001c38:	3a01      	subs	r2, #1
 8001c3a:	0552      	lsls	r2, r2, #21
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c42:	0852      	lsrs	r2, r2, #1
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0652      	lsls	r2, r2, #25
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c4e:	06d2      	lsls	r2, r2, #27
 8001c50:	430a      	orrs	r2, r1
 8001c52:	4912      	ldr	r1, [pc, #72]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c70:	f7fe ff86 	bl	8000b80 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7fe ff82 	bl	8000b80 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e058      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_RCC_OscConfig+0x784>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c96:	e050      	b.n	8001d3a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e04f      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d144      	bne.n	8001d3a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cc8:	f7fe ff5a 	bl	8000b80 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe ff56 	bl	8000b80 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e02c      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x7b8>
 8001cee:	e024      	b.n	8001d3a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d01f      	beq.n	8001d36 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001cfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ff3d 	bl	8000b80 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe ff39 	bl	8000b80 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e00f      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	4905      	ldr	r1, [pc, #20]	; (8001d44 <HAL_RCC_OscConfig+0x82c>)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_OscConfig+0x830>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
 8001d34:	e001      	b.n	8001d3a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	feeefffc 	.word	0xfeeefffc

08001d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0e7      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d60:	4b75      	ldr	r3, [pc, #468]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d910      	bls.n	8001d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4970      	ldr	r1, [pc, #448]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0cf      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d908      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4960      	ldr	r1, [pc, #384]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d04c      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d121      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0a6      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d115      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e09a      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e02:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e08e      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e086      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4943      	ldr	r1, [pc, #268]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e34:	f7fe fea4 	bl	8000b80 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7fe fea0 	bl	8000b80 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e06e      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d208      	bcs.n	8001e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d210      	bcs.n	8001ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 0207 	bic.w	r2, r3, #7
 8001ea8:	4923      	ldr	r1, [pc, #140]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e036      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4918      	ldr	r1, [pc, #96]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4910      	ldr	r1, [pc, #64]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f00:	f000 f824 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	490b      	ldr	r1, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1f4>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1fc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fddb 	bl	8000ae0 <HAL_InitTick>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08004d2c 	.word	0x08004d2c
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x34>
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d121      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d11e      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e004      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d134      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d003      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ff0:	e005      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff4:	617b      	str	r3, [r7, #20]
      break;
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ffa:	617b      	str	r3, [r7, #20]
      break;
 8001ffc:	e002      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	617b      	str	r3, [r7, #20]
      break;
 8002002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	3301      	adds	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	fb03 f202 	mul.w	r2, r3, r2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	fbb2 f3f3 	udiv	r3, r2, r3
 8002028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_GetSysClockFreq+0x108>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	0e5b      	lsrs	r3, r3, #25
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	3301      	adds	r3, #1
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002044:	69bb      	ldr	r3, [r7, #24]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	08004d44 	.word	0x08004d44
 800205c:	00f42400 	.word	0x00f42400
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_RCC_GetHCLKFreq+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002080:	f7ff fff0 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08004d3c 	.word	0x08004d3c

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020ac:	f7ff ffda 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0adb      	lsrs	r3, r3, #11
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4904      	ldr	r1, [pc, #16]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	08004d3c 	.word	0x08004d3c

080020d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020ec:	f7ff f958 	bl	80013a0 <HAL_PWREx_GetVoltageRange>
 80020f0:	6178      	str	r0, [r7, #20]
 80020f2:	e014      	b.n	800211e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4a24      	ldr	r2, [pc, #144]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800210c:	f7ff f948 	bl	80013a0 <HAL_PWREx_GetVoltageRange>
 8002110:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d10b      	bne.n	800213e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d919      	bls.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2ba0      	cmp	r3, #160	; 0xa0
 8002130:	d902      	bls.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002132:	2302      	movs	r3, #2
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	e013      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002138:	2301      	movs	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	e010      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d902      	bls.n	800214a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002144:	2303      	movs	r3, #3
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e00a      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d102      	bne.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002150:	2302      	movs	r3, #2
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	e004      	b.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b70      	cmp	r3, #112	; 0x70
 800215a:	d101      	bne.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800215c:	2301      	movs	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 0207 	bic.w	r2, r3, #7
 8002168:	4909      	ldr	r1, [pc, #36]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800219c:	2300      	movs	r3, #0
 800219e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a0:	2300      	movs	r3, #0
 80021a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d041      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b8:	d02a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021be:	d824      	bhi.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c4:	d008      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ca:	d81e      	bhi.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d4:	d010      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021d6:	e018      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021d8:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a85      	ldr	r2, [pc, #532]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e4:	e015      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 facd 	bl	800278c <RCCEx_PLLSAI1_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f6:	e00c      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3320      	adds	r3, #32
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fbb6 	bl	8002970 <RCCEx_PLLSAI2_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002208:	e003      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	74fb      	strb	r3, [r7, #19]
      break;
 800220e:	e000      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002218:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002226:	4973      	ldr	r1, [pc, #460]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800222e:	e001      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d041      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002244:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002248:	d02a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800224a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800224e:	d824      	bhi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002254:	d008      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800225a:	d81e      	bhi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d010      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002266:	e018      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002268:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a61      	ldr	r2, [pc, #388]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002274:	e015      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fa85 	bl	800278c <RCCEx_PLLSAI1_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002286:	e00c      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3320      	adds	r3, #32
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fb6e 	bl	8002970 <RCCEx_PLLSAI2_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002298:	e003      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	74fb      	strb	r3, [r7, #19]
      break;
 800229e:	e000      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022a8:	4b52      	ldr	r3, [pc, #328]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b6:	494f      	ldr	r1, [pc, #316]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022be:	e001      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a0 	beq.w	8002412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022e6:	2300      	movs	r3, #0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00d      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	4a40      	ldr	r2, [pc, #256]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6593      	str	r3, [r2, #88]	; 0x58
 80022f8:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002304:	2301      	movs	r3, #1
 8002306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002308:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a3a      	ldr	r2, [pc, #232]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002314:	f7fe fc34 	bl	8000b80 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800231a:	e009      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231c:	f7fe fc30 	bl	8000b80 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d902      	bls.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	74fb      	strb	r3, [r7, #19]
        break;
 800232e:	e005      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002330:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d15c      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01f      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	429a      	cmp	r2, r3
 800235e:	d019      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d016      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fbef 	bl	8000b80 <HAL_GetTick>
 80023a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a4:	e00b      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fbeb 	bl	8000b80 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d902      	bls.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	74fb      	strb	r3, [r7, #19]
            break;
 80023bc:	e006      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ec      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	4904      	ldr	r1, [pc, #16]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ea:	e009      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
 80023f0:	e006      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002400:	7c7b      	ldrb	r3, [r7, #17]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	4ba6      	ldr	r3, [pc, #664]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	4aa5      	ldr	r2, [pc, #660]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241e:	4ba0      	ldr	r3, [pc, #640]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f023 0203 	bic.w	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	499c      	ldr	r1, [pc, #624]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002440:	4b97      	ldr	r3, [pc, #604]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f023 020c 	bic.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	4994      	ldr	r1, [pc, #592]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002462:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	498b      	ldr	r1, [pc, #556]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002484:	4b86      	ldr	r3, [pc, #536]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4983      	ldr	r1, [pc, #524]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024a6:	4b7e      	ldr	r3, [pc, #504]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b4:	497a      	ldr	r1, [pc, #488]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024c8:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	4972      	ldr	r1, [pc, #456]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	4969      	ldr	r1, [pc, #420]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800251a:	4961      	ldr	r1, [pc, #388]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253c:	4958      	ldr	r1, [pc, #352]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	4950      	ldr	r1, [pc, #320]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002572:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4947      	ldr	r1, [pc, #284]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	493f      	ldr	r1, [pc, #252]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d028      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b6:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4936      	ldr	r1, [pc, #216]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d6:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e0:	60d3      	str	r3, [r2, #12]
 80025e2:	e011      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f8c9 	bl	800278c <RCCEx_PLLSAI1_Config>
 80025fa:	4603      	mov	r3, r0
 80025fc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d028      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	491f      	ldr	r1, [pc, #124]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002632:	d106      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800263a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800263e:	60d3      	str	r3, [r2, #12]
 8002640:	e011      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264a:	d10c      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f89a 	bl	800278c <RCCEx_PLLSAI1_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002680:	4907      	ldr	r1, [pc, #28]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002690:	d108      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4a02      	ldr	r2, [pc, #8]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002698:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800269c:	60d3      	str	r3, [r2, #12]
 800269e:	e013      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80026a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2101      	movs	r1, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f869 	bl	800278c <RCCEx_PLLSAI1_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02f      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e2:	4929      	ldr	r1, [pc, #164]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026f2:	d10d      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	2102      	movs	r1, #2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f846 	bl	800278c <RCCEx_PLLSAI1_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d014      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	74bb      	strb	r3, [r7, #18]
 800270e:	e011      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002718:	d10c      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3320      	adds	r3, #32
 800271e:	2102      	movs	r1, #2
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f925 	bl	8002970 <RCCEx_PLLSAI2_Config>
 8002726:	4603      	mov	r3, r0
 8002728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002750:	490d      	ldr	r1, [pc, #52]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002774:	4904      	ldr	r1, [pc, #16]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800277c:	7cbb      	ldrb	r3, [r7, #18]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800279a:	4b74      	ldr	r3, [pc, #464]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d018      	beq.n	80027d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0203 	and.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10d      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
       ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027be:	4b6b      	ldr	r3, [pc, #428]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
       ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d047      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e044      	b.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d018      	beq.n	8002812 <RCCEx_PLLSAI1_Config+0x86>
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d825      	bhi.n	8002830 <RCCEx_PLLSAI1_Config+0xa4>
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d002      	beq.n	80027ee <RCCEx_PLLSAI1_Config+0x62>
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d009      	beq.n	8002800 <RCCEx_PLLSAI1_Config+0x74>
 80027ec:	e020      	b.n	8002830 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ee:	4b5f      	ldr	r3, [pc, #380]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11d      	bne.n	8002836 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fe:	e01a      	b.n	8002836 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002800:	4b5a      	ldr	r3, [pc, #360]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002810:	e013      	b.n	800283a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002812:	4b56      	ldr	r3, [pc, #344]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281e:	4b53      	ldr	r3, [pc, #332]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800282e:	e006      	b.n	800283e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e004      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002846:	4b49      	ldr	r3, [pc, #292]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	430b      	orrs	r3, r1
 800285c:	4943      	ldr	r1, [pc, #268]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d17c      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002868:	4b40      	ldr	r3, [pc, #256]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a3f      	ldr	r2, [pc, #252]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 800286e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002874:	f7fe f984 	bl	8000b80 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287a:	e009      	b.n	8002890 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800287c:	f7fe f980 	bl	8000b80 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	73fb      	strb	r3, [r7, #15]
        break;
 800288e:	e005      	b.n	800289c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ef      	bne.n	800287c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d15f      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d110      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a8:	4b30      	ldr	r3, [pc, #192]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6892      	ldr	r2, [r2, #8]
 80028b8:	0211      	lsls	r1, r2, #8
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	06d2      	lsls	r2, r2, #27
 80028c0:	430a      	orrs	r2, r1
 80028c2:	492a      	ldr	r1, [pc, #168]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	610b      	str	r3, [r1, #16]
 80028c8:	e027      	b.n	800291a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d112      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	0211      	lsls	r1, r2, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6912      	ldr	r2, [r2, #16]
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0552      	lsls	r2, r2, #21
 80028ec:	430a      	orrs	r2, r1
 80028ee:	491f      	ldr	r1, [pc, #124]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	610b      	str	r3, [r1, #16]
 80028f4:	e011      	b.n	800291a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6892      	ldr	r2, [r2, #8]
 8002906:	0211      	lsls	r1, r2, #8
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6952      	ldr	r2, [r2, #20]
 800290c:	0852      	lsrs	r2, r2, #1
 800290e:	3a01      	subs	r2, #1
 8002910:	0652      	lsls	r2, r2, #25
 8002912:	430a      	orrs	r2, r1
 8002914:	4915      	ldr	r1, [pc, #84]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002924:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe f92b 	bl	8000b80 <HAL_GetTick>
 800292a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800292c:	e009      	b.n	8002942 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800292e:	f7fe f927 	bl	8000b80 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d902      	bls.n	8002942 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	73fb      	strb	r3, [r7, #15]
          break;
 8002940:	e005      	b.n	800294e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ef      	beq.n	800292e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <RCCEx_PLLSAI1_Config+0x1e0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000

08002970 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800297e:	4b69      	ldr	r3, [pc, #420]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800298a:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0203 	and.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d10d      	bne.n	80029b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
       ||
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029a2:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
       ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d047      	beq.n	8002a46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e044      	b.n	8002a46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d018      	beq.n	80029f6 <RCCEx_PLLSAI2_Config+0x86>
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d825      	bhi.n	8002a14 <RCCEx_PLLSAI2_Config+0xa4>
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d002      	beq.n	80029d2 <RCCEx_PLLSAI2_Config+0x62>
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d009      	beq.n	80029e4 <RCCEx_PLLSAI2_Config+0x74>
 80029d0:	e020      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11d      	bne.n	8002a1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e2:	e01a      	b.n	8002a1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e4:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d116      	bne.n	8002a1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f4:	e013      	b.n	8002a1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029f6:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a02:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a12:	e006      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      break;
 8002a18:	e004      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	4938      	ldr	r1, [pc, #224]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d166      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a4c:	4b35      	ldr	r3, [pc, #212]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a58:	f7fe f892 	bl	8000b80 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a5e:	e009      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a60:	f7fe f88e 	bl	8000b80 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d902      	bls.n	8002a74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	73fb      	strb	r3, [r7, #15]
        break;
 8002a72:	e005      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ef      	bne.n	8002a60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d149      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d110      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	0211      	lsls	r1, r2, #8
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	06d2      	lsls	r2, r2, #27
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	491f      	ldr	r1, [pc, #124]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	614b      	str	r3, [r1, #20]
 8002aac:	e011      	b.n	8002ad2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ab6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6892      	ldr	r2, [r2, #8]
 8002abe:	0211      	lsls	r1, r2, #8
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6912      	ldr	r2, [r2, #16]
 8002ac4:	0852      	lsrs	r2, r2, #1
 8002ac6:	3a01      	subs	r2, #1
 8002ac8:	0652      	lsls	r2, r2, #25
 8002aca:	430a      	orrs	r2, r1
 8002acc:	4915      	ldr	r1, [pc, #84]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe f84f 	bl	8000b80 <HAL_GetTick>
 8002ae2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ae4:	e009      	b.n	8002afa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ae6:	f7fe f84b 	bl	8000b80 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d902      	bls.n	8002afa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	73fb      	strb	r3, [r7, #15]
          break;
 8002af8:	e005      	b.n	8002b06 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0ef      	beq.n	8002ae6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d106      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4903      	ldr	r1, [pc, #12]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e040      	b.n	8002bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd fe32 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fc18 	bl	800339c <UART_SetConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e022      	b.n	8002bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fec4 	bl	800390c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 ff4b 	bl	8003a50 <UART_CheckIdleState>
 8002bba:	4603      	mov	r3, r0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	f040 8082 	bne.w	8002ce2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_UART_Transmit+0x26>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07a      	b.n	8002ce4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_UART_Transmit+0x38>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e073      	b.n	8002ce4 <HAL_UART_Transmit+0x120>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2221      	movs	r2, #33	; 0x21
 8002c10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c12:	f7fd ffb5 	bl	8000b80 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c30:	d108      	bne.n	8002c44 <HAL_UART_Transmit+0x80>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d104      	bne.n	8002c44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	e003      	b.n	8002c4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c54:	e02d      	b.n	8002cb2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2180      	movs	r1, #128	; 0x80
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 ff3e 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e039      	b.n	8002ce4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10b      	bne.n	8002c8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c82:	b292      	uxth	r2, r2
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
 8002c8c:	e008      	b.n	8002ca0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	b292      	uxth	r2, r2
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1cb      	bne.n	8002c56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2140      	movs	r1, #64	; 0x40
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 ff0a 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e005      	b.n	8002ce4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d142      	bne.n	8002d88 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_UART_Receive_IT+0x22>
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e03b      	b.n	8002d8a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Receive_IT+0x34>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e034      	b.n	8002d8a <HAL_UART_Receive_IT+0x9e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_UART_Receive_IT+0xa8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01f      	beq.n	8002d78 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d018      	beq.n	8002d78 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	613b      	str	r3, [r7, #16]
   return(result);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	69f9      	ldr	r1, [r7, #28]
 8002d6a:	6a3a      	ldr	r2, [r7, #32]
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e6      	bne.n	8002d46 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 ff74 	bl	8003c6c <UART_Start_Receive_IT>
 8002d84:	4603      	mov	r3, r0
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3728      	adds	r7, #40	; 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40008000 	.word	0x40008000

08002d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b0ba      	sub	sp, #232	; 0xe8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002dbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002dc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d115      	bne.n	8002e00 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00f      	beq.n	8002e00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 82a6 	beq.w	8003342 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
      }
      return;
 8002dfe:	e2a0      	b.n	8003342 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8117 	beq.w	8003038 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e1a:	4b85      	ldr	r3, [pc, #532]	; (8003030 <HAL_UART_IRQHandler+0x298>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 810a 	beq.w	8003038 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d011      	beq.n	8002e54 <HAL_UART_IRQHandler+0xbc>
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d011      	beq.n	8002e84 <HAL_UART_IRQHandler+0xec>
 8002e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2202      	movs	r2, #2
 8002e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d011      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x11c>
 8002e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eaa:	f043 0202 	orr.w	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d017      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2208      	movs	r2, #8
 8002ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee6:	f043 0208 	orr.w	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_UART_IRQHandler+0x18a>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 820c 	beq.w	8003346 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d005      	beq.n	8002f7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04f      	beq.n	800301a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 ff40 	bl	8003e00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d141      	bne.n	8003012 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3308      	adds	r3, #8
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1d9      	bne.n	8002f8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <HAL_UART_IRQHandler+0x29c>)
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd ff65 	bl	8000ebe <HAL_DMA_Abort_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d017      	beq.n	800302a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00f      	b.n	800302a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9b0 	bl	8003370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00b      	b.n	800302a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9ac 	bl	8003370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e007      	b.n	800302a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f9a8 	bl	8003370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003028:	e18d      	b.n	8003346 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302a:	bf00      	nop
    return;
 800302c:	e18b      	b.n	8003346 <HAL_UART_IRQHandler+0x5ae>
 800302e:	bf00      	nop
 8003030:	04000120 	.word	0x04000120
 8003034:	08003ec7 	.word	0x08003ec7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303c:	2b01      	cmp	r3, #1
 800303e:	f040 8146 	bne.w	80032ce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 813f 	beq.w	80032ce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8138 	beq.w	80032ce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2210      	movs	r2, #16
 8003064:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	f040 80b4 	bne.w	80031de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003082:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 815f 	beq.w	800334a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003096:	429a      	cmp	r2, r3
 8003098:	f080 8157 	bcs.w	800334a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 8085 	bne.w	80031c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1da      	bne.n	80030b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3308      	adds	r3, #8
 8003108:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3308      	adds	r3, #8
 8003122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003126:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800312a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800312e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e1      	bne.n	8003102 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3308      	adds	r3, #8
 8003144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3308      	adds	r3, #8
 800315e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003162:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003168:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e3      	bne.n	800313e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2220      	movs	r2, #32
 800317a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003192:	f023 0310 	bic.w	r3, r3, #16
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e4      	bne.n	8003182 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fe40 	bl	8000e42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8d4 	bl	8003384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031dc:	e0b5      	b.n	800334a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80a7 	beq.w	800334e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a2 	beq.w	800334e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800321e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
 800322e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e4      	bne.n	800320a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3308      	adds	r3, #8
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	623b      	str	r3, [r7, #32]
   return(result);
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3308      	adds	r3, #8
 8003260:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003264:	633a      	str	r2, [r7, #48]	; 0x30
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800326a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e3      	bne.n	8003240 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60fb      	str	r3, [r7, #12]
   return(result);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e4      	bne.n	800328a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f85c 	bl	8003384 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032cc:	e03f      	b.n	800334e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <HAL_UART_IRQHandler+0x560>
 80032da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 ff88 	bl	8004206 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032f6:	e02d      	b.n	8003354 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01c      	beq.n	8003352 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
    }
    return;
 8003320:	e017      	b.n	8003352 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <HAL_UART_IRQHandler+0x5bc>
 800332e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fdd9 	bl	8003ef2 <UART_EndTransmit_IT>
    return;
 8003340:	e008      	b.n	8003354 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003342:	bf00      	nop
 8003344:	e006      	b.n	8003354 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003346:	bf00      	nop
 8003348:	e004      	b.n	8003354 <HAL_UART_IRQHandler+0x5bc>
      return;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <HAL_UART_IRQHandler+0x5bc>
      return;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003352:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003354:	37e8      	adds	r7, #232	; 0xe8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop

0800335c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b08a      	sub	sp, #40	; 0x28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4ba4      	ldr	r3, [pc, #656]	; (800365c <UART_SetConfig+0x2c0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a99      	ldr	r2, [pc, #612]	; (8003660 <UART_SetConfig+0x2c4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	4313      	orrs	r3, r2
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a90      	ldr	r2, [pc, #576]	; (8003664 <UART_SetConfig+0x2c8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d126      	bne.n	8003474 <UART_SetConfig+0xd8>
 8003426:	4b90      	ldr	r3, [pc, #576]	; (8003668 <UART_SetConfig+0x2cc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b03      	cmp	r3, #3
 8003432:	d81b      	bhi.n	800346c <UART_SetConfig+0xd0>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0xa0>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	0800345d 	.word	0x0800345d
 8003444:	08003455 	.word	0x08003455
 8003448:	08003465 	.word	0x08003465
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e116      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003454:	2302      	movs	r3, #2
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e112      	b.n	8003682 <UART_SetConfig+0x2e6>
 800345c:	2304      	movs	r3, #4
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e10e      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003464:	2308      	movs	r3, #8
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e10a      	b.n	8003682 <UART_SetConfig+0x2e6>
 800346c:	2310      	movs	r3, #16
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e106      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7c      	ldr	r2, [pc, #496]	; (800366c <UART_SetConfig+0x2d0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d138      	bne.n	80034f0 <UART_SetConfig+0x154>
 800347e:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <UART_SetConfig+0x2cc>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d82d      	bhi.n	80034e8 <UART_SetConfig+0x14c>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <UART_SetConfig+0xf8>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034c9 	.word	0x080034c9
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034e9 	.word	0x080034e9
 80034a0:	080034e9 	.word	0x080034e9
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	080034d1 	.word	0x080034d1
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034e1 	.word	0x080034e1
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ce:	e0d8      	b.n	8003682 <UART_SetConfig+0x2e6>
 80034d0:	2302      	movs	r3, #2
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d6:	e0d4      	b.n	8003682 <UART_SetConfig+0x2e6>
 80034d8:	2304      	movs	r3, #4
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034de:	e0d0      	b.n	8003682 <UART_SetConfig+0x2e6>
 80034e0:	2308      	movs	r3, #8
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e6:	e0cc      	b.n	8003682 <UART_SetConfig+0x2e6>
 80034e8:	2310      	movs	r3, #16
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ee:	e0c8      	b.n	8003682 <UART_SetConfig+0x2e6>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5e      	ldr	r2, [pc, #376]	; (8003670 <UART_SetConfig+0x2d4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d125      	bne.n	8003546 <UART_SetConfig+0x1aa>
 80034fa:	4b5b      	ldr	r3, [pc, #364]	; (8003668 <UART_SetConfig+0x2cc>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003504:	2b30      	cmp	r3, #48	; 0x30
 8003506:	d016      	beq.n	8003536 <UART_SetConfig+0x19a>
 8003508:	2b30      	cmp	r3, #48	; 0x30
 800350a:	d818      	bhi.n	800353e <UART_SetConfig+0x1a2>
 800350c:	2b20      	cmp	r3, #32
 800350e:	d00a      	beq.n	8003526 <UART_SetConfig+0x18a>
 8003510:	2b20      	cmp	r3, #32
 8003512:	d814      	bhi.n	800353e <UART_SetConfig+0x1a2>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <UART_SetConfig+0x182>
 8003518:	2b10      	cmp	r3, #16
 800351a:	d008      	beq.n	800352e <UART_SetConfig+0x192>
 800351c:	e00f      	b.n	800353e <UART_SetConfig+0x1a2>
 800351e:	2300      	movs	r3, #0
 8003520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003524:	e0ad      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003526:	2302      	movs	r3, #2
 8003528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352c:	e0a9      	b.n	8003682 <UART_SetConfig+0x2e6>
 800352e:	2304      	movs	r3, #4
 8003530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003534:	e0a5      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003536:	2308      	movs	r3, #8
 8003538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353c:	e0a1      	b.n	8003682 <UART_SetConfig+0x2e6>
 800353e:	2310      	movs	r3, #16
 8003540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003544:	e09d      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <UART_SetConfig+0x2d8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d125      	bne.n	800359c <UART_SetConfig+0x200>
 8003550:	4b45      	ldr	r3, [pc, #276]	; (8003668 <UART_SetConfig+0x2cc>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800355a:	2bc0      	cmp	r3, #192	; 0xc0
 800355c:	d016      	beq.n	800358c <UART_SetConfig+0x1f0>
 800355e:	2bc0      	cmp	r3, #192	; 0xc0
 8003560:	d818      	bhi.n	8003594 <UART_SetConfig+0x1f8>
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d00a      	beq.n	800357c <UART_SetConfig+0x1e0>
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d814      	bhi.n	8003594 <UART_SetConfig+0x1f8>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <UART_SetConfig+0x1d8>
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d008      	beq.n	8003584 <UART_SetConfig+0x1e8>
 8003572:	e00f      	b.n	8003594 <UART_SetConfig+0x1f8>
 8003574:	2300      	movs	r3, #0
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e082      	b.n	8003682 <UART_SetConfig+0x2e6>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e07e      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e07a      	b.n	8003682 <UART_SetConfig+0x2e6>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e076      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e072      	b.n	8003682 <UART_SetConfig+0x2e6>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a35      	ldr	r2, [pc, #212]	; (8003678 <UART_SetConfig+0x2dc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d12a      	bne.n	80035fc <UART_SetConfig+0x260>
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <UART_SetConfig+0x2cc>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b4:	d01a      	beq.n	80035ec <UART_SetConfig+0x250>
 80035b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ba:	d81b      	bhi.n	80035f4 <UART_SetConfig+0x258>
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c0:	d00c      	beq.n	80035dc <UART_SetConfig+0x240>
 80035c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c6:	d815      	bhi.n	80035f4 <UART_SetConfig+0x258>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <UART_SetConfig+0x238>
 80035cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d0:	d008      	beq.n	80035e4 <UART_SetConfig+0x248>
 80035d2:	e00f      	b.n	80035f4 <UART_SetConfig+0x258>
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e052      	b.n	8003682 <UART_SetConfig+0x2e6>
 80035dc:	2302      	movs	r3, #2
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e04e      	b.n	8003682 <UART_SetConfig+0x2e6>
 80035e4:	2304      	movs	r3, #4
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e04a      	b.n	8003682 <UART_SetConfig+0x2e6>
 80035ec:	2308      	movs	r3, #8
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f2:	e046      	b.n	8003682 <UART_SetConfig+0x2e6>
 80035f4:	2310      	movs	r3, #16
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e042      	b.n	8003682 <UART_SetConfig+0x2e6>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <UART_SetConfig+0x2c4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d13a      	bne.n	800367c <UART_SetConfig+0x2e0>
 8003606:	4b18      	ldr	r3, [pc, #96]	; (8003668 <UART_SetConfig+0x2cc>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003614:	d01a      	beq.n	800364c <UART_SetConfig+0x2b0>
 8003616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800361a:	d81b      	bhi.n	8003654 <UART_SetConfig+0x2b8>
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003620:	d00c      	beq.n	800363c <UART_SetConfig+0x2a0>
 8003622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003626:	d815      	bhi.n	8003654 <UART_SetConfig+0x2b8>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <UART_SetConfig+0x298>
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003630:	d008      	beq.n	8003644 <UART_SetConfig+0x2a8>
 8003632:	e00f      	b.n	8003654 <UART_SetConfig+0x2b8>
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e022      	b.n	8003682 <UART_SetConfig+0x2e6>
 800363c:	2302      	movs	r3, #2
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e01e      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003644:	2304      	movs	r3, #4
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364a:	e01a      	b.n	8003682 <UART_SetConfig+0x2e6>
 800364c:	2308      	movs	r3, #8
 800364e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003652:	e016      	b.n	8003682 <UART_SetConfig+0x2e6>
 8003654:	2310      	movs	r3, #16
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365a:	e012      	b.n	8003682 <UART_SetConfig+0x2e6>
 800365c:	efff69f3 	.word	0xefff69f3
 8003660:	40008000 	.word	0x40008000
 8003664:	40013800 	.word	0x40013800
 8003668:	40021000 	.word	0x40021000
 800366c:	40004400 	.word	0x40004400
 8003670:	40004800 	.word	0x40004800
 8003674:	40004c00 	.word	0x40004c00
 8003678:	40005000 	.word	0x40005000
 800367c:	2310      	movs	r3, #16
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a9f      	ldr	r2, [pc, #636]	; (8003904 <UART_SetConfig+0x568>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d17a      	bne.n	8003782 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800368c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003690:	2b08      	cmp	r3, #8
 8003692:	d824      	bhi.n	80036de <UART_SetConfig+0x342>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <UART_SetConfig+0x300>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036df 	.word	0x080036df
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036df 	.word	0x080036df
 80036ac:	080036cf 	.word	0x080036cf
 80036b0:	080036df 	.word	0x080036df
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036df 	.word	0x080036df
 80036bc:	080036d7 	.word	0x080036d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7fe fcdc 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80036c4:	61f8      	str	r0, [r7, #28]
        break;
 80036c6:	e010      	b.n	80036ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c8:	4b8f      	ldr	r3, [pc, #572]	; (8003908 <UART_SetConfig+0x56c>)
 80036ca:	61fb      	str	r3, [r7, #28]
        break;
 80036cc:	e00d      	b.n	80036ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ce:	f7fe fc3d 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 80036d2:	61f8      	str	r0, [r7, #28]
        break;
 80036d4:	e009      	b.n	80036ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036da:	61fb      	str	r3, [r7, #28]
        break;
 80036dc:	e005      	b.n	80036ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80fb 	beq.w	80038e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d305      	bcc.n	800370e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	429a      	cmp	r2, r3
 800370c:	d903      	bls.n	8003716 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003714:	e0e8      	b.n	80038e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2200      	movs	r2, #0
 800371a:	461c      	mov	r4, r3
 800371c:	4615      	mov	r5, r2
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	022b      	lsls	r3, r5, #8
 8003728:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800372c:	0222      	lsls	r2, r4, #8
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	6849      	ldr	r1, [r1, #4]
 8003732:	0849      	lsrs	r1, r1, #1
 8003734:	2000      	movs	r0, #0
 8003736:	4688      	mov	r8, r1
 8003738:	4681      	mov	r9, r0
 800373a:	eb12 0a08 	adds.w	sl, r2, r8
 800373e:	eb43 0b09 	adc.w	fp, r3, r9
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003750:	4650      	mov	r0, sl
 8003752:	4659      	mov	r1, fp
 8003754:	f7fc fd4a 	bl	80001ec <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4613      	mov	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003766:	d308      	bcc.n	800377a <UART_SetConfig+0x3de>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d204      	bcs.n	800377a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	e0b6      	b.n	80038e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003780:	e0b2      	b.n	80038e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378a:	d15e      	bne.n	800384a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800378c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003790:	2b08      	cmp	r3, #8
 8003792:	d828      	bhi.n	80037e6 <UART_SetConfig+0x44a>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0x400>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037c1 	.word	0x080037c1
 80037a0:	080037c9 	.word	0x080037c9
 80037a4:	080037d1 	.word	0x080037d1
 80037a8:	080037e7 	.word	0x080037e7
 80037ac:	080037d7 	.word	0x080037d7
 80037b0:	080037e7 	.word	0x080037e7
 80037b4:	080037e7 	.word	0x080037e7
 80037b8:	080037e7 	.word	0x080037e7
 80037bc:	080037df 	.word	0x080037df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c0:	f7fe fc5c 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80037c4:	61f8      	str	r0, [r7, #28]
        break;
 80037c6:	e014      	b.n	80037f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c8:	f7fe fc6e 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 80037cc:	61f8      	str	r0, [r7, #28]
        break;
 80037ce:	e010      	b.n	80037f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d0:	4b4d      	ldr	r3, [pc, #308]	; (8003908 <UART_SetConfig+0x56c>)
 80037d2:	61fb      	str	r3, [r7, #28]
        break;
 80037d4:	e00d      	b.n	80037f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037d6:	f7fe fbb9 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 80037da:	61f8      	str	r0, [r7, #28]
        break;
 80037dc:	e009      	b.n	80037f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e2:	61fb      	str	r3, [r7, #28]
        break;
 80037e4:	e005      	b.n	80037f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d077      	beq.n	80038e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005a      	lsls	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	441a      	add	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d916      	bls.n	8003842 <UART_SetConfig+0x4a6>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d212      	bcs.n	8003842 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	b29b      	uxth	r3, r3
 8003820:	f023 030f 	bic.w	r3, r3, #15
 8003824:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	b29a      	uxth	r2, r3
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	4313      	orrs	r3, r2
 8003836:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	8afa      	ldrh	r2, [r7, #22]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	e052      	b.n	80038e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003848:	e04e      	b.n	80038e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800384a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800384e:	2b08      	cmp	r3, #8
 8003850:	d827      	bhi.n	80038a2 <UART_SetConfig+0x506>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x4bc>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003885 	.word	0x08003885
 8003860:	0800388d 	.word	0x0800388d
 8003864:	080038a3 	.word	0x080038a3
 8003868:	08003893 	.word	0x08003893
 800386c:	080038a3 	.word	0x080038a3
 8003870:	080038a3 	.word	0x080038a3
 8003874:	080038a3 	.word	0x080038a3
 8003878:	0800389b 	.word	0x0800389b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800387c:	f7fe fbfe 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8003880:	61f8      	str	r0, [r7, #28]
        break;
 8003882:	e014      	b.n	80038ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003884:	f7fe fc10 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8003888:	61f8      	str	r0, [r7, #28]
        break;
 800388a:	e010      	b.n	80038ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <UART_SetConfig+0x56c>)
 800388e:	61fb      	str	r3, [r7, #28]
        break;
 8003890:	e00d      	b.n	80038ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7fe fb5b 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8003896:	61f8      	str	r0, [r7, #28]
        break;
 8003898:	e009      	b.n	80038ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	61fb      	str	r3, [r7, #28]
        break;
 80038a0:	e005      	b.n	80038ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038ac:	bf00      	nop
    }

    if (pclk != 0U)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d019      	beq.n	80038e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	085a      	lsrs	r2, r3, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	441a      	add	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	d909      	bls.n	80038e2 <UART_SetConfig+0x546>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d205      	bcs.n	80038e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e002      	b.n	80038e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3728      	adds	r7, #40	; 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	40008000 	.word	0x40008000
 8003908:	00f42400 	.word	0x00f42400

0800390c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0a:	d10a      	bne.n	8003a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a60:	f7fd f88e 	bl	8000b80 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d10e      	bne.n	8003a92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f82d 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e023      	b.n	8003ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d10e      	bne.n	8003abe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f817 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e00d      	b.n	8003ada <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b09c      	sub	sp, #112	; 0x70
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af2:	e0a5      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afa:	f000 80a1 	beq.w	8003c40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fd f83f 	bl	8000b80 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d13e      	bne.n	8003b92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b28:	667b      	str	r3, [r7, #100]	; 0x64
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e6      	bne.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3308      	adds	r3, #8
 8003b64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b66:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e5      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e067      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d04f      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bae:	d147      	bne.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c0c:	623a      	str	r2, [r7, #32]
 8003c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69f9      	ldr	r1, [r7, #28]
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e010      	b.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	f43f af4a 	beq.w	8003af4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3770      	adds	r7, #112	; 0x70
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b097      	sub	sp, #92	; 0x5c
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	d10e      	bne.n	8003cbe <UART_Start_Receive_IT+0x52>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <UART_Start_Receive_IT+0x48>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003cae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cb2:	e02d      	b.n	8003d10 <UART_Start_Receive_IT+0xa4>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	22ff      	movs	r2, #255	; 0xff
 8003cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cbc:	e028      	b.n	8003d10 <UART_Start_Receive_IT+0xa4>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <UART_Start_Receive_IT+0x76>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <UART_Start_Receive_IT+0x6c>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	22ff      	movs	r2, #255	; 0xff
 8003cd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd6:	e01b      	b.n	8003d10 <UART_Start_Receive_IT+0xa4>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	227f      	movs	r2, #127	; 0x7f
 8003cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ce0:	e016      	b.n	8003d10 <UART_Start_Receive_IT+0xa4>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cea:	d10d      	bne.n	8003d08 <UART_Start_Receive_IT+0x9c>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <UART_Start_Receive_IT+0x92>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	227f      	movs	r2, #127	; 0x7f
 8003cf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cfc:	e008      	b.n	8003d10 <UART_Start_Receive_IT+0xa4>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	223f      	movs	r2, #63	; 0x3f
 8003d02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d06:	e003      	b.n	8003d10 <UART_Start_Receive_IT+0xa4>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2222      	movs	r2, #34	; 0x22
 8003d1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3308      	adds	r3, #8
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	657b      	str	r3, [r7, #84]	; 0x54
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	d107      	bne.n	8003d6c <UART_Start_Receive_IT+0x100>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d103      	bne.n	8003d6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <UART_Start_Receive_IT+0x18c>)
 8003d68:	665a      	str	r2, [r3, #100]	; 0x64
 8003d6a:	e002      	b.n	8003d72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <UART_Start_Receive_IT+0x190>)
 8003d70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d019      	beq.n	8003db6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
 8003da2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_Start_Receive_IT+0x116>
 8003db4:	e018      	b.n	8003de8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f043 0320 	orr.w	r3, r3, #32
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	69f9      	ldr	r1, [r7, #28]
 8003dda:	6a3a      	ldr	r2, [r7, #32]
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	375c      	adds	r7, #92	; 0x5c
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	080040a7 	.word	0x080040a7
 8003dfc:	08003f47 	.word	0x08003f47

08003e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b095      	sub	sp, #84	; 0x54
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e26:	643b      	str	r3, [r7, #64]	; 0x40
 8003e28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e6      	bne.n	8003e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3308      	adds	r3, #8
 8003e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d118      	bne.n	8003ea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e6      	bne.n	8003e76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003eba:	bf00      	nop
 8003ebc:	3754      	adds	r7, #84	; 0x54
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fa43 	bl	8003370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b088      	sub	sp, #32
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	613b      	str	r3, [r7, #16]
   return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e6      	bne.n	8003efa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fa0f 	bl	800335c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3e:	bf00      	nop
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b096      	sub	sp, #88	; 0x58
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5c:	2b22      	cmp	r3, #34	; 0x22
 8003f5e:	f040 8094 	bne.w	800408a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f6c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f70:	b2d9      	uxtb	r1, r3
 8003f72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d179      	bne.n	800409e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e6      	bne.n	8003faa <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	623b      	str	r3, [r7, #32]
   return(result);
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e5      	bne.n	8003fdc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	2b01      	cmp	r3, #1
 8004022:	d12e      	bne.n	8004082 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	60fb      	str	r3, [r7, #12]
   return(result);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	617b      	str	r3, [r7, #20]
   return(result);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e6      	bne.n	800402a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d103      	bne.n	8004072 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2210      	movs	r2, #16
 8004070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff f982 	bl	8003384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004080:	e00d      	b.n	800409e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fa34 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 8004088:	e009      	b.n	800409e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	8b1b      	ldrh	r3, [r3, #24]
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	b292      	uxth	r2, r2
 800409c:	831a      	strh	r2, [r3, #24]
}
 800409e:	bf00      	nop
 80040a0:	3758      	adds	r7, #88	; 0x58
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b096      	sub	sp, #88	; 0x58
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040bc:	2b22      	cmp	r3, #34	; 0x22
 80040be:	f040 8094 	bne.w	80041ea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80040d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80040d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040da:	4013      	ands	r3, r2
 80040dc:	b29a      	uxth	r2, r3
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d179      	bne.n	80041fe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
 800412a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800412e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e6      	bne.n	800410a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3308      	adds	r3, #8
 8004142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	61fb      	str	r3, [r7, #28]
   return(result);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800415c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004180:	2b01      	cmp	r3, #1
 8004182:	d12e      	bne.n	80041e2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	60bb      	str	r3, [r7, #8]
   return(result);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f023 0310 	bic.w	r3, r3, #16
 800419e:	647b      	str	r3, [r7, #68]	; 0x44
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	613b      	str	r3, [r7, #16]
   return(result);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d103      	bne.n	80041d2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2210      	movs	r2, #16
 80041d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff f8d2 	bl	8003384 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041e0:	e00d      	b.n	80041fe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc f984 	bl	80004f0 <HAL_UART_RxCpltCallback>
}
 80041e8:	e009      	b.n	80041fe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	8b1b      	ldrh	r3, [r3, #24]
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0208 	orr.w	r2, r2, #8
 80041fa:	b292      	uxth	r2, r2
 80041fc:	831a      	strh	r2, [r3, #24]
}
 80041fe:	bf00      	nop
 8004200:	3758      	adds	r7, #88	; 0x58
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <__errno>:
 800421c:	4b01      	ldr	r3, [pc, #4]	; (8004224 <__errno+0x8>)
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	2000000c 	.word	0x2000000c

08004228 <__libc_init_array>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4d0d      	ldr	r5, [pc, #52]	; (8004260 <__libc_init_array+0x38>)
 800422c:	4c0d      	ldr	r4, [pc, #52]	; (8004264 <__libc_init_array+0x3c>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	2600      	movs	r6, #0
 8004234:	42a6      	cmp	r6, r4
 8004236:	d109      	bne.n	800424c <__libc_init_array+0x24>
 8004238:	4d0b      	ldr	r5, [pc, #44]	; (8004268 <__libc_init_array+0x40>)
 800423a:	4c0c      	ldr	r4, [pc, #48]	; (800426c <__libc_init_array+0x44>)
 800423c:	f000 fd1e 	bl	8004c7c <_init>
 8004240:	1b64      	subs	r4, r4, r5
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	2600      	movs	r6, #0
 8004246:	42a6      	cmp	r6, r4
 8004248:	d105      	bne.n	8004256 <__libc_init_array+0x2e>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004250:	4798      	blx	r3
 8004252:	3601      	adds	r6, #1
 8004254:	e7ee      	b.n	8004234 <__libc_init_array+0xc>
 8004256:	f855 3b04 	ldr.w	r3, [r5], #4
 800425a:	4798      	blx	r3
 800425c:	3601      	adds	r6, #1
 800425e:	e7f2      	b.n	8004246 <__libc_init_array+0x1e>
 8004260:	08004de0 	.word	0x08004de0
 8004264:	08004de0 	.word	0x08004de0
 8004268:	08004de0 	.word	0x08004de0
 800426c:	08004de4 	.word	0x08004de4

08004270 <memset>:
 8004270:	4402      	add	r2, r0
 8004272:	4603      	mov	r3, r0
 8004274:	4293      	cmp	r3, r2
 8004276:	d100      	bne.n	800427a <memset+0xa>
 8004278:	4770      	bx	lr
 800427a:	f803 1b01 	strb.w	r1, [r3], #1
 800427e:	e7f9      	b.n	8004274 <memset+0x4>

08004280 <_puts_r>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	460e      	mov	r6, r1
 8004284:	4605      	mov	r5, r0
 8004286:	b118      	cbz	r0, 8004290 <_puts_r+0x10>
 8004288:	6983      	ldr	r3, [r0, #24]
 800428a:	b90b      	cbnz	r3, 8004290 <_puts_r+0x10>
 800428c:	f000 fa48 	bl	8004720 <__sinit>
 8004290:	69ab      	ldr	r3, [r5, #24]
 8004292:	68ac      	ldr	r4, [r5, #8]
 8004294:	b913      	cbnz	r3, 800429c <_puts_r+0x1c>
 8004296:	4628      	mov	r0, r5
 8004298:	f000 fa42 	bl	8004720 <__sinit>
 800429c:	4b2c      	ldr	r3, [pc, #176]	; (8004350 <_puts_r+0xd0>)
 800429e:	429c      	cmp	r4, r3
 80042a0:	d120      	bne.n	80042e4 <_puts_r+0x64>
 80042a2:	686c      	ldr	r4, [r5, #4]
 80042a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042a6:	07db      	lsls	r3, r3, #31
 80042a8:	d405      	bmi.n	80042b6 <_puts_r+0x36>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	0598      	lsls	r0, r3, #22
 80042ae:	d402      	bmi.n	80042b6 <_puts_r+0x36>
 80042b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042b2:	f000 fad3 	bl	800485c <__retarget_lock_acquire_recursive>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	0719      	lsls	r1, r3, #28
 80042ba:	d51d      	bpl.n	80042f8 <_puts_r+0x78>
 80042bc:	6923      	ldr	r3, [r4, #16]
 80042be:	b1db      	cbz	r3, 80042f8 <_puts_r+0x78>
 80042c0:	3e01      	subs	r6, #1
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042c8:	3b01      	subs	r3, #1
 80042ca:	60a3      	str	r3, [r4, #8]
 80042cc:	bb39      	cbnz	r1, 800431e <_puts_r+0x9e>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da38      	bge.n	8004344 <_puts_r+0xc4>
 80042d2:	4622      	mov	r2, r4
 80042d4:	210a      	movs	r1, #10
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 f848 	bl	800436c <__swbuf_r>
 80042dc:	3001      	adds	r0, #1
 80042de:	d011      	beq.n	8004304 <_puts_r+0x84>
 80042e0:	250a      	movs	r5, #10
 80042e2:	e011      	b.n	8004308 <_puts_r+0x88>
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <_puts_r+0xd4>)
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d101      	bne.n	80042ee <_puts_r+0x6e>
 80042ea:	68ac      	ldr	r4, [r5, #8]
 80042ec:	e7da      	b.n	80042a4 <_puts_r+0x24>
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <_puts_r+0xd8>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	bf08      	it	eq
 80042f4:	68ec      	ldreq	r4, [r5, #12]
 80042f6:	e7d5      	b.n	80042a4 <_puts_r+0x24>
 80042f8:	4621      	mov	r1, r4
 80042fa:	4628      	mov	r0, r5
 80042fc:	f000 f888 	bl	8004410 <__swsetup_r>
 8004300:	2800      	cmp	r0, #0
 8004302:	d0dd      	beq.n	80042c0 <_puts_r+0x40>
 8004304:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800430a:	07da      	lsls	r2, r3, #31
 800430c:	d405      	bmi.n	800431a <_puts_r+0x9a>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	059b      	lsls	r3, r3, #22
 8004312:	d402      	bmi.n	800431a <_puts_r+0x9a>
 8004314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004316:	f000 faa2 	bl	800485e <__retarget_lock_release_recursive>
 800431a:	4628      	mov	r0, r5
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	2b00      	cmp	r3, #0
 8004320:	da04      	bge.n	800432c <_puts_r+0xac>
 8004322:	69a2      	ldr	r2, [r4, #24]
 8004324:	429a      	cmp	r2, r3
 8004326:	dc06      	bgt.n	8004336 <_puts_r+0xb6>
 8004328:	290a      	cmp	r1, #10
 800432a:	d004      	beq.n	8004336 <_puts_r+0xb6>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	6022      	str	r2, [r4, #0]
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	e7c5      	b.n	80042c2 <_puts_r+0x42>
 8004336:	4622      	mov	r2, r4
 8004338:	4628      	mov	r0, r5
 800433a:	f000 f817 	bl	800436c <__swbuf_r>
 800433e:	3001      	adds	r0, #1
 8004340:	d1bf      	bne.n	80042c2 <_puts_r+0x42>
 8004342:	e7df      	b.n	8004304 <_puts_r+0x84>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	250a      	movs	r5, #10
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	6022      	str	r2, [r4, #0]
 800434c:	701d      	strb	r5, [r3, #0]
 800434e:	e7db      	b.n	8004308 <_puts_r+0x88>
 8004350:	08004d98 	.word	0x08004d98
 8004354:	08004db8 	.word	0x08004db8
 8004358:	08004d78 	.word	0x08004d78

0800435c <puts>:
 800435c:	4b02      	ldr	r3, [pc, #8]	; (8004368 <puts+0xc>)
 800435e:	4601      	mov	r1, r0
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f7ff bf8d 	b.w	8004280 <_puts_r>
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c

0800436c <__swbuf_r>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	460e      	mov	r6, r1
 8004370:	4614      	mov	r4, r2
 8004372:	4605      	mov	r5, r0
 8004374:	b118      	cbz	r0, 800437e <__swbuf_r+0x12>
 8004376:	6983      	ldr	r3, [r0, #24]
 8004378:	b90b      	cbnz	r3, 800437e <__swbuf_r+0x12>
 800437a:	f000 f9d1 	bl	8004720 <__sinit>
 800437e:	4b21      	ldr	r3, [pc, #132]	; (8004404 <__swbuf_r+0x98>)
 8004380:	429c      	cmp	r4, r3
 8004382:	d12b      	bne.n	80043dc <__swbuf_r+0x70>
 8004384:	686c      	ldr	r4, [r5, #4]
 8004386:	69a3      	ldr	r3, [r4, #24]
 8004388:	60a3      	str	r3, [r4, #8]
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	071a      	lsls	r2, r3, #28
 800438e:	d52f      	bpl.n	80043f0 <__swbuf_r+0x84>
 8004390:	6923      	ldr	r3, [r4, #16]
 8004392:	b36b      	cbz	r3, 80043f0 <__swbuf_r+0x84>
 8004394:	6923      	ldr	r3, [r4, #16]
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	1ac0      	subs	r0, r0, r3
 800439a:	6963      	ldr	r3, [r4, #20]
 800439c:	b2f6      	uxtb	r6, r6
 800439e:	4283      	cmp	r3, r0
 80043a0:	4637      	mov	r7, r6
 80043a2:	dc04      	bgt.n	80043ae <__swbuf_r+0x42>
 80043a4:	4621      	mov	r1, r4
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 f926 	bl	80045f8 <_fflush_r>
 80043ac:	bb30      	cbnz	r0, 80043fc <__swbuf_r+0x90>
 80043ae:	68a3      	ldr	r3, [r4, #8]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	60a3      	str	r3, [r4, #8]
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	6022      	str	r2, [r4, #0]
 80043ba:	701e      	strb	r6, [r3, #0]
 80043bc:	6963      	ldr	r3, [r4, #20]
 80043be:	3001      	adds	r0, #1
 80043c0:	4283      	cmp	r3, r0
 80043c2:	d004      	beq.n	80043ce <__swbuf_r+0x62>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	07db      	lsls	r3, r3, #31
 80043c8:	d506      	bpl.n	80043d8 <__swbuf_r+0x6c>
 80043ca:	2e0a      	cmp	r6, #10
 80043cc:	d104      	bne.n	80043d8 <__swbuf_r+0x6c>
 80043ce:	4621      	mov	r1, r4
 80043d0:	4628      	mov	r0, r5
 80043d2:	f000 f911 	bl	80045f8 <_fflush_r>
 80043d6:	b988      	cbnz	r0, 80043fc <__swbuf_r+0x90>
 80043d8:	4638      	mov	r0, r7
 80043da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <__swbuf_r+0x9c>)
 80043de:	429c      	cmp	r4, r3
 80043e0:	d101      	bne.n	80043e6 <__swbuf_r+0x7a>
 80043e2:	68ac      	ldr	r4, [r5, #8]
 80043e4:	e7cf      	b.n	8004386 <__swbuf_r+0x1a>
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <__swbuf_r+0xa0>)
 80043e8:	429c      	cmp	r4, r3
 80043ea:	bf08      	it	eq
 80043ec:	68ec      	ldreq	r4, [r5, #12]
 80043ee:	e7ca      	b.n	8004386 <__swbuf_r+0x1a>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 f80c 	bl	8004410 <__swsetup_r>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d0cb      	beq.n	8004394 <__swbuf_r+0x28>
 80043fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004400:	e7ea      	b.n	80043d8 <__swbuf_r+0x6c>
 8004402:	bf00      	nop
 8004404:	08004d98 	.word	0x08004d98
 8004408:	08004db8 	.word	0x08004db8
 800440c:	08004d78 	.word	0x08004d78

08004410 <__swsetup_r>:
 8004410:	4b32      	ldr	r3, [pc, #200]	; (80044dc <__swsetup_r+0xcc>)
 8004412:	b570      	push	{r4, r5, r6, lr}
 8004414:	681d      	ldr	r5, [r3, #0]
 8004416:	4606      	mov	r6, r0
 8004418:	460c      	mov	r4, r1
 800441a:	b125      	cbz	r5, 8004426 <__swsetup_r+0x16>
 800441c:	69ab      	ldr	r3, [r5, #24]
 800441e:	b913      	cbnz	r3, 8004426 <__swsetup_r+0x16>
 8004420:	4628      	mov	r0, r5
 8004422:	f000 f97d 	bl	8004720 <__sinit>
 8004426:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <__swsetup_r+0xd0>)
 8004428:	429c      	cmp	r4, r3
 800442a:	d10f      	bne.n	800444c <__swsetup_r+0x3c>
 800442c:	686c      	ldr	r4, [r5, #4]
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004434:	0719      	lsls	r1, r3, #28
 8004436:	d42c      	bmi.n	8004492 <__swsetup_r+0x82>
 8004438:	06dd      	lsls	r5, r3, #27
 800443a:	d411      	bmi.n	8004460 <__swsetup_r+0x50>
 800443c:	2309      	movs	r3, #9
 800443e:	6033      	str	r3, [r6, #0]
 8004440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800444a:	e03e      	b.n	80044ca <__swsetup_r+0xba>
 800444c:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <__swsetup_r+0xd4>)
 800444e:	429c      	cmp	r4, r3
 8004450:	d101      	bne.n	8004456 <__swsetup_r+0x46>
 8004452:	68ac      	ldr	r4, [r5, #8]
 8004454:	e7eb      	b.n	800442e <__swsetup_r+0x1e>
 8004456:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <__swsetup_r+0xd8>)
 8004458:	429c      	cmp	r4, r3
 800445a:	bf08      	it	eq
 800445c:	68ec      	ldreq	r4, [r5, #12]
 800445e:	e7e6      	b.n	800442e <__swsetup_r+0x1e>
 8004460:	0758      	lsls	r0, r3, #29
 8004462:	d512      	bpl.n	800448a <__swsetup_r+0x7a>
 8004464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004466:	b141      	cbz	r1, 800447a <__swsetup_r+0x6a>
 8004468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800446c:	4299      	cmp	r1, r3
 800446e:	d002      	beq.n	8004476 <__swsetup_r+0x66>
 8004470:	4630      	mov	r0, r6
 8004472:	f000 fa5b 	bl	800492c <_free_r>
 8004476:	2300      	movs	r3, #0
 8004478:	6363      	str	r3, [r4, #52]	; 0x34
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004480:	81a3      	strh	r3, [r4, #12]
 8004482:	2300      	movs	r3, #0
 8004484:	6063      	str	r3, [r4, #4]
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	f043 0308 	orr.w	r3, r3, #8
 8004490:	81a3      	strh	r3, [r4, #12]
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	b94b      	cbnz	r3, 80044aa <__swsetup_r+0x9a>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800449c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a0:	d003      	beq.n	80044aa <__swsetup_r+0x9a>
 80044a2:	4621      	mov	r1, r4
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 fa01 	bl	80048ac <__smakebuf_r>
 80044aa:	89a0      	ldrh	r0, [r4, #12]
 80044ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044b0:	f010 0301 	ands.w	r3, r0, #1
 80044b4:	d00a      	beq.n	80044cc <__swsetup_r+0xbc>
 80044b6:	2300      	movs	r3, #0
 80044b8:	60a3      	str	r3, [r4, #8]
 80044ba:	6963      	ldr	r3, [r4, #20]
 80044bc:	425b      	negs	r3, r3
 80044be:	61a3      	str	r3, [r4, #24]
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	b943      	cbnz	r3, 80044d6 <__swsetup_r+0xc6>
 80044c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044c8:	d1ba      	bne.n	8004440 <__swsetup_r+0x30>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	0781      	lsls	r1, r0, #30
 80044ce:	bf58      	it	pl
 80044d0:	6963      	ldrpl	r3, [r4, #20]
 80044d2:	60a3      	str	r3, [r4, #8]
 80044d4:	e7f4      	b.n	80044c0 <__swsetup_r+0xb0>
 80044d6:	2000      	movs	r0, #0
 80044d8:	e7f7      	b.n	80044ca <__swsetup_r+0xba>
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c
 80044e0:	08004d98 	.word	0x08004d98
 80044e4:	08004db8 	.word	0x08004db8
 80044e8:	08004d78 	.word	0x08004d78

080044ec <__sflush_r>:
 80044ec:	898a      	ldrh	r2, [r1, #12]
 80044ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	4605      	mov	r5, r0
 80044f4:	0710      	lsls	r0, r2, #28
 80044f6:	460c      	mov	r4, r1
 80044f8:	d458      	bmi.n	80045ac <__sflush_r+0xc0>
 80044fa:	684b      	ldr	r3, [r1, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	dc05      	bgt.n	800450c <__sflush_r+0x20>
 8004500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	dc02      	bgt.n	800450c <__sflush_r+0x20>
 8004506:	2000      	movs	r0, #0
 8004508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800450c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800450e:	2e00      	cmp	r6, #0
 8004510:	d0f9      	beq.n	8004506 <__sflush_r+0x1a>
 8004512:	2300      	movs	r3, #0
 8004514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004518:	682f      	ldr	r7, [r5, #0]
 800451a:	602b      	str	r3, [r5, #0]
 800451c:	d032      	beq.n	8004584 <__sflush_r+0x98>
 800451e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	075a      	lsls	r2, r3, #29
 8004524:	d505      	bpl.n	8004532 <__sflush_r+0x46>
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	1ac0      	subs	r0, r0, r3
 800452a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800452c:	b10b      	cbz	r3, 8004532 <__sflush_r+0x46>
 800452e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004530:	1ac0      	subs	r0, r0, r3
 8004532:	2300      	movs	r3, #0
 8004534:	4602      	mov	r2, r0
 8004536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004538:	6a21      	ldr	r1, [r4, #32]
 800453a:	4628      	mov	r0, r5
 800453c:	47b0      	blx	r6
 800453e:	1c43      	adds	r3, r0, #1
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	d106      	bne.n	8004552 <__sflush_r+0x66>
 8004544:	6829      	ldr	r1, [r5, #0]
 8004546:	291d      	cmp	r1, #29
 8004548:	d82c      	bhi.n	80045a4 <__sflush_r+0xb8>
 800454a:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <__sflush_r+0x108>)
 800454c:	40ca      	lsrs	r2, r1
 800454e:	07d6      	lsls	r6, r2, #31
 8004550:	d528      	bpl.n	80045a4 <__sflush_r+0xb8>
 8004552:	2200      	movs	r2, #0
 8004554:	6062      	str	r2, [r4, #4]
 8004556:	04d9      	lsls	r1, r3, #19
 8004558:	6922      	ldr	r2, [r4, #16]
 800455a:	6022      	str	r2, [r4, #0]
 800455c:	d504      	bpl.n	8004568 <__sflush_r+0x7c>
 800455e:	1c42      	adds	r2, r0, #1
 8004560:	d101      	bne.n	8004566 <__sflush_r+0x7a>
 8004562:	682b      	ldr	r3, [r5, #0]
 8004564:	b903      	cbnz	r3, 8004568 <__sflush_r+0x7c>
 8004566:	6560      	str	r0, [r4, #84]	; 0x54
 8004568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800456a:	602f      	str	r7, [r5, #0]
 800456c:	2900      	cmp	r1, #0
 800456e:	d0ca      	beq.n	8004506 <__sflush_r+0x1a>
 8004570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004574:	4299      	cmp	r1, r3
 8004576:	d002      	beq.n	800457e <__sflush_r+0x92>
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f9d7 	bl	800492c <_free_r>
 800457e:	2000      	movs	r0, #0
 8004580:	6360      	str	r0, [r4, #52]	; 0x34
 8004582:	e7c1      	b.n	8004508 <__sflush_r+0x1c>
 8004584:	6a21      	ldr	r1, [r4, #32]
 8004586:	2301      	movs	r3, #1
 8004588:	4628      	mov	r0, r5
 800458a:	47b0      	blx	r6
 800458c:	1c41      	adds	r1, r0, #1
 800458e:	d1c7      	bne.n	8004520 <__sflush_r+0x34>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0c4      	beq.n	8004520 <__sflush_r+0x34>
 8004596:	2b1d      	cmp	r3, #29
 8004598:	d001      	beq.n	800459e <__sflush_r+0xb2>
 800459a:	2b16      	cmp	r3, #22
 800459c:	d101      	bne.n	80045a2 <__sflush_r+0xb6>
 800459e:	602f      	str	r7, [r5, #0]
 80045a0:	e7b1      	b.n	8004506 <__sflush_r+0x1a>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a8:	81a3      	strh	r3, [r4, #12]
 80045aa:	e7ad      	b.n	8004508 <__sflush_r+0x1c>
 80045ac:	690f      	ldr	r7, [r1, #16]
 80045ae:	2f00      	cmp	r7, #0
 80045b0:	d0a9      	beq.n	8004506 <__sflush_r+0x1a>
 80045b2:	0793      	lsls	r3, r2, #30
 80045b4:	680e      	ldr	r6, [r1, #0]
 80045b6:	bf08      	it	eq
 80045b8:	694b      	ldreq	r3, [r1, #20]
 80045ba:	600f      	str	r7, [r1, #0]
 80045bc:	bf18      	it	ne
 80045be:	2300      	movne	r3, #0
 80045c0:	eba6 0807 	sub.w	r8, r6, r7
 80045c4:	608b      	str	r3, [r1, #8]
 80045c6:	f1b8 0f00 	cmp.w	r8, #0
 80045ca:	dd9c      	ble.n	8004506 <__sflush_r+0x1a>
 80045cc:	6a21      	ldr	r1, [r4, #32]
 80045ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045d0:	4643      	mov	r3, r8
 80045d2:	463a      	mov	r2, r7
 80045d4:	4628      	mov	r0, r5
 80045d6:	47b0      	blx	r6
 80045d8:	2800      	cmp	r0, #0
 80045da:	dc06      	bgt.n	80045ea <__sflush_r+0xfe>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e8:	e78e      	b.n	8004508 <__sflush_r+0x1c>
 80045ea:	4407      	add	r7, r0
 80045ec:	eba8 0800 	sub.w	r8, r8, r0
 80045f0:	e7e9      	b.n	80045c6 <__sflush_r+0xda>
 80045f2:	bf00      	nop
 80045f4:	20400001 	.word	0x20400001

080045f8 <_fflush_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	690b      	ldr	r3, [r1, #16]
 80045fc:	4605      	mov	r5, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	b913      	cbnz	r3, 8004608 <_fflush_r+0x10>
 8004602:	2500      	movs	r5, #0
 8004604:	4628      	mov	r0, r5
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	b118      	cbz	r0, 8004612 <_fflush_r+0x1a>
 800460a:	6983      	ldr	r3, [r0, #24]
 800460c:	b90b      	cbnz	r3, 8004612 <_fflush_r+0x1a>
 800460e:	f000 f887 	bl	8004720 <__sinit>
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <_fflush_r+0x6c>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d11b      	bne.n	8004650 <_fflush_r+0x58>
 8004618:	686c      	ldr	r4, [r5, #4]
 800461a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ef      	beq.n	8004602 <_fflush_r+0xa>
 8004622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004624:	07d0      	lsls	r0, r2, #31
 8004626:	d404      	bmi.n	8004632 <_fflush_r+0x3a>
 8004628:	0599      	lsls	r1, r3, #22
 800462a:	d402      	bmi.n	8004632 <_fflush_r+0x3a>
 800462c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800462e:	f000 f915 	bl	800485c <__retarget_lock_acquire_recursive>
 8004632:	4628      	mov	r0, r5
 8004634:	4621      	mov	r1, r4
 8004636:	f7ff ff59 	bl	80044ec <__sflush_r>
 800463a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800463c:	07da      	lsls	r2, r3, #31
 800463e:	4605      	mov	r5, r0
 8004640:	d4e0      	bmi.n	8004604 <_fflush_r+0xc>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	059b      	lsls	r3, r3, #22
 8004646:	d4dd      	bmi.n	8004604 <_fflush_r+0xc>
 8004648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800464a:	f000 f908 	bl	800485e <__retarget_lock_release_recursive>
 800464e:	e7d9      	b.n	8004604 <_fflush_r+0xc>
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <_fflush_r+0x70>)
 8004652:	429c      	cmp	r4, r3
 8004654:	d101      	bne.n	800465a <_fflush_r+0x62>
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	e7df      	b.n	800461a <_fflush_r+0x22>
 800465a:	4b04      	ldr	r3, [pc, #16]	; (800466c <_fflush_r+0x74>)
 800465c:	429c      	cmp	r4, r3
 800465e:	bf08      	it	eq
 8004660:	68ec      	ldreq	r4, [r5, #12]
 8004662:	e7da      	b.n	800461a <_fflush_r+0x22>
 8004664:	08004d98 	.word	0x08004d98
 8004668:	08004db8 	.word	0x08004db8
 800466c:	08004d78 	.word	0x08004d78

08004670 <std>:
 8004670:	2300      	movs	r3, #0
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	e9c0 3300 	strd	r3, r3, [r0]
 800467a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800467e:	6083      	str	r3, [r0, #8]
 8004680:	8181      	strh	r1, [r0, #12]
 8004682:	6643      	str	r3, [r0, #100]	; 0x64
 8004684:	81c2      	strh	r2, [r0, #14]
 8004686:	6183      	str	r3, [r0, #24]
 8004688:	4619      	mov	r1, r3
 800468a:	2208      	movs	r2, #8
 800468c:	305c      	adds	r0, #92	; 0x5c
 800468e:	f7ff fdef 	bl	8004270 <memset>
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <std+0x38>)
 8004694:	6263      	str	r3, [r4, #36]	; 0x24
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <std+0x3c>)
 8004698:	62a3      	str	r3, [r4, #40]	; 0x28
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <std+0x40>)
 800469c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <std+0x44>)
 80046a0:	6224      	str	r4, [r4, #32]
 80046a2:	6323      	str	r3, [r4, #48]	; 0x30
 80046a4:	bd10      	pop	{r4, pc}
 80046a6:	bf00      	nop
 80046a8:	08004b0d 	.word	0x08004b0d
 80046ac:	08004b2f 	.word	0x08004b2f
 80046b0:	08004b67 	.word	0x08004b67
 80046b4:	08004b8b 	.word	0x08004b8b

080046b8 <_cleanup_r>:
 80046b8:	4901      	ldr	r1, [pc, #4]	; (80046c0 <_cleanup_r+0x8>)
 80046ba:	f000 b8af 	b.w	800481c <_fwalk_reent>
 80046be:	bf00      	nop
 80046c0:	080045f9 	.word	0x080045f9

080046c4 <__sfmoreglue>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	2268      	movs	r2, #104	; 0x68
 80046c8:	1e4d      	subs	r5, r1, #1
 80046ca:	4355      	muls	r5, r2
 80046cc:	460e      	mov	r6, r1
 80046ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046d2:	f000 f997 	bl	8004a04 <_malloc_r>
 80046d6:	4604      	mov	r4, r0
 80046d8:	b140      	cbz	r0, 80046ec <__sfmoreglue+0x28>
 80046da:	2100      	movs	r1, #0
 80046dc:	e9c0 1600 	strd	r1, r6, [r0]
 80046e0:	300c      	adds	r0, #12
 80046e2:	60a0      	str	r0, [r4, #8]
 80046e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046e8:	f7ff fdc2 	bl	8004270 <memset>
 80046ec:	4620      	mov	r0, r4
 80046ee:	bd70      	pop	{r4, r5, r6, pc}

080046f0 <__sfp_lock_acquire>:
 80046f0:	4801      	ldr	r0, [pc, #4]	; (80046f8 <__sfp_lock_acquire+0x8>)
 80046f2:	f000 b8b3 	b.w	800485c <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	2000011d 	.word	0x2000011d

080046fc <__sfp_lock_release>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__sfp_lock_release+0x8>)
 80046fe:	f000 b8ae 	b.w	800485e <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	2000011d 	.word	0x2000011d

08004708 <__sinit_lock_acquire>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__sinit_lock_acquire+0x8>)
 800470a:	f000 b8a7 	b.w	800485c <__retarget_lock_acquire_recursive>
 800470e:	bf00      	nop
 8004710:	2000011e 	.word	0x2000011e

08004714 <__sinit_lock_release>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__sinit_lock_release+0x8>)
 8004716:	f000 b8a2 	b.w	800485e <__retarget_lock_release_recursive>
 800471a:	bf00      	nop
 800471c:	2000011e 	.word	0x2000011e

08004720 <__sinit>:
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	f7ff fff0 	bl	8004708 <__sinit_lock_acquire>
 8004728:	69a3      	ldr	r3, [r4, #24]
 800472a:	b11b      	cbz	r3, 8004734 <__sinit+0x14>
 800472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004730:	f7ff bff0 	b.w	8004714 <__sinit_lock_release>
 8004734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004738:	6523      	str	r3, [r4, #80]	; 0x50
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <__sinit+0x68>)
 800473c:	4a13      	ldr	r2, [pc, #76]	; (800478c <__sinit+0x6c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	62a2      	str	r2, [r4, #40]	; 0x28
 8004742:	42a3      	cmp	r3, r4
 8004744:	bf04      	itt	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	61a3      	streq	r3, [r4, #24]
 800474a:	4620      	mov	r0, r4
 800474c:	f000 f820 	bl	8004790 <__sfp>
 8004750:	6060      	str	r0, [r4, #4]
 8004752:	4620      	mov	r0, r4
 8004754:	f000 f81c 	bl	8004790 <__sfp>
 8004758:	60a0      	str	r0, [r4, #8]
 800475a:	4620      	mov	r0, r4
 800475c:	f000 f818 	bl	8004790 <__sfp>
 8004760:	2200      	movs	r2, #0
 8004762:	60e0      	str	r0, [r4, #12]
 8004764:	2104      	movs	r1, #4
 8004766:	6860      	ldr	r0, [r4, #4]
 8004768:	f7ff ff82 	bl	8004670 <std>
 800476c:	68a0      	ldr	r0, [r4, #8]
 800476e:	2201      	movs	r2, #1
 8004770:	2109      	movs	r1, #9
 8004772:	f7ff ff7d 	bl	8004670 <std>
 8004776:	68e0      	ldr	r0, [r4, #12]
 8004778:	2202      	movs	r2, #2
 800477a:	2112      	movs	r1, #18
 800477c:	f7ff ff78 	bl	8004670 <std>
 8004780:	2301      	movs	r3, #1
 8004782:	61a3      	str	r3, [r4, #24]
 8004784:	e7d2      	b.n	800472c <__sinit+0xc>
 8004786:	bf00      	nop
 8004788:	08004d74 	.word	0x08004d74
 800478c:	080046b9 	.word	0x080046b9

08004790 <__sfp>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	4607      	mov	r7, r0
 8004794:	f7ff ffac 	bl	80046f0 <__sfp_lock_acquire>
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <__sfp+0x84>)
 800479a:	681e      	ldr	r6, [r3, #0]
 800479c:	69b3      	ldr	r3, [r6, #24]
 800479e:	b913      	cbnz	r3, 80047a6 <__sfp+0x16>
 80047a0:	4630      	mov	r0, r6
 80047a2:	f7ff ffbd 	bl	8004720 <__sinit>
 80047a6:	3648      	adds	r6, #72	; 0x48
 80047a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	d503      	bpl.n	80047b8 <__sfp+0x28>
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	b30b      	cbz	r3, 80047f8 <__sfp+0x68>
 80047b4:	6836      	ldr	r6, [r6, #0]
 80047b6:	e7f7      	b.n	80047a8 <__sfp+0x18>
 80047b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047bc:	b9d5      	cbnz	r5, 80047f4 <__sfp+0x64>
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <__sfp+0x88>)
 80047c0:	60e3      	str	r3, [r4, #12]
 80047c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047c6:	6665      	str	r5, [r4, #100]	; 0x64
 80047c8:	f000 f847 	bl	800485a <__retarget_lock_init_recursive>
 80047cc:	f7ff ff96 	bl	80046fc <__sfp_lock_release>
 80047d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047d8:	6025      	str	r5, [r4, #0]
 80047da:	61a5      	str	r5, [r4, #24]
 80047dc:	2208      	movs	r2, #8
 80047de:	4629      	mov	r1, r5
 80047e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047e4:	f7ff fd44 	bl	8004270 <memset>
 80047e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047f0:	4620      	mov	r0, r4
 80047f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f4:	3468      	adds	r4, #104	; 0x68
 80047f6:	e7d9      	b.n	80047ac <__sfp+0x1c>
 80047f8:	2104      	movs	r1, #4
 80047fa:	4638      	mov	r0, r7
 80047fc:	f7ff ff62 	bl	80046c4 <__sfmoreglue>
 8004800:	4604      	mov	r4, r0
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	2800      	cmp	r0, #0
 8004806:	d1d5      	bne.n	80047b4 <__sfp+0x24>
 8004808:	f7ff ff78 	bl	80046fc <__sfp_lock_release>
 800480c:	230c      	movs	r3, #12
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	e7ee      	b.n	80047f0 <__sfp+0x60>
 8004812:	bf00      	nop
 8004814:	08004d74 	.word	0x08004d74
 8004818:	ffff0001 	.word	0xffff0001

0800481c <_fwalk_reent>:
 800481c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004820:	4606      	mov	r6, r0
 8004822:	4688      	mov	r8, r1
 8004824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004828:	2700      	movs	r7, #0
 800482a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800482e:	f1b9 0901 	subs.w	r9, r9, #1
 8004832:	d505      	bpl.n	8004840 <_fwalk_reent+0x24>
 8004834:	6824      	ldr	r4, [r4, #0]
 8004836:	2c00      	cmp	r4, #0
 8004838:	d1f7      	bne.n	800482a <_fwalk_reent+0xe>
 800483a:	4638      	mov	r0, r7
 800483c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004840:	89ab      	ldrh	r3, [r5, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d907      	bls.n	8004856 <_fwalk_reent+0x3a>
 8004846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800484a:	3301      	adds	r3, #1
 800484c:	d003      	beq.n	8004856 <_fwalk_reent+0x3a>
 800484e:	4629      	mov	r1, r5
 8004850:	4630      	mov	r0, r6
 8004852:	47c0      	blx	r8
 8004854:	4307      	orrs	r7, r0
 8004856:	3568      	adds	r5, #104	; 0x68
 8004858:	e7e9      	b.n	800482e <_fwalk_reent+0x12>

0800485a <__retarget_lock_init_recursive>:
 800485a:	4770      	bx	lr

0800485c <__retarget_lock_acquire_recursive>:
 800485c:	4770      	bx	lr

0800485e <__retarget_lock_release_recursive>:
 800485e:	4770      	bx	lr

08004860 <__swhatbuf_r>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	460e      	mov	r6, r1
 8004864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004868:	2900      	cmp	r1, #0
 800486a:	b096      	sub	sp, #88	; 0x58
 800486c:	4614      	mov	r4, r2
 800486e:	461d      	mov	r5, r3
 8004870:	da08      	bge.n	8004884 <__swhatbuf_r+0x24>
 8004872:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	602a      	str	r2, [r5, #0]
 800487a:	061a      	lsls	r2, r3, #24
 800487c:	d410      	bmi.n	80048a0 <__swhatbuf_r+0x40>
 800487e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004882:	e00e      	b.n	80048a2 <__swhatbuf_r+0x42>
 8004884:	466a      	mov	r2, sp
 8004886:	f000 f9a7 	bl	8004bd8 <_fstat_r>
 800488a:	2800      	cmp	r0, #0
 800488c:	dbf1      	blt.n	8004872 <__swhatbuf_r+0x12>
 800488e:	9a01      	ldr	r2, [sp, #4]
 8004890:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004894:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004898:	425a      	negs	r2, r3
 800489a:	415a      	adcs	r2, r3
 800489c:	602a      	str	r2, [r5, #0]
 800489e:	e7ee      	b.n	800487e <__swhatbuf_r+0x1e>
 80048a0:	2340      	movs	r3, #64	; 0x40
 80048a2:	2000      	movs	r0, #0
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	b016      	add	sp, #88	; 0x58
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080048ac <__smakebuf_r>:
 80048ac:	898b      	ldrh	r3, [r1, #12]
 80048ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048b0:	079d      	lsls	r5, r3, #30
 80048b2:	4606      	mov	r6, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	d507      	bpl.n	80048c8 <__smakebuf_r+0x1c>
 80048b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	2301      	movs	r3, #1
 80048c2:	6163      	str	r3, [r4, #20]
 80048c4:	b002      	add	sp, #8
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	ab01      	add	r3, sp, #4
 80048ca:	466a      	mov	r2, sp
 80048cc:	f7ff ffc8 	bl	8004860 <__swhatbuf_r>
 80048d0:	9900      	ldr	r1, [sp, #0]
 80048d2:	4605      	mov	r5, r0
 80048d4:	4630      	mov	r0, r6
 80048d6:	f000 f895 	bl	8004a04 <_malloc_r>
 80048da:	b948      	cbnz	r0, 80048f0 <__smakebuf_r+0x44>
 80048dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e0:	059a      	lsls	r2, r3, #22
 80048e2:	d4ef      	bmi.n	80048c4 <__smakebuf_r+0x18>
 80048e4:	f023 0303 	bic.w	r3, r3, #3
 80048e8:	f043 0302 	orr.w	r3, r3, #2
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	e7e3      	b.n	80048b8 <__smakebuf_r+0xc>
 80048f0:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <__smakebuf_r+0x7c>)
 80048f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	6020      	str	r0, [r4, #0]
 80048f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	9b00      	ldr	r3, [sp, #0]
 8004900:	6163      	str	r3, [r4, #20]
 8004902:	9b01      	ldr	r3, [sp, #4]
 8004904:	6120      	str	r0, [r4, #16]
 8004906:	b15b      	cbz	r3, 8004920 <__smakebuf_r+0x74>
 8004908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800490c:	4630      	mov	r0, r6
 800490e:	f000 f975 	bl	8004bfc <_isatty_r>
 8004912:	b128      	cbz	r0, 8004920 <__smakebuf_r+0x74>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	89a0      	ldrh	r0, [r4, #12]
 8004922:	4305      	orrs	r5, r0
 8004924:	81a5      	strh	r5, [r4, #12]
 8004926:	e7cd      	b.n	80048c4 <__smakebuf_r+0x18>
 8004928:	080046b9 	.word	0x080046b9

0800492c <_free_r>:
 800492c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800492e:	2900      	cmp	r1, #0
 8004930:	d044      	beq.n	80049bc <_free_r+0x90>
 8004932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004936:	9001      	str	r0, [sp, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f1a1 0404 	sub.w	r4, r1, #4
 800493e:	bfb8      	it	lt
 8004940:	18e4      	addlt	r4, r4, r3
 8004942:	f000 f97d 	bl	8004c40 <__malloc_lock>
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <_free_r+0x94>)
 8004948:	9801      	ldr	r0, [sp, #4]
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	b933      	cbnz	r3, 800495c <_free_r+0x30>
 800494e:	6063      	str	r3, [r4, #4]
 8004950:	6014      	str	r4, [r2, #0]
 8004952:	b003      	add	sp, #12
 8004954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004958:	f000 b978 	b.w	8004c4c <__malloc_unlock>
 800495c:	42a3      	cmp	r3, r4
 800495e:	d908      	bls.n	8004972 <_free_r+0x46>
 8004960:	6825      	ldr	r5, [r4, #0]
 8004962:	1961      	adds	r1, r4, r5
 8004964:	428b      	cmp	r3, r1
 8004966:	bf01      	itttt	eq
 8004968:	6819      	ldreq	r1, [r3, #0]
 800496a:	685b      	ldreq	r3, [r3, #4]
 800496c:	1949      	addeq	r1, r1, r5
 800496e:	6021      	streq	r1, [r4, #0]
 8004970:	e7ed      	b.n	800494e <_free_r+0x22>
 8004972:	461a      	mov	r2, r3
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	b10b      	cbz	r3, 800497c <_free_r+0x50>
 8004978:	42a3      	cmp	r3, r4
 800497a:	d9fa      	bls.n	8004972 <_free_r+0x46>
 800497c:	6811      	ldr	r1, [r2, #0]
 800497e:	1855      	adds	r5, r2, r1
 8004980:	42a5      	cmp	r5, r4
 8004982:	d10b      	bne.n	800499c <_free_r+0x70>
 8004984:	6824      	ldr	r4, [r4, #0]
 8004986:	4421      	add	r1, r4
 8004988:	1854      	adds	r4, r2, r1
 800498a:	42a3      	cmp	r3, r4
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	d1e0      	bne.n	8004952 <_free_r+0x26>
 8004990:	681c      	ldr	r4, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	6053      	str	r3, [r2, #4]
 8004996:	4421      	add	r1, r4
 8004998:	6011      	str	r1, [r2, #0]
 800499a:	e7da      	b.n	8004952 <_free_r+0x26>
 800499c:	d902      	bls.n	80049a4 <_free_r+0x78>
 800499e:	230c      	movs	r3, #12
 80049a0:	6003      	str	r3, [r0, #0]
 80049a2:	e7d6      	b.n	8004952 <_free_r+0x26>
 80049a4:	6825      	ldr	r5, [r4, #0]
 80049a6:	1961      	adds	r1, r4, r5
 80049a8:	428b      	cmp	r3, r1
 80049aa:	bf04      	itt	eq
 80049ac:	6819      	ldreq	r1, [r3, #0]
 80049ae:	685b      	ldreq	r3, [r3, #4]
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	bf04      	itt	eq
 80049b4:	1949      	addeq	r1, r1, r5
 80049b6:	6021      	streq	r1, [r4, #0]
 80049b8:	6054      	str	r4, [r2, #4]
 80049ba:	e7ca      	b.n	8004952 <_free_r+0x26>
 80049bc:	b003      	add	sp, #12
 80049be:	bd30      	pop	{r4, r5, pc}
 80049c0:	20000120 	.word	0x20000120

080049c4 <sbrk_aligned>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4e0e      	ldr	r6, [pc, #56]	; (8004a00 <sbrk_aligned+0x3c>)
 80049c8:	460c      	mov	r4, r1
 80049ca:	6831      	ldr	r1, [r6, #0]
 80049cc:	4605      	mov	r5, r0
 80049ce:	b911      	cbnz	r1, 80049d6 <sbrk_aligned+0x12>
 80049d0:	f000 f88c 	bl	8004aec <_sbrk_r>
 80049d4:	6030      	str	r0, [r6, #0]
 80049d6:	4621      	mov	r1, r4
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 f887 	bl	8004aec <_sbrk_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	d00a      	beq.n	80049f8 <sbrk_aligned+0x34>
 80049e2:	1cc4      	adds	r4, r0, #3
 80049e4:	f024 0403 	bic.w	r4, r4, #3
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	d007      	beq.n	80049fc <sbrk_aligned+0x38>
 80049ec:	1a21      	subs	r1, r4, r0
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 f87c 	bl	8004aec <_sbrk_r>
 80049f4:	3001      	adds	r0, #1
 80049f6:	d101      	bne.n	80049fc <sbrk_aligned+0x38>
 80049f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80049fc:	4620      	mov	r0, r4
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	20000124 	.word	0x20000124

08004a04 <_malloc_r>:
 8004a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a08:	1ccd      	adds	r5, r1, #3
 8004a0a:	f025 0503 	bic.w	r5, r5, #3
 8004a0e:	3508      	adds	r5, #8
 8004a10:	2d0c      	cmp	r5, #12
 8004a12:	bf38      	it	cc
 8004a14:	250c      	movcc	r5, #12
 8004a16:	2d00      	cmp	r5, #0
 8004a18:	4607      	mov	r7, r0
 8004a1a:	db01      	blt.n	8004a20 <_malloc_r+0x1c>
 8004a1c:	42a9      	cmp	r1, r5
 8004a1e:	d905      	bls.n	8004a2c <_malloc_r+0x28>
 8004a20:	230c      	movs	r3, #12
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	2600      	movs	r6, #0
 8004a26:	4630      	mov	r0, r6
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2c:	4e2e      	ldr	r6, [pc, #184]	; (8004ae8 <_malloc_r+0xe4>)
 8004a2e:	f000 f907 	bl	8004c40 <__malloc_lock>
 8004a32:	6833      	ldr	r3, [r6, #0]
 8004a34:	461c      	mov	r4, r3
 8004a36:	bb34      	cbnz	r4, 8004a86 <_malloc_r+0x82>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	f7ff ffc2 	bl	80049c4 <sbrk_aligned>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	4604      	mov	r4, r0
 8004a44:	d14d      	bne.n	8004ae2 <_malloc_r+0xde>
 8004a46:	6834      	ldr	r4, [r6, #0]
 8004a48:	4626      	mov	r6, r4
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d140      	bne.n	8004ad0 <_malloc_r+0xcc>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	4631      	mov	r1, r6
 8004a52:	4638      	mov	r0, r7
 8004a54:	eb04 0803 	add.w	r8, r4, r3
 8004a58:	f000 f848 	bl	8004aec <_sbrk_r>
 8004a5c:	4580      	cmp	r8, r0
 8004a5e:	d13a      	bne.n	8004ad6 <_malloc_r+0xd2>
 8004a60:	6821      	ldr	r1, [r4, #0]
 8004a62:	3503      	adds	r5, #3
 8004a64:	1a6d      	subs	r5, r5, r1
 8004a66:	f025 0503 	bic.w	r5, r5, #3
 8004a6a:	3508      	adds	r5, #8
 8004a6c:	2d0c      	cmp	r5, #12
 8004a6e:	bf38      	it	cc
 8004a70:	250c      	movcc	r5, #12
 8004a72:	4629      	mov	r1, r5
 8004a74:	4638      	mov	r0, r7
 8004a76:	f7ff ffa5 	bl	80049c4 <sbrk_aligned>
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d02b      	beq.n	8004ad6 <_malloc_r+0xd2>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	442b      	add	r3, r5
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	e00e      	b.n	8004aa4 <_malloc_r+0xa0>
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	1b52      	subs	r2, r2, r5
 8004a8a:	d41e      	bmi.n	8004aca <_malloc_r+0xc6>
 8004a8c:	2a0b      	cmp	r2, #11
 8004a8e:	d916      	bls.n	8004abe <_malloc_r+0xba>
 8004a90:	1961      	adds	r1, r4, r5
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	6025      	str	r5, [r4, #0]
 8004a96:	bf18      	it	ne
 8004a98:	6059      	strne	r1, [r3, #4]
 8004a9a:	6863      	ldr	r3, [r4, #4]
 8004a9c:	bf08      	it	eq
 8004a9e:	6031      	streq	r1, [r6, #0]
 8004aa0:	5162      	str	r2, [r4, r5]
 8004aa2:	604b      	str	r3, [r1, #4]
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f104 060b 	add.w	r6, r4, #11
 8004aaa:	f000 f8cf 	bl	8004c4c <__malloc_unlock>
 8004aae:	f026 0607 	bic.w	r6, r6, #7
 8004ab2:	1d23      	adds	r3, r4, #4
 8004ab4:	1af2      	subs	r2, r6, r3
 8004ab6:	d0b6      	beq.n	8004a26 <_malloc_r+0x22>
 8004ab8:	1b9b      	subs	r3, r3, r6
 8004aba:	50a3      	str	r3, [r4, r2]
 8004abc:	e7b3      	b.n	8004a26 <_malloc_r+0x22>
 8004abe:	6862      	ldr	r2, [r4, #4]
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	bf0c      	ite	eq
 8004ac4:	6032      	streq	r2, [r6, #0]
 8004ac6:	605a      	strne	r2, [r3, #4]
 8004ac8:	e7ec      	b.n	8004aa4 <_malloc_r+0xa0>
 8004aca:	4623      	mov	r3, r4
 8004acc:	6864      	ldr	r4, [r4, #4]
 8004ace:	e7b2      	b.n	8004a36 <_malloc_r+0x32>
 8004ad0:	4634      	mov	r4, r6
 8004ad2:	6876      	ldr	r6, [r6, #4]
 8004ad4:	e7b9      	b.n	8004a4a <_malloc_r+0x46>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4638      	mov	r0, r7
 8004adc:	f000 f8b6 	bl	8004c4c <__malloc_unlock>
 8004ae0:	e7a1      	b.n	8004a26 <_malloc_r+0x22>
 8004ae2:	6025      	str	r5, [r4, #0]
 8004ae4:	e7de      	b.n	8004aa4 <_malloc_r+0xa0>
 8004ae6:	bf00      	nop
 8004ae8:	20000120 	.word	0x20000120

08004aec <_sbrk_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d06      	ldr	r5, [pc, #24]	; (8004b08 <_sbrk_r+0x1c>)
 8004af0:	2300      	movs	r3, #0
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	602b      	str	r3, [r5, #0]
 8004af8:	f7fb ff68 	bl	80009cc <_sbrk>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_sbrk_r+0x1a>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_sbrk_r+0x1a>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	20000128 	.word	0x20000128

08004b0c <__sread>:
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	460c      	mov	r4, r1
 8004b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b14:	f000 f8a0 	bl	8004c58 <_read_r>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	bfab      	itete	ge
 8004b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b20:	181b      	addge	r3, r3, r0
 8004b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b26:	bfac      	ite	ge
 8004b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b2a:	81a3      	strhlt	r3, [r4, #12]
 8004b2c:	bd10      	pop	{r4, pc}

08004b2e <__swrite>:
 8004b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b32:	461f      	mov	r7, r3
 8004b34:	898b      	ldrh	r3, [r1, #12]
 8004b36:	05db      	lsls	r3, r3, #23
 8004b38:	4605      	mov	r5, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	d505      	bpl.n	8004b4c <__swrite+0x1e>
 8004b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b44:	2302      	movs	r3, #2
 8004b46:	2200      	movs	r2, #0
 8004b48:	f000 f868 	bl	8004c1c <_lseek_r>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	4632      	mov	r2, r6
 8004b5a:	463b      	mov	r3, r7
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b62:	f000 b817 	b.w	8004b94 <_write_r>

08004b66 <__sseek>:
 8004b66:	b510      	push	{r4, lr}
 8004b68:	460c      	mov	r4, r1
 8004b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6e:	f000 f855 	bl	8004c1c <_lseek_r>
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	bf15      	itete	ne
 8004b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b82:	81a3      	strheq	r3, [r4, #12]
 8004b84:	bf18      	it	ne
 8004b86:	81a3      	strhne	r3, [r4, #12]
 8004b88:	bd10      	pop	{r4, pc}

08004b8a <__sclose>:
 8004b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8e:	f000 b813 	b.w	8004bb8 <_close_r>
	...

08004b94 <_write_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d07      	ldr	r5, [pc, #28]	; (8004bb4 <_write_r+0x20>)
 8004b98:	4604      	mov	r4, r0
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	602a      	str	r2, [r5, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7fb fec8 	bl	8000938 <_write>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_write_r+0x1e>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_write_r+0x1e>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20000128 	.word	0x20000128

08004bb8 <_close_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4d06      	ldr	r5, [pc, #24]	; (8004bd4 <_close_r+0x1c>)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	f7fb fece 	bl	8000964 <_close>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_close_r+0x1a>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_close_r+0x1a>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000128 	.word	0x20000128

08004bd8 <_fstat_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4d07      	ldr	r5, [pc, #28]	; (8004bf8 <_fstat_r+0x20>)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4604      	mov	r4, r0
 8004be0:	4608      	mov	r0, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	602b      	str	r3, [r5, #0]
 8004be6:	f7fb fec9 	bl	800097c <_fstat>
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	d102      	bne.n	8004bf4 <_fstat_r+0x1c>
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	b103      	cbz	r3, 8004bf4 <_fstat_r+0x1c>
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	bd38      	pop	{r3, r4, r5, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000128 	.word	0x20000128

08004bfc <_isatty_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d06      	ldr	r5, [pc, #24]	; (8004c18 <_isatty_r+0x1c>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	602b      	str	r3, [r5, #0]
 8004c08:	f7fb fec8 	bl	800099c <_isatty>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_isatty_r+0x1a>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_isatty_r+0x1a>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	20000128 	.word	0x20000128

08004c1c <_lseek_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4d07      	ldr	r5, [pc, #28]	; (8004c3c <_lseek_r+0x20>)
 8004c20:	4604      	mov	r4, r0
 8004c22:	4608      	mov	r0, r1
 8004c24:	4611      	mov	r1, r2
 8004c26:	2200      	movs	r2, #0
 8004c28:	602a      	str	r2, [r5, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f7fb fec1 	bl	80009b2 <_lseek>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_lseek_r+0x1e>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_lseek_r+0x1e>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000128 	.word	0x20000128

08004c40 <__malloc_lock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__malloc_lock+0x8>)
 8004c42:	f7ff be0b 	b.w	800485c <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	2000011c 	.word	0x2000011c

08004c4c <__malloc_unlock>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__malloc_unlock+0x8>)
 8004c4e:	f7ff be06 	b.w	800485e <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	2000011c 	.word	0x2000011c

08004c58 <_read_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d07      	ldr	r5, [pc, #28]	; (8004c78 <_read_r+0x20>)
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	4608      	mov	r0, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	2200      	movs	r2, #0
 8004c64:	602a      	str	r2, [r5, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fb fe48 	bl	80008fc <_read>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_read_r+0x1e>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_read_r+0x1e>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	20000128 	.word	0x20000128

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
