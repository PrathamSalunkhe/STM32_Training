
02_STOP_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004224  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004500  08004500  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004508  08004508  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08004580  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004580  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4f4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020be  00000000  00000000  0002f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00031658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a538  00000000  00000000  00032ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3d4  00000000  00000000  0005d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100014  00000000  00000000  0006b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b7c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000395c  00000000  00000000  0016b810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080043b8 	.word	0x080043b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080043b8 	.word	0x080043b8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BSP_USER_IT_PIN_Pin)
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000500:	d108      	bne.n	8000514 <HAL_GPIO_EXTI_Callback+0x24>
	{
		SystemClock_Config();
 8000502:	f000 f871 	bl	80005e8 <SystemClock_Config>
		HAL_ResumeTick();
 8000506:	f000 fbed 	bl	8000ce4 <HAL_ResumeTick>
		printf("Woke up from STOP MODE by EXTI\r\n");
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <HAL_GPIO_EXTI_Callback+0x2c>)
 800050c:	f003 fac4 	bl	8003a98 <puts>
		HAL_PWR_DisableSleepOnExit();
 8000510:	f000 fef6 	bl	8001300 <HAL_PWR_DisableSleepOnExit>
	}
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	080043d0 	.word	0x080043d0

08000520 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8000528:	f000 f85e 	bl	80005e8 <SystemClock_Config>
	HAL_ResumeTick();
 800052c:	f000 fbda 	bl	8000ce4 <HAL_ResumeTick>
	printf("Woke up from STOP MODE by RTC\r\n");
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8000532:	f003 fab1 	bl	8003a98 <puts>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	080043f0 	.word	0x080043f0

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fb22 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f84b 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f8ef 	bl	8000734 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000556:	f000 f88f 	bl	8000678 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800055a:	f000 f8b9 	bl	80006d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  printf("Going into the STOP MODE\r\n");
 800055e:	481e      	ldr	r0, [pc, #120]	; (80005d8 <main+0x94>)
 8000560:	f003 fa9a 	bl	8003a98 <puts>
  for(int i=0; i<20; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	e009      	b.n	800057e <main+0x3a>
  {
	  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	481b      	ldr	r0, [pc, #108]	; (80005dc <main+0x98>)
 800056e:	f000 fe85 	bl	800127c <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000572:	20c8      	movs	r0, #200	; 0xc8
 8000574:	f000 fb82 	bl	8000c7c <HAL_Delay>
  for(int i=0; i<20; i++)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3301      	adds	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b13      	cmp	r3, #19
 8000582:	ddf2      	ble.n	800056a <main+0x26>
        Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
        ==> WakeUpCounter = ~20s/0.0005s = 40000 = 0xA017
        ==> WakeUpCounter = ~10s/0.0005s = 20000 = 0x4E20
        ==> WakeUpCounter = ~5s/0.0005s = 10000 = 0x2710 */

  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000584:	2200      	movs	r2, #0
 8000586:	f242 7110 	movw	r1, #10000	; 0x2710
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <main+0x9c>)
 800058c:	f002 fb82 	bl	8002c94 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <main+0x56>
  {
    Error_Handler();
 8000596:	f000 f923 	bl	80007e0 <Error_Handler>
  }

  /*** suspend the systick before going into stop mode ***/
  HAL_SuspendTick();
 800059a:	f000 fb93 	bl	8000cc4 <HAL_SuspendTick>

  /*** enable sleep on exit for only interrupt operations ***/
  HAL_PWR_EnableSleepOnExit();
 800059e:	f000 fe9f 	bl	80012e0 <HAL_PWR_EnableSleepOnExit>

  /*** enter the stop mode ***/
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 ff30 	bl	8001408 <HAL_PWREx_EnterSTOP2Mode>

  /*** wake up from stop mode ***/

  /*** disable rtc wake up ***/
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <main+0x9c>)
 80005aa:	f002 fc07 	bl	8002dbc <HAL_RTCEx_DeactivateWakeUpTimer>


  /*** returned from stop mode ***/

  printf("Woke up from STOP MODE in main loop\r\n");
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <main+0xa0>)
 80005b0:	f003 fa72 	bl	8003a98 <puts>
  for(int i=0; i<10; i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	e00a      	b.n	80005d0 <main+0x8c>
    {
  	  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <main+0x98>)
 80005be:	f000 fe5d 	bl	800127c <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 80005c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c6:	f000 fb59 	bl	8000c7c <HAL_Delay>
  for(int i=0; i<10; i++)
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2b09      	cmp	r3, #9
 80005d4:	ddf1      	ble.n	80005ba <main+0x76>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x92>
 80005d8:	08004410 	.word	0x08004410
 80005dc:	48000800 	.word	0x48000800
 80005e0:	20000110 	.word	0x20000110
 80005e4:	0800442c 	.word	0x0800442c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	; 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f9d8 	bl	80039ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060e:	f000 fe95 	bl	800133c <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 f8e2 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800061c:	230a      	movs	r3, #10
 800061e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2340      	movs	r3, #64	; 0x40
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff12 	bl	8001460 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000642:	f000 f8cd 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064a:	2301      	movs	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fb17 	bl	8001c94 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800066c:	f000 f8b8 	bl	80007e0 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_LPUART1_UART_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006b6:	f002 fc05 	bl	8002ec4 <HAL_UART_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f88e 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	40008000 	.word	0x40008000

080006d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_RTC_Init+0x5c>)
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <MX_RTC_Init+0x60>)
 80006d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_RTC_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_RTC_Init+0x5c>)
 80006e2:	227f      	movs	r2, #127	; 0x7f
 80006e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_RTC_Init+0x5c>)
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_RTC_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_RTC_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_RTC_Init+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_RTC_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_RTC_Init+0x5c>)
 8000706:	f002 f9b3 	bl	8002a70 <HAL_RTC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000710:	f000 f866 	bl	80007e0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_RTC_Init+0x5c>)
 800071a:	f002 fabb 	bl	8002c94 <HAL_RTCEx_SetWakeUpTimer_IT>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f85c 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000110 	.word	0x20000110
 8000730:	40002800 	.word	0x40002800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_GPIO_Init+0xa4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_GPIO_Init+0xa4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800077a:	f000 fe35 	bl	80013e8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4816      	ldr	r0, [pc, #88]	; (80007dc <MX_GPIO_Init+0xa8>)
 8000784:	f000 fd62 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_IT_PIN_Pin */
  GPIO_InitStruct.Pin = BSP_USER_IT_PIN_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_USER_IT_PIN_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	480f      	ldr	r0, [pc, #60]	; (80007dc <MX_GPIO_Init+0xa8>)
 80007a0:	f000 fbc2 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <MX_GPIO_Init+0xa8>)
 80007bc:	f000 fbb4 	bl	8000f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2028      	movs	r0, #40	; 0x28
 80007c6:	f000 fb78 	bl	8000eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ca:	2028      	movs	r0, #40	; 0x28
 80007cc:	f000 fb91 	bl	8000ef2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ac      	sub	sp, #176	; 0xb0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	228c      	movs	r2, #140	; 0x8c
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f003 f8a9 	bl	80039ac <memset>
  if(huart->Instance==LPUART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d13d      	bne.n	80008e0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000864:	2320      	movs	r3, #32
 8000866:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fc33 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ffb0 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_UART_MspInit+0xb8>)
 8000882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_UART_MspInit+0xb8>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_UART_MspInit+0xb8>)
 800088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_UART_MspInit+0xb8>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a13      	ldr	r2, [pc, #76]	; (80008ec <HAL_UART_MspInit+0xb8>)
 800089e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_UART_MspInit+0xb8>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80008b0:	f000 fd9a 	bl	80013e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80008b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ce:	2308      	movs	r3, #8
 80008d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_UART_MspInit+0xbc>)
 80008dc:	f000 fb24 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	37b0      	adds	r7, #176	; 0xb0
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40008000 	.word	0x40008000
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48001800 	.word	0x48001800

080008f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0a6      	sub	sp, #152	; 0x98
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	228c      	movs	r2, #140	; 0x8c
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f851 	bl	80039ac <memset>
  if(hrtc->Instance==RTC)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_RTC_MspInit+0x6c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d120      	bne.n	8000956 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000918:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800091a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fbd8 	bl	80020dc <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000932:	f7ff ff55 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_RTC_MspInit+0x70>)
 8000938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800093c:	4a09      	ldr	r2, [pc, #36]	; (8000964 <HAL_RTC_MspInit+0x70>)
 800093e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2003      	movs	r0, #3
 800094c:	f000 fab5 	bl	8000eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 face 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3798      	adds	r7, #152	; 0x98
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40002800 	.word	0x40002800
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f942 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <RTC_WKUP_IRQHandler+0x10>)
 80009c2:	f002 fa59 	bl	8002e78 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000110 	.word	0x20000110

080009d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_USER_IT_PIN_Pin);
 80009d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009d8:	f000 fc6a 	bl	80012b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e00a      	b.n	8000a08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f2:	f3af 8000 	nop.w
 80009f6:	4601      	mov	r1, r0
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf0      	blt.n	80009f2 <_read+0x12>
  }

  return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <_write+0x28>)
 8000a34:	f002 fa94 	bl	8002f60 <HAL_UART_Transmit>
  return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000008c 	.word	0x2000008c

08000a48 <_close>:

int _close(int file)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a70:	605a      	str	r2, [r3, #4]
  return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <_isatty>:

int _isatty(int file)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a88:	2301      	movs	r3, #1
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f002 ff3a 	bl	8003958 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20050000 	.word	0x20050000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	20000134 	.word	0x20000134
 8000b18:	20000150 	.word	0x20000150

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff ffea 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f002 fef9 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fce7 	bl	8000544 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b84:	08004510 	.word	0x08004510
  ldr r2, =_sbss
 8000b88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b8c:	2000014c 	.word	0x2000014c

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>

08000b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f981 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f80e 	bl	8000bc4 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb4:	f7ff fe1a 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f98d 	bl	8000f0e <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d809      	bhi.n	8000c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f000 f957 	bl	8000eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e001      	b.n	8000c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000138 	.word	0x20000138

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000138 	.word	0x20000138

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	bf00      	nop
 8000ca4:	f7ff ffde 	bl	8000c64 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_SuspendTick+0x1c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_SuspendTick+0x1c>)
 8000cce:	f023 0302 	bic.w	r3, r3, #2
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_ResumeTick+0x1c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_ResumeTick+0x1c>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <__NVIC_EnableIRQ+0x38>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff29 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff3e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff31 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffa2 	bl	8000e60 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e166      	b.n	8001206 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8158 	beq.w	8001200 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0203 	and.w	r2, r3, #3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80b2 	beq.w	8001200 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109c:	4b61      	ldr	r3, [pc, #388]	; (8001224 <HAL_GPIO_Init+0x2fc>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	4a60      	ldr	r2, [pc, #384]	; (8001224 <HAL_GPIO_Init+0x2fc>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6613      	str	r3, [r2, #96]	; 0x60
 80010a8:	4b5e      	ldr	r3, [pc, #376]	; (8001224 <HAL_GPIO_Init+0x2fc>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b4:	4a5c      	ldr	r2, [pc, #368]	; (8001228 <HAL_GPIO_Init+0x300>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010de:	d02b      	beq.n	8001138 <HAL_GPIO_Init+0x210>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a52      	ldr	r2, [pc, #328]	; (800122c <HAL_GPIO_Init+0x304>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d025      	beq.n	8001134 <HAL_GPIO_Init+0x20c>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a51      	ldr	r2, [pc, #324]	; (8001230 <HAL_GPIO_Init+0x308>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d01f      	beq.n	8001130 <HAL_GPIO_Init+0x208>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a50      	ldr	r2, [pc, #320]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d019      	beq.n	800112c <HAL_GPIO_Init+0x204>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a4f      	ldr	r2, [pc, #316]	; (8001238 <HAL_GPIO_Init+0x310>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x200>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a4e      	ldr	r2, [pc, #312]	; (800123c <HAL_GPIO_Init+0x314>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1fc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4d      	ldr	r2, [pc, #308]	; (8001240 <HAL_GPIO_Init+0x318>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1f8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <HAL_GPIO_Init+0x31c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1f4>
 8001118:	2307      	movs	r3, #7
 800111a:	e00e      	b.n	800113a <HAL_GPIO_Init+0x212>
 800111c:	2308      	movs	r3, #8
 800111e:	e00c      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001120:	2306      	movs	r3, #6
 8001122:	e00a      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001124:	2305      	movs	r3, #5
 8001126:	e008      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001128:	2304      	movs	r3, #4
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x212>
 800112c:	2303      	movs	r3, #3
 800112e:	e004      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001130:	2302      	movs	r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x212>
 8001138:	2300      	movs	r3, #0
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800114a:	4937      	ldr	r1, [pc, #220]	; (8001228 <HAL_GPIO_Init+0x300>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001158:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_GPIO_Init+0x320>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_GPIO_Init+0x320>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_GPIO_Init+0x320>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a6:	4a28      	ldr	r2, [pc, #160]	; (8001248 <HAL_GPIO_Init+0x320>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_GPIO_Init+0x320>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <HAL_GPIO_Init+0x320>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <HAL_GPIO_Init+0x320>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <HAL_GPIO_Init+0x320>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	f47f ae91 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	48000c00 	.word	0x48000c00
 8001238:	48001000 	.word	0x48001000
 800123c:	48001400 	.word	0x48001400
 8001240:	48001800 	.word	0x48001800
 8001244:	48001c00 	.word	0x48001c00
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001268:	e002      	b.n	8001270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4013      	ands	r3, r2
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43d9      	mvns	r1, r3
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	400b      	ands	r3, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f90e 	bl	80004f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_PWR_EnableSleepOnExit+0x1c>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_PWR_EnableSleepOnExit+0x1c>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	6113      	str	r3, [r2, #16]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_PWR_DisableSleepOnExit+0x1c>)
 800130a:	f023 0302 	bic.w	r3, r3, #2
 800130e:	6113      	str	r3, [r2, #16]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_PWREx_GetVoltageRange+0x18>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134a:	d130      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001358:	d038      	beq.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001362:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001368:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2232      	movs	r2, #50	; 0x32
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	0c9b      	lsrs	r3, r3, #18
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001380:	e002      	b.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3b01      	subs	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001394:	d102      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f2      	bne.n	8001382 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a8:	d110      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e00f      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d007      	beq.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40007000 	.word	0x40007000
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_PWREx_EnableVddIO2+0x1c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_PWREx_EnableVddIO2+0x1c>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f6:	6053      	str	r3, [r2, #4]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40007000 	.word	0x40007000

08001408 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001434:	bf30      	wfi
 8001436:	e002      	b.n	800143e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001438:	bf40      	sev
    __WFE();
 800143a:	bf20      	wfe
    __WFE();
 800143c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6113      	str	r3, [r2, #16]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40007000 	.word	0x40007000
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	f000 bc08 	b.w	8001c84 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001474:	4b96      	ldr	r3, [pc, #600]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800147e:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80e4 	beq.w	800165e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d007      	beq.n	80014ac <HAL_RCC_OscConfig+0x4c>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	f040 808b 	bne.w	80015ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	f040 8087 	bne.w	80015ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ac:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_OscConfig+0x64>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e3df      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d004      	beq.n	80014de <HAL_RCC_OscConfig+0x7e>
 80014d4:	4b7e      	ldr	r3, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014dc:	e005      	b.n	80014ea <HAL_RCC_OscConfig+0x8a>
 80014de:	4b7c      	ldr	r3, [pc, #496]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d223      	bcs.n	8001536 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fd92 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e3c0      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001502:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a72      	ldr	r2, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	496d      	ldr	r1, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	4968      	ldr	r1, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
 8001534:	e025      	b.n	8001582 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001536:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a65      	ldr	r2, [pc, #404]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4960      	ldr	r1, [pc, #384]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	495b      	ldr	r1, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fd52 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e380      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001582:	f000 fc87 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001586:	4602      	mov	r2, r0
 8001588:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4950      	ldr	r1, [pc, #320]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 8001594:	5ccb      	ldrb	r3, [r1, r3]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	4a4e      	ldr	r2, [pc, #312]	; (80016d8 <HAL_RCC_OscConfig+0x278>)
 80015a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015a2:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <HAL_RCC_OscConfig+0x27c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb0c 	bl	8000bc4 <HAL_InitTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d052      	beq.n	800165c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	e364      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d032      	beq.n	8001628 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015c2:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a42      	ldr	r2, [pc, #264]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb49 	bl	8000c64 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb45 	bl	8000c64 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e34d      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a35      	ldr	r2, [pc, #212]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4930      	ldr	r1, [pc, #192]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	492b      	ldr	r1, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
 8001626:	e01a      	b.n	800165e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb16 	bl	8000c64 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163c:	f7ff fb12 	bl	8000c64 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e31a      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x1dc>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d073      	beq.n	8001752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x21c>
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d10e      	bne.n	8001694 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d10b      	bne.n	8001694 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d063      	beq.n	8001750 <HAL_RCC_OscConfig+0x2f0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d15f      	bne.n	8001750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e2f7      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d106      	bne.n	80016ac <HAL_RCC_OscConfig+0x24c>
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e025      	b.n	80016f8 <HAL_RCC_OscConfig+0x298>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b4:	d114      	bne.n	80016e0 <HAL_RCC_OscConfig+0x280>
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a02      	ldr	r2, [pc, #8]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e013      	b.n	80016f8 <HAL_RCC_OscConfig+0x298>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08004454 	.word	0x08004454
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004
 80016e0:	4ba0      	ldr	r3, [pc, #640]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a9f      	ldr	r2, [pc, #636]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a9c      	ldr	r2, [pc, #624]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fab0 	bl	8000c64 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff faac 	bl	8000c64 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e2b4      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171a:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x2a8>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fa9c 	bl	8000c64 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fa98 	bl	8000c64 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e2a0      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x2d0>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d060      	beq.n	8001820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d005      	beq.n	8001770 <HAL_RCC_OscConfig+0x310>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d119      	bne.n	800179e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d116      	bne.n	800179e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x328>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e27d      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	4973      	ldr	r1, [pc, #460]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	e040      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d023      	beq.n	80017ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a6:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff fa57 	bl	8000c64 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fa53 	bl	8000c64 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e25b      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017cc:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b62      	ldr	r3, [pc, #392]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	495f      	ldr	r1, [pc, #380]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
 80017ec:	e018      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a5c      	ldr	r2, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fa33 	bl	8000c64 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fa2f 	bl	8000c64 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e237      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d03c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01c      	beq.n	800186e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001834:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fa0e 	bl	8000c64 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fa0a 	bl	8000c64 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e212      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ef      	beq.n	800184c <HAL_RCC_OscConfig+0x3ec>
 800186c:	e01b      	b.n	80018a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001874:	4a3b      	ldr	r2, [pc, #236]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff f9f1 	bl	8000c64 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff f9ed 	bl	8000c64 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1f5      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ef      	bne.n	8001886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80a6 	beq.w	8001a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10d      	bne.n	80018e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	4a26      	ldr	r2, [pc, #152]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	; 0x58
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018dc:	2301      	movs	r3, #1
 80018de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d118      	bne.n	800191e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f8:	f7ff f9b4 	bl	8000c64 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001900:	f7ff f9b0 	bl	8000c64 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1b8      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_RCC_OscConfig+0x4d8>
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001936:	e029      	b.n	800198c <HAL_RCC_OscConfig+0x52c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b05      	cmp	r3, #5
 800193e:	d115      	bne.n	800196c <HAL_RCC_OscConfig+0x50c>
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x52c>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	4b9d      	ldr	r3, [pc, #628]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a9c      	ldr	r2, [pc, #624]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800197c:	4b99      	ldr	r3, [pc, #612]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a98      	ldr	r2, [pc, #608]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d016      	beq.n	80019c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f966 	bl	8000c64 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7ff f962 	bl	8000c64 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e168      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ed      	beq.n	800199c <HAL_RCC_OscConfig+0x53c>
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff f94f 	bl	8000c64 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f94b 	bl	8000c64 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e151      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e0:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ed      	bne.n	80019ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f4:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	4a7a      	ldr	r2, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 80019fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a14:	4b73      	ldr	r3, [pc, #460]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a1a:	4a72      	ldr	r2, [pc, #456]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f91e 	bl	8000c64 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a2c:	f7ff f91a 	bl	8000c64 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e122      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a3e:	4b69      	ldr	r3, [pc, #420]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ef      	beq.n	8001a2c <HAL_RCC_OscConfig+0x5cc>
 8001a4c:	e01b      	b.n	8001a86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a54:	4a63      	ldr	r2, [pc, #396]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f901 	bl	8000c64 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a66:	f7ff f8fd 	bl	8000c64 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e105      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a78:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ef      	bne.n	8001a66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80f9 	beq.w	8001c82 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	f040 80cf 	bne.w	8001c38 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a9a:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0203 	and.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d12c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d123      	bne.n	8001b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d11b      	bne.n	8001b08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d113      	bne.n	8001b08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d109      	bne.n	8001b08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	3b01      	subs	r3, #1
 8001b02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d071      	beq.n	8001bec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d068      	beq.n	8001be0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0ac      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b36:	f7ff f895 	bl	8000c64 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff f891 	bl	8000c64 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e099      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_RCC_OscConfig+0x788>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b6c:	3a01      	subs	r2, #1
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b76:	0212      	lsls	r2, r2, #8
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b7e:	0852      	lsrs	r2, r2, #1
 8001b80:	3a01      	subs	r2, #1
 8001b82:	0552      	lsls	r2, r2, #21
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b8a:	0852      	lsrs	r2, r2, #1
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	0652      	lsls	r2, r2, #25
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b96:	06d2      	lsls	r2, r2, #27
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	4912      	ldr	r1, [pc, #72]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb8:	f7ff f854 	bl	8000c64 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff f850 	bl	8000c64 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e058      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bde:	e050      	b.n	8001c82 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e04f      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d144      	bne.n	8001c82 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c10:	f7ff f828 	bl	8000c64 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f824 	bl	8000c64 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e02c      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x7b8>
 8001c36:	e024      	b.n	8001c82 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d01f      	beq.n	8001c7e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f80b 	bl	8000c64 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7ff f807 	bl	8000c64 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e00f      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	4905      	ldr	r1, [pc, #20]	; (8001c8c <HAL_RCC_OscConfig+0x82c>)
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x830>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
 8001c7c:	e001      	b.n	8001c82 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	feeefffc 	.word	0xfeeefffc

08001c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0e7      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d910      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b72      	ldr	r3, [pc, #456]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4970      	ldr	r1, [pc, #448]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0cf      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d908      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4960      	ldr	r1, [pc, #384]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d04c      	beq.n	8001dac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d121      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0a6      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d115      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e09a      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e08e      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5a:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e086      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 0203 	bic.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4943      	ldr	r1, [pc, #268]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d7c:	f7fe ff72 	bl	8000c64 <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7fe ff6e 	bl	8000c64 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e06e      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 020c 	and.w	r2, r3, #12
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1eb      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d208      	bcs.n	8001dda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	492b      	ldr	r1, [pc, #172]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d210      	bcs.n	8001e0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 0207 	bic.w	r2, r3, #7
 8001df0:	4923      	ldr	r1, [pc, #140]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e036      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4918      	ldr	r1, [pc, #96]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4910      	ldr	r1, [pc, #64]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e48:	f000 f824 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	490b      	ldr	r1, [pc, #44]	; (8001e88 <HAL_RCC_ClockConfig+0x1f4>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
 8001e64:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001e66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1fc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fea9 	bl	8000bc4 <HAL_InitTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e76:	7afb      	ldrb	r3, [r7, #11]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08004454 	.word	0x08004454
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d121      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d11e      	bne.n	8001f06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e005      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10d      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d102      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	e004      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d134      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d003      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0xac>
 8001f38:	e005      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f3c:	617b      	str	r3, [r7, #20]
      break;
 8001f3e:	e005      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f42:	617b      	str	r3, [r7, #20]
      break;
 8001f44:	e002      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	617b      	str	r3, [r7, #20]
      break;
 8001f4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	3301      	adds	r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	fb03 f202 	mul.w	r2, r3, r2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	0e5b      	lsrs	r3, r3, #25
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	0800446c 	.word	0x0800446c
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	007a1200 	.word	0x007a1200

08001fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08004464 	.word	0x08004464

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ff4:	f7ff ffda 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0adb      	lsrs	r3, r3, #11
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08004464 	.word	0x08004464

0800201c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002034:	f7ff f974 	bl	8001320 <HAL_PWREx_GetVoltageRange>
 8002038:	6178      	str	r0, [r7, #20]
 800203a:	e014      	b.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002046:	6593      	str	r3, [r2, #88]	; 0x58
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002054:	f7ff f964 	bl	8001320 <HAL_PWREx_GetVoltageRange>
 8002058:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d10b      	bne.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d919      	bls.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2ba0      	cmp	r3, #160	; 0xa0
 8002078:	d902      	bls.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207a:	2302      	movs	r3, #2
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e013      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002080:	2301      	movs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e010      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b80      	cmp	r3, #128	; 0x80
 800208a:	d902      	bls.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800208c:	2303      	movs	r3, #3
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e00a      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d102      	bne.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e004      	b.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b70      	cmp	r3, #112	; 0x70
 80020a2:	d101      	bne.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 0207 	bic.w	r2, r3, #7
 80020b0:	4909      	ldr	r1, [pc, #36]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020e4:	2300      	movs	r3, #0
 80020e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e8:	2300      	movs	r3, #0
 80020ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d041      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002100:	d02a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002102:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002106:	d824      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800210e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002112:	d81e      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211c:	d010      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800211e:	e018      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002120:	4b86      	ldr	r3, [pc, #536]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a85      	ldr	r2, [pc, #532]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800212c:	e015      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f000 facd 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 800213a:	4603      	mov	r3, r0
 800213c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800213e:	e00c      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3320      	adds	r3, #32
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fbb6 	bl	80028b8 <RCCEx_PLLSAI2_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002150:	e003      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	74fb      	strb	r3, [r7, #19]
      break;
 8002156:	e000      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002160:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800216e:	4973      	ldr	r1, [pc, #460]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002176:	e001      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d041      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002190:	d02a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002196:	d824      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800219c:	d008      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800219e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021a2:	d81e      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d010      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021ae:	e018      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021b0:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a61      	ldr	r2, [pc, #388]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021bc:	e015      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fa85 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 80021ca:	4603      	mov	r3, r0
 80021cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ce:	e00c      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3320      	adds	r3, #32
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fb6e 	bl	80028b8 <RCCEx_PLLSAI2_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021e0:	e003      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	74fb      	strb	r3, [r7, #19]
      break;
 80021e6:	e000      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021f0:	4b52      	ldr	r3, [pc, #328]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fe:	494f      	ldr	r1, [pc, #316]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002206:	e001      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a0 	beq.w	800235a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800222e:	2300      	movs	r3, #0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a40      	ldr	r2, [pc, #256]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b3e      	ldr	r3, [pc, #248]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224c:	2301      	movs	r3, #1
 800224e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002250:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a3a      	ldr	r2, [pc, #232]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800225c:	f7fe fd02 	bl	8000c64 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002262:	e009      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002264:	f7fe fcfe 	bl	8000c64 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	74fb      	strb	r3, [r7, #19]
        break;
 8002276:	e005      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ef      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d15c      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002294:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01f      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d019      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fcbd 	bl	8000c64 <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ec:	e00b      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fcb9 	bl	8000c64 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d902      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	74fb      	strb	r3, [r7, #19]
            break;
 8002304:	e006      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ec      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002332:	e009      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
 8002338:	e006      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002348:	7c7b      	ldrb	r3, [r7, #17]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4ba6      	ldr	r3, [pc, #664]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	4aa5      	ldr	r2, [pc, #660]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002366:	4ba0      	ldr	r3, [pc, #640]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f023 0203 	bic.w	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	499c      	ldr	r1, [pc, #624]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002388:	4b97      	ldr	r3, [pc, #604]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 020c 	bic.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	4994      	ldr	r1, [pc, #592]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023aa:	4b8f      	ldr	r3, [pc, #572]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	498b      	ldr	r1, [pc, #556]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023cc:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4983      	ldr	r1, [pc, #524]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ee:	4b7e      	ldr	r3, [pc, #504]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fc:	497a      	ldr	r1, [pc, #488]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4972      	ldr	r1, [pc, #456]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002432:	4b6d      	ldr	r3, [pc, #436]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002438:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002440:	4969      	ldr	r1, [pc, #420]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002454:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002462:	4961      	ldr	r1, [pc, #388]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002476:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002484:	4958      	ldr	r1, [pc, #352]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	4950      	ldr	r1, [pc, #320]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ba:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4947      	ldr	r1, [pc, #284]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024dc:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	493f      	ldr	r1, [pc, #252]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d028      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251c:	d106      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002528:	60d3      	str	r3, [r2, #12]
 800252a:	e011      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002534:	d10c      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	2101      	movs	r1, #1
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f8c9 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d028      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	491f      	ldr	r1, [pc, #124]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257a:	d106      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002586:	60d3      	str	r3, [r2, #12]
 8002588:	e011      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002592:	d10c      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f89a 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d02a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d8:	d108      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4a02      	ldr	r2, [pc, #8]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e4:	60d3      	str	r3, [r2, #12]
 80025e6:	e013      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80025e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2101      	movs	r1, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f869 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02f      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800261c:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262a:	4929      	ldr	r1, [pc, #164]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800263a:	d10d      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	2102      	movs	r1, #2
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f846 	bl	80026d4 <RCCEx_PLLSAI1_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d014      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	74bb      	strb	r3, [r7, #18]
 8002656:	e011      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800265c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002660:	d10c      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3320      	adds	r3, #32
 8002666:	2102      	movs	r1, #2
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f925 	bl	80028b8 <RCCEx_PLLSAI2_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002672:	7cfb      	ldrb	r3, [r7, #19]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002698:	490d      	ldr	r1, [pc, #52]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026bc:	4904      	ldr	r1, [pc, #16]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026e2:	4b74      	ldr	r3, [pc, #464]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ee:	4b71      	ldr	r3, [pc, #452]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10d      	bne.n	800271a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
       ||
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002706:	4b6b      	ldr	r3, [pc, #428]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
       ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d047      	beq.n	80027aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e044      	b.n	80027aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d018      	beq.n	800275a <RCCEx_PLLSAI1_Config+0x86>
 8002728:	2b03      	cmp	r3, #3
 800272a:	d825      	bhi.n	8002778 <RCCEx_PLLSAI1_Config+0xa4>
 800272c:	2b01      	cmp	r3, #1
 800272e:	d002      	beq.n	8002736 <RCCEx_PLLSAI1_Config+0x62>
 8002730:	2b02      	cmp	r3, #2
 8002732:	d009      	beq.n	8002748 <RCCEx_PLLSAI1_Config+0x74>
 8002734:	e020      	b.n	8002778 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002736:	4b5f      	ldr	r3, [pc, #380]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11d      	bne.n	800277e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e01a      	b.n	800277e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002748:	4b5a      	ldr	r3, [pc, #360]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d116      	bne.n	8002782 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002758:	e013      	b.n	8002782 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800275a:	4b56      	ldr	r3, [pc, #344]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002766:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002776:	e006      	b.n	8002786 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e004      	b.n	8002788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002786:	bf00      	nop
    }

    if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	430b      	orrs	r3, r1
 80027a4:	4943      	ldr	r1, [pc, #268]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d17c      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027b0:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3f      	ldr	r2, [pc, #252]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027bc:	f7fe fa52 	bl	8000c64 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c2:	e009      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c4:	f7fe fa4e 	bl	8000c64 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d902      	bls.n	80027d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	73fb      	strb	r3, [r7, #15]
        break;
 80027d6:	e005      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ef      	bne.n	80027c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d15f      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d110      	bne.n	8002812 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f0:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6892      	ldr	r2, [r2, #8]
 8002800:	0211      	lsls	r1, r2, #8
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	06d2      	lsls	r2, r2, #27
 8002808:	430a      	orrs	r2, r1
 800280a:	492a      	ldr	r1, [pc, #168]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	610b      	str	r3, [r1, #16]
 8002810:	e027      	b.n	8002862 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d112      	bne.n	800283e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002818:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002820:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	0211      	lsls	r1, r2, #8
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6912      	ldr	r2, [r2, #16]
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0552      	lsls	r2, r2, #21
 8002834:	430a      	orrs	r2, r1
 8002836:	491f      	ldr	r1, [pc, #124]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	610b      	str	r3, [r1, #16]
 800283c:	e011      	b.n	8002862 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002846:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6892      	ldr	r2, [r2, #8]
 800284e:	0211      	lsls	r1, r2, #8
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6952      	ldr	r2, [r2, #20]
 8002854:	0852      	lsrs	r2, r2, #1
 8002856:	3a01      	subs	r2, #1
 8002858:	0652      	lsls	r2, r2, #25
 800285a:	430a      	orrs	r2, r1
 800285c:	4915      	ldr	r1, [pc, #84]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800286c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe f9f9 	bl	8000c64 <HAL_GetTick>
 8002872:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002874:	e009      	b.n	800288a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002876:	f7fe f9f5 	bl	8000c64 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d902      	bls.n	800288a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	73fb      	strb	r3, [r7, #15]
          break;
 8002888:	e005      	b.n	8002896 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0ef      	beq.n	8002876 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000

080028b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028c6:	4b69      	ldr	r3, [pc, #420]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d018      	beq.n	8002904 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028d2:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0203 	and.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d10d      	bne.n	80028fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
       ||
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
       ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d047      	beq.n	800298e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e044      	b.n	800298e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d018      	beq.n	800293e <RCCEx_PLLSAI2_Config+0x86>
 800290c:	2b03      	cmp	r3, #3
 800290e:	d825      	bhi.n	800295c <RCCEx_PLLSAI2_Config+0xa4>
 8002910:	2b01      	cmp	r3, #1
 8002912:	d002      	beq.n	800291a <RCCEx_PLLSAI2_Config+0x62>
 8002914:	2b02      	cmp	r3, #2
 8002916:	d009      	beq.n	800292c <RCCEx_PLLSAI2_Config+0x74>
 8002918:	e020      	b.n	800295c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11d      	bne.n	8002962 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292a:	e01a      	b.n	8002962 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d116      	bne.n	8002966 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293c:	e013      	b.n	8002966 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800294a:	4b48      	ldr	r3, [pc, #288]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800295a:	e006      	b.n	800296a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      break;
 8002960:	e004      	b.n	800296c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002962:	bf00      	nop
 8002964:	e002      	b.n	800296c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800296a:	bf00      	nop
    }

    if(status == HAL_OK)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002972:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	430b      	orrs	r3, r1
 8002988:	4938      	ldr	r1, [pc, #224]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d166      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a0:	f7fe f960 	bl	8000c64 <HAL_GetTick>
 80029a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029a6:	e009      	b.n	80029bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029a8:	f7fe f95c 	bl	8000c64 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d902      	bls.n	80029bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	73fb      	strb	r3, [r7, #15]
        break;
 80029ba:	e005      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ef      	bne.n	80029a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d149      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d110      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6892      	ldr	r2, [r2, #8]
 80029e4:	0211      	lsls	r1, r2, #8
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	06d2      	lsls	r2, r2, #27
 80029ec:	430a      	orrs	r2, r1
 80029ee:	491f      	ldr	r1, [pc, #124]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	614b      	str	r3, [r1, #20]
 80029f4:	e011      	b.n	8002a1a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6892      	ldr	r2, [r2, #8]
 8002a06:	0211      	lsls	r1, r2, #8
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6912      	ldr	r2, [r2, #16]
 8002a0c:	0852      	lsrs	r2, r2, #1
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	0652      	lsls	r2, r2, #25
 8002a12:	430a      	orrs	r2, r1
 8002a14:	4915      	ldr	r1, [pc, #84]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe f91d 	bl	8000c64 <HAL_GetTick>
 8002a2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a2c:	e009      	b.n	8002a42 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a2e:	f7fe f919 	bl	8000c64 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d902      	bls.n	8002a42 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a40:	e005      	b.n	8002a4e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ef      	beq.n	8002a2e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d06c      	beq.n	8002b5c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd ff2c 	bl	80008f4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	22ca      	movs	r2, #202	; 0xca
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2253      	movs	r2, #83	; 0x53
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f87c 	bl	8002bb2 <RTC_EnterInitMode>
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d14b      	bne.n	8002b5c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6919      	ldr	r1, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	041a      	lsls	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f87f 	bl	8002c18 <RTC_ExitInitMode>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11b      	bne.n	8002b5c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0203 	bic.w	r2, r2, #3
 8002b32:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	22ff      	movs	r2, #255	; 0xff
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b7c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002b7e:	f7fe f871 	bl	8000c64 <HAL_GetTick>
 8002b82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b84:	e009      	b.n	8002b9a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b86:	f7fe f86d 	bl	8000c64 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b94:	d901      	bls.n	8002b9a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e007      	b.n	8002baa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d120      	bne.n	8002c0e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bd6:	f7fe f845 	bl	8000c64 <HAL_GetTick>
 8002bda:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bdc:	e00d      	b.n	8002bfa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002bde:	f7fe f841 	bl	8000c64 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bec:	d905      	bls.n	8002bfa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <RTC_EnterInitMode+0x5c>
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d1e7      	bne.n	8002bde <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <RTC_ExitInitMode+0x78>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <RTC_ExitInitMode+0x78>)
 8002c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <RTC_ExitInitMode+0x78>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10c      	bne.n	8002c56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff92 	bl	8002b66 <HAL_RTC_WaitForSynchro>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01e      	beq.n	8002c86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e017      	b.n	8002c86 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <RTC_ExitInitMode+0x78>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <RTC_ExitInitMode+0x78>)
 8002c5c:	f023 0320 	bic.w	r3, r3, #32
 8002c60:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff7f 	bl	8002b66 <HAL_RTC_WaitForSynchro>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <RTC_ExitInitMode+0x78>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <RTC_ExitInitMode+0x78>)
 8002c80:	f043 0320 	orr.w	r3, r3, #32
 8002c84:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40002800 	.word	0x40002800

08002c94 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e07f      	b.n	8002dae <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	22ca      	movs	r2, #202	; 0xca
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2253      	movs	r2, #83	; 0x53
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cdc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002cee:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d120      	bne.n	8002d40 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002cfe:	f7fd ffb1 	bl	8000c64 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002d04:	e015      	b.n	8002d32 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d06:	f7fd ffad 	bl	8000c64 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d14:	d90d      	bls.n	8002d32 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	22ff      	movs	r2, #255	; 0xff
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2203      	movs	r2, #3
 8002d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e03d      	b.n	8002dae <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0e2      	beq.n	8002d06 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0107 	bic.w	r1, r3, #7
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d5c:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d82:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d92:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40010400 	.word	0x40010400

08002dbc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e04d      	b.n	8002e6e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	22ca      	movs	r2, #202	; 0xca
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2253      	movs	r2, #83	; 0x53
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e00:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e10:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002e12:	f7fd ff27 	bl	8000c64 <HAL_GetTick>
 8002e16:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002e18:	e015      	b.n	8002e46 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e1a:	f7fd ff23 	bl	8000c64 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e28:	d90d      	bls.n	8002e46 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	22ff      	movs	r2, #255	; 0xff
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2203      	movs	r2, #3
 8002e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e013      	b.n	8002e6e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0e2      	beq.n	8002e1a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002e82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e86:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ea6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fd fb39 	bl	8000520 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e040      	b.n	8002f58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fd fca4 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8c0 	bl	8003088 <UART_SetConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e022      	b.n	8002f58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fb6c 	bl	80035f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fbf3 	bl	800373c <UART_CheckIdleState>
 8002f56:	4603      	mov	r3, r0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 8082 	bne.w	800307e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Transmit+0x26>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07a      	b.n	8003080 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x38>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e073      	b.n	8003080 <HAL_UART_Transmit+0x120>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2221      	movs	r2, #33	; 0x21
 8002fac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fae:	f7fd fe59 	bl	8000c64 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_UART_Transmit+0x80>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e003      	b.n	8002fe8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ff0:	e02d      	b.n	800304e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fbe6 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e039      	b.n	8003080 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301e:	b292      	uxth	r2, r2
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3302      	adds	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e008      	b.n	800303c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b292      	uxth	r2, r2
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3301      	adds	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cb      	bne.n	8002ff2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fbb2 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e005      	b.n	8003080 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
  }
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b08a      	sub	sp, #40	; 0x28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4ba4      	ldr	r3, [pc, #656]	; (8003348 <UART_SetConfig+0x2c0>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a99      	ldr	r2, [pc, #612]	; (800334c <UART_SetConfig+0x2c4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	4313      	orrs	r3, r2
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a90      	ldr	r2, [pc, #576]	; (8003350 <UART_SetConfig+0x2c8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d126      	bne.n	8003160 <UART_SetConfig+0xd8>
 8003112:	4b90      	ldr	r3, [pc, #576]	; (8003354 <UART_SetConfig+0x2cc>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b03      	cmp	r3, #3
 800311e:	d81b      	bhi.n	8003158 <UART_SetConfig+0xd0>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <UART_SetConfig+0xa0>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	08003139 	.word	0x08003139
 800312c:	08003149 	.word	0x08003149
 8003130:	08003141 	.word	0x08003141
 8003134:	08003151 	.word	0x08003151
 8003138:	2301      	movs	r3, #1
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	e116      	b.n	800336e <UART_SetConfig+0x2e6>
 8003140:	2302      	movs	r3, #2
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e112      	b.n	800336e <UART_SetConfig+0x2e6>
 8003148:	2304      	movs	r3, #4
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314e:	e10e      	b.n	800336e <UART_SetConfig+0x2e6>
 8003150:	2308      	movs	r3, #8
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003156:	e10a      	b.n	800336e <UART_SetConfig+0x2e6>
 8003158:	2310      	movs	r3, #16
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e106      	b.n	800336e <UART_SetConfig+0x2e6>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a7c      	ldr	r2, [pc, #496]	; (8003358 <UART_SetConfig+0x2d0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d138      	bne.n	80031dc <UART_SetConfig+0x154>
 800316a:	4b7a      	ldr	r3, [pc, #488]	; (8003354 <UART_SetConfig+0x2cc>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d82d      	bhi.n	80031d4 <UART_SetConfig+0x14c>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <UART_SetConfig+0xf8>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	080031b5 	.word	0x080031b5
 8003184:	080031d5 	.word	0x080031d5
 8003188:	080031d5 	.word	0x080031d5
 800318c:	080031d5 	.word	0x080031d5
 8003190:	080031c5 	.word	0x080031c5
 8003194:	080031d5 	.word	0x080031d5
 8003198:	080031d5 	.word	0x080031d5
 800319c:	080031d5 	.word	0x080031d5
 80031a0:	080031bd 	.word	0x080031bd
 80031a4:	080031d5 	.word	0x080031d5
 80031a8:	080031d5 	.word	0x080031d5
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031cd 	.word	0x080031cd
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ba:	e0d8      	b.n	800336e <UART_SetConfig+0x2e6>
 80031bc:	2302      	movs	r3, #2
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c2:	e0d4      	b.n	800336e <UART_SetConfig+0x2e6>
 80031c4:	2304      	movs	r3, #4
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ca:	e0d0      	b.n	800336e <UART_SetConfig+0x2e6>
 80031cc:	2308      	movs	r3, #8
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d2:	e0cc      	b.n	800336e <UART_SetConfig+0x2e6>
 80031d4:	2310      	movs	r3, #16
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031da:	e0c8      	b.n	800336e <UART_SetConfig+0x2e6>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5e      	ldr	r2, [pc, #376]	; (800335c <UART_SetConfig+0x2d4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d125      	bne.n	8003232 <UART_SetConfig+0x1aa>
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <UART_SetConfig+0x2cc>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031f0:	2b30      	cmp	r3, #48	; 0x30
 80031f2:	d016      	beq.n	8003222 <UART_SetConfig+0x19a>
 80031f4:	2b30      	cmp	r3, #48	; 0x30
 80031f6:	d818      	bhi.n	800322a <UART_SetConfig+0x1a2>
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d00a      	beq.n	8003212 <UART_SetConfig+0x18a>
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d814      	bhi.n	800322a <UART_SetConfig+0x1a2>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <UART_SetConfig+0x182>
 8003204:	2b10      	cmp	r3, #16
 8003206:	d008      	beq.n	800321a <UART_SetConfig+0x192>
 8003208:	e00f      	b.n	800322a <UART_SetConfig+0x1a2>
 800320a:	2300      	movs	r3, #0
 800320c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003210:	e0ad      	b.n	800336e <UART_SetConfig+0x2e6>
 8003212:	2302      	movs	r3, #2
 8003214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003218:	e0a9      	b.n	800336e <UART_SetConfig+0x2e6>
 800321a:	2304      	movs	r3, #4
 800321c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003220:	e0a5      	b.n	800336e <UART_SetConfig+0x2e6>
 8003222:	2308      	movs	r3, #8
 8003224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003228:	e0a1      	b.n	800336e <UART_SetConfig+0x2e6>
 800322a:	2310      	movs	r3, #16
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003230:	e09d      	b.n	800336e <UART_SetConfig+0x2e6>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a4a      	ldr	r2, [pc, #296]	; (8003360 <UART_SetConfig+0x2d8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d125      	bne.n	8003288 <UART_SetConfig+0x200>
 800323c:	4b45      	ldr	r3, [pc, #276]	; (8003354 <UART_SetConfig+0x2cc>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003246:	2bc0      	cmp	r3, #192	; 0xc0
 8003248:	d016      	beq.n	8003278 <UART_SetConfig+0x1f0>
 800324a:	2bc0      	cmp	r3, #192	; 0xc0
 800324c:	d818      	bhi.n	8003280 <UART_SetConfig+0x1f8>
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d00a      	beq.n	8003268 <UART_SetConfig+0x1e0>
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d814      	bhi.n	8003280 <UART_SetConfig+0x1f8>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <UART_SetConfig+0x1d8>
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d008      	beq.n	8003270 <UART_SetConfig+0x1e8>
 800325e:	e00f      	b.n	8003280 <UART_SetConfig+0x1f8>
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e082      	b.n	800336e <UART_SetConfig+0x2e6>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e07e      	b.n	800336e <UART_SetConfig+0x2e6>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e07a      	b.n	800336e <UART_SetConfig+0x2e6>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e076      	b.n	800336e <UART_SetConfig+0x2e6>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e072      	b.n	800336e <UART_SetConfig+0x2e6>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a35      	ldr	r2, [pc, #212]	; (8003364 <UART_SetConfig+0x2dc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d12a      	bne.n	80032e8 <UART_SetConfig+0x260>
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <UART_SetConfig+0x2cc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a0:	d01a      	beq.n	80032d8 <UART_SetConfig+0x250>
 80032a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a6:	d81b      	bhi.n	80032e0 <UART_SetConfig+0x258>
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ac:	d00c      	beq.n	80032c8 <UART_SetConfig+0x240>
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d815      	bhi.n	80032e0 <UART_SetConfig+0x258>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <UART_SetConfig+0x238>
 80032b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032bc:	d008      	beq.n	80032d0 <UART_SetConfig+0x248>
 80032be:	e00f      	b.n	80032e0 <UART_SetConfig+0x258>
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e052      	b.n	800336e <UART_SetConfig+0x2e6>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e04e      	b.n	800336e <UART_SetConfig+0x2e6>
 80032d0:	2304      	movs	r3, #4
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d6:	e04a      	b.n	800336e <UART_SetConfig+0x2e6>
 80032d8:	2308      	movs	r3, #8
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e046      	b.n	800336e <UART_SetConfig+0x2e6>
 80032e0:	2310      	movs	r3, #16
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	e042      	b.n	800336e <UART_SetConfig+0x2e6>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a17      	ldr	r2, [pc, #92]	; (800334c <UART_SetConfig+0x2c4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d13a      	bne.n	8003368 <UART_SetConfig+0x2e0>
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <UART_SetConfig+0x2cc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003300:	d01a      	beq.n	8003338 <UART_SetConfig+0x2b0>
 8003302:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003306:	d81b      	bhi.n	8003340 <UART_SetConfig+0x2b8>
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330c:	d00c      	beq.n	8003328 <UART_SetConfig+0x2a0>
 800330e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003312:	d815      	bhi.n	8003340 <UART_SetConfig+0x2b8>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <UART_SetConfig+0x298>
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d008      	beq.n	8003330 <UART_SetConfig+0x2a8>
 800331e:	e00f      	b.n	8003340 <UART_SetConfig+0x2b8>
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e022      	b.n	800336e <UART_SetConfig+0x2e6>
 8003328:	2302      	movs	r3, #2
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e01e      	b.n	800336e <UART_SetConfig+0x2e6>
 8003330:	2304      	movs	r3, #4
 8003332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003336:	e01a      	b.n	800336e <UART_SetConfig+0x2e6>
 8003338:	2308      	movs	r3, #8
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e016      	b.n	800336e <UART_SetConfig+0x2e6>
 8003340:	2310      	movs	r3, #16
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e012      	b.n	800336e <UART_SetConfig+0x2e6>
 8003348:	efff69f3 	.word	0xefff69f3
 800334c:	40008000 	.word	0x40008000
 8003350:	40013800 	.word	0x40013800
 8003354:	40021000 	.word	0x40021000
 8003358:	40004400 	.word	0x40004400
 800335c:	40004800 	.word	0x40004800
 8003360:	40004c00 	.word	0x40004c00
 8003364:	40005000 	.word	0x40005000
 8003368:	2310      	movs	r3, #16
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a9f      	ldr	r2, [pc, #636]	; (80035f0 <UART_SetConfig+0x568>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d17a      	bne.n	800346e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800337c:	2b08      	cmp	r3, #8
 800337e:	d824      	bhi.n	80033ca <UART_SetConfig+0x342>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <UART_SetConfig+0x300>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033cb 	.word	0x080033cb
 8003390:	080033b5 	.word	0x080033b5
 8003394:	080033cb 	.word	0x080033cb
 8003398:	080033bb 	.word	0x080033bb
 800339c:	080033cb 	.word	0x080033cb
 80033a0:	080033cb 	.word	0x080033cb
 80033a4:	080033cb 	.word	0x080033cb
 80033a8:	080033c3 	.word	0x080033c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7fe fe0a 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 80033b0:	61f8      	str	r0, [r7, #28]
        break;
 80033b2:	e010      	b.n	80033d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b4:	4b8f      	ldr	r3, [pc, #572]	; (80035f4 <UART_SetConfig+0x56c>)
 80033b6:	61fb      	str	r3, [r7, #28]
        break;
 80033b8:	e00d      	b.n	80033d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ba:	f7fe fd6b 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 80033be:	61f8      	str	r0, [r7, #28]
        break;
 80033c0:	e009      	b.n	80033d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c6:	61fb      	str	r3, [r7, #28]
        break;
 80033c8:	e005      	b.n	80033d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80fb 	beq.w	80035d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d305      	bcc.n	80033fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d903      	bls.n	8003402 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003400:	e0e8      	b.n	80035d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2200      	movs	r2, #0
 8003406:	461c      	mov	r4, r3
 8003408:	4615      	mov	r5, r2
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	022b      	lsls	r3, r5, #8
 8003414:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003418:	0222      	lsls	r2, r4, #8
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	6849      	ldr	r1, [r1, #4]
 800341e:	0849      	lsrs	r1, r1, #1
 8003420:	2000      	movs	r0, #0
 8003422:	4688      	mov	r8, r1
 8003424:	4681      	mov	r9, r0
 8003426:	eb12 0a08 	adds.w	sl, r2, r8
 800342a:	eb43 0b09 	adc.w	fp, r3, r9
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800343c:	4650      	mov	r0, sl
 800343e:	4659      	mov	r1, fp
 8003440:	f7fc fed4 	bl	80001ec <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003452:	d308      	bcc.n	8003466 <UART_SetConfig+0x3de>
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345a:	d204      	bcs.n	8003466 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	e0b6      	b.n	80035d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800346c:	e0b2      	b.n	80035d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003476:	d15e      	bne.n	8003536 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800347c:	2b08      	cmp	r3, #8
 800347e:	d828      	bhi.n	80034d2 <UART_SetConfig+0x44a>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0x400>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034ad 	.word	0x080034ad
 800348c:	080034b5 	.word	0x080034b5
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034d3 	.word	0x080034d3
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080034d3 	.word	0x080034d3
 80034a0:	080034d3 	.word	0x080034d3
 80034a4:	080034d3 	.word	0x080034d3
 80034a8:	080034cb 	.word	0x080034cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7fe fd8a 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 80034b0:	61f8      	str	r0, [r7, #28]
        break;
 80034b2:	e014      	b.n	80034de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b4:	f7fe fd9c 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 80034b8:	61f8      	str	r0, [r7, #28]
        break;
 80034ba:	e010      	b.n	80034de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034bc:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <UART_SetConfig+0x56c>)
 80034be:	61fb      	str	r3, [r7, #28]
        break;
 80034c0:	e00d      	b.n	80034de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c2:	f7fe fce7 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 80034c6:	61f8      	str	r0, [r7, #28]
        break;
 80034c8:	e009      	b.n	80034de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ce:	61fb      	str	r3, [r7, #28]
        break;
 80034d0:	e005      	b.n	80034de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d077      	beq.n	80035d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005a      	lsls	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b0f      	cmp	r3, #15
 80034fe:	d916      	bls.n	800352e <UART_SetConfig+0x4a6>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003506:	d212      	bcs.n	800352e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f023 030f 	bic.w	r3, r3, #15
 8003510:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	b29b      	uxth	r3, r3
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	b29a      	uxth	r2, r3
 800351e:	8afb      	ldrh	r3, [r7, #22]
 8003520:	4313      	orrs	r3, r2
 8003522:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	8afa      	ldrh	r2, [r7, #22]
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	e052      	b.n	80035d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003534:	e04e      	b.n	80035d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800353a:	2b08      	cmp	r3, #8
 800353c:	d827      	bhi.n	800358e <UART_SetConfig+0x506>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0x4bc>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003569 	.word	0x08003569
 8003548:	08003571 	.word	0x08003571
 800354c:	08003579 	.word	0x08003579
 8003550:	0800358f 	.word	0x0800358f
 8003554:	0800357f 	.word	0x0800357f
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800358f 	.word	0x0800358f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7fe fd2c 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 800356c:	61f8      	str	r0, [r7, #28]
        break;
 800356e:	e014      	b.n	800359a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7fe fd3e 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8003574:	61f8      	str	r0, [r7, #28]
        break;
 8003576:	e010      	b.n	800359a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <UART_SetConfig+0x56c>)
 800357a:	61fb      	str	r3, [r7, #28]
        break;
 800357c:	e00d      	b.n	800359a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fc89 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8003582:	61f8      	str	r0, [r7, #28]
        break;
 8003584:	e009      	b.n	800359a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	61fb      	str	r3, [r7, #28]
        break;
 800358c:	e005      	b.n	800359a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003598:	bf00      	nop
    }

    if (pclk != 0U)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	085a      	lsrs	r2, r3, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	441a      	add	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b0f      	cmp	r3, #15
 80035b8:	d909      	bls.n	80035ce <UART_SetConfig+0x546>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d205      	bcs.n	80035ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	e002      	b.n	80035d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3728      	adds	r7, #40	; 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ee:	bf00      	nop
 80035f0:	40008000 	.word	0x40008000
 80035f4:	00f42400 	.word	0x00f42400

080035f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01a      	beq.n	800370e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f6:	d10a      	bne.n	800370e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af02      	add	r7, sp, #8
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800374c:	f7fd fa8a 	bl	8000c64 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d10e      	bne.n	800377e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f82d 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e023      	b.n	80037c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b04      	cmp	r3, #4
 800378a:	d10e      	bne.n	80037aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f817 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e00d      	b.n	80037c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b09c      	sub	sp, #112	; 0x70
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037de:	e0a5      	b.n	800392c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e6:	f000 80a1 	beq.w	800392c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fd fa3b 	bl	8000c64 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <UART_WaitOnFlagUntilTimeout+0x32>
 80037fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d13e      	bne.n	800387e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800380e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003814:	667b      	str	r3, [r7, #100]	; 0x64
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800381e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003820:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800382c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e6      	bne.n	8003800 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3308      	adds	r3, #8
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	663b      	str	r3, [r7, #96]	; 0x60
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3308      	adds	r3, #8
 8003850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003852:	64ba      	str	r2, [r7, #72]	; 0x48
 8003854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e5      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e067      	b.n	800394e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d04f      	beq.n	800392c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389a:	d147      	bne.n	800392c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
 80038c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e6      	bne.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	613b      	str	r3, [r7, #16]
   return(result);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038f8:	623a      	str	r2, [r7, #32]
 80038fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	69f9      	ldr	r1, [r7, #28]
 80038fe:	6a3a      	ldr	r2, [r7, #32]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	61bb      	str	r3, [r7, #24]
   return(result);
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e010      	b.n	800394e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	429a      	cmp	r2, r3
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	429a      	cmp	r2, r3
 8003948:	f43f af4a 	beq.w	80037e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3770      	adds	r7, #112	; 0x70
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <__errno>:
 8003958:	4b01      	ldr	r3, [pc, #4]	; (8003960 <__errno+0x8>)
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000000c 	.word	0x2000000c

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4d0d      	ldr	r5, [pc, #52]	; (800399c <__libc_init_array+0x38>)
 8003968:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396a:	1b64      	subs	r4, r4, r5
 800396c:	10a4      	asrs	r4, r4, #2
 800396e:	2600      	movs	r6, #0
 8003970:	42a6      	cmp	r6, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	4d0b      	ldr	r5, [pc, #44]	; (80039a4 <__libc_init_array+0x40>)
 8003976:	4c0c      	ldr	r4, [pc, #48]	; (80039a8 <__libc_init_array+0x44>)
 8003978:	f000 fd1e 	bl	80043b8 <_init>
 800397c:	1b64      	subs	r4, r4, r5
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	2600      	movs	r6, #0
 8003982:	42a6      	cmp	r6, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f855 3b04 	ldr.w	r3, [r5], #4
 800398c:	4798      	blx	r3
 800398e:	3601      	adds	r6, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f855 3b04 	ldr.w	r3, [r5], #4
 8003996:	4798      	blx	r3
 8003998:	3601      	adds	r6, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08004508 	.word	0x08004508
 80039a0:	08004508 	.word	0x08004508
 80039a4:	08004508 	.word	0x08004508
 80039a8:	0800450c 	.word	0x0800450c

080039ac <memset>:
 80039ac:	4402      	add	r2, r0
 80039ae:	4603      	mov	r3, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <_puts_r>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	460e      	mov	r6, r1
 80039c0:	4605      	mov	r5, r0
 80039c2:	b118      	cbz	r0, 80039cc <_puts_r+0x10>
 80039c4:	6983      	ldr	r3, [r0, #24]
 80039c6:	b90b      	cbnz	r3, 80039cc <_puts_r+0x10>
 80039c8:	f000 fa48 	bl	8003e5c <__sinit>
 80039cc:	69ab      	ldr	r3, [r5, #24]
 80039ce:	68ac      	ldr	r4, [r5, #8]
 80039d0:	b913      	cbnz	r3, 80039d8 <_puts_r+0x1c>
 80039d2:	4628      	mov	r0, r5
 80039d4:	f000 fa42 	bl	8003e5c <__sinit>
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <_puts_r+0xd0>)
 80039da:	429c      	cmp	r4, r3
 80039dc:	d120      	bne.n	8003a20 <_puts_r+0x64>
 80039de:	686c      	ldr	r4, [r5, #4]
 80039e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039e2:	07db      	lsls	r3, r3, #31
 80039e4:	d405      	bmi.n	80039f2 <_puts_r+0x36>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	0598      	lsls	r0, r3, #22
 80039ea:	d402      	bmi.n	80039f2 <_puts_r+0x36>
 80039ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ee:	f000 fad3 	bl	8003f98 <__retarget_lock_acquire_recursive>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	0719      	lsls	r1, r3, #28
 80039f6:	d51d      	bpl.n	8003a34 <_puts_r+0x78>
 80039f8:	6923      	ldr	r3, [r4, #16]
 80039fa:	b1db      	cbz	r3, 8003a34 <_puts_r+0x78>
 80039fc:	3e01      	subs	r6, #1
 80039fe:	68a3      	ldr	r3, [r4, #8]
 8003a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60a3      	str	r3, [r4, #8]
 8003a08:	bb39      	cbnz	r1, 8003a5a <_puts_r+0x9e>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da38      	bge.n	8003a80 <_puts_r+0xc4>
 8003a0e:	4622      	mov	r2, r4
 8003a10:	210a      	movs	r1, #10
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 f848 	bl	8003aa8 <__swbuf_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d011      	beq.n	8003a40 <_puts_r+0x84>
 8003a1c:	250a      	movs	r5, #10
 8003a1e:	e011      	b.n	8003a44 <_puts_r+0x88>
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <_puts_r+0xd4>)
 8003a22:	429c      	cmp	r4, r3
 8003a24:	d101      	bne.n	8003a2a <_puts_r+0x6e>
 8003a26:	68ac      	ldr	r4, [r5, #8]
 8003a28:	e7da      	b.n	80039e0 <_puts_r+0x24>
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <_puts_r+0xd8>)
 8003a2c:	429c      	cmp	r4, r3
 8003a2e:	bf08      	it	eq
 8003a30:	68ec      	ldreq	r4, [r5, #12]
 8003a32:	e7d5      	b.n	80039e0 <_puts_r+0x24>
 8003a34:	4621      	mov	r1, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 f888 	bl	8003b4c <__swsetup_r>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d0dd      	beq.n	80039fc <_puts_r+0x40>
 8003a40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a46:	07da      	lsls	r2, r3, #31
 8003a48:	d405      	bmi.n	8003a56 <_puts_r+0x9a>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	059b      	lsls	r3, r3, #22
 8003a4e:	d402      	bmi.n	8003a56 <_puts_r+0x9a>
 8003a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a52:	f000 faa2 	bl	8003f9a <__retarget_lock_release_recursive>
 8003a56:	4628      	mov	r0, r5
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	da04      	bge.n	8003a68 <_puts_r+0xac>
 8003a5e:	69a2      	ldr	r2, [r4, #24]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	dc06      	bgt.n	8003a72 <_puts_r+0xb6>
 8003a64:	290a      	cmp	r1, #10
 8003a66:	d004      	beq.n	8003a72 <_puts_r+0xb6>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	6022      	str	r2, [r4, #0]
 8003a6e:	7019      	strb	r1, [r3, #0]
 8003a70:	e7c5      	b.n	80039fe <_puts_r+0x42>
 8003a72:	4622      	mov	r2, r4
 8003a74:	4628      	mov	r0, r5
 8003a76:	f000 f817 	bl	8003aa8 <__swbuf_r>
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	d1bf      	bne.n	80039fe <_puts_r+0x42>
 8003a7e:	e7df      	b.n	8003a40 <_puts_r+0x84>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	250a      	movs	r5, #10
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	6022      	str	r2, [r4, #0]
 8003a88:	701d      	strb	r5, [r3, #0]
 8003a8a:	e7db      	b.n	8003a44 <_puts_r+0x88>
 8003a8c:	080044c0 	.word	0x080044c0
 8003a90:	080044e0 	.word	0x080044e0
 8003a94:	080044a0 	.word	0x080044a0

08003a98 <puts>:
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <puts+0xc>)
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	f7ff bf8d 	b.w	80039bc <_puts_r>
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <__swbuf_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	460e      	mov	r6, r1
 8003aac:	4614      	mov	r4, r2
 8003aae:	4605      	mov	r5, r0
 8003ab0:	b118      	cbz	r0, 8003aba <__swbuf_r+0x12>
 8003ab2:	6983      	ldr	r3, [r0, #24]
 8003ab4:	b90b      	cbnz	r3, 8003aba <__swbuf_r+0x12>
 8003ab6:	f000 f9d1 	bl	8003e5c <__sinit>
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <__swbuf_r+0x98>)
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d12b      	bne.n	8003b18 <__swbuf_r+0x70>
 8003ac0:	686c      	ldr	r4, [r5, #4]
 8003ac2:	69a3      	ldr	r3, [r4, #24]
 8003ac4:	60a3      	str	r3, [r4, #8]
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	071a      	lsls	r2, r3, #28
 8003aca:	d52f      	bpl.n	8003b2c <__swbuf_r+0x84>
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	b36b      	cbz	r3, 8003b2c <__swbuf_r+0x84>
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	1ac0      	subs	r0, r0, r3
 8003ad6:	6963      	ldr	r3, [r4, #20]
 8003ad8:	b2f6      	uxtb	r6, r6
 8003ada:	4283      	cmp	r3, r0
 8003adc:	4637      	mov	r7, r6
 8003ade:	dc04      	bgt.n	8003aea <__swbuf_r+0x42>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f926 	bl	8003d34 <_fflush_r>
 8003ae8:	bb30      	cbnz	r0, 8003b38 <__swbuf_r+0x90>
 8003aea:	68a3      	ldr	r3, [r4, #8]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60a3      	str	r3, [r4, #8]
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	6022      	str	r2, [r4, #0]
 8003af6:	701e      	strb	r6, [r3, #0]
 8003af8:	6963      	ldr	r3, [r4, #20]
 8003afa:	3001      	adds	r0, #1
 8003afc:	4283      	cmp	r3, r0
 8003afe:	d004      	beq.n	8003b0a <__swbuf_r+0x62>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	07db      	lsls	r3, r3, #31
 8003b04:	d506      	bpl.n	8003b14 <__swbuf_r+0x6c>
 8003b06:	2e0a      	cmp	r6, #10
 8003b08:	d104      	bne.n	8003b14 <__swbuf_r+0x6c>
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 f911 	bl	8003d34 <_fflush_r>
 8003b12:	b988      	cbnz	r0, 8003b38 <__swbuf_r+0x90>
 8003b14:	4638      	mov	r0, r7
 8003b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <__swbuf_r+0x9c>)
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d101      	bne.n	8003b22 <__swbuf_r+0x7a>
 8003b1e:	68ac      	ldr	r4, [r5, #8]
 8003b20:	e7cf      	b.n	8003ac2 <__swbuf_r+0x1a>
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <__swbuf_r+0xa0>)
 8003b24:	429c      	cmp	r4, r3
 8003b26:	bf08      	it	eq
 8003b28:	68ec      	ldreq	r4, [r5, #12]
 8003b2a:	e7ca      	b.n	8003ac2 <__swbuf_r+0x1a>
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 f80c 	bl	8003b4c <__swsetup_r>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d0cb      	beq.n	8003ad0 <__swbuf_r+0x28>
 8003b38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b3c:	e7ea      	b.n	8003b14 <__swbuf_r+0x6c>
 8003b3e:	bf00      	nop
 8003b40:	080044c0 	.word	0x080044c0
 8003b44:	080044e0 	.word	0x080044e0
 8003b48:	080044a0 	.word	0x080044a0

08003b4c <__swsetup_r>:
 8003b4c:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <__swsetup_r+0xcc>)
 8003b4e:	b570      	push	{r4, r5, r6, lr}
 8003b50:	681d      	ldr	r5, [r3, #0]
 8003b52:	4606      	mov	r6, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	b125      	cbz	r5, 8003b62 <__swsetup_r+0x16>
 8003b58:	69ab      	ldr	r3, [r5, #24]
 8003b5a:	b913      	cbnz	r3, 8003b62 <__swsetup_r+0x16>
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 f97d 	bl	8003e5c <__sinit>
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <__swsetup_r+0xd0>)
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d10f      	bne.n	8003b88 <__swsetup_r+0x3c>
 8003b68:	686c      	ldr	r4, [r5, #4]
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b70:	0719      	lsls	r1, r3, #28
 8003b72:	d42c      	bmi.n	8003bce <__swsetup_r+0x82>
 8003b74:	06dd      	lsls	r5, r3, #27
 8003b76:	d411      	bmi.n	8003b9c <__swsetup_r+0x50>
 8003b78:	2309      	movs	r3, #9
 8003b7a:	6033      	str	r3, [r6, #0]
 8003b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b86:	e03e      	b.n	8003c06 <__swsetup_r+0xba>
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <__swsetup_r+0xd4>)
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d101      	bne.n	8003b92 <__swsetup_r+0x46>
 8003b8e:	68ac      	ldr	r4, [r5, #8]
 8003b90:	e7eb      	b.n	8003b6a <__swsetup_r+0x1e>
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <__swsetup_r+0xd8>)
 8003b94:	429c      	cmp	r4, r3
 8003b96:	bf08      	it	eq
 8003b98:	68ec      	ldreq	r4, [r5, #12]
 8003b9a:	e7e6      	b.n	8003b6a <__swsetup_r+0x1e>
 8003b9c:	0758      	lsls	r0, r3, #29
 8003b9e:	d512      	bpl.n	8003bc6 <__swsetup_r+0x7a>
 8003ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ba2:	b141      	cbz	r1, 8003bb6 <__swsetup_r+0x6a>
 8003ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	d002      	beq.n	8003bb2 <__swsetup_r+0x66>
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 fa5b 	bl	8004068 <_free_r>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8003bb6:	89a3      	ldrh	r3, [r4, #12]
 8003bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6063      	str	r3, [r4, #4]
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	f043 0308 	orr.w	r3, r3, #8
 8003bcc:	81a3      	strh	r3, [r4, #12]
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	b94b      	cbnz	r3, 8003be6 <__swsetup_r+0x9a>
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bdc:	d003      	beq.n	8003be6 <__swsetup_r+0x9a>
 8003bde:	4621      	mov	r1, r4
 8003be0:	4630      	mov	r0, r6
 8003be2:	f000 fa01 	bl	8003fe8 <__smakebuf_r>
 8003be6:	89a0      	ldrh	r0, [r4, #12]
 8003be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bec:	f010 0301 	ands.w	r3, r0, #1
 8003bf0:	d00a      	beq.n	8003c08 <__swsetup_r+0xbc>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60a3      	str	r3, [r4, #8]
 8003bf6:	6963      	ldr	r3, [r4, #20]
 8003bf8:	425b      	negs	r3, r3
 8003bfa:	61a3      	str	r3, [r4, #24]
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	b943      	cbnz	r3, 8003c12 <__swsetup_r+0xc6>
 8003c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c04:	d1ba      	bne.n	8003b7c <__swsetup_r+0x30>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	0781      	lsls	r1, r0, #30
 8003c0a:	bf58      	it	pl
 8003c0c:	6963      	ldrpl	r3, [r4, #20]
 8003c0e:	60a3      	str	r3, [r4, #8]
 8003c10:	e7f4      	b.n	8003bfc <__swsetup_r+0xb0>
 8003c12:	2000      	movs	r0, #0
 8003c14:	e7f7      	b.n	8003c06 <__swsetup_r+0xba>
 8003c16:	bf00      	nop
 8003c18:	2000000c 	.word	0x2000000c
 8003c1c:	080044c0 	.word	0x080044c0
 8003c20:	080044e0 	.word	0x080044e0
 8003c24:	080044a0 	.word	0x080044a0

08003c28 <__sflush_r>:
 8003c28:	898a      	ldrh	r2, [r1, #12]
 8003c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2e:	4605      	mov	r5, r0
 8003c30:	0710      	lsls	r0, r2, #28
 8003c32:	460c      	mov	r4, r1
 8003c34:	d458      	bmi.n	8003ce8 <__sflush_r+0xc0>
 8003c36:	684b      	ldr	r3, [r1, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	dc05      	bgt.n	8003c48 <__sflush_r+0x20>
 8003c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dc02      	bgt.n	8003c48 <__sflush_r+0x20>
 8003c42:	2000      	movs	r0, #0
 8003c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c4a:	2e00      	cmp	r6, #0
 8003c4c:	d0f9      	beq.n	8003c42 <__sflush_r+0x1a>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c54:	682f      	ldr	r7, [r5, #0]
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	d032      	beq.n	8003cc0 <__sflush_r+0x98>
 8003c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	075a      	lsls	r2, r3, #29
 8003c60:	d505      	bpl.n	8003c6e <__sflush_r+0x46>
 8003c62:	6863      	ldr	r3, [r4, #4]
 8003c64:	1ac0      	subs	r0, r0, r3
 8003c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c68:	b10b      	cbz	r3, 8003c6e <__sflush_r+0x46>
 8003c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c6c:	1ac0      	subs	r0, r0, r3
 8003c6e:	2300      	movs	r3, #0
 8003c70:	4602      	mov	r2, r0
 8003c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c74:	6a21      	ldr	r1, [r4, #32]
 8003c76:	4628      	mov	r0, r5
 8003c78:	47b0      	blx	r6
 8003c7a:	1c43      	adds	r3, r0, #1
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	d106      	bne.n	8003c8e <__sflush_r+0x66>
 8003c80:	6829      	ldr	r1, [r5, #0]
 8003c82:	291d      	cmp	r1, #29
 8003c84:	d82c      	bhi.n	8003ce0 <__sflush_r+0xb8>
 8003c86:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <__sflush_r+0x108>)
 8003c88:	40ca      	lsrs	r2, r1
 8003c8a:	07d6      	lsls	r6, r2, #31
 8003c8c:	d528      	bpl.n	8003ce0 <__sflush_r+0xb8>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	6062      	str	r2, [r4, #4]
 8003c92:	04d9      	lsls	r1, r3, #19
 8003c94:	6922      	ldr	r2, [r4, #16]
 8003c96:	6022      	str	r2, [r4, #0]
 8003c98:	d504      	bpl.n	8003ca4 <__sflush_r+0x7c>
 8003c9a:	1c42      	adds	r2, r0, #1
 8003c9c:	d101      	bne.n	8003ca2 <__sflush_r+0x7a>
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	b903      	cbnz	r3, 8003ca4 <__sflush_r+0x7c>
 8003ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ca6:	602f      	str	r7, [r5, #0]
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d0ca      	beq.n	8003c42 <__sflush_r+0x1a>
 8003cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	d002      	beq.n	8003cba <__sflush_r+0x92>
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 f9d7 	bl	8004068 <_free_r>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8003cbe:	e7c1      	b.n	8003c44 <__sflush_r+0x1c>
 8003cc0:	6a21      	ldr	r1, [r4, #32]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	47b0      	blx	r6
 8003cc8:	1c41      	adds	r1, r0, #1
 8003cca:	d1c7      	bne.n	8003c5c <__sflush_r+0x34>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0c4      	beq.n	8003c5c <__sflush_r+0x34>
 8003cd2:	2b1d      	cmp	r3, #29
 8003cd4:	d001      	beq.n	8003cda <__sflush_r+0xb2>
 8003cd6:	2b16      	cmp	r3, #22
 8003cd8:	d101      	bne.n	8003cde <__sflush_r+0xb6>
 8003cda:	602f      	str	r7, [r5, #0]
 8003cdc:	e7b1      	b.n	8003c42 <__sflush_r+0x1a>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	e7ad      	b.n	8003c44 <__sflush_r+0x1c>
 8003ce8:	690f      	ldr	r7, [r1, #16]
 8003cea:	2f00      	cmp	r7, #0
 8003cec:	d0a9      	beq.n	8003c42 <__sflush_r+0x1a>
 8003cee:	0793      	lsls	r3, r2, #30
 8003cf0:	680e      	ldr	r6, [r1, #0]
 8003cf2:	bf08      	it	eq
 8003cf4:	694b      	ldreq	r3, [r1, #20]
 8003cf6:	600f      	str	r7, [r1, #0]
 8003cf8:	bf18      	it	ne
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	eba6 0807 	sub.w	r8, r6, r7
 8003d00:	608b      	str	r3, [r1, #8]
 8003d02:	f1b8 0f00 	cmp.w	r8, #0
 8003d06:	dd9c      	ble.n	8003c42 <__sflush_r+0x1a>
 8003d08:	6a21      	ldr	r1, [r4, #32]
 8003d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	463a      	mov	r2, r7
 8003d10:	4628      	mov	r0, r5
 8003d12:	47b0      	blx	r6
 8003d14:	2800      	cmp	r0, #0
 8003d16:	dc06      	bgt.n	8003d26 <__sflush_r+0xfe>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d24:	e78e      	b.n	8003c44 <__sflush_r+0x1c>
 8003d26:	4407      	add	r7, r0
 8003d28:	eba8 0800 	sub.w	r8, r8, r0
 8003d2c:	e7e9      	b.n	8003d02 <__sflush_r+0xda>
 8003d2e:	bf00      	nop
 8003d30:	20400001 	.word	0x20400001

08003d34 <_fflush_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	690b      	ldr	r3, [r1, #16]
 8003d38:	4605      	mov	r5, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	b913      	cbnz	r3, 8003d44 <_fflush_r+0x10>
 8003d3e:	2500      	movs	r5, #0
 8003d40:	4628      	mov	r0, r5
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	b118      	cbz	r0, 8003d4e <_fflush_r+0x1a>
 8003d46:	6983      	ldr	r3, [r0, #24]
 8003d48:	b90b      	cbnz	r3, 8003d4e <_fflush_r+0x1a>
 8003d4a:	f000 f887 	bl	8003e5c <__sinit>
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <_fflush_r+0x6c>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	d11b      	bne.n	8003d8c <_fflush_r+0x58>
 8003d54:	686c      	ldr	r4, [r5, #4]
 8003d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ef      	beq.n	8003d3e <_fflush_r+0xa>
 8003d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d60:	07d0      	lsls	r0, r2, #31
 8003d62:	d404      	bmi.n	8003d6e <_fflush_r+0x3a>
 8003d64:	0599      	lsls	r1, r3, #22
 8003d66:	d402      	bmi.n	8003d6e <_fflush_r+0x3a>
 8003d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d6a:	f000 f915 	bl	8003f98 <__retarget_lock_acquire_recursive>
 8003d6e:	4628      	mov	r0, r5
 8003d70:	4621      	mov	r1, r4
 8003d72:	f7ff ff59 	bl	8003c28 <__sflush_r>
 8003d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d78:	07da      	lsls	r2, r3, #31
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	d4e0      	bmi.n	8003d40 <_fflush_r+0xc>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	059b      	lsls	r3, r3, #22
 8003d82:	d4dd      	bmi.n	8003d40 <_fflush_r+0xc>
 8003d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d86:	f000 f908 	bl	8003f9a <__retarget_lock_release_recursive>
 8003d8a:	e7d9      	b.n	8003d40 <_fflush_r+0xc>
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <_fflush_r+0x70>)
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	d101      	bne.n	8003d96 <_fflush_r+0x62>
 8003d92:	68ac      	ldr	r4, [r5, #8]
 8003d94:	e7df      	b.n	8003d56 <_fflush_r+0x22>
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <_fflush_r+0x74>)
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	bf08      	it	eq
 8003d9c:	68ec      	ldreq	r4, [r5, #12]
 8003d9e:	e7da      	b.n	8003d56 <_fflush_r+0x22>
 8003da0:	080044c0 	.word	0x080044c0
 8003da4:	080044e0 	.word	0x080044e0
 8003da8:	080044a0 	.word	0x080044a0

08003dac <std>:
 8003dac:	2300      	movs	r3, #0
 8003dae:	b510      	push	{r4, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	e9c0 3300 	strd	r3, r3, [r0]
 8003db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dba:	6083      	str	r3, [r0, #8]
 8003dbc:	8181      	strh	r1, [r0, #12]
 8003dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8003dc0:	81c2      	strh	r2, [r0, #14]
 8003dc2:	6183      	str	r3, [r0, #24]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	305c      	adds	r0, #92	; 0x5c
 8003dca:	f7ff fdef 	bl	80039ac <memset>
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <std+0x38>)
 8003dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <std+0x3c>)
 8003dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <std+0x40>)
 8003dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <std+0x44>)
 8003ddc:	6224      	str	r4, [r4, #32]
 8003dde:	6323      	str	r3, [r4, #48]	; 0x30
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	bf00      	nop
 8003de4:	08004249 	.word	0x08004249
 8003de8:	0800426b 	.word	0x0800426b
 8003dec:	080042a3 	.word	0x080042a3
 8003df0:	080042c7 	.word	0x080042c7

08003df4 <_cleanup_r>:
 8003df4:	4901      	ldr	r1, [pc, #4]	; (8003dfc <_cleanup_r+0x8>)
 8003df6:	f000 b8af 	b.w	8003f58 <_fwalk_reent>
 8003dfa:	bf00      	nop
 8003dfc:	08003d35 	.word	0x08003d35

08003e00 <__sfmoreglue>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	2268      	movs	r2, #104	; 0x68
 8003e04:	1e4d      	subs	r5, r1, #1
 8003e06:	4355      	muls	r5, r2
 8003e08:	460e      	mov	r6, r1
 8003e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e0e:	f000 f997 	bl	8004140 <_malloc_r>
 8003e12:	4604      	mov	r4, r0
 8003e14:	b140      	cbz	r0, 8003e28 <__sfmoreglue+0x28>
 8003e16:	2100      	movs	r1, #0
 8003e18:	e9c0 1600 	strd	r1, r6, [r0]
 8003e1c:	300c      	adds	r0, #12
 8003e1e:	60a0      	str	r0, [r4, #8]
 8003e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e24:	f7ff fdc2 	bl	80039ac <memset>
 8003e28:	4620      	mov	r0, r4
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}

08003e2c <__sfp_lock_acquire>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__sfp_lock_acquire+0x8>)
 8003e2e:	f000 b8b3 	b.w	8003f98 <__retarget_lock_acquire_recursive>
 8003e32:	bf00      	nop
 8003e34:	2000013d 	.word	0x2000013d

08003e38 <__sfp_lock_release>:
 8003e38:	4801      	ldr	r0, [pc, #4]	; (8003e40 <__sfp_lock_release+0x8>)
 8003e3a:	f000 b8ae 	b.w	8003f9a <__retarget_lock_release_recursive>
 8003e3e:	bf00      	nop
 8003e40:	2000013d 	.word	0x2000013d

08003e44 <__sinit_lock_acquire>:
 8003e44:	4801      	ldr	r0, [pc, #4]	; (8003e4c <__sinit_lock_acquire+0x8>)
 8003e46:	f000 b8a7 	b.w	8003f98 <__retarget_lock_acquire_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	2000013e 	.word	0x2000013e

08003e50 <__sinit_lock_release>:
 8003e50:	4801      	ldr	r0, [pc, #4]	; (8003e58 <__sinit_lock_release+0x8>)
 8003e52:	f000 b8a2 	b.w	8003f9a <__retarget_lock_release_recursive>
 8003e56:	bf00      	nop
 8003e58:	2000013e 	.word	0x2000013e

08003e5c <__sinit>:
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4604      	mov	r4, r0
 8003e60:	f7ff fff0 	bl	8003e44 <__sinit_lock_acquire>
 8003e64:	69a3      	ldr	r3, [r4, #24]
 8003e66:	b11b      	cbz	r3, 8003e70 <__sinit+0x14>
 8003e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e6c:	f7ff bff0 	b.w	8003e50 <__sinit_lock_release>
 8003e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e74:	6523      	str	r3, [r4, #80]	; 0x50
 8003e76:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <__sinit+0x68>)
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <__sinit+0x6c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e7e:	42a3      	cmp	r3, r4
 8003e80:	bf04      	itt	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	61a3      	streq	r3, [r4, #24]
 8003e86:	4620      	mov	r0, r4
 8003e88:	f000 f820 	bl	8003ecc <__sfp>
 8003e8c:	6060      	str	r0, [r4, #4]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 f81c 	bl	8003ecc <__sfp>
 8003e94:	60a0      	str	r0, [r4, #8]
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 f818 	bl	8003ecc <__sfp>
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	60e0      	str	r0, [r4, #12]
 8003ea0:	2104      	movs	r1, #4
 8003ea2:	6860      	ldr	r0, [r4, #4]
 8003ea4:	f7ff ff82 	bl	8003dac <std>
 8003ea8:	68a0      	ldr	r0, [r4, #8]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2109      	movs	r1, #9
 8003eae:	f7ff ff7d 	bl	8003dac <std>
 8003eb2:	68e0      	ldr	r0, [r4, #12]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	2112      	movs	r1, #18
 8003eb8:	f7ff ff78 	bl	8003dac <std>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	61a3      	str	r3, [r4, #24]
 8003ec0:	e7d2      	b.n	8003e68 <__sinit+0xc>
 8003ec2:	bf00      	nop
 8003ec4:	0800449c 	.word	0x0800449c
 8003ec8:	08003df5 	.word	0x08003df5

08003ecc <__sfp>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	4607      	mov	r7, r0
 8003ed0:	f7ff ffac 	bl	8003e2c <__sfp_lock_acquire>
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <__sfp+0x84>)
 8003ed6:	681e      	ldr	r6, [r3, #0]
 8003ed8:	69b3      	ldr	r3, [r6, #24]
 8003eda:	b913      	cbnz	r3, 8003ee2 <__sfp+0x16>
 8003edc:	4630      	mov	r0, r6
 8003ede:	f7ff ffbd 	bl	8003e5c <__sinit>
 8003ee2:	3648      	adds	r6, #72	; 0x48
 8003ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	d503      	bpl.n	8003ef4 <__sfp+0x28>
 8003eec:	6833      	ldr	r3, [r6, #0]
 8003eee:	b30b      	cbz	r3, 8003f34 <__sfp+0x68>
 8003ef0:	6836      	ldr	r6, [r6, #0]
 8003ef2:	e7f7      	b.n	8003ee4 <__sfp+0x18>
 8003ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ef8:	b9d5      	cbnz	r5, 8003f30 <__sfp+0x64>
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <__sfp+0x88>)
 8003efc:	60e3      	str	r3, [r4, #12]
 8003efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f02:	6665      	str	r5, [r4, #100]	; 0x64
 8003f04:	f000 f847 	bl	8003f96 <__retarget_lock_init_recursive>
 8003f08:	f7ff ff96 	bl	8003e38 <__sfp_lock_release>
 8003f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f14:	6025      	str	r5, [r4, #0]
 8003f16:	61a5      	str	r5, [r4, #24]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f20:	f7ff fd44 	bl	80039ac <memset>
 8003f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f30:	3468      	adds	r4, #104	; 0x68
 8003f32:	e7d9      	b.n	8003ee8 <__sfp+0x1c>
 8003f34:	2104      	movs	r1, #4
 8003f36:	4638      	mov	r0, r7
 8003f38:	f7ff ff62 	bl	8003e00 <__sfmoreglue>
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	6030      	str	r0, [r6, #0]
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d1d5      	bne.n	8003ef0 <__sfp+0x24>
 8003f44:	f7ff ff78 	bl	8003e38 <__sfp_lock_release>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	e7ee      	b.n	8003f2c <__sfp+0x60>
 8003f4e:	bf00      	nop
 8003f50:	0800449c 	.word	0x0800449c
 8003f54:	ffff0001 	.word	0xffff0001

08003f58 <_fwalk_reent>:
 8003f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	4688      	mov	r8, r1
 8003f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f64:	2700      	movs	r7, #0
 8003f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8003f6e:	d505      	bpl.n	8003f7c <_fwalk_reent+0x24>
 8003f70:	6824      	ldr	r4, [r4, #0]
 8003f72:	2c00      	cmp	r4, #0
 8003f74:	d1f7      	bne.n	8003f66 <_fwalk_reent+0xe>
 8003f76:	4638      	mov	r0, r7
 8003f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7c:	89ab      	ldrh	r3, [r5, #12]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d907      	bls.n	8003f92 <_fwalk_reent+0x3a>
 8003f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f86:	3301      	adds	r3, #1
 8003f88:	d003      	beq.n	8003f92 <_fwalk_reent+0x3a>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	47c0      	blx	r8
 8003f90:	4307      	orrs	r7, r0
 8003f92:	3568      	adds	r5, #104	; 0x68
 8003f94:	e7e9      	b.n	8003f6a <_fwalk_reent+0x12>

08003f96 <__retarget_lock_init_recursive>:
 8003f96:	4770      	bx	lr

08003f98 <__retarget_lock_acquire_recursive>:
 8003f98:	4770      	bx	lr

08003f9a <__retarget_lock_release_recursive>:
 8003f9a:	4770      	bx	lr

08003f9c <__swhatbuf_r>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	b096      	sub	sp, #88	; 0x58
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	da08      	bge.n	8003fc0 <__swhatbuf_r+0x24>
 8003fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	602a      	str	r2, [r5, #0]
 8003fb6:	061a      	lsls	r2, r3, #24
 8003fb8:	d410      	bmi.n	8003fdc <__swhatbuf_r+0x40>
 8003fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fbe:	e00e      	b.n	8003fde <__swhatbuf_r+0x42>
 8003fc0:	466a      	mov	r2, sp
 8003fc2:	f000 f9a7 	bl	8004314 <_fstat_r>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	dbf1      	blt.n	8003fae <__swhatbuf_r+0x12>
 8003fca:	9a01      	ldr	r2, [sp, #4]
 8003fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fd4:	425a      	negs	r2, r3
 8003fd6:	415a      	adcs	r2, r3
 8003fd8:	602a      	str	r2, [r5, #0]
 8003fda:	e7ee      	b.n	8003fba <__swhatbuf_r+0x1e>
 8003fdc:	2340      	movs	r3, #64	; 0x40
 8003fde:	2000      	movs	r0, #0
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	b016      	add	sp, #88	; 0x58
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fe8 <__smakebuf_r>:
 8003fe8:	898b      	ldrh	r3, [r1, #12]
 8003fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fec:	079d      	lsls	r5, r3, #30
 8003fee:	4606      	mov	r6, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	d507      	bpl.n	8004004 <__smakebuf_r+0x1c>
 8003ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	6123      	str	r3, [r4, #16]
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	6163      	str	r3, [r4, #20]
 8004000:	b002      	add	sp, #8
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	ab01      	add	r3, sp, #4
 8004006:	466a      	mov	r2, sp
 8004008:	f7ff ffc8 	bl	8003f9c <__swhatbuf_r>
 800400c:	9900      	ldr	r1, [sp, #0]
 800400e:	4605      	mov	r5, r0
 8004010:	4630      	mov	r0, r6
 8004012:	f000 f895 	bl	8004140 <_malloc_r>
 8004016:	b948      	cbnz	r0, 800402c <__smakebuf_r+0x44>
 8004018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800401c:	059a      	lsls	r2, r3, #22
 800401e:	d4ef      	bmi.n	8004000 <__smakebuf_r+0x18>
 8004020:	f023 0303 	bic.w	r3, r3, #3
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	e7e3      	b.n	8003ff4 <__smakebuf_r+0xc>
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <__smakebuf_r+0x7c>)
 800402e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	6020      	str	r0, [r4, #0]
 8004034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004038:	81a3      	strh	r3, [r4, #12]
 800403a:	9b00      	ldr	r3, [sp, #0]
 800403c:	6163      	str	r3, [r4, #20]
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	6120      	str	r0, [r4, #16]
 8004042:	b15b      	cbz	r3, 800405c <__smakebuf_r+0x74>
 8004044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004048:	4630      	mov	r0, r6
 800404a:	f000 f975 	bl	8004338 <_isatty_r>
 800404e:	b128      	cbz	r0, 800405c <__smakebuf_r+0x74>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	81a3      	strh	r3, [r4, #12]
 800405c:	89a0      	ldrh	r0, [r4, #12]
 800405e:	4305      	orrs	r5, r0
 8004060:	81a5      	strh	r5, [r4, #12]
 8004062:	e7cd      	b.n	8004000 <__smakebuf_r+0x18>
 8004064:	08003df5 	.word	0x08003df5

08004068 <_free_r>:
 8004068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800406a:	2900      	cmp	r1, #0
 800406c:	d044      	beq.n	80040f8 <_free_r+0x90>
 800406e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004072:	9001      	str	r0, [sp, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f1a1 0404 	sub.w	r4, r1, #4
 800407a:	bfb8      	it	lt
 800407c:	18e4      	addlt	r4, r4, r3
 800407e:	f000 f97d 	bl	800437c <__malloc_lock>
 8004082:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <_free_r+0x94>)
 8004084:	9801      	ldr	r0, [sp, #4]
 8004086:	6813      	ldr	r3, [r2, #0]
 8004088:	b933      	cbnz	r3, 8004098 <_free_r+0x30>
 800408a:	6063      	str	r3, [r4, #4]
 800408c:	6014      	str	r4, [r2, #0]
 800408e:	b003      	add	sp, #12
 8004090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004094:	f000 b978 	b.w	8004388 <__malloc_unlock>
 8004098:	42a3      	cmp	r3, r4
 800409a:	d908      	bls.n	80040ae <_free_r+0x46>
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	1961      	adds	r1, r4, r5
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf01      	itttt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	1949      	addeq	r1, r1, r5
 80040aa:	6021      	streq	r1, [r4, #0]
 80040ac:	e7ed      	b.n	800408a <_free_r+0x22>
 80040ae:	461a      	mov	r2, r3
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b10b      	cbz	r3, 80040b8 <_free_r+0x50>
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	d9fa      	bls.n	80040ae <_free_r+0x46>
 80040b8:	6811      	ldr	r1, [r2, #0]
 80040ba:	1855      	adds	r5, r2, r1
 80040bc:	42a5      	cmp	r5, r4
 80040be:	d10b      	bne.n	80040d8 <_free_r+0x70>
 80040c0:	6824      	ldr	r4, [r4, #0]
 80040c2:	4421      	add	r1, r4
 80040c4:	1854      	adds	r4, r2, r1
 80040c6:	42a3      	cmp	r3, r4
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	d1e0      	bne.n	800408e <_free_r+0x26>
 80040cc:	681c      	ldr	r4, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	6053      	str	r3, [r2, #4]
 80040d2:	4421      	add	r1, r4
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	e7da      	b.n	800408e <_free_r+0x26>
 80040d8:	d902      	bls.n	80040e0 <_free_r+0x78>
 80040da:	230c      	movs	r3, #12
 80040dc:	6003      	str	r3, [r0, #0]
 80040de:	e7d6      	b.n	800408e <_free_r+0x26>
 80040e0:	6825      	ldr	r5, [r4, #0]
 80040e2:	1961      	adds	r1, r4, r5
 80040e4:	428b      	cmp	r3, r1
 80040e6:	bf04      	itt	eq
 80040e8:	6819      	ldreq	r1, [r3, #0]
 80040ea:	685b      	ldreq	r3, [r3, #4]
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	bf04      	itt	eq
 80040f0:	1949      	addeq	r1, r1, r5
 80040f2:	6021      	streq	r1, [r4, #0]
 80040f4:	6054      	str	r4, [r2, #4]
 80040f6:	e7ca      	b.n	800408e <_free_r+0x26>
 80040f8:	b003      	add	sp, #12
 80040fa:	bd30      	pop	{r4, r5, pc}
 80040fc:	20000140 	.word	0x20000140

08004100 <sbrk_aligned>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4e0e      	ldr	r6, [pc, #56]	; (800413c <sbrk_aligned+0x3c>)
 8004104:	460c      	mov	r4, r1
 8004106:	6831      	ldr	r1, [r6, #0]
 8004108:	4605      	mov	r5, r0
 800410a:	b911      	cbnz	r1, 8004112 <sbrk_aligned+0x12>
 800410c:	f000 f88c 	bl	8004228 <_sbrk_r>
 8004110:	6030      	str	r0, [r6, #0]
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 f887 	bl	8004228 <_sbrk_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	d00a      	beq.n	8004134 <sbrk_aligned+0x34>
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d007      	beq.n	8004138 <sbrk_aligned+0x38>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4628      	mov	r0, r5
 800412c:	f000 f87c 	bl	8004228 <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d101      	bne.n	8004138 <sbrk_aligned+0x38>
 8004134:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004138:	4620      	mov	r0, r4
 800413a:	bd70      	pop	{r4, r5, r6, pc}
 800413c:	20000144 	.word	0x20000144

08004140 <_malloc_r>:
 8004140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004144:	1ccd      	adds	r5, r1, #3
 8004146:	f025 0503 	bic.w	r5, r5, #3
 800414a:	3508      	adds	r5, #8
 800414c:	2d0c      	cmp	r5, #12
 800414e:	bf38      	it	cc
 8004150:	250c      	movcc	r5, #12
 8004152:	2d00      	cmp	r5, #0
 8004154:	4607      	mov	r7, r0
 8004156:	db01      	blt.n	800415c <_malloc_r+0x1c>
 8004158:	42a9      	cmp	r1, r5
 800415a:	d905      	bls.n	8004168 <_malloc_r+0x28>
 800415c:	230c      	movs	r3, #12
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	2600      	movs	r6, #0
 8004162:	4630      	mov	r0, r6
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	4e2e      	ldr	r6, [pc, #184]	; (8004224 <_malloc_r+0xe4>)
 800416a:	f000 f907 	bl	800437c <__malloc_lock>
 800416e:	6833      	ldr	r3, [r6, #0]
 8004170:	461c      	mov	r4, r3
 8004172:	bb34      	cbnz	r4, 80041c2 <_malloc_r+0x82>
 8004174:	4629      	mov	r1, r5
 8004176:	4638      	mov	r0, r7
 8004178:	f7ff ffc2 	bl	8004100 <sbrk_aligned>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	4604      	mov	r4, r0
 8004180:	d14d      	bne.n	800421e <_malloc_r+0xde>
 8004182:	6834      	ldr	r4, [r6, #0]
 8004184:	4626      	mov	r6, r4
 8004186:	2e00      	cmp	r6, #0
 8004188:	d140      	bne.n	800420c <_malloc_r+0xcc>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	4631      	mov	r1, r6
 800418e:	4638      	mov	r0, r7
 8004190:	eb04 0803 	add.w	r8, r4, r3
 8004194:	f000 f848 	bl	8004228 <_sbrk_r>
 8004198:	4580      	cmp	r8, r0
 800419a:	d13a      	bne.n	8004212 <_malloc_r+0xd2>
 800419c:	6821      	ldr	r1, [r4, #0]
 800419e:	3503      	adds	r5, #3
 80041a0:	1a6d      	subs	r5, r5, r1
 80041a2:	f025 0503 	bic.w	r5, r5, #3
 80041a6:	3508      	adds	r5, #8
 80041a8:	2d0c      	cmp	r5, #12
 80041aa:	bf38      	it	cc
 80041ac:	250c      	movcc	r5, #12
 80041ae:	4629      	mov	r1, r5
 80041b0:	4638      	mov	r0, r7
 80041b2:	f7ff ffa5 	bl	8004100 <sbrk_aligned>
 80041b6:	3001      	adds	r0, #1
 80041b8:	d02b      	beq.n	8004212 <_malloc_r+0xd2>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	442b      	add	r3, r5
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	e00e      	b.n	80041e0 <_malloc_r+0xa0>
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	1b52      	subs	r2, r2, r5
 80041c6:	d41e      	bmi.n	8004206 <_malloc_r+0xc6>
 80041c8:	2a0b      	cmp	r2, #11
 80041ca:	d916      	bls.n	80041fa <_malloc_r+0xba>
 80041cc:	1961      	adds	r1, r4, r5
 80041ce:	42a3      	cmp	r3, r4
 80041d0:	6025      	str	r5, [r4, #0]
 80041d2:	bf18      	it	ne
 80041d4:	6059      	strne	r1, [r3, #4]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	bf08      	it	eq
 80041da:	6031      	streq	r1, [r6, #0]
 80041dc:	5162      	str	r2, [r4, r5]
 80041de:	604b      	str	r3, [r1, #4]
 80041e0:	4638      	mov	r0, r7
 80041e2:	f104 060b 	add.w	r6, r4, #11
 80041e6:	f000 f8cf 	bl	8004388 <__malloc_unlock>
 80041ea:	f026 0607 	bic.w	r6, r6, #7
 80041ee:	1d23      	adds	r3, r4, #4
 80041f0:	1af2      	subs	r2, r6, r3
 80041f2:	d0b6      	beq.n	8004162 <_malloc_r+0x22>
 80041f4:	1b9b      	subs	r3, r3, r6
 80041f6:	50a3      	str	r3, [r4, r2]
 80041f8:	e7b3      	b.n	8004162 <_malloc_r+0x22>
 80041fa:	6862      	ldr	r2, [r4, #4]
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	bf0c      	ite	eq
 8004200:	6032      	streq	r2, [r6, #0]
 8004202:	605a      	strne	r2, [r3, #4]
 8004204:	e7ec      	b.n	80041e0 <_malloc_r+0xa0>
 8004206:	4623      	mov	r3, r4
 8004208:	6864      	ldr	r4, [r4, #4]
 800420a:	e7b2      	b.n	8004172 <_malloc_r+0x32>
 800420c:	4634      	mov	r4, r6
 800420e:	6876      	ldr	r6, [r6, #4]
 8004210:	e7b9      	b.n	8004186 <_malloc_r+0x46>
 8004212:	230c      	movs	r3, #12
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4638      	mov	r0, r7
 8004218:	f000 f8b6 	bl	8004388 <__malloc_unlock>
 800421c:	e7a1      	b.n	8004162 <_malloc_r+0x22>
 800421e:	6025      	str	r5, [r4, #0]
 8004220:	e7de      	b.n	80041e0 <_malloc_r+0xa0>
 8004222:	bf00      	nop
 8004224:	20000140 	.word	0x20000140

08004228 <_sbrk_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4d06      	ldr	r5, [pc, #24]	; (8004244 <_sbrk_r+0x1c>)
 800422c:	2300      	movs	r3, #0
 800422e:	4604      	mov	r4, r0
 8004230:	4608      	mov	r0, r1
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	f7fc fc3c 	bl	8000ab0 <_sbrk>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_sbrk_r+0x1a>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_sbrk_r+0x1a>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	20000148 	.word	0x20000148

08004248 <__sread>:
 8004248:	b510      	push	{r4, lr}
 800424a:	460c      	mov	r4, r1
 800424c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004250:	f000 f8a0 	bl	8004394 <_read_r>
 8004254:	2800      	cmp	r0, #0
 8004256:	bfab      	itete	ge
 8004258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800425a:	89a3      	ldrhlt	r3, [r4, #12]
 800425c:	181b      	addge	r3, r3, r0
 800425e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004262:	bfac      	ite	ge
 8004264:	6563      	strge	r3, [r4, #84]	; 0x54
 8004266:	81a3      	strhlt	r3, [r4, #12]
 8004268:	bd10      	pop	{r4, pc}

0800426a <__swrite>:
 800426a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800426e:	461f      	mov	r7, r3
 8004270:	898b      	ldrh	r3, [r1, #12]
 8004272:	05db      	lsls	r3, r3, #23
 8004274:	4605      	mov	r5, r0
 8004276:	460c      	mov	r4, r1
 8004278:	4616      	mov	r6, r2
 800427a:	d505      	bpl.n	8004288 <__swrite+0x1e>
 800427c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004280:	2302      	movs	r3, #2
 8004282:	2200      	movs	r2, #0
 8004284:	f000 f868 	bl	8004358 <_lseek_r>
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800428e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	4632      	mov	r2, r6
 8004296:	463b      	mov	r3, r7
 8004298:	4628      	mov	r0, r5
 800429a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800429e:	f000 b817 	b.w	80042d0 <_write_r>

080042a2 <__sseek>:
 80042a2:	b510      	push	{r4, lr}
 80042a4:	460c      	mov	r4, r1
 80042a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042aa:	f000 f855 	bl	8004358 <_lseek_r>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	bf15      	itete	ne
 80042b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80042b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042be:	81a3      	strheq	r3, [r4, #12]
 80042c0:	bf18      	it	ne
 80042c2:	81a3      	strhne	r3, [r4, #12]
 80042c4:	bd10      	pop	{r4, pc}

080042c6 <__sclose>:
 80042c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ca:	f000 b813 	b.w	80042f4 <_close_r>
	...

080042d0 <_write_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4d07      	ldr	r5, [pc, #28]	; (80042f0 <_write_r+0x20>)
 80042d4:	4604      	mov	r4, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	602a      	str	r2, [r5, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fc fb9c 	bl	8000a1c <_write>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_write_r+0x1e>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_write_r+0x1e>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	20000148 	.word	0x20000148

080042f4 <_close_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4d06      	ldr	r5, [pc, #24]	; (8004310 <_close_r+0x1c>)
 80042f8:	2300      	movs	r3, #0
 80042fa:	4604      	mov	r4, r0
 80042fc:	4608      	mov	r0, r1
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	f7fc fba2 	bl	8000a48 <_close>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_close_r+0x1a>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	b103      	cbz	r3, 800430e <_close_r+0x1a>
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	20000148 	.word	0x20000148

08004314 <_fstat_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4d07      	ldr	r5, [pc, #28]	; (8004334 <_fstat_r+0x20>)
 8004318:	2300      	movs	r3, #0
 800431a:	4604      	mov	r4, r0
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	f7fc fb9d 	bl	8000a60 <_fstat>
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	d102      	bne.n	8004330 <_fstat_r+0x1c>
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	b103      	cbz	r3, 8004330 <_fstat_r+0x1c>
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	bd38      	pop	{r3, r4, r5, pc}
 8004332:	bf00      	nop
 8004334:	20000148 	.word	0x20000148

08004338 <_isatty_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4d06      	ldr	r5, [pc, #24]	; (8004354 <_isatty_r+0x1c>)
 800433c:	2300      	movs	r3, #0
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f7fc fb9c 	bl	8000a80 <_isatty>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_isatty_r+0x1a>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_isatty_r+0x1a>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	20000148 	.word	0x20000148

08004358 <_lseek_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d07      	ldr	r5, [pc, #28]	; (8004378 <_lseek_r+0x20>)
 800435c:	4604      	mov	r4, r0
 800435e:	4608      	mov	r0, r1
 8004360:	4611      	mov	r1, r2
 8004362:	2200      	movs	r2, #0
 8004364:	602a      	str	r2, [r5, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f7fc fb95 	bl	8000a96 <_lseek>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_lseek_r+0x1e>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_lseek_r+0x1e>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	20000148 	.word	0x20000148

0800437c <__malloc_lock>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__malloc_lock+0x8>)
 800437e:	f7ff be0b 	b.w	8003f98 <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	2000013c 	.word	0x2000013c

08004388 <__malloc_unlock>:
 8004388:	4801      	ldr	r0, [pc, #4]	; (8004390 <__malloc_unlock+0x8>)
 800438a:	f7ff be06 	b.w	8003f9a <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	2000013c 	.word	0x2000013c

08004394 <_read_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d07      	ldr	r5, [pc, #28]	; (80043b4 <_read_r+0x20>)
 8004398:	4604      	mov	r4, r0
 800439a:	4608      	mov	r0, r1
 800439c:	4611      	mov	r1, r2
 800439e:	2200      	movs	r2, #0
 80043a0:	602a      	str	r2, [r5, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f7fc fb1c 	bl	80009e0 <_read>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d102      	bne.n	80043b2 <_read_r+0x1e>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	b103      	cbz	r3, 80043b2 <_read_r+0x1e>
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	20000148 	.word	0x20000148

080043b8 <_init>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	bf00      	nop
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr

080043c4 <_fini>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr
