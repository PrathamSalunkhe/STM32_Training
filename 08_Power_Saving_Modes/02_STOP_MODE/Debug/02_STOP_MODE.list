
02_STOP_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041c8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a4  080044a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ac  080044ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08004524  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004524  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb5a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef5  00000000  00000000  0002ebfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00030af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  000316e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a311  00000000  00000000  00032218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db2a  00000000  00000000  0005c529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffd77  00000000  00000000  0006a053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  00169e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800435c 	.word	0x0800435c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	0800435c 	.word	0x0800435c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BSP_USER_IT_PIN_Pin)
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000500:	d106      	bne.n	8000510 <HAL_GPIO_EXTI_Callback+0x20>
	{
		SystemClock_Config();
 8000502:	f000 f86d 	bl	80005e0 <SystemClock_Config>
		HAL_ResumeTick();
 8000506:	f000 fbdf 	bl	8000cc8 <HAL_ResumeTick>
		printf("Woke up from STOP MODE by EXTI\r\n");
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <HAL_GPIO_EXTI_Callback+0x28>)
 800050c:	f003 fa96 	bl	8003a3c <puts>
//		HAL_PWR_DisableSleepOnExit();
	}
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08004374 	.word	0x08004374

0800051c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8000524:	f000 f85c 	bl	80005e0 <SystemClock_Config>
	HAL_ResumeTick();
 8000528:	f000 fbce 	bl	8000cc8 <HAL_ResumeTick>
	printf("Woke up from STOP MODE by RTC\r\n");
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800052e:	f003 fa85 	bl	8003a3c <puts>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	08004394 	.word	0x08004394

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fb16 	bl	8000b76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f849 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8e3 	bl	8000718 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000552:	f000 f88d 	bl	8000670 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000556:	f000 f8b7 	bl	80006c8 <MX_RTC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Going into the STOP MODE\r\n");
 800055a:	481d      	ldr	r0, [pc, #116]	; (80005d0 <main+0x90>)
 800055c:	f003 fa6e 	bl	8003a3c <puts>
	  for(int i=0; i<20; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	e009      	b.n	800057a <main+0x3a>
	  {
		  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	481a      	ldr	r0, [pc, #104]	; (80005d4 <main+0x94>)
 800056a:	f000 fe79 	bl	8001260 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800056e:	20c8      	movs	r0, #200	; 0xc8
 8000570:	f000 fb76 	bl	8000c60 <HAL_Delay>
	  for(int i=0; i<20; i++)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b13      	cmp	r3, #19
 800057e:	ddf2      	ble.n	8000566 <main+0x26>
	        Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
	        ==> WakeUpCounter = ~20s/0.0005s = 40000 = 0xA017
	        ==> WakeUpCounter = ~10s/0.0005s = 20000 = 0x4E20
	        ==> WakeUpCounter = ~5s/0.0005s = 10000 = 0x2710 */

	  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000580:	2200      	movs	r2, #0
 8000582:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <main+0x98>)
 8000588:	f002 fb56 	bl	8002c38 <HAL_RTCEx_SetWakeUpTimer_IT>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <main+0x56>
	  {
	    Error_Handler();
 8000592:	f000 f917 	bl	80007c4 <Error_Handler>
	  }

	  /*** suspend the systick before going into stop mode ***/
	  HAL_SuspendTick();
 8000596:	f000 fb87 	bl	8000ca8 <HAL_SuspendTick>

	  /*** enable sleep on exit for only interrupt operations ***/
	//  HAL_PWR_EnableSleepOnExit();

	  /*** enter the stop mode ***/
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 ff06 	bl	80013ac <HAL_PWREx_EnterSTOP2Mode>

	  /*** wake up from stop mode ***/

	  /*** disable rtc wake up ***/
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <main+0x98>)
 80005a2:	f002 fbdd 	bl	8002d60 <HAL_RTCEx_DeactivateWakeUpTimer>


	  /*** returned from stop mode ***/

	  printf("Woke up from STOP MODE in main loop\r\n");
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x9c>)
 80005a8:	f003 fa48 	bl	8003a3c <puts>
	  for(int i=0; i<10; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	e00a      	b.n	80005c8 <main+0x88>
	    {
	  	  HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	4807      	ldr	r0, [pc, #28]	; (80005d4 <main+0x94>)
 80005b6:	f000 fe53 	bl	8001260 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 fb4f 	bl	8000c60 <HAL_Delay>
	  for(int i=0; i<10; i++)
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	ddf1      	ble.n	80005b2 <main+0x72>
	  printf("Going into the STOP MODE\r\n");
 80005ce:	e7c4      	b.n	800055a <main+0x1a>
 80005d0:	080043b4 	.word	0x080043b4
 80005d4:	48000800 	.word	0x48000800
 80005d8:	20000110 	.word	0x20000110
 80005dc:	080043d0 	.word	0x080043d0

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f9ae 	bl	8003950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000606:	f000 fe6b 	bl	80012e0 <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 f8d8 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000614:	230a      	movs	r3, #10
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2340      	movs	r3, #64	; 0x40
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000626:	2300      	movs	r3, #0
 8000628:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fee8 	bl	8001404 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800063a:	f000 f8c3 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000642:	2301      	movs	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f001 faed 	bl	8001c38 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000664:	f000 f8ae 	bl	80007c4 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <MX_LPUART1_UART_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_LPUART1_UART_Init+0x50>)
 80006ae:	f002 fbdb 	bl	8002e68 <HAL_UART_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 f884 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	40008000 	.word	0x40008000

080006c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_RTC_Init+0x48>)
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <MX_RTC_Init+0x4c>)
 80006d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_RTC_Init+0x48>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_RTC_Init+0x48>)
 80006da:	227f      	movs	r2, #127	; 0x7f
 80006dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_RTC_Init+0x48>)
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_RTC_Init+0x48>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_RTC_Init+0x48>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_RTC_Init+0x48>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_RTC_Init+0x48>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_RTC_Init+0x48>)
 80006fe:	f002 f989 	bl	8002a14 <HAL_RTC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000708:	f000 f85c 	bl	80007c4 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000110 	.word	0x20000110
 8000714:	40002800 	.word	0x40002800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_GPIO_Init+0xa4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_GPIO_Init+0xa4>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_GPIO_Init+0xa4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_GPIO_Init+0xa4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_GPIO_Init+0xa4>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_GPIO_Init+0xa4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800075e:	f000 fe15 	bl	800138c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <MX_GPIO_Init+0xa8>)
 8000768:	f000 fd62 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_IT_PIN_Pin */
  GPIO_InitStruct.Pin = BSP_USER_IT_PIN_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BSP_USER_IT_PIN_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	480f      	ldr	r0, [pc, #60]	; (80007c0 <MX_GPIO_Init+0xa8>)
 8000784:	f000 fbc2 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <MX_GPIO_Init+0xa8>)
 80007a0:	f000 fbb4 	bl	8000f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2028      	movs	r0, #40	; 0x28
 80007aa:	f000 fb78 	bl	8000e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ae:	2028      	movs	r0, #40	; 0x28
 80007b0:	f000 fb91 	bl	8000ed6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000800 	.word	0x48000800

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x44>)
 80007d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6613      	str	r3, [r2, #96]	; 0x60
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x44>)
 80007f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x44>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6593      	str	r3, [r2, #88]	; 0x58
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0ac      	sub	sp, #176	; 0xb0
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	228c      	movs	r2, #140	; 0x8c
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 f889 	bl	8003950 <memset>
  if(huart->Instance==LPUART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_UART_MspInit+0xb4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d13d      	bne.n	80008c4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000848:	2320      	movs	r3, #32
 800084a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fc13 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000860:	f7ff ffb0 	bl	80007c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000868:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000894:	f000 fd7a 	bl	800138c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 8000898:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008b2:	2308      	movs	r3, #8
 80008b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_UART_MspInit+0xbc>)
 80008c0:	f000 fb24 	bl	8000f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	37b0      	adds	r7, #176	; 0xb0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40008000 	.word	0x40008000
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48001800 	.word	0x48001800

080008d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0a6      	sub	sp, #152	; 0x98
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	228c      	movs	r2, #140	; 0x8c
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 f831 	bl	8003950 <memset>
  if(hrtc->Instance==RTC)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <HAL_RTC_MspInit+0x6c>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d120      	bne.n	800093a <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fbb8 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000916:	f7ff ff55 	bl	80007c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_RTC_MspInit+0x70>)
 800091c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000920:	4a09      	ldr	r2, [pc, #36]	; (8000948 <HAL_RTC_MspInit+0x70>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2003      	movs	r0, #3
 8000930:	f000 fab5 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 face 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3798      	adds	r7, #152	; 0x98
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40002800 	.word	0x40002800
 8000948:	40021000 	.word	0x40021000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f942 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <RTC_WKUP_IRQHandler+0x10>)
 80009a6:	f002 fa39 	bl	8002e1c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000110 	.word	0x20000110

080009b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_USER_IT_PIN_Pin);
 80009b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009bc:	f000 fc6a 	bl	8001294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	e00a      	b.n	80009ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d6:	f3af 8000 	nop.w
 80009da:	4601      	mov	r1, r0
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	b2ca      	uxtb	r2, r1
 80009e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf0      	blt.n	80009d6 <_read+0x12>
  }

  return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <_write+0x28>)
 8000a18:	f002 fa74 	bl	8002f04 <HAL_UART_Transmit>
  return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c

08000a2c <_close>:

int _close(int file)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a54:	605a      	str	r2, [r3, #4]
  return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_isatty>:

int _isatty(int file)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6c:	2301      	movs	r3, #1
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f002 ff1a 	bl	80038fc <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20050000 	.word	0x20050000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	20000134 	.word	0x20000134
 8000afc:	20000150 	.word	0x20000150

08000b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <SystemInit+0x20>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <SystemInit+0x20>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b28:	f7ff ffea 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b52:	f002 fed9 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b56:	f7ff fcf3 	bl	8000540 <main>

08000b5a <LoopForever>:

LoopForever:
    b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b68:	080044b4 	.word	0x080044b4
  ldr r2, =_sbss
 8000b6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b70:	2000014c 	.word	0x2000014c

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>

08000b76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f981 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 f80e 	bl	8000ba8 <HAL_InitTick>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	e001      	b.n	8000b9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b98:	f7ff fe1a 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_InitTick+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d023      	beq.n	8000c04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_InitTick+0x70>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_InitTick+0x6c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f98d 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10f      	bne.n	8000bfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d809      	bhi.n	8000bf8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 f957 	bl	8000e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_InitTick+0x74>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e007      	b.n	8000c08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e004      	b.n	8000c08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e001      	b.n	8000c08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000138 	.word	0x20000138

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000138 	.word	0x20000138

08000c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c68:	f7ff ffee 	bl	8000c48 <HAL_GetTick>
 8000c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c78:	d005      	beq.n	8000c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_Delay+0x44>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c86:	bf00      	nop
 8000c88:	f7ff ffde 	bl	8000c48 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8f7      	bhi.n	8000c88 <HAL_Delay+0x28>
  {
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_SuspendTick+0x1c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_SuspendTick+0x1c>)
 8000cb2:	f023 0302 	bic.w	r3, r3, #2
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_ResumeTick+0x1c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_ResumeTick+0x1c>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff3e 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff8e 	bl	8000ddc <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1a:	e166      	b.n	80011ea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8158 	beq.w	80011e4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <HAL_GPIO_Init+0x40>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 0201 	and.w	r2, r3, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d017      	beq.n	8000fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d123      	bne.n	800103e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	6939      	ldr	r1, [r7, #16]
 800103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0203 	and.w	r2, r3, #3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 80b2 	beq.w	80011e4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	4b61      	ldr	r3, [pc, #388]	; (8001208 <HAL_GPIO_Init+0x2fc>)
 8001082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001084:	4a60      	ldr	r2, [pc, #384]	; (8001208 <HAL_GPIO_Init+0x2fc>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6613      	str	r3, [r2, #96]	; 0x60
 800108c:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <HAL_GPIO_Init+0x2fc>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001098:	4a5c      	ldr	r2, [pc, #368]	; (800120c <HAL_GPIO_Init+0x300>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010c2:	d02b      	beq.n	800111c <HAL_GPIO_Init+0x210>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a52      	ldr	r2, [pc, #328]	; (8001210 <HAL_GPIO_Init+0x304>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d025      	beq.n	8001118 <HAL_GPIO_Init+0x20c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a51      	ldr	r2, [pc, #324]	; (8001214 <HAL_GPIO_Init+0x308>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d01f      	beq.n	8001114 <HAL_GPIO_Init+0x208>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a50      	ldr	r2, [pc, #320]	; (8001218 <HAL_GPIO_Init+0x30c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d019      	beq.n	8001110 <HAL_GPIO_Init+0x204>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x310>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d013      	beq.n	800110c <HAL_GPIO_Init+0x200>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <HAL_GPIO_Init+0x314>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_GPIO_Init+0x1fc>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x318>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x1f8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x31c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_GPIO_Init+0x1f4>
 80010fc:	2307      	movs	r3, #7
 80010fe:	e00e      	b.n	800111e <HAL_GPIO_Init+0x212>
 8001100:	2308      	movs	r3, #8
 8001102:	e00c      	b.n	800111e <HAL_GPIO_Init+0x212>
 8001104:	2306      	movs	r3, #6
 8001106:	e00a      	b.n	800111e <HAL_GPIO_Init+0x212>
 8001108:	2305      	movs	r3, #5
 800110a:	e008      	b.n	800111e <HAL_GPIO_Init+0x212>
 800110c:	2304      	movs	r3, #4
 800110e:	e006      	b.n	800111e <HAL_GPIO_Init+0x212>
 8001110:	2303      	movs	r3, #3
 8001112:	e004      	b.n	800111e <HAL_GPIO_Init+0x212>
 8001114:	2302      	movs	r3, #2
 8001116:	e002      	b.n	800111e <HAL_GPIO_Init+0x212>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_GPIO_Init+0x212>
 800111c:	2300      	movs	r3, #0
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	f002 0203 	and.w	r2, r2, #3
 8001124:	0092      	lsls	r2, r2, #2
 8001126:	4093      	lsls	r3, r2
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800112e:	4937      	ldr	r1, [pc, #220]	; (800120c <HAL_GPIO_Init+0x300>)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800113c:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_GPIO_Init+0x320>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001160:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_GPIO_Init+0x320>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <HAL_GPIO_Init+0x320>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800118a:	4a28      	ldr	r2, [pc, #160]	; (800122c <HAL_GPIO_Init+0x320>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_GPIO_Init+0x320>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b4:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x320>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_GPIO_Init+0x320>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <HAL_GPIO_Init+0x320>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f47f ae91 	bne.w	8000f1c <HAL_GPIO_Init+0x10>
  }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000
 800120c:	40010000 	.word	0x40010000
 8001210:	48000400 	.word	0x48000400
 8001214:	48000800 	.word	0x48000800
 8001218:	48000c00 	.word	0x48000c00
 800121c:	48001000 	.word	0x48001000
 8001220:	48001400 	.word	0x48001400
 8001224:	48001800 	.word	0x48001800
 8001228:	48001c00 	.word	0x48001c00
 800122c:	40010400 	.word	0x40010400

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800124c:	e002      	b.n	8001254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4013      	ands	r3, r2
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43d9      	mvns	r1, r3
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	400b      	ands	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f91c 	bl	80004f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000

080012e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ee:	d130      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fc:	d038      	beq.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001306:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2232      	movs	r2, #50	; 0x32
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0c9b      	lsrs	r3, r3, #18
 8001320:	3301      	adds	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001324:	e002      	b.n	800132c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3b01      	subs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001338:	d102      	bne.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x60>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f2      	bne.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134c:	d110      	bne.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e00f      	b.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135e:	d007      	beq.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40007000 	.word	0x40007000
 8001384:	20000000 	.word	0x20000000
 8001388:	431bde83 	.word	0x431bde83

0800138c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139a:	6053      	str	r3, [r2, #4]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40007000 	.word	0x40007000

080013ac <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 0307 	bic.w	r3, r3, #7
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80013d8:	bf30      	wfi
 80013da:	e002      	b.n	80013e2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80013dc:	bf40      	sev
    __WFE();
 80013de:	bf20      	wfe
    __WFE();
 80013e0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80013e8:	f023 0304 	bic.w	r3, r3, #4
 80013ec:	6113      	str	r3, [r2, #16]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40007000 	.word	0x40007000
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f000 bc08 	b.w	8001c28 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001418:	4b96      	ldr	r3, [pc, #600]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001422:	4b94      	ldr	r3, [pc, #592]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80e4 	beq.w	8001602 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <HAL_RCC_OscConfig+0x4c>
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b0c      	cmp	r3, #12
 8001444:	f040 808b 	bne.w	800155e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b01      	cmp	r3, #1
 800144c:	f040 8087 	bne.w	800155e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x64>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e3df      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <HAL_RCC_OscConfig+0x7e>
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001480:	e005      	b.n	800148e <HAL_RCC_OscConfig+0x8a>
 8001482:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148e:	4293      	cmp	r3, r2
 8001490:	d223      	bcs.n	80014da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fd92 	bl	8001fc0 <RCC_SetFlashLatencyFromMSIRange>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e3c0      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a6:	4b73      	ldr	r3, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a72      	ldr	r2, [pc, #456]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	496d      	ldr	r1, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	4b6b      	ldr	r3, [pc, #428]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	4968      	ldr	r1, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
 80014d8:	e025      	b.n	8001526 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b63      	ldr	r3, [pc, #396]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4960      	ldr	r1, [pc, #384]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f8:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	495b      	ldr	r1, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd52 	bl	8001fc0 <RCC_SetFlashLatencyFromMSIRange>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e380      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001526:	f000 fc87 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	4950      	ldr	r1, [pc, #320]	; (8001678 <HAL_RCC_OscConfig+0x274>)
 8001538:	5ccb      	ldrb	r3, [r1, r3]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a4e      	ldr	r2, [pc, #312]	; (800167c <HAL_RCC_OscConfig+0x278>)
 8001544:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001546:	4b4e      	ldr	r3, [pc, #312]	; (8001680 <HAL_RCC_OscConfig+0x27c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fb2c 	bl	8000ba8 <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d052      	beq.n	8001600 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	e364      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d032      	beq.n	80015cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001566:	4b43      	ldr	r3, [pc, #268]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a42      	ldr	r2, [pc, #264]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001572:	f7ff fb69 	bl	8000c48 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157a:	f7ff fb65 	bl	8000c48 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e34d      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a35      	ldr	r2, [pc, #212]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4930      	ldr	r1, [pc, #192]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	492b      	ldr	r1, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
 80015ca:	e01a      	b.n	8001602 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a28      	ldr	r2, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb36 	bl	8000c48 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e0:	f7ff fb32 	bl	8000c48 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e31a      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1dc>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d073      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b08      	cmp	r3, #8
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x21c>
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d10e      	bne.n	8001638 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d063      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d15f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e2f7      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x24c>
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e025      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d114      	bne.n	8001684 <HAL_RCC_OscConfig+0x280>
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a02      	ldr	r2, [pc, #8]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e013      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 8001674:	40021000 	.word	0x40021000
 8001678:	080043f8 	.word	0x080043f8
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004
 8001684:	4ba0      	ldr	r3, [pc, #640]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a9f      	ldr	r2, [pc, #636]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b9d      	ldr	r3, [pc, #628]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a9c      	ldr	r2, [pc, #624]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fad0 	bl	8000c48 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff facc 	bl	8000c48 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e2b4      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	4b92      	ldr	r3, [pc, #584]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x2a8>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fabc 	bl	8000c48 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fab8 	bl	8000c48 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e2a0      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2d0>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x310>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d119      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d116      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x328>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e27d      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	4973      	ldr	r1, [pc, #460]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	e040      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fa77 	bl	8000c48 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fa73 	bl	8000c48 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e25b      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b62      	ldr	r3, [pc, #392]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	495f      	ldr	r1, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e018      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5c      	ldr	r2, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fa53 	bl	8000c48 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fa4f 	bl	8000c48 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e237      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03c      	beq.n	800184a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01c      	beq.n	8001812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa2e 	bl	8000c48 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fa2a 	bl	8000c48 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e212      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x3ec>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001818:	4a3b      	ldr	r2, [pc, #236]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fa11 	bl	8000c48 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff fa0d 	bl	8000c48 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1f5      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_RCC_OscConfig+0x508>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_RCC_OscConfig+0x508>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x508>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189c:	f7ff f9d4 	bl	8000c48 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a4:	f7ff f9d0 	bl	8000c48 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1b8      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_RCC_OscConfig+0x508>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_OscConfig+0x4d8>
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018da:	e029      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d115      	bne.n	8001910 <HAL_RCC_OscConfig+0x50c>
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	e014      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	40007000 	.word	0x40007000
 8001910:	4b9d      	ldr	r3, [pc, #628]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a9c      	ldr	r2, [pc, #624]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001920:	4b99      	ldr	r3, [pc, #612]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	4a98      	ldr	r2, [pc, #608]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d016      	beq.n	8001966 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff f986 	bl	8000c48 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff f982 	bl	8000c48 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e168      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	4b8c      	ldr	r3, [pc, #560]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ed      	beq.n	8001940 <HAL_RCC_OscConfig+0x53c>
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff f96f 	bl	8000c48 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff f96b 	bl	8000c48 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e151      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ed      	bne.n	800196e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001992:	7ffb      	ldrb	r3, [r7, #31]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 80019ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019be:	4a72      	ldr	r2, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff f93e 	bl	8000c48 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d0:	f7ff f93a 	bl	8000c48 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e122      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e2:	4b69      	ldr	r3, [pc, #420]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 80019e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ef      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5cc>
 80019f0:	e01b      	b.n	8001a2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019f2:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 80019f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f8:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f921 	bl	8000c48 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0a:	f7ff f91d 	bl	8000c48 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e105      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a1c:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ef      	bne.n	8001a0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80f9 	beq.w	8001c26 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	f040 80cf 	bne.w	8001bdc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a3e:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0203 	and.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d12c      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d123      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d11b      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d113      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d071      	beq.n	8001b90 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d068      	beq.n	8001b84 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ab2:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0ac      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ada:	f7ff f8b5 	bl	8000c48 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff f8b1 	bl	8000c48 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e099      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x788>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b10:	3a01      	subs	r2, #1
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	4311      	orrs	r1, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b1a:	0212      	lsls	r2, r2, #8
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b22:	0852      	lsrs	r2, r2, #1
 8001b24:	3a01      	subs	r2, #1
 8001b26:	0552      	lsls	r2, r2, #21
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b2e:	0852      	lsrs	r2, r2, #1
 8001b30:	3a01      	subs	r2, #1
 8001b32:	0652      	lsls	r2, r2, #25
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b3a:	06d2      	lsls	r2, r2, #27
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	4912      	ldr	r1, [pc, #72]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b5c:	f7ff f874 	bl	8000c48 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f870 	bl	8000c48 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e058      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b82:	e050      	b.n	8001c26 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e04f      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d144      	bne.n	8001c26 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bb4:	f7ff f848 	bl	8000c48 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f844 	bl	8000c48 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e02c      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x7b8>
 8001bda:	e024      	b.n	8001c26 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d01f      	beq.n	8001c22 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7ff f82b 	bl	8000c48 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff f827 	bl	8000c48 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e00f      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	4905      	ldr	r1, [pc, #20]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_OscConfig+0x830>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
 8001c20:	e001      	b.n	8001c26 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	feeefffc 	.word	0xfeeefffc

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0e7      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d910      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4970      	ldr	r1, [pc, #448]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0cf      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d908      	bls.n	8001caa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4960      	ldr	r1, [pc, #384]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d04c      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	4b5a      	ldr	r3, [pc, #360]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d121      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0a6      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e09a      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cee:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e08e      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e086      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4943      	ldr	r1, [pc, #268]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d20:	f7fe ff92 	bl	8000c48 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7fe ff8e 	bl	8000c48 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e06e      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d208      	bcs.n	8001d7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	492b      	ldr	r1, [pc, #172]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d210      	bcs.n	8001dae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 0207 	bic.w	r2, r3, #7
 8001d94:	4923      	ldr	r1, [pc, #140]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e036      	b.n	8001e1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dba:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4918      	ldr	r1, [pc, #96]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4910      	ldr	r1, [pc, #64]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dec:	f000 f824 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	490b      	ldr	r1, [pc, #44]	; (8001e2c <HAL_RCC_ClockConfig+0x1f4>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1fc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fec9 	bl	8000ba8 <HAL_InitTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	080043f8 	.word	0x080043f8
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4b3e      	ldr	r3, [pc, #248]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x34>
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d121      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d11e      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e94:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	e004      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d134      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0xa6>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d003      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8001edc:	e005      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee0:	617b      	str	r3, [r7, #20]
      break;
 8001ee2:	e005      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee6:	617b      	str	r3, [r7, #20]
      break;
 8001ee8:	e002      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	617b      	str	r3, [r7, #20]
      break;
 8001eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	3301      	adds	r3, #1
 8001efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	fb03 f202 	mul.w	r2, r3, r2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	0e5b      	lsrs	r3, r3, #25
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	3301      	adds	r3, #1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f30:	69bb      	ldr	r3, [r7, #24]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08004410 	.word	0x08004410
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4904      	ldr	r1, [pc, #16]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08004408 	.word	0x08004408

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f98:	f7ff ffda 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0adb      	lsrs	r3, r3, #11
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4904      	ldr	r1, [pc, #16]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08004408 	.word	0x08004408

08001fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd8:	f7ff f974 	bl	80012c4 <HAL_PWREx_GetVoltageRange>
 8001fdc:	6178      	str	r0, [r7, #20]
 8001fde:	e014      	b.n	800200a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fea:	6593      	str	r3, [r2, #88]	; 0x58
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ff8:	f7ff f964 	bl	80012c4 <HAL_PWREx_GetVoltageRange>
 8001ffc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002010:	d10b      	bne.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d919      	bls.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2ba0      	cmp	r3, #160	; 0xa0
 800201c:	d902      	bls.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800201e:	2302      	movs	r3, #2
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e013      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002024:	2301      	movs	r3, #1
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	e010      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b80      	cmp	r3, #128	; 0x80
 800202e:	d902      	bls.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002030:	2303      	movs	r3, #3
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	e00a      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d102      	bne.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e004      	b.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b70      	cmp	r3, #112	; 0x70
 8002046:	d101      	bne.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 0207 	bic.w	r2, r3, #7
 8002054:	4909      	ldr	r1, [pc, #36]	; (800207c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002088:	2300      	movs	r3, #0
 800208a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800208c:	2300      	movs	r3, #0
 800208e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002098:	2b00      	cmp	r3, #0
 800209a:	d041      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020a4:	d02a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020aa:	d824      	bhi.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020b0:	d008      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020b6:	d81e      	bhi.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c0:	d010      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020c2:	e018      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020c4:	4b86      	ldr	r3, [pc, #536]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a85      	ldr	r2, [pc, #532]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020d0:	e015      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 facd 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80020de:	4603      	mov	r3, r0
 80020e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e2:	e00c      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3320      	adds	r3, #32
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fbb6 	bl	800285c <RCCEx_PLLSAI2_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f4:	e003      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	74fb      	strb	r3, [r7, #19]
      break;
 80020fa:	e000      	b.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020fe:	7cfb      	ldrb	r3, [r7, #19]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10b      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002104:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002112:	4973      	ldr	r1, [pc, #460]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800211a:	e001      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d041      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002130:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002134:	d02a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002136:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800213a:	d824      	bhi.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800213c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002140:	d008      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002146:	d81e      	bhi.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d010      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002152:	e018      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002160:	e015      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fa85 	bl	8002678 <RCCEx_PLLSAI1_Config>
 800216e:	4603      	mov	r3, r0
 8002170:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002172:	e00c      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3320      	adds	r3, #32
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fb6e 	bl	800285c <RCCEx_PLLSAI2_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002184:	e003      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	74fb      	strb	r3, [r7, #19]
      break;
 800218a:	e000      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800218c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002194:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a2:	494f      	ldr	r1, [pc, #316]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021aa:	e001      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a0 	beq.w	80022fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	4a40      	ldr	r2, [pc, #256]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6593      	str	r3, [r2, #88]	; 0x58
 80021e4:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f0:	2301      	movs	r3, #1
 80021f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002200:	f7fe fd22 	bl	8000c48 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002206:	e009      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe fd1e 	bl	8000c48 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d902      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	74fb      	strb	r3, [r7, #19]
        break;
 800221a:	e005      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ef      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d15c      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002238:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01f      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	d019      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002256:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7fe fcdd 	bl	8000c48 <HAL_GetTick>
 800228e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002290:	e00b      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fcd9 	bl	8000c48 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d902      	bls.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	74fb      	strb	r3, [r7, #19]
            break;
 80022a8:	e006      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ec      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4904      	ldr	r1, [pc, #16]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022d6:	e009      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
 80022dc:	e006      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ec:	7c7b      	ldrb	r3, [r7, #17]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4ba6      	ldr	r3, [pc, #664]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4aa5      	ldr	r2, [pc, #660]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800230a:	4ba0      	ldr	r3, [pc, #640]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f023 0203 	bic.w	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	499c      	ldr	r1, [pc, #624]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800232c:	4b97      	ldr	r3, [pc, #604]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f023 020c 	bic.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	4994      	ldr	r1, [pc, #592]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800234e:	4b8f      	ldr	r3, [pc, #572]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	498b      	ldr	r1, [pc, #556]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002370:	4b86      	ldr	r3, [pc, #536]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	4983      	ldr	r1, [pc, #524]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002392:	4b7e      	ldr	r3, [pc, #504]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	497a      	ldr	r1, [pc, #488]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023b4:	4b75      	ldr	r3, [pc, #468]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	4972      	ldr	r1, [pc, #456]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	4969      	ldr	r1, [pc, #420]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023f8:	4b64      	ldr	r3, [pc, #400]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002406:	4961      	ldr	r1, [pc, #388]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002428:	4958      	ldr	r1, [pc, #352]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	4950      	ldr	r1, [pc, #320]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800245e:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	4947      	ldr	r1, [pc, #284]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	493f      	ldr	r1, [pc, #252]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d028      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a2:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4936      	ldr	r1, [pc, #216]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c0:	d106      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c2:	4b32      	ldr	r3, [pc, #200]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4a31      	ldr	r2, [pc, #196]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024cc:	60d3      	str	r3, [r2, #12]
 80024ce:	e011      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f8c9 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80024e6:	4603      	mov	r3, r0
 80024e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d028      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250e:	491f      	ldr	r1, [pc, #124]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251e:	d106      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a19      	ldr	r2, [pc, #100]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252a:	60d3      	str	r3, [r2, #12]
 800252c:	e011      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002536:	d10c      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f89a 	bl	8002678 <RCCEx_PLLSAI1_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257c:	d108      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800257e:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a02      	ldr	r2, [pc, #8]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002588:	60d3      	str	r3, [r2, #12]
 800258a:	e013      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800258c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002598:	d10c      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	2101      	movs	r1, #1
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f869 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02f      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ce:	4929      	ldr	r1, [pc, #164]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025de:	d10d      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	2102      	movs	r1, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f846 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d014      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	74bb      	strb	r3, [r7, #18]
 80025fa:	e011      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002604:	d10c      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3320      	adds	r3, #32
 800260a:	2102      	movs	r1, #2
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f925 	bl	800285c <RCCEx_PLLSAI2_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800263c:	490d      	ldr	r1, [pc, #52]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00b      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002668:	7cbb      	ldrb	r3, [r7, #18]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000

08002678 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002686:	4b74      	ldr	r3, [pc, #464]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d018      	beq.n	80026c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002692:	4b71      	ldr	r3, [pc, #452]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d10d      	bne.n	80026be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
       ||
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026aa:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d047      	beq.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e044      	b.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d018      	beq.n	80026fe <RCCEx_PLLSAI1_Config+0x86>
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d825      	bhi.n	800271c <RCCEx_PLLSAI1_Config+0xa4>
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d002      	beq.n	80026da <RCCEx_PLLSAI1_Config+0x62>
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d009      	beq.n	80026ec <RCCEx_PLLSAI1_Config+0x74>
 80026d8:	e020      	b.n	800271c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11d      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ea:	e01a      	b.n	8002722 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ec:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d116      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e013      	b.n	8002726 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026fe:	4b56      	ldr	r3, [pc, #344]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800270a:	4b53      	ldr	r3, [pc, #332]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800271a:	e006      	b.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
      break;
 8002720:	e004      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272a:	bf00      	nop
    }

    if(status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002732:	4b49      	ldr	r3, [pc, #292]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	430b      	orrs	r3, r1
 8002748:	4943      	ldr	r1, [pc, #268]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d17c      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002754:	4b40      	ldr	r3, [pc, #256]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800275e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fa72 	bl	8000c48 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002766:	e009      	b.n	800277c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002768:	f7fe fa6e 	bl	8000c48 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d902      	bls.n	800277c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	73fb      	strb	r3, [r7, #15]
        break;
 800277a:	e005      	b.n	8002788 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ef      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d15f      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d110      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800279c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6892      	ldr	r2, [r2, #8]
 80027a4:	0211      	lsls	r1, r2, #8
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68d2      	ldr	r2, [r2, #12]
 80027aa:	06d2      	lsls	r2, r2, #27
 80027ac:	430a      	orrs	r2, r1
 80027ae:	492a      	ldr	r1, [pc, #168]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	610b      	str	r3, [r1, #16]
 80027b4:	e027      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d112      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6892      	ldr	r2, [r2, #8]
 80027cc:	0211      	lsls	r1, r2, #8
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6912      	ldr	r2, [r2, #16]
 80027d2:	0852      	lsrs	r2, r2, #1
 80027d4:	3a01      	subs	r2, #1
 80027d6:	0552      	lsls	r2, r2, #21
 80027d8:	430a      	orrs	r2, r1
 80027da:	491f      	ldr	r1, [pc, #124]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	610b      	str	r3, [r1, #16]
 80027e0:	e011      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6892      	ldr	r2, [r2, #8]
 80027f2:	0211      	lsls	r1, r2, #8
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6952      	ldr	r2, [r2, #20]
 80027f8:	0852      	lsrs	r2, r2, #1
 80027fa:	3a01      	subs	r2, #1
 80027fc:	0652      	lsls	r2, r2, #25
 80027fe:	430a      	orrs	r2, r1
 8002800:	4915      	ldr	r1, [pc, #84]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a13      	ldr	r2, [pc, #76]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002810:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fa19 	bl	8000c48 <HAL_GetTick>
 8002816:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002818:	e009      	b.n	800282e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800281a:	f7fe fa15 	bl	8000c48 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	73fb      	strb	r3, [r7, #15]
          break;
 800282c:	e005      	b.n	800283a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ef      	beq.n	800281a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d106      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000

0800285c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800286a:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d018      	beq.n	80028a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002876:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0203 	and.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d10d      	bne.n	80028a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
       ||
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800288e:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
       ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d047      	beq.n	8002932 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e044      	b.n	8002932 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d018      	beq.n	80028e2 <RCCEx_PLLSAI2_Config+0x86>
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d825      	bhi.n	8002900 <RCCEx_PLLSAI2_Config+0xa4>
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d002      	beq.n	80028be <RCCEx_PLLSAI2_Config+0x62>
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d009      	beq.n	80028d0 <RCCEx_PLLSAI2_Config+0x74>
 80028bc:	e020      	b.n	8002900 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028be:	4b54      	ldr	r3, [pc, #336]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11d      	bne.n	8002906 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ce:	e01a      	b.n	8002906 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d0:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d116      	bne.n	800290a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e0:	e013      	b.n	800290a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ee:	4b48      	ldr	r3, [pc, #288]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028fe:	e006      	b.n	800290e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e004      	b.n	8002910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800290e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	430b      	orrs	r3, r1
 800292c:	4938      	ldr	r1, [pc, #224]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d166      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002944:	f7fe f980 	bl	8000c48 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800294a:	e009      	b.n	8002960 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800294c:	f7fe f97c 	bl	8000c48 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	73fb      	strb	r3, [r7, #15]
        break;
 800295e:	e005      	b.n	800296c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ef      	bne.n	800294c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d149      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d110      	bne.n	800299a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002980:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6892      	ldr	r2, [r2, #8]
 8002988:	0211      	lsls	r1, r2, #8
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68d2      	ldr	r2, [r2, #12]
 800298e:	06d2      	lsls	r2, r2, #27
 8002990:	430a      	orrs	r2, r1
 8002992:	491f      	ldr	r1, [pc, #124]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	614b      	str	r3, [r1, #20]
 8002998:	e011      	b.n	80029be <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6892      	ldr	r2, [r2, #8]
 80029aa:	0211      	lsls	r1, r2, #8
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6912      	ldr	r2, [r2, #16]
 80029b0:	0852      	lsrs	r2, r2, #1
 80029b2:	3a01      	subs	r2, #1
 80029b4:	0652      	lsls	r2, r2, #25
 80029b6:	430a      	orrs	r2, r1
 80029b8:	4915      	ldr	r1, [pc, #84]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe f93d 	bl	8000c48 <HAL_GetTick>
 80029ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029d0:	e009      	b.n	80029e6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029d2:	f7fe f939 	bl	8000c48 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d902      	bls.n	80029e6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	73fb      	strb	r3, [r7, #15]
          break;
 80029e4:	e005      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0ef      	beq.n	80029d2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4903      	ldr	r1, [pc, #12]	; (8002a10 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d06c      	beq.n	8002b00 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd ff4c 	bl	80008d8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	22ca      	movs	r2, #202	; 0xca
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2253      	movs	r2, #83	; 0x53
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f87c 	bl	8002b56 <RTC_EnterInitMode>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d14b      	bne.n	8002b00 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6899      	ldr	r1, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6919      	ldr	r1, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	041a      	lsls	r2, r3, #16
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f87f 	bl	8002bbc <RTC_ExitInitMode>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11b      	bne.n	8002b00 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0203 	bic.w	r2, r2, #3
 8002ad6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b20:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002b22:	f7fe f891 	bl	8000c48 <HAL_GetTick>
 8002b26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b28:	e009      	b.n	8002b3e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b2a:	f7fe f88d 	bl	8000c48 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b38:	d901      	bls.n	8002b3e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e007      	b.n	8002b4e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d120      	bne.n	8002bb2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b78:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b7a:	f7fe f865 	bl	8000c48 <HAL_GetTick>
 8002b7e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b80:	e00d      	b.n	8002b9e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002b82:	f7fe f861 	bl	8000c48 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b90:	d905      	bls.n	8002b9e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <RTC_EnterInitMode+0x5c>
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d1e7      	bne.n	8002b82 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <RTC_ExitInitMode+0x78>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <RTC_ExitInitMode+0x78>)
 8002bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002bd4:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <RTC_ExitInitMode+0x78>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10c      	bne.n	8002bfa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff92 	bl	8002b0a <HAL_RTC_WaitForSynchro>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01e      	beq.n	8002c2a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e017      	b.n	8002c2a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <RTC_ExitInitMode+0x78>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <RTC_ExitInitMode+0x78>)
 8002c00:	f023 0320 	bic.w	r3, r3, #32
 8002c04:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ff7f 	bl	8002b0a <HAL_RTC_WaitForSynchro>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <RTC_ExitInitMode+0x78>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <RTC_ExitInitMode+0x78>)
 8002c24:	f043 0320 	orr.w	r3, r3, #32
 8002c28:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40002800 	.word	0x40002800

08002c38 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e07f      	b.n	8002d52 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	22ca      	movs	r2, #202	; 0xca
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2253      	movs	r2, #83	; 0x53
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c80:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c92:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d120      	bne.n	8002ce4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8002ca2:	f7fd ffd1 	bl	8000c48 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002ca8:	e015      	b.n	8002cd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002caa:	f7fd ffcd 	bl	8000c48 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb8:	d90d      	bls.n	8002cd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	22ff      	movs	r2, #255	; 0xff
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e03d      	b.n	8002d52 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0e2      	beq.n	8002caa <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 0107 	bic.w	r1, r3, #7
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002d0c:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d16:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d26:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d36:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	22ff      	movs	r2, #255	; 0xff
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e04d      	b.n	8002e12 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	22ca      	movs	r2, #202	; 0xca
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2253      	movs	r2, #83	; 0x53
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002db4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8002db6:	f7fd ff47 	bl	8000c48 <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002dbc:	e015      	b.n	8002dea <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dbe:	f7fd ff43 	bl	8000c48 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dcc:	d90d      	bls.n	8002dea <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	22ff      	movs	r2, #255	; 0xff
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e013      	b.n	8002e12 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0e2      	beq.n	8002dbe <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	22ff      	movs	r2, #255	; 0xff
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002e26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e2a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e4a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd fb65 	bl	800051c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40010400 	.word	0x40010400

08002e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e040      	b.n	8002efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fcc4 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8c0 	bl	800302c <UART_SetConfig>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e022      	b.n	8002efc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb6c 	bl	800359c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fbf3 	bl	80036e0 <UART_CheckIdleState>
 8002efa:	4603      	mov	r3, r0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	f040 8082 	bne.w	8003022 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_UART_Transmit+0x26>
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07a      	b.n	8003024 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x38>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e073      	b.n	8003024 <HAL_UART_Transmit+0x120>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2221      	movs	r2, #33	; 0x21
 8002f50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f52:	f7fd fe79 	bl	8000c48 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d108      	bne.n	8002f84 <HAL_UART_Transmit+0x80>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e003      	b.n	8002f8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f94:	e02d      	b.n	8002ff2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fbe6 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e039      	b.n	8003024 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	881a      	ldrh	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e008      	b.n	8002fe0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cb      	bne.n	8002f96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	2140      	movs	r1, #64	; 0x40
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fbb2 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e005      	b.n	8003024 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003030:	b08a      	sub	sp, #40	; 0x28
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	431a      	orrs	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	4313      	orrs	r3, r2
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4ba4      	ldr	r3, [pc, #656]	; (80032ec <UART_SetConfig+0x2c0>)
 800305c:	4013      	ands	r3, r2
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003064:	430b      	orrs	r3, r1
 8003066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a99      	ldr	r2, [pc, #612]	; (80032f0 <UART_SetConfig+0x2c4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	4313      	orrs	r3, r2
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	430a      	orrs	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a90      	ldr	r2, [pc, #576]	; (80032f4 <UART_SetConfig+0x2c8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d126      	bne.n	8003104 <UART_SetConfig+0xd8>
 80030b6:	4b90      	ldr	r3, [pc, #576]	; (80032f8 <UART_SetConfig+0x2cc>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d81b      	bhi.n	80030fc <UART_SetConfig+0xd0>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0xa0>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f5 	.word	0x080030f5
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e116      	b.n	8003312 <UART_SetConfig+0x2e6>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ea:	e112      	b.n	8003312 <UART_SetConfig+0x2e6>
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	e10e      	b.n	8003312 <UART_SetConfig+0x2e6>
 80030f4:	2308      	movs	r3, #8
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e10a      	b.n	8003312 <UART_SetConfig+0x2e6>
 80030fc:	2310      	movs	r3, #16
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e106      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7c      	ldr	r2, [pc, #496]	; (80032fc <UART_SetConfig+0x2d0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d138      	bne.n	8003180 <UART_SetConfig+0x154>
 800310e:	4b7a      	ldr	r3, [pc, #488]	; (80032f8 <UART_SetConfig+0x2cc>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d82d      	bhi.n	8003178 <UART_SetConfig+0x14c>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <UART_SetConfig+0xf8>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003159 	.word	0x08003159
 8003128:	08003179 	.word	0x08003179
 800312c:	08003179 	.word	0x08003179
 8003130:	08003179 	.word	0x08003179
 8003134:	08003169 	.word	0x08003169
 8003138:	08003179 	.word	0x08003179
 800313c:	08003179 	.word	0x08003179
 8003140:	08003179 	.word	0x08003179
 8003144:	08003161 	.word	0x08003161
 8003148:	08003179 	.word	0x08003179
 800314c:	08003179 	.word	0x08003179
 8003150:	08003179 	.word	0x08003179
 8003154:	08003171 	.word	0x08003171
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e0d8      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003160:	2302      	movs	r3, #2
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e0d4      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316e:	e0d0      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e0cc      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e0c8      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5e      	ldr	r2, [pc, #376]	; (8003300 <UART_SetConfig+0x2d4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d125      	bne.n	80031d6 <UART_SetConfig+0x1aa>
 800318a:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <UART_SetConfig+0x2cc>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	d016      	beq.n	80031c6 <UART_SetConfig+0x19a>
 8003198:	2b30      	cmp	r3, #48	; 0x30
 800319a:	d818      	bhi.n	80031ce <UART_SetConfig+0x1a2>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d00a      	beq.n	80031b6 <UART_SetConfig+0x18a>
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d814      	bhi.n	80031ce <UART_SetConfig+0x1a2>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <UART_SetConfig+0x182>
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d008      	beq.n	80031be <UART_SetConfig+0x192>
 80031ac:	e00f      	b.n	80031ce <UART_SetConfig+0x1a2>
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b4:	e0ad      	b.n	8003312 <UART_SetConfig+0x2e6>
 80031b6:	2302      	movs	r3, #2
 80031b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031bc:	e0a9      	b.n	8003312 <UART_SetConfig+0x2e6>
 80031be:	2304      	movs	r3, #4
 80031c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c4:	e0a5      	b.n	8003312 <UART_SetConfig+0x2e6>
 80031c6:	2308      	movs	r3, #8
 80031c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031cc:	e0a1      	b.n	8003312 <UART_SetConfig+0x2e6>
 80031ce:	2310      	movs	r3, #16
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d4:	e09d      	b.n	8003312 <UART_SetConfig+0x2e6>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <UART_SetConfig+0x2d8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d125      	bne.n	800322c <UART_SetConfig+0x200>
 80031e0:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <UART_SetConfig+0x2cc>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d016      	beq.n	800321c <UART_SetConfig+0x1f0>
 80031ee:	2bc0      	cmp	r3, #192	; 0xc0
 80031f0:	d818      	bhi.n	8003224 <UART_SetConfig+0x1f8>
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d00a      	beq.n	800320c <UART_SetConfig+0x1e0>
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d814      	bhi.n	8003224 <UART_SetConfig+0x1f8>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <UART_SetConfig+0x1d8>
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d008      	beq.n	8003214 <UART_SetConfig+0x1e8>
 8003202:	e00f      	b.n	8003224 <UART_SetConfig+0x1f8>
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e082      	b.n	8003312 <UART_SetConfig+0x2e6>
 800320c:	2302      	movs	r3, #2
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	e07e      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003214:	2304      	movs	r3, #4
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321a:	e07a      	b.n	8003312 <UART_SetConfig+0x2e6>
 800321c:	2308      	movs	r3, #8
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e076      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003224:	2310      	movs	r3, #16
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e072      	b.n	8003312 <UART_SetConfig+0x2e6>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a35      	ldr	r2, [pc, #212]	; (8003308 <UART_SetConfig+0x2dc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d12a      	bne.n	800328c <UART_SetConfig+0x260>
 8003236:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <UART_SetConfig+0x2cc>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003244:	d01a      	beq.n	800327c <UART_SetConfig+0x250>
 8003246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800324a:	d81b      	bhi.n	8003284 <UART_SetConfig+0x258>
 800324c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003250:	d00c      	beq.n	800326c <UART_SetConfig+0x240>
 8003252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003256:	d815      	bhi.n	8003284 <UART_SetConfig+0x258>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <UART_SetConfig+0x238>
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	d008      	beq.n	8003274 <UART_SetConfig+0x248>
 8003262:	e00f      	b.n	8003284 <UART_SetConfig+0x258>
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e052      	b.n	8003312 <UART_SetConfig+0x2e6>
 800326c:	2302      	movs	r3, #2
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003272:	e04e      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003274:	2304      	movs	r3, #4
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327a:	e04a      	b.n	8003312 <UART_SetConfig+0x2e6>
 800327c:	2308      	movs	r3, #8
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e046      	b.n	8003312 <UART_SetConfig+0x2e6>
 8003284:	2310      	movs	r3, #16
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e042      	b.n	8003312 <UART_SetConfig+0x2e6>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <UART_SetConfig+0x2c4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d13a      	bne.n	800330c <UART_SetConfig+0x2e0>
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <UART_SetConfig+0x2cc>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a4:	d01a      	beq.n	80032dc <UART_SetConfig+0x2b0>
 80032a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032aa:	d81b      	bhi.n	80032e4 <UART_SetConfig+0x2b8>
 80032ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b0:	d00c      	beq.n	80032cc <UART_SetConfig+0x2a0>
 80032b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b6:	d815      	bhi.n	80032e4 <UART_SetConfig+0x2b8>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <UART_SetConfig+0x298>
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d008      	beq.n	80032d4 <UART_SetConfig+0x2a8>
 80032c2:	e00f      	b.n	80032e4 <UART_SetConfig+0x2b8>
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e022      	b.n	8003312 <UART_SetConfig+0x2e6>
 80032cc:	2302      	movs	r3, #2
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d2:	e01e      	b.n	8003312 <UART_SetConfig+0x2e6>
 80032d4:	2304      	movs	r3, #4
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e01a      	b.n	8003312 <UART_SetConfig+0x2e6>
 80032dc:	2308      	movs	r3, #8
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e016      	b.n	8003312 <UART_SetConfig+0x2e6>
 80032e4:	2310      	movs	r3, #16
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e012      	b.n	8003312 <UART_SetConfig+0x2e6>
 80032ec:	efff69f3 	.word	0xefff69f3
 80032f0:	40008000 	.word	0x40008000
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40004400 	.word	0x40004400
 8003300:	40004800 	.word	0x40004800
 8003304:	40004c00 	.word	0x40004c00
 8003308:	40005000 	.word	0x40005000
 800330c:	2310      	movs	r3, #16
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a9f      	ldr	r2, [pc, #636]	; (8003594 <UART_SetConfig+0x568>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d17a      	bne.n	8003412 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800331c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003320:	2b08      	cmp	r3, #8
 8003322:	d824      	bhi.n	800336e <UART_SetConfig+0x342>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x300>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003351 	.word	0x08003351
 8003330:	0800336f 	.word	0x0800336f
 8003334:	08003359 	.word	0x08003359
 8003338:	0800336f 	.word	0x0800336f
 800333c:	0800335f 	.word	0x0800335f
 8003340:	0800336f 	.word	0x0800336f
 8003344:	0800336f 	.word	0x0800336f
 8003348:	0800336f 	.word	0x0800336f
 800334c:	08003367 	.word	0x08003367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7fe fe0a 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003354:	61f8      	str	r0, [r7, #28]
        break;
 8003356:	e010      	b.n	800337a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003358:	4b8f      	ldr	r3, [pc, #572]	; (8003598 <UART_SetConfig+0x56c>)
 800335a:	61fb      	str	r3, [r7, #28]
        break;
 800335c:	e00d      	b.n	800337a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335e:	f7fe fd6b 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8003362:	61f8      	str	r0, [r7, #28]
        break;
 8003364:	e009      	b.n	800337a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336a:	61fb      	str	r3, [r7, #28]
        break;
 800336c:	e005      	b.n	800337a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80fb 	beq.w	8003578 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	429a      	cmp	r2, r3
 8003390:	d305      	bcc.n	800339e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d903      	bls.n	80033a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033a4:	e0e8      	b.n	8003578 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2200      	movs	r2, #0
 80033aa:	461c      	mov	r4, r3
 80033ac:	4615      	mov	r5, r2
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	022b      	lsls	r3, r5, #8
 80033b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033bc:	0222      	lsls	r2, r4, #8
 80033be:	68f9      	ldr	r1, [r7, #12]
 80033c0:	6849      	ldr	r1, [r1, #4]
 80033c2:	0849      	lsrs	r1, r1, #1
 80033c4:	2000      	movs	r0, #0
 80033c6:	4688      	mov	r8, r1
 80033c8:	4681      	mov	r9, r0
 80033ca:	eb12 0a08 	adds.w	sl, r2, r8
 80033ce:	eb43 0b09 	adc.w	fp, r3, r9
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033e0:	4650      	mov	r0, sl
 80033e2:	4659      	mov	r1, fp
 80033e4:	f7fc ff02 	bl	80001ec <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f6:	d308      	bcc.n	800340a <UART_SetConfig+0x3de>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fe:	d204      	bcs.n	800340a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e0b6      	b.n	8003578 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003410:	e0b2      	b.n	8003578 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	d15e      	bne.n	80034da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800341c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003420:	2b08      	cmp	r3, #8
 8003422:	d828      	bhi.n	8003476 <UART_SetConfig+0x44a>
 8003424:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0x400>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	08003451 	.word	0x08003451
 8003430:	08003459 	.word	0x08003459
 8003434:	08003461 	.word	0x08003461
 8003438:	08003477 	.word	0x08003477
 800343c:	08003467 	.word	0x08003467
 8003440:	08003477 	.word	0x08003477
 8003444:	08003477 	.word	0x08003477
 8003448:	08003477 	.word	0x08003477
 800344c:	0800346f 	.word	0x0800346f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003450:	f7fe fd8a 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003454:	61f8      	str	r0, [r7, #28]
        break;
 8003456:	e014      	b.n	8003482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7fe fd9c 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 800345c:	61f8      	str	r0, [r7, #28]
        break;
 800345e:	e010      	b.n	8003482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <UART_SetConfig+0x56c>)
 8003462:	61fb      	str	r3, [r7, #28]
        break;
 8003464:	e00d      	b.n	8003482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003466:	f7fe fce7 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 800346a:	61f8      	str	r0, [r7, #28]
        break;
 800346c:	e009      	b.n	8003482 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003472:	61fb      	str	r3, [r7, #28]
        break;
 8003474:	e005      	b.n	8003482 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d077      	beq.n	8003578 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005a      	lsls	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	441a      	add	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b0f      	cmp	r3, #15
 80034a2:	d916      	bls.n	80034d2 <UART_SetConfig+0x4a6>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034aa:	d212      	bcs.n	80034d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f023 030f 	bic.w	r3, r3, #15
 80034b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	8afb      	ldrh	r3, [r7, #22]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	8afa      	ldrh	r2, [r7, #22]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	e052      	b.n	8003578 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034d8:	e04e      	b.n	8003578 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d827      	bhi.n	8003532 <UART_SetConfig+0x506>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0x4bc>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	0800350d 	.word	0x0800350d
 80034ec:	08003515 	.word	0x08003515
 80034f0:	0800351d 	.word	0x0800351d
 80034f4:	08003533 	.word	0x08003533
 80034f8:	08003523 	.word	0x08003523
 80034fc:	08003533 	.word	0x08003533
 8003500:	08003533 	.word	0x08003533
 8003504:	08003533 	.word	0x08003533
 8003508:	0800352b 	.word	0x0800352b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350c:	f7fe fd2c 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003510:	61f8      	str	r0, [r7, #28]
        break;
 8003512:	e014      	b.n	800353e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7fe fd3e 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8003518:	61f8      	str	r0, [r7, #28]
        break;
 800351a:	e010      	b.n	800353e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800351c:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <UART_SetConfig+0x56c>)
 800351e:	61fb      	str	r3, [r7, #28]
        break;
 8003520:	e00d      	b.n	800353e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003522:	f7fe fc89 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8003526:	61f8      	str	r0, [r7, #28]
        break;
 8003528:	e009      	b.n	800353e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352e:	61fb      	str	r3, [r7, #28]
        break;
 8003530:	e005      	b.n	800353e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800353c:	bf00      	nop
    }

    if (pclk != 0U)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d019      	beq.n	8003578 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	085a      	lsrs	r2, r3, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	441a      	add	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d909      	bls.n	8003572 <UART_SetConfig+0x546>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d205      	bcs.n	8003572 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	e002      	b.n	8003578 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003584:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003588:	4618      	mov	r0, r3
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003592:	bf00      	nop
 8003594:	40008000 	.word	0x40008000
 8003598:	00f42400 	.word	0x00f42400

0800359c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01a      	beq.n	80036b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369a:	d10a      	bne.n	80036b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	605a      	str	r2, [r3, #4]
  }
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036f0:	f7fd faaa 	bl	8000c48 <HAL_GetTick>
 80036f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d10e      	bne.n	8003722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f82d 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e023      	b.n	800376a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d10e      	bne.n	800374e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f817 	bl	8003772 <UART_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e00d      	b.n	800376a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b09c      	sub	sp, #112	; 0x70
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003782:	e0a5      	b.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800378a:	f000 80a1 	beq.w	80038d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fd fa5b 	bl	8000c48 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800379e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d13e      	bne.n	8003822 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037b8:	667b      	str	r3, [r7, #100]	; 0x64
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e6      	bne.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3308      	adds	r3, #8
 80037dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	663b      	str	r3, [r7, #96]	; 0x60
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e5      	bne.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e067      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d04f      	beq.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383e:	d147      	bne.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003848:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800385e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 800386a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800386e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e6      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3308      	adds	r3, #8
 8003882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	613b      	str	r3, [r7, #16]
   return(result);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	66bb      	str	r3, [r7, #104]	; 0x68
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3308      	adds	r3, #8
 800389a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800389c:	623a      	str	r2, [r7, #32]
 800389e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	69f9      	ldr	r1, [r7, #28]
 80038a2:	6a3a      	ldr	r2, [r7, #32]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e010      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	f43f af4a 	beq.w	8003784 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3770      	adds	r7, #112	; 0x70
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <__errno>:
 80038fc:	4b01      	ldr	r3, [pc, #4]	; (8003904 <__errno+0x8>)
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	2000000c 	.word	0x2000000c

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4d0d      	ldr	r5, [pc, #52]	; (8003940 <__libc_init_array+0x38>)
 800390c:	4c0d      	ldr	r4, [pc, #52]	; (8003944 <__libc_init_array+0x3c>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2600      	movs	r6, #0
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	4d0b      	ldr	r5, [pc, #44]	; (8003948 <__libc_init_array+0x40>)
 800391a:	4c0c      	ldr	r4, [pc, #48]	; (800394c <__libc_init_array+0x44>)
 800391c:	f000 fd1e 	bl	800435c <_init>
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	2600      	movs	r6, #0
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	080044ac 	.word	0x080044ac
 8003944:	080044ac 	.word	0x080044ac
 8003948:	080044ac 	.word	0x080044ac
 800394c:	080044b0 	.word	0x080044b0

08003950 <memset>:
 8003950:	4402      	add	r2, r0
 8003952:	4603      	mov	r3, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <_puts_r>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	460e      	mov	r6, r1
 8003964:	4605      	mov	r5, r0
 8003966:	b118      	cbz	r0, 8003970 <_puts_r+0x10>
 8003968:	6983      	ldr	r3, [r0, #24]
 800396a:	b90b      	cbnz	r3, 8003970 <_puts_r+0x10>
 800396c:	f000 fa48 	bl	8003e00 <__sinit>
 8003970:	69ab      	ldr	r3, [r5, #24]
 8003972:	68ac      	ldr	r4, [r5, #8]
 8003974:	b913      	cbnz	r3, 800397c <_puts_r+0x1c>
 8003976:	4628      	mov	r0, r5
 8003978:	f000 fa42 	bl	8003e00 <__sinit>
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <_puts_r+0xd0>)
 800397e:	429c      	cmp	r4, r3
 8003980:	d120      	bne.n	80039c4 <_puts_r+0x64>
 8003982:	686c      	ldr	r4, [r5, #4]
 8003984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003986:	07db      	lsls	r3, r3, #31
 8003988:	d405      	bmi.n	8003996 <_puts_r+0x36>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	0598      	lsls	r0, r3, #22
 800398e:	d402      	bmi.n	8003996 <_puts_r+0x36>
 8003990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003992:	f000 fad3 	bl	8003f3c <__retarget_lock_acquire_recursive>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	0719      	lsls	r1, r3, #28
 800399a:	d51d      	bpl.n	80039d8 <_puts_r+0x78>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	b1db      	cbz	r3, 80039d8 <_puts_r+0x78>
 80039a0:	3e01      	subs	r6, #1
 80039a2:	68a3      	ldr	r3, [r4, #8]
 80039a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039a8:	3b01      	subs	r3, #1
 80039aa:	60a3      	str	r3, [r4, #8]
 80039ac:	bb39      	cbnz	r1, 80039fe <_puts_r+0x9e>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da38      	bge.n	8003a24 <_puts_r+0xc4>
 80039b2:	4622      	mov	r2, r4
 80039b4:	210a      	movs	r1, #10
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f848 	bl	8003a4c <__swbuf_r>
 80039bc:	3001      	adds	r0, #1
 80039be:	d011      	beq.n	80039e4 <_puts_r+0x84>
 80039c0:	250a      	movs	r5, #10
 80039c2:	e011      	b.n	80039e8 <_puts_r+0x88>
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <_puts_r+0xd4>)
 80039c6:	429c      	cmp	r4, r3
 80039c8:	d101      	bne.n	80039ce <_puts_r+0x6e>
 80039ca:	68ac      	ldr	r4, [r5, #8]
 80039cc:	e7da      	b.n	8003984 <_puts_r+0x24>
 80039ce:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <_puts_r+0xd8>)
 80039d0:	429c      	cmp	r4, r3
 80039d2:	bf08      	it	eq
 80039d4:	68ec      	ldreq	r4, [r5, #12]
 80039d6:	e7d5      	b.n	8003984 <_puts_r+0x24>
 80039d8:	4621      	mov	r1, r4
 80039da:	4628      	mov	r0, r5
 80039dc:	f000 f888 	bl	8003af0 <__swsetup_r>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d0dd      	beq.n	80039a0 <_puts_r+0x40>
 80039e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80039e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039ea:	07da      	lsls	r2, r3, #31
 80039ec:	d405      	bmi.n	80039fa <_puts_r+0x9a>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	059b      	lsls	r3, r3, #22
 80039f2:	d402      	bmi.n	80039fa <_puts_r+0x9a>
 80039f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039f6:	f000 faa2 	bl	8003f3e <__retarget_lock_release_recursive>
 80039fa:	4628      	mov	r0, r5
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da04      	bge.n	8003a0c <_puts_r+0xac>
 8003a02:	69a2      	ldr	r2, [r4, #24]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	dc06      	bgt.n	8003a16 <_puts_r+0xb6>
 8003a08:	290a      	cmp	r1, #10
 8003a0a:	d004      	beq.n	8003a16 <_puts_r+0xb6>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	6022      	str	r2, [r4, #0]
 8003a12:	7019      	strb	r1, [r3, #0]
 8003a14:	e7c5      	b.n	80039a2 <_puts_r+0x42>
 8003a16:	4622      	mov	r2, r4
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f000 f817 	bl	8003a4c <__swbuf_r>
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d1bf      	bne.n	80039a2 <_puts_r+0x42>
 8003a22:	e7df      	b.n	80039e4 <_puts_r+0x84>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	250a      	movs	r5, #10
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	6022      	str	r2, [r4, #0]
 8003a2c:	701d      	strb	r5, [r3, #0]
 8003a2e:	e7db      	b.n	80039e8 <_puts_r+0x88>
 8003a30:	08004464 	.word	0x08004464
 8003a34:	08004484 	.word	0x08004484
 8003a38:	08004444 	.word	0x08004444

08003a3c <puts>:
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <puts+0xc>)
 8003a3e:	4601      	mov	r1, r0
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f7ff bf8d 	b.w	8003960 <_puts_r>
 8003a46:	bf00      	nop
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <__swbuf_r>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	460e      	mov	r6, r1
 8003a50:	4614      	mov	r4, r2
 8003a52:	4605      	mov	r5, r0
 8003a54:	b118      	cbz	r0, 8003a5e <__swbuf_r+0x12>
 8003a56:	6983      	ldr	r3, [r0, #24]
 8003a58:	b90b      	cbnz	r3, 8003a5e <__swbuf_r+0x12>
 8003a5a:	f000 f9d1 	bl	8003e00 <__sinit>
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <__swbuf_r+0x98>)
 8003a60:	429c      	cmp	r4, r3
 8003a62:	d12b      	bne.n	8003abc <__swbuf_r+0x70>
 8003a64:	686c      	ldr	r4, [r5, #4]
 8003a66:	69a3      	ldr	r3, [r4, #24]
 8003a68:	60a3      	str	r3, [r4, #8]
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	071a      	lsls	r2, r3, #28
 8003a6e:	d52f      	bpl.n	8003ad0 <__swbuf_r+0x84>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	b36b      	cbz	r3, 8003ad0 <__swbuf_r+0x84>
 8003a74:	6923      	ldr	r3, [r4, #16]
 8003a76:	6820      	ldr	r0, [r4, #0]
 8003a78:	1ac0      	subs	r0, r0, r3
 8003a7a:	6963      	ldr	r3, [r4, #20]
 8003a7c:	b2f6      	uxtb	r6, r6
 8003a7e:	4283      	cmp	r3, r0
 8003a80:	4637      	mov	r7, r6
 8003a82:	dc04      	bgt.n	8003a8e <__swbuf_r+0x42>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4628      	mov	r0, r5
 8003a88:	f000 f926 	bl	8003cd8 <_fflush_r>
 8003a8c:	bb30      	cbnz	r0, 8003adc <__swbuf_r+0x90>
 8003a8e:	68a3      	ldr	r3, [r4, #8]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	6022      	str	r2, [r4, #0]
 8003a9a:	701e      	strb	r6, [r3, #0]
 8003a9c:	6963      	ldr	r3, [r4, #20]
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	4283      	cmp	r3, r0
 8003aa2:	d004      	beq.n	8003aae <__swbuf_r+0x62>
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	07db      	lsls	r3, r3, #31
 8003aa8:	d506      	bpl.n	8003ab8 <__swbuf_r+0x6c>
 8003aaa:	2e0a      	cmp	r6, #10
 8003aac:	d104      	bne.n	8003ab8 <__swbuf_r+0x6c>
 8003aae:	4621      	mov	r1, r4
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f000 f911 	bl	8003cd8 <_fflush_r>
 8003ab6:	b988      	cbnz	r0, 8003adc <__swbuf_r+0x90>
 8003ab8:	4638      	mov	r0, r7
 8003aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <__swbuf_r+0x9c>)
 8003abe:	429c      	cmp	r4, r3
 8003ac0:	d101      	bne.n	8003ac6 <__swbuf_r+0x7a>
 8003ac2:	68ac      	ldr	r4, [r5, #8]
 8003ac4:	e7cf      	b.n	8003a66 <__swbuf_r+0x1a>
 8003ac6:	4b09      	ldr	r3, [pc, #36]	; (8003aec <__swbuf_r+0xa0>)
 8003ac8:	429c      	cmp	r4, r3
 8003aca:	bf08      	it	eq
 8003acc:	68ec      	ldreq	r4, [r5, #12]
 8003ace:	e7ca      	b.n	8003a66 <__swbuf_r+0x1a>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f000 f80c 	bl	8003af0 <__swsetup_r>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d0cb      	beq.n	8003a74 <__swbuf_r+0x28>
 8003adc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ae0:	e7ea      	b.n	8003ab8 <__swbuf_r+0x6c>
 8003ae2:	bf00      	nop
 8003ae4:	08004464 	.word	0x08004464
 8003ae8:	08004484 	.word	0x08004484
 8003aec:	08004444 	.word	0x08004444

08003af0 <__swsetup_r>:
 8003af0:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <__swsetup_r+0xcc>)
 8003af2:	b570      	push	{r4, r5, r6, lr}
 8003af4:	681d      	ldr	r5, [r3, #0]
 8003af6:	4606      	mov	r6, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	b125      	cbz	r5, 8003b06 <__swsetup_r+0x16>
 8003afc:	69ab      	ldr	r3, [r5, #24]
 8003afe:	b913      	cbnz	r3, 8003b06 <__swsetup_r+0x16>
 8003b00:	4628      	mov	r0, r5
 8003b02:	f000 f97d 	bl	8003e00 <__sinit>
 8003b06:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <__swsetup_r+0xd0>)
 8003b08:	429c      	cmp	r4, r3
 8003b0a:	d10f      	bne.n	8003b2c <__swsetup_r+0x3c>
 8003b0c:	686c      	ldr	r4, [r5, #4]
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b14:	0719      	lsls	r1, r3, #28
 8003b16:	d42c      	bmi.n	8003b72 <__swsetup_r+0x82>
 8003b18:	06dd      	lsls	r5, r3, #27
 8003b1a:	d411      	bmi.n	8003b40 <__swsetup_r+0x50>
 8003b1c:	2309      	movs	r3, #9
 8003b1e:	6033      	str	r3, [r6, #0]
 8003b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b2a:	e03e      	b.n	8003baa <__swsetup_r+0xba>
 8003b2c:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <__swsetup_r+0xd4>)
 8003b2e:	429c      	cmp	r4, r3
 8003b30:	d101      	bne.n	8003b36 <__swsetup_r+0x46>
 8003b32:	68ac      	ldr	r4, [r5, #8]
 8003b34:	e7eb      	b.n	8003b0e <__swsetup_r+0x1e>
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <__swsetup_r+0xd8>)
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	bf08      	it	eq
 8003b3c:	68ec      	ldreq	r4, [r5, #12]
 8003b3e:	e7e6      	b.n	8003b0e <__swsetup_r+0x1e>
 8003b40:	0758      	lsls	r0, r3, #29
 8003b42:	d512      	bpl.n	8003b6a <__swsetup_r+0x7a>
 8003b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b46:	b141      	cbz	r1, 8003b5a <__swsetup_r+0x6a>
 8003b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b4c:	4299      	cmp	r1, r3
 8003b4e:	d002      	beq.n	8003b56 <__swsetup_r+0x66>
 8003b50:	4630      	mov	r0, r6
 8003b52:	f000 fa5b 	bl	800400c <_free_r>
 8003b56:	2300      	movs	r3, #0
 8003b58:	6363      	str	r3, [r4, #52]	; 0x34
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	2300      	movs	r3, #0
 8003b64:	6063      	str	r3, [r4, #4]
 8003b66:	6923      	ldr	r3, [r4, #16]
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	f043 0308 	orr.w	r3, r3, #8
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	b94b      	cbnz	r3, 8003b8a <__swsetup_r+0x9a>
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b80:	d003      	beq.n	8003b8a <__swsetup_r+0x9a>
 8003b82:	4621      	mov	r1, r4
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 fa01 	bl	8003f8c <__smakebuf_r>
 8003b8a:	89a0      	ldrh	r0, [r4, #12]
 8003b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b90:	f010 0301 	ands.w	r3, r0, #1
 8003b94:	d00a      	beq.n	8003bac <__swsetup_r+0xbc>
 8003b96:	2300      	movs	r3, #0
 8003b98:	60a3      	str	r3, [r4, #8]
 8003b9a:	6963      	ldr	r3, [r4, #20]
 8003b9c:	425b      	negs	r3, r3
 8003b9e:	61a3      	str	r3, [r4, #24]
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	b943      	cbnz	r3, 8003bb6 <__swsetup_r+0xc6>
 8003ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ba8:	d1ba      	bne.n	8003b20 <__swsetup_r+0x30>
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	0781      	lsls	r1, r0, #30
 8003bae:	bf58      	it	pl
 8003bb0:	6963      	ldrpl	r3, [r4, #20]
 8003bb2:	60a3      	str	r3, [r4, #8]
 8003bb4:	e7f4      	b.n	8003ba0 <__swsetup_r+0xb0>
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e7f7      	b.n	8003baa <__swsetup_r+0xba>
 8003bba:	bf00      	nop
 8003bbc:	2000000c 	.word	0x2000000c
 8003bc0:	08004464 	.word	0x08004464
 8003bc4:	08004484 	.word	0x08004484
 8003bc8:	08004444 	.word	0x08004444

08003bcc <__sflush_r>:
 8003bcc:	898a      	ldrh	r2, [r1, #12]
 8003bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	0710      	lsls	r0, r2, #28
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	d458      	bmi.n	8003c8c <__sflush_r+0xc0>
 8003bda:	684b      	ldr	r3, [r1, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dc05      	bgt.n	8003bec <__sflush_r+0x20>
 8003be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	dc02      	bgt.n	8003bec <__sflush_r+0x20>
 8003be6:	2000      	movs	r0, #0
 8003be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bee:	2e00      	cmp	r6, #0
 8003bf0:	d0f9      	beq.n	8003be6 <__sflush_r+0x1a>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bf8:	682f      	ldr	r7, [r5, #0]
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	d032      	beq.n	8003c64 <__sflush_r+0x98>
 8003bfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	075a      	lsls	r2, r3, #29
 8003c04:	d505      	bpl.n	8003c12 <__sflush_r+0x46>
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	1ac0      	subs	r0, r0, r3
 8003c0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c0c:	b10b      	cbz	r3, 8003c12 <__sflush_r+0x46>
 8003c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c10:	1ac0      	subs	r0, r0, r3
 8003c12:	2300      	movs	r3, #0
 8003c14:	4602      	mov	r2, r0
 8003c16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c18:	6a21      	ldr	r1, [r4, #32]
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	47b0      	blx	r6
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	d106      	bne.n	8003c32 <__sflush_r+0x66>
 8003c24:	6829      	ldr	r1, [r5, #0]
 8003c26:	291d      	cmp	r1, #29
 8003c28:	d82c      	bhi.n	8003c84 <__sflush_r+0xb8>
 8003c2a:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <__sflush_r+0x108>)
 8003c2c:	40ca      	lsrs	r2, r1
 8003c2e:	07d6      	lsls	r6, r2, #31
 8003c30:	d528      	bpl.n	8003c84 <__sflush_r+0xb8>
 8003c32:	2200      	movs	r2, #0
 8003c34:	6062      	str	r2, [r4, #4]
 8003c36:	04d9      	lsls	r1, r3, #19
 8003c38:	6922      	ldr	r2, [r4, #16]
 8003c3a:	6022      	str	r2, [r4, #0]
 8003c3c:	d504      	bpl.n	8003c48 <__sflush_r+0x7c>
 8003c3e:	1c42      	adds	r2, r0, #1
 8003c40:	d101      	bne.n	8003c46 <__sflush_r+0x7a>
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	b903      	cbnz	r3, 8003c48 <__sflush_r+0x7c>
 8003c46:	6560      	str	r0, [r4, #84]	; 0x54
 8003c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c4a:	602f      	str	r7, [r5, #0]
 8003c4c:	2900      	cmp	r1, #0
 8003c4e:	d0ca      	beq.n	8003be6 <__sflush_r+0x1a>
 8003c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c54:	4299      	cmp	r1, r3
 8003c56:	d002      	beq.n	8003c5e <__sflush_r+0x92>
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f000 f9d7 	bl	800400c <_free_r>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	6360      	str	r0, [r4, #52]	; 0x34
 8003c62:	e7c1      	b.n	8003be8 <__sflush_r+0x1c>
 8003c64:	6a21      	ldr	r1, [r4, #32]
 8003c66:	2301      	movs	r3, #1
 8003c68:	4628      	mov	r0, r5
 8003c6a:	47b0      	blx	r6
 8003c6c:	1c41      	adds	r1, r0, #1
 8003c6e:	d1c7      	bne.n	8003c00 <__sflush_r+0x34>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0c4      	beq.n	8003c00 <__sflush_r+0x34>
 8003c76:	2b1d      	cmp	r3, #29
 8003c78:	d001      	beq.n	8003c7e <__sflush_r+0xb2>
 8003c7a:	2b16      	cmp	r3, #22
 8003c7c:	d101      	bne.n	8003c82 <__sflush_r+0xb6>
 8003c7e:	602f      	str	r7, [r5, #0]
 8003c80:	e7b1      	b.n	8003be6 <__sflush_r+0x1a>
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	e7ad      	b.n	8003be8 <__sflush_r+0x1c>
 8003c8c:	690f      	ldr	r7, [r1, #16]
 8003c8e:	2f00      	cmp	r7, #0
 8003c90:	d0a9      	beq.n	8003be6 <__sflush_r+0x1a>
 8003c92:	0793      	lsls	r3, r2, #30
 8003c94:	680e      	ldr	r6, [r1, #0]
 8003c96:	bf08      	it	eq
 8003c98:	694b      	ldreq	r3, [r1, #20]
 8003c9a:	600f      	str	r7, [r1, #0]
 8003c9c:	bf18      	it	ne
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	eba6 0807 	sub.w	r8, r6, r7
 8003ca4:	608b      	str	r3, [r1, #8]
 8003ca6:	f1b8 0f00 	cmp.w	r8, #0
 8003caa:	dd9c      	ble.n	8003be6 <__sflush_r+0x1a>
 8003cac:	6a21      	ldr	r1, [r4, #32]
 8003cae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	463a      	mov	r2, r7
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	47b0      	blx	r6
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	dc06      	bgt.n	8003cca <__sflush_r+0xfe>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc2:	81a3      	strh	r3, [r4, #12]
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc8:	e78e      	b.n	8003be8 <__sflush_r+0x1c>
 8003cca:	4407      	add	r7, r0
 8003ccc:	eba8 0800 	sub.w	r8, r8, r0
 8003cd0:	e7e9      	b.n	8003ca6 <__sflush_r+0xda>
 8003cd2:	bf00      	nop
 8003cd4:	20400001 	.word	0x20400001

08003cd8 <_fflush_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	690b      	ldr	r3, [r1, #16]
 8003cdc:	4605      	mov	r5, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	b913      	cbnz	r3, 8003ce8 <_fflush_r+0x10>
 8003ce2:	2500      	movs	r5, #0
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	b118      	cbz	r0, 8003cf2 <_fflush_r+0x1a>
 8003cea:	6983      	ldr	r3, [r0, #24]
 8003cec:	b90b      	cbnz	r3, 8003cf2 <_fflush_r+0x1a>
 8003cee:	f000 f887 	bl	8003e00 <__sinit>
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <_fflush_r+0x6c>)
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	d11b      	bne.n	8003d30 <_fflush_r+0x58>
 8003cf8:	686c      	ldr	r4, [r5, #4]
 8003cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ef      	beq.n	8003ce2 <_fflush_r+0xa>
 8003d02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d04:	07d0      	lsls	r0, r2, #31
 8003d06:	d404      	bmi.n	8003d12 <_fflush_r+0x3a>
 8003d08:	0599      	lsls	r1, r3, #22
 8003d0a:	d402      	bmi.n	8003d12 <_fflush_r+0x3a>
 8003d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d0e:	f000 f915 	bl	8003f3c <__retarget_lock_acquire_recursive>
 8003d12:	4628      	mov	r0, r5
 8003d14:	4621      	mov	r1, r4
 8003d16:	f7ff ff59 	bl	8003bcc <__sflush_r>
 8003d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d1c:	07da      	lsls	r2, r3, #31
 8003d1e:	4605      	mov	r5, r0
 8003d20:	d4e0      	bmi.n	8003ce4 <_fflush_r+0xc>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	059b      	lsls	r3, r3, #22
 8003d26:	d4dd      	bmi.n	8003ce4 <_fflush_r+0xc>
 8003d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d2a:	f000 f908 	bl	8003f3e <__retarget_lock_release_recursive>
 8003d2e:	e7d9      	b.n	8003ce4 <_fflush_r+0xc>
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <_fflush_r+0x70>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d101      	bne.n	8003d3a <_fflush_r+0x62>
 8003d36:	68ac      	ldr	r4, [r5, #8]
 8003d38:	e7df      	b.n	8003cfa <_fflush_r+0x22>
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <_fflush_r+0x74>)
 8003d3c:	429c      	cmp	r4, r3
 8003d3e:	bf08      	it	eq
 8003d40:	68ec      	ldreq	r4, [r5, #12]
 8003d42:	e7da      	b.n	8003cfa <_fflush_r+0x22>
 8003d44:	08004464 	.word	0x08004464
 8003d48:	08004484 	.word	0x08004484
 8003d4c:	08004444 	.word	0x08004444

08003d50 <std>:
 8003d50:	2300      	movs	r3, #0
 8003d52:	b510      	push	{r4, lr}
 8003d54:	4604      	mov	r4, r0
 8003d56:	e9c0 3300 	strd	r3, r3, [r0]
 8003d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d5e:	6083      	str	r3, [r0, #8]
 8003d60:	8181      	strh	r1, [r0, #12]
 8003d62:	6643      	str	r3, [r0, #100]	; 0x64
 8003d64:	81c2      	strh	r2, [r0, #14]
 8003d66:	6183      	str	r3, [r0, #24]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	305c      	adds	r0, #92	; 0x5c
 8003d6e:	f7ff fdef 	bl	8003950 <memset>
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <std+0x38>)
 8003d74:	6263      	str	r3, [r4, #36]	; 0x24
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <std+0x3c>)
 8003d78:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <std+0x40>)
 8003d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <std+0x44>)
 8003d80:	6224      	str	r4, [r4, #32]
 8003d82:	6323      	str	r3, [r4, #48]	; 0x30
 8003d84:	bd10      	pop	{r4, pc}
 8003d86:	bf00      	nop
 8003d88:	080041ed 	.word	0x080041ed
 8003d8c:	0800420f 	.word	0x0800420f
 8003d90:	08004247 	.word	0x08004247
 8003d94:	0800426b 	.word	0x0800426b

08003d98 <_cleanup_r>:
 8003d98:	4901      	ldr	r1, [pc, #4]	; (8003da0 <_cleanup_r+0x8>)
 8003d9a:	f000 b8af 	b.w	8003efc <_fwalk_reent>
 8003d9e:	bf00      	nop
 8003da0:	08003cd9 	.word	0x08003cd9

08003da4 <__sfmoreglue>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	2268      	movs	r2, #104	; 0x68
 8003da8:	1e4d      	subs	r5, r1, #1
 8003daa:	4355      	muls	r5, r2
 8003dac:	460e      	mov	r6, r1
 8003dae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003db2:	f000 f997 	bl	80040e4 <_malloc_r>
 8003db6:	4604      	mov	r4, r0
 8003db8:	b140      	cbz	r0, 8003dcc <__sfmoreglue+0x28>
 8003dba:	2100      	movs	r1, #0
 8003dbc:	e9c0 1600 	strd	r1, r6, [r0]
 8003dc0:	300c      	adds	r0, #12
 8003dc2:	60a0      	str	r0, [r4, #8]
 8003dc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dc8:	f7ff fdc2 	bl	8003950 <memset>
 8003dcc:	4620      	mov	r0, r4
 8003dce:	bd70      	pop	{r4, r5, r6, pc}

08003dd0 <__sfp_lock_acquire>:
 8003dd0:	4801      	ldr	r0, [pc, #4]	; (8003dd8 <__sfp_lock_acquire+0x8>)
 8003dd2:	f000 b8b3 	b.w	8003f3c <__retarget_lock_acquire_recursive>
 8003dd6:	bf00      	nop
 8003dd8:	2000013d 	.word	0x2000013d

08003ddc <__sfp_lock_release>:
 8003ddc:	4801      	ldr	r0, [pc, #4]	; (8003de4 <__sfp_lock_release+0x8>)
 8003dde:	f000 b8ae 	b.w	8003f3e <__retarget_lock_release_recursive>
 8003de2:	bf00      	nop
 8003de4:	2000013d 	.word	0x2000013d

08003de8 <__sinit_lock_acquire>:
 8003de8:	4801      	ldr	r0, [pc, #4]	; (8003df0 <__sinit_lock_acquire+0x8>)
 8003dea:	f000 b8a7 	b.w	8003f3c <__retarget_lock_acquire_recursive>
 8003dee:	bf00      	nop
 8003df0:	2000013e 	.word	0x2000013e

08003df4 <__sinit_lock_release>:
 8003df4:	4801      	ldr	r0, [pc, #4]	; (8003dfc <__sinit_lock_release+0x8>)
 8003df6:	f000 b8a2 	b.w	8003f3e <__retarget_lock_release_recursive>
 8003dfa:	bf00      	nop
 8003dfc:	2000013e 	.word	0x2000013e

08003e00 <__sinit>:
 8003e00:	b510      	push	{r4, lr}
 8003e02:	4604      	mov	r4, r0
 8003e04:	f7ff fff0 	bl	8003de8 <__sinit_lock_acquire>
 8003e08:	69a3      	ldr	r3, [r4, #24]
 8003e0a:	b11b      	cbz	r3, 8003e14 <__sinit+0x14>
 8003e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e10:	f7ff bff0 	b.w	8003df4 <__sinit_lock_release>
 8003e14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e18:	6523      	str	r3, [r4, #80]	; 0x50
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <__sinit+0x68>)
 8003e1c:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <__sinit+0x6c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	bf04      	itt	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	61a3      	streq	r3, [r4, #24]
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f000 f820 	bl	8003e70 <__sfp>
 8003e30:	6060      	str	r0, [r4, #4]
 8003e32:	4620      	mov	r0, r4
 8003e34:	f000 f81c 	bl	8003e70 <__sfp>
 8003e38:	60a0      	str	r0, [r4, #8]
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 f818 	bl	8003e70 <__sfp>
 8003e40:	2200      	movs	r2, #0
 8003e42:	60e0      	str	r0, [r4, #12]
 8003e44:	2104      	movs	r1, #4
 8003e46:	6860      	ldr	r0, [r4, #4]
 8003e48:	f7ff ff82 	bl	8003d50 <std>
 8003e4c:	68a0      	ldr	r0, [r4, #8]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	2109      	movs	r1, #9
 8003e52:	f7ff ff7d 	bl	8003d50 <std>
 8003e56:	68e0      	ldr	r0, [r4, #12]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	2112      	movs	r1, #18
 8003e5c:	f7ff ff78 	bl	8003d50 <std>
 8003e60:	2301      	movs	r3, #1
 8003e62:	61a3      	str	r3, [r4, #24]
 8003e64:	e7d2      	b.n	8003e0c <__sinit+0xc>
 8003e66:	bf00      	nop
 8003e68:	08004440 	.word	0x08004440
 8003e6c:	08003d99 	.word	0x08003d99

08003e70 <__sfp>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	4607      	mov	r7, r0
 8003e74:	f7ff ffac 	bl	8003dd0 <__sfp_lock_acquire>
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <__sfp+0x84>)
 8003e7a:	681e      	ldr	r6, [r3, #0]
 8003e7c:	69b3      	ldr	r3, [r6, #24]
 8003e7e:	b913      	cbnz	r3, 8003e86 <__sfp+0x16>
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff ffbd 	bl	8003e00 <__sinit>
 8003e86:	3648      	adds	r6, #72	; 0x48
 8003e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	d503      	bpl.n	8003e98 <__sfp+0x28>
 8003e90:	6833      	ldr	r3, [r6, #0]
 8003e92:	b30b      	cbz	r3, 8003ed8 <__sfp+0x68>
 8003e94:	6836      	ldr	r6, [r6, #0]
 8003e96:	e7f7      	b.n	8003e88 <__sfp+0x18>
 8003e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e9c:	b9d5      	cbnz	r5, 8003ed4 <__sfp+0x64>
 8003e9e:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <__sfp+0x88>)
 8003ea0:	60e3      	str	r3, [r4, #12]
 8003ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ea6:	6665      	str	r5, [r4, #100]	; 0x64
 8003ea8:	f000 f847 	bl	8003f3a <__retarget_lock_init_recursive>
 8003eac:	f7ff ff96 	bl	8003ddc <__sfp_lock_release>
 8003eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003eb8:	6025      	str	r5, [r4, #0]
 8003eba:	61a5      	str	r5, [r4, #24]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ec4:	f7ff fd44 	bl	8003950 <memset>
 8003ec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed4:	3468      	adds	r4, #104	; 0x68
 8003ed6:	e7d9      	b.n	8003e8c <__sfp+0x1c>
 8003ed8:	2104      	movs	r1, #4
 8003eda:	4638      	mov	r0, r7
 8003edc:	f7ff ff62 	bl	8003da4 <__sfmoreglue>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	6030      	str	r0, [r6, #0]
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1d5      	bne.n	8003e94 <__sfp+0x24>
 8003ee8:	f7ff ff78 	bl	8003ddc <__sfp_lock_release>
 8003eec:	230c      	movs	r3, #12
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	e7ee      	b.n	8003ed0 <__sfp+0x60>
 8003ef2:	bf00      	nop
 8003ef4:	08004440 	.word	0x08004440
 8003ef8:	ffff0001 	.word	0xffff0001

08003efc <_fwalk_reent>:
 8003efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f00:	4606      	mov	r6, r0
 8003f02:	4688      	mov	r8, r1
 8003f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f08:	2700      	movs	r7, #0
 8003f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8003f12:	d505      	bpl.n	8003f20 <_fwalk_reent+0x24>
 8003f14:	6824      	ldr	r4, [r4, #0]
 8003f16:	2c00      	cmp	r4, #0
 8003f18:	d1f7      	bne.n	8003f0a <_fwalk_reent+0xe>
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f20:	89ab      	ldrh	r3, [r5, #12]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d907      	bls.n	8003f36 <_fwalk_reent+0x3a>
 8003f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	d003      	beq.n	8003f36 <_fwalk_reent+0x3a>
 8003f2e:	4629      	mov	r1, r5
 8003f30:	4630      	mov	r0, r6
 8003f32:	47c0      	blx	r8
 8003f34:	4307      	orrs	r7, r0
 8003f36:	3568      	adds	r5, #104	; 0x68
 8003f38:	e7e9      	b.n	8003f0e <_fwalk_reent+0x12>

08003f3a <__retarget_lock_init_recursive>:
 8003f3a:	4770      	bx	lr

08003f3c <__retarget_lock_acquire_recursive>:
 8003f3c:	4770      	bx	lr

08003f3e <__retarget_lock_release_recursive>:
 8003f3e:	4770      	bx	lr

08003f40 <__swhatbuf_r>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	460e      	mov	r6, r1
 8003f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	b096      	sub	sp, #88	; 0x58
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	461d      	mov	r5, r3
 8003f50:	da08      	bge.n	8003f64 <__swhatbuf_r+0x24>
 8003f52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	602a      	str	r2, [r5, #0]
 8003f5a:	061a      	lsls	r2, r3, #24
 8003f5c:	d410      	bmi.n	8003f80 <__swhatbuf_r+0x40>
 8003f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f62:	e00e      	b.n	8003f82 <__swhatbuf_r+0x42>
 8003f64:	466a      	mov	r2, sp
 8003f66:	f000 f9a7 	bl	80042b8 <_fstat_r>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	dbf1      	blt.n	8003f52 <__swhatbuf_r+0x12>
 8003f6e:	9a01      	ldr	r2, [sp, #4]
 8003f70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f78:	425a      	negs	r2, r3
 8003f7a:	415a      	adcs	r2, r3
 8003f7c:	602a      	str	r2, [r5, #0]
 8003f7e:	e7ee      	b.n	8003f5e <__swhatbuf_r+0x1e>
 8003f80:	2340      	movs	r3, #64	; 0x40
 8003f82:	2000      	movs	r0, #0
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	b016      	add	sp, #88	; 0x58
 8003f88:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f8c <__smakebuf_r>:
 8003f8c:	898b      	ldrh	r3, [r1, #12]
 8003f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f90:	079d      	lsls	r5, r3, #30
 8003f92:	4606      	mov	r6, r0
 8003f94:	460c      	mov	r4, r1
 8003f96:	d507      	bpl.n	8003fa8 <__smakebuf_r+0x1c>
 8003f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	6123      	str	r3, [r4, #16]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	6163      	str	r3, [r4, #20]
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}
 8003fa8:	ab01      	add	r3, sp, #4
 8003faa:	466a      	mov	r2, sp
 8003fac:	f7ff ffc8 	bl	8003f40 <__swhatbuf_r>
 8003fb0:	9900      	ldr	r1, [sp, #0]
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	f000 f895 	bl	80040e4 <_malloc_r>
 8003fba:	b948      	cbnz	r0, 8003fd0 <__smakebuf_r+0x44>
 8003fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc0:	059a      	lsls	r2, r3, #22
 8003fc2:	d4ef      	bmi.n	8003fa4 <__smakebuf_r+0x18>
 8003fc4:	f023 0303 	bic.w	r3, r3, #3
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	e7e3      	b.n	8003f98 <__smakebuf_r+0xc>
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <__smakebuf_r+0x7c>)
 8003fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	6020      	str	r0, [r4, #0]
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	9b00      	ldr	r3, [sp, #0]
 8003fe0:	6163      	str	r3, [r4, #20]
 8003fe2:	9b01      	ldr	r3, [sp, #4]
 8003fe4:	6120      	str	r0, [r4, #16]
 8003fe6:	b15b      	cbz	r3, 8004000 <__smakebuf_r+0x74>
 8003fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fec:	4630      	mov	r0, r6
 8003fee:	f000 f975 	bl	80042dc <_isatty_r>
 8003ff2:	b128      	cbz	r0, 8004000 <__smakebuf_r+0x74>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	89a0      	ldrh	r0, [r4, #12]
 8004002:	4305      	orrs	r5, r0
 8004004:	81a5      	strh	r5, [r4, #12]
 8004006:	e7cd      	b.n	8003fa4 <__smakebuf_r+0x18>
 8004008:	08003d99 	.word	0x08003d99

0800400c <_free_r>:
 800400c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800400e:	2900      	cmp	r1, #0
 8004010:	d044      	beq.n	800409c <_free_r+0x90>
 8004012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004016:	9001      	str	r0, [sp, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f1a1 0404 	sub.w	r4, r1, #4
 800401e:	bfb8      	it	lt
 8004020:	18e4      	addlt	r4, r4, r3
 8004022:	f000 f97d 	bl	8004320 <__malloc_lock>
 8004026:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <_free_r+0x94>)
 8004028:	9801      	ldr	r0, [sp, #4]
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	b933      	cbnz	r3, 800403c <_free_r+0x30>
 800402e:	6063      	str	r3, [r4, #4]
 8004030:	6014      	str	r4, [r2, #0]
 8004032:	b003      	add	sp, #12
 8004034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004038:	f000 b978 	b.w	800432c <__malloc_unlock>
 800403c:	42a3      	cmp	r3, r4
 800403e:	d908      	bls.n	8004052 <_free_r+0x46>
 8004040:	6825      	ldr	r5, [r4, #0]
 8004042:	1961      	adds	r1, r4, r5
 8004044:	428b      	cmp	r3, r1
 8004046:	bf01      	itttt	eq
 8004048:	6819      	ldreq	r1, [r3, #0]
 800404a:	685b      	ldreq	r3, [r3, #4]
 800404c:	1949      	addeq	r1, r1, r5
 800404e:	6021      	streq	r1, [r4, #0]
 8004050:	e7ed      	b.n	800402e <_free_r+0x22>
 8004052:	461a      	mov	r2, r3
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	b10b      	cbz	r3, 800405c <_free_r+0x50>
 8004058:	42a3      	cmp	r3, r4
 800405a:	d9fa      	bls.n	8004052 <_free_r+0x46>
 800405c:	6811      	ldr	r1, [r2, #0]
 800405e:	1855      	adds	r5, r2, r1
 8004060:	42a5      	cmp	r5, r4
 8004062:	d10b      	bne.n	800407c <_free_r+0x70>
 8004064:	6824      	ldr	r4, [r4, #0]
 8004066:	4421      	add	r1, r4
 8004068:	1854      	adds	r4, r2, r1
 800406a:	42a3      	cmp	r3, r4
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	d1e0      	bne.n	8004032 <_free_r+0x26>
 8004070:	681c      	ldr	r4, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	6053      	str	r3, [r2, #4]
 8004076:	4421      	add	r1, r4
 8004078:	6011      	str	r1, [r2, #0]
 800407a:	e7da      	b.n	8004032 <_free_r+0x26>
 800407c:	d902      	bls.n	8004084 <_free_r+0x78>
 800407e:	230c      	movs	r3, #12
 8004080:	6003      	str	r3, [r0, #0]
 8004082:	e7d6      	b.n	8004032 <_free_r+0x26>
 8004084:	6825      	ldr	r5, [r4, #0]
 8004086:	1961      	adds	r1, r4, r5
 8004088:	428b      	cmp	r3, r1
 800408a:	bf04      	itt	eq
 800408c:	6819      	ldreq	r1, [r3, #0]
 800408e:	685b      	ldreq	r3, [r3, #4]
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	bf04      	itt	eq
 8004094:	1949      	addeq	r1, r1, r5
 8004096:	6021      	streq	r1, [r4, #0]
 8004098:	6054      	str	r4, [r2, #4]
 800409a:	e7ca      	b.n	8004032 <_free_r+0x26>
 800409c:	b003      	add	sp, #12
 800409e:	bd30      	pop	{r4, r5, pc}
 80040a0:	20000140 	.word	0x20000140

080040a4 <sbrk_aligned>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4e0e      	ldr	r6, [pc, #56]	; (80040e0 <sbrk_aligned+0x3c>)
 80040a8:	460c      	mov	r4, r1
 80040aa:	6831      	ldr	r1, [r6, #0]
 80040ac:	4605      	mov	r5, r0
 80040ae:	b911      	cbnz	r1, 80040b6 <sbrk_aligned+0x12>
 80040b0:	f000 f88c 	bl	80041cc <_sbrk_r>
 80040b4:	6030      	str	r0, [r6, #0]
 80040b6:	4621      	mov	r1, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 f887 	bl	80041cc <_sbrk_r>
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	d00a      	beq.n	80040d8 <sbrk_aligned+0x34>
 80040c2:	1cc4      	adds	r4, r0, #3
 80040c4:	f024 0403 	bic.w	r4, r4, #3
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d007      	beq.n	80040dc <sbrk_aligned+0x38>
 80040cc:	1a21      	subs	r1, r4, r0
 80040ce:	4628      	mov	r0, r5
 80040d0:	f000 f87c 	bl	80041cc <_sbrk_r>
 80040d4:	3001      	adds	r0, #1
 80040d6:	d101      	bne.n	80040dc <sbrk_aligned+0x38>
 80040d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80040dc:	4620      	mov	r0, r4
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	20000144 	.word	0x20000144

080040e4 <_malloc_r>:
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	1ccd      	adds	r5, r1, #3
 80040ea:	f025 0503 	bic.w	r5, r5, #3
 80040ee:	3508      	adds	r5, #8
 80040f0:	2d0c      	cmp	r5, #12
 80040f2:	bf38      	it	cc
 80040f4:	250c      	movcc	r5, #12
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	4607      	mov	r7, r0
 80040fa:	db01      	blt.n	8004100 <_malloc_r+0x1c>
 80040fc:	42a9      	cmp	r1, r5
 80040fe:	d905      	bls.n	800410c <_malloc_r+0x28>
 8004100:	230c      	movs	r3, #12
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	2600      	movs	r6, #0
 8004106:	4630      	mov	r0, r6
 8004108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800410c:	4e2e      	ldr	r6, [pc, #184]	; (80041c8 <_malloc_r+0xe4>)
 800410e:	f000 f907 	bl	8004320 <__malloc_lock>
 8004112:	6833      	ldr	r3, [r6, #0]
 8004114:	461c      	mov	r4, r3
 8004116:	bb34      	cbnz	r4, 8004166 <_malloc_r+0x82>
 8004118:	4629      	mov	r1, r5
 800411a:	4638      	mov	r0, r7
 800411c:	f7ff ffc2 	bl	80040a4 <sbrk_aligned>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	4604      	mov	r4, r0
 8004124:	d14d      	bne.n	80041c2 <_malloc_r+0xde>
 8004126:	6834      	ldr	r4, [r6, #0]
 8004128:	4626      	mov	r6, r4
 800412a:	2e00      	cmp	r6, #0
 800412c:	d140      	bne.n	80041b0 <_malloc_r+0xcc>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	4631      	mov	r1, r6
 8004132:	4638      	mov	r0, r7
 8004134:	eb04 0803 	add.w	r8, r4, r3
 8004138:	f000 f848 	bl	80041cc <_sbrk_r>
 800413c:	4580      	cmp	r8, r0
 800413e:	d13a      	bne.n	80041b6 <_malloc_r+0xd2>
 8004140:	6821      	ldr	r1, [r4, #0]
 8004142:	3503      	adds	r5, #3
 8004144:	1a6d      	subs	r5, r5, r1
 8004146:	f025 0503 	bic.w	r5, r5, #3
 800414a:	3508      	adds	r5, #8
 800414c:	2d0c      	cmp	r5, #12
 800414e:	bf38      	it	cc
 8004150:	250c      	movcc	r5, #12
 8004152:	4629      	mov	r1, r5
 8004154:	4638      	mov	r0, r7
 8004156:	f7ff ffa5 	bl	80040a4 <sbrk_aligned>
 800415a:	3001      	adds	r0, #1
 800415c:	d02b      	beq.n	80041b6 <_malloc_r+0xd2>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	442b      	add	r3, r5
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	e00e      	b.n	8004184 <_malloc_r+0xa0>
 8004166:	6822      	ldr	r2, [r4, #0]
 8004168:	1b52      	subs	r2, r2, r5
 800416a:	d41e      	bmi.n	80041aa <_malloc_r+0xc6>
 800416c:	2a0b      	cmp	r2, #11
 800416e:	d916      	bls.n	800419e <_malloc_r+0xba>
 8004170:	1961      	adds	r1, r4, r5
 8004172:	42a3      	cmp	r3, r4
 8004174:	6025      	str	r5, [r4, #0]
 8004176:	bf18      	it	ne
 8004178:	6059      	strne	r1, [r3, #4]
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	bf08      	it	eq
 800417e:	6031      	streq	r1, [r6, #0]
 8004180:	5162      	str	r2, [r4, r5]
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	4638      	mov	r0, r7
 8004186:	f104 060b 	add.w	r6, r4, #11
 800418a:	f000 f8cf 	bl	800432c <__malloc_unlock>
 800418e:	f026 0607 	bic.w	r6, r6, #7
 8004192:	1d23      	adds	r3, r4, #4
 8004194:	1af2      	subs	r2, r6, r3
 8004196:	d0b6      	beq.n	8004106 <_malloc_r+0x22>
 8004198:	1b9b      	subs	r3, r3, r6
 800419a:	50a3      	str	r3, [r4, r2]
 800419c:	e7b3      	b.n	8004106 <_malloc_r+0x22>
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	bf0c      	ite	eq
 80041a4:	6032      	streq	r2, [r6, #0]
 80041a6:	605a      	strne	r2, [r3, #4]
 80041a8:	e7ec      	b.n	8004184 <_malloc_r+0xa0>
 80041aa:	4623      	mov	r3, r4
 80041ac:	6864      	ldr	r4, [r4, #4]
 80041ae:	e7b2      	b.n	8004116 <_malloc_r+0x32>
 80041b0:	4634      	mov	r4, r6
 80041b2:	6876      	ldr	r6, [r6, #4]
 80041b4:	e7b9      	b.n	800412a <_malloc_r+0x46>
 80041b6:	230c      	movs	r3, #12
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4638      	mov	r0, r7
 80041bc:	f000 f8b6 	bl	800432c <__malloc_unlock>
 80041c0:	e7a1      	b.n	8004106 <_malloc_r+0x22>
 80041c2:	6025      	str	r5, [r4, #0]
 80041c4:	e7de      	b.n	8004184 <_malloc_r+0xa0>
 80041c6:	bf00      	nop
 80041c8:	20000140 	.word	0x20000140

080041cc <_sbrk_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d06      	ldr	r5, [pc, #24]	; (80041e8 <_sbrk_r+0x1c>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fc fc5c 	bl	8000a94 <_sbrk>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_sbrk_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_sbrk_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000148 	.word	0x20000148

080041ec <__sread>:
 80041ec:	b510      	push	{r4, lr}
 80041ee:	460c      	mov	r4, r1
 80041f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f4:	f000 f8a0 	bl	8004338 <_read_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	bfab      	itete	ge
 80041fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004200:	181b      	addge	r3, r3, r0
 8004202:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004206:	bfac      	ite	ge
 8004208:	6563      	strge	r3, [r4, #84]	; 0x54
 800420a:	81a3      	strhlt	r3, [r4, #12]
 800420c:	bd10      	pop	{r4, pc}

0800420e <__swrite>:
 800420e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004212:	461f      	mov	r7, r3
 8004214:	898b      	ldrh	r3, [r1, #12]
 8004216:	05db      	lsls	r3, r3, #23
 8004218:	4605      	mov	r5, r0
 800421a:	460c      	mov	r4, r1
 800421c:	4616      	mov	r6, r2
 800421e:	d505      	bpl.n	800422c <__swrite+0x1e>
 8004220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004224:	2302      	movs	r3, #2
 8004226:	2200      	movs	r2, #0
 8004228:	f000 f868 	bl	80042fc <_lseek_r>
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	4632      	mov	r2, r6
 800423a:	463b      	mov	r3, r7
 800423c:	4628      	mov	r0, r5
 800423e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004242:	f000 b817 	b.w	8004274 <_write_r>

08004246 <__sseek>:
 8004246:	b510      	push	{r4, lr}
 8004248:	460c      	mov	r4, r1
 800424a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800424e:	f000 f855 	bl	80042fc <_lseek_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	bf15      	itete	ne
 8004258:	6560      	strne	r0, [r4, #84]	; 0x54
 800425a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800425e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004262:	81a3      	strheq	r3, [r4, #12]
 8004264:	bf18      	it	ne
 8004266:	81a3      	strhne	r3, [r4, #12]
 8004268:	bd10      	pop	{r4, pc}

0800426a <__sclose>:
 800426a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800426e:	f000 b813 	b.w	8004298 <_close_r>
	...

08004274 <_write_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4d07      	ldr	r5, [pc, #28]	; (8004294 <_write_r+0x20>)
 8004278:	4604      	mov	r4, r0
 800427a:	4608      	mov	r0, r1
 800427c:	4611      	mov	r1, r2
 800427e:	2200      	movs	r2, #0
 8004280:	602a      	str	r2, [r5, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f7fc fbbc 	bl	8000a00 <_write>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_write_r+0x1e>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	b103      	cbz	r3, 8004292 <_write_r+0x1e>
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	20000148 	.word	0x20000148

08004298 <_close_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4d06      	ldr	r5, [pc, #24]	; (80042b4 <_close_r+0x1c>)
 800429c:	2300      	movs	r3, #0
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	602b      	str	r3, [r5, #0]
 80042a4:	f7fc fbc2 	bl	8000a2c <_close>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_close_r+0x1a>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_close_r+0x1a>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	20000148 	.word	0x20000148

080042b8 <_fstat_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4d07      	ldr	r5, [pc, #28]	; (80042d8 <_fstat_r+0x20>)
 80042bc:	2300      	movs	r3, #0
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	f7fc fbbd 	bl	8000a44 <_fstat>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	d102      	bne.n	80042d4 <_fstat_r+0x1c>
 80042ce:	682b      	ldr	r3, [r5, #0]
 80042d0:	b103      	cbz	r3, 80042d4 <_fstat_r+0x1c>
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	20000148 	.word	0x20000148

080042dc <_isatty_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d06      	ldr	r5, [pc, #24]	; (80042f8 <_isatty_r+0x1c>)
 80042e0:	2300      	movs	r3, #0
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	f7fc fbbc 	bl	8000a64 <_isatty>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_isatty_r+0x1a>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_isatty_r+0x1a>
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	20000148 	.word	0x20000148

080042fc <_lseek_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d07      	ldr	r5, [pc, #28]	; (800431c <_lseek_r+0x20>)
 8004300:	4604      	mov	r4, r0
 8004302:	4608      	mov	r0, r1
 8004304:	4611      	mov	r1, r2
 8004306:	2200      	movs	r2, #0
 8004308:	602a      	str	r2, [r5, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fc fbb5 	bl	8000a7a <_lseek>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_lseek_r+0x1e>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	b103      	cbz	r3, 800431a <_lseek_r+0x1e>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000148 	.word	0x20000148

08004320 <__malloc_lock>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__malloc_lock+0x8>)
 8004322:	f7ff be0b 	b.w	8003f3c <__retarget_lock_acquire_recursive>
 8004326:	bf00      	nop
 8004328:	2000013c 	.word	0x2000013c

0800432c <__malloc_unlock>:
 800432c:	4801      	ldr	r0, [pc, #4]	; (8004334 <__malloc_unlock+0x8>)
 800432e:	f7ff be06 	b.w	8003f3e <__retarget_lock_release_recursive>
 8004332:	bf00      	nop
 8004334:	2000013c 	.word	0x2000013c

08004338 <_read_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4d07      	ldr	r5, [pc, #28]	; (8004358 <_read_r+0x20>)
 800433c:	4604      	mov	r4, r0
 800433e:	4608      	mov	r0, r1
 8004340:	4611      	mov	r1, r2
 8004342:	2200      	movs	r2, #0
 8004344:	602a      	str	r2, [r5, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	f7fc fb3c 	bl	80009c4 <_read>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_read_r+0x1e>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	b103      	cbz	r3, 8004356 <_read_r+0x1e>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	20000148 	.word	0x20000148

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
