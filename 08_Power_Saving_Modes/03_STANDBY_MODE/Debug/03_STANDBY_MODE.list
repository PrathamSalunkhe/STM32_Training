
03_STANDBY_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e54  08003e54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e5c  08003e5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08003ed4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003ed4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3ff  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd2  00000000  00000000  0002c49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002e078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002970d  00000000  00000000  0002f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb81  00000000  00000000  00058b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9844  00000000  00000000  000646ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015def2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eec  00000000  00000000  0015df44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003d44 	.word	0x08003d44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08003d44 	.word	0x08003d44

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fa9c 	bl	8000a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f84f 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f8bf 	bl	8000680 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000502:	f000 f891 	bl	8000628 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*** chek if the sb flag is set ***/
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000506:	4b20      	ldr	r3, [pc, #128]	; (8000588 <main+0x98>)
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050e:	2b00      	cmp	r3, #0
 8000510:	d019      	beq.n	8000546 <main+0x56>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);		//clear the flag
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <main+0x98>)
 8000514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000518:	619a      	str	r2, [r3, #24]

		/*** display the string ***/
		printf("Wake up from Standby Mode\r\n");
 800051a:	481c      	ldr	r0, [pc, #112]	; (800058c <main+0x9c>)
 800051c:	f002 ff82 	bl	8003424 <puts>

		/*** blink the led ***/
		for (int i = 0; i < 20; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	e009      	b.n	800053a <main+0x4a>
		{
			HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	4819      	ldr	r0, [pc, #100]	; (8000590 <main+0xa0>)
 800052a:	f000 fdab 	bl	8001084 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f000 faf4 	bl	8000b1c <HAL_Delay>
		for (int i = 0; i < 20; i++)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b13      	cmp	r3, #19
 800053e:	ddf2      	ble.n	8000526 <main+0x36>
		}

		/*** disable the wakeup pin ***/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);	//disable PC13
 8000540:	2002      	movs	r0, #2
 8000542:	f000 fdd9 	bl	80010f8 <HAL_PWR_DisableWakeUpPin>
//		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
	}

  /*** Now Enter the Standby Mode ***/
	/*** clear the WU FLAG ***/
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <main+0x98>)
 8000548:	221f      	movs	r2, #31
 800054a:	619a      	str	r2, [r3, #24]
	/** clear RTC Wake up (WU) flag **/
//	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc,RTC_FLAG_WUTF);


	/*** display the string ***/
	printf("Entering into Standby Mode\r\n");
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <main+0xa4>)
 800054e:	f002 ff69 	bl	8003424 <puts>

	/*** blink the led ***/
	for (int i = 0; i < 5; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	e00a      	b.n	800056e <main+0x7e>
	{
		HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	480d      	ldr	r0, [pc, #52]	; (8000590 <main+0xa0>)
 800055c:	f000 fd92 	bl	8001084 <HAL_GPIO_TogglePin>
		HAL_Delay(750);
 8000560:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000564:	f000 fada 	bl	8000b1c <HAL_Delay>
	for (int i = 0; i < 5; i++)
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b04      	cmp	r3, #4
 8000572:	ddf1      	ble.n	8000558 <main+0x68>
	}



	/*** Enable the wakeu up pin ***/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH);
 8000574:	2002      	movs	r0, #2
 8000576:	f000 fd9f 	bl	80010b8 <HAL_PWR_EnableWakeUpPin>
//	    Error_Handler();
//	  }


	/*** Standby Mode ***/
	printf("Standby Mode is ON\r\n");
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <main+0xa8>)
 800057c:	f002 ff52 	bl	8003424 <puts>

	/*** Enter the standby mode ***/
	HAL_PWR_EnterSTANDBYMode();
 8000580:	f000 fdd0 	bl	8001124 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x94>
 8000586:	bf00      	nop
 8000588:	40007000 	.word	0x40007000
 800058c:	08003d5c 	.word	0x08003d5c
 8000590:	48000400 	.word	0x48000400
 8000594:	08003d78 	.word	0x08003d78
 8000598:	08003d94 	.word	0x08003d94

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b096      	sub	sp, #88	; 0x58
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2244      	movs	r2, #68	; 0x44
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fec4 	bl	8003338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c2:	f000 fdd7 	bl	8001174 <HAL_PWREx_ControlVoltageScaling>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005cc:	f000 f8a4 	bl	8000718 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005de:	2300      	movs	r3, #0
 80005e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fe2a 	bl	8001240 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80005f2:	f000 f891 	bl	8000718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fa:	2301      	movs	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fa2f 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800061c:	f000 f87c 	bl	8000718 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3758      	adds	r7, #88	; 0x58
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_LPUART1_UART_Init+0x54>)
 8000630:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_LPUART1_UART_Init+0x50>)
 8000666:	f002 f8f3 	bl	8002850 <HAL_UART_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 f852 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000008c 	.word	0x2000008c
 800067c:	40008000 	.word	0x40008000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_GPIO_Init+0x90>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a1d      	ldr	r2, [pc, #116]	; (8000710 <MX_GPIO_Init+0x90>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_GPIO_Init+0x90>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_GPIO_Init+0x90>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a17      	ldr	r2, [pc, #92]	; (8000710 <MX_GPIO_Init+0x90>)
 80006b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_GPIO_Init+0x90>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006c6:	f000 fdab 	bl	8001220 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_GPIO_Init+0x90>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a10      	ldr	r2, [pc, #64]	; (8000710 <MX_GPIO_Init+0x90>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_GPIO_Init+0x90>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <MX_GPIO_Init+0x94>)
 80006e8:	f000 fcb4 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_GPIO_Init+0x94>)
 8000704:	f000 fb14 	bl	8000d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x44>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_MspInit+0x44>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6613      	str	r3, [r2, #96]	; 0x60
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x44>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x44>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6593      	str	r3, [r2, #88]	; 0x58
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0ac      	sub	sp, #176	; 0xb0
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	228c      	movs	r2, #140	; 0x8c
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fdd3 	bl	8003338 <memset>
  if(huart->Instance==LPUART1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <HAL_UART_MspInit+0xb4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d13d      	bne.n	8000818 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800079c:	2320      	movs	r3, #32
 800079e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fb87 	bl	8001ebc <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007b4:	f7ff ffb0 	bl	8000718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_UART_MspInit+0xb8>)
 80007ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_UART_MspInit+0xb8>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_UART_MspInit+0xb8>)
 80007c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_UART_MspInit+0xb8>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <HAL_UART_MspInit+0xb8>)
 80007d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_UART_MspInit+0xb8>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80007e8:	f000 fd1a 	bl	8001220 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = BSP_DEBUG_UART_TX_Pin|BSP_DEBUG_UART_RX_Pin;
 80007ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000806:	2308      	movs	r3, #8
 8000808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000810:	4619      	mov	r1, r3
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <HAL_UART_MspInit+0xbc>)
 8000814:	f000 fa8c 	bl	8000d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000818:	bf00      	nop
 800081a:	37b0      	adds	r7, #176	; 0xb0
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40008000 	.word	0x40008000
 8000824:	40021000 	.word	0x40021000
 8000828:	48001800 	.word	0x48001800

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000878:	f000 f930 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e00a      	b.n	80008a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000892:	f3af 8000 	nop.w
 8000896:	4601      	mov	r1, r0
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	b2ca      	uxtb	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dbf0      	blt.n	8000892 <_read+0x12>
  }

  return len;
 80008b0:	687b      	ldr	r3, [r7, #4]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <_write+0x28>)
 80008d4:	f002 f80a 	bl	80028ec <HAL_UART_Transmit>
  return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <_close>:

int _close(int file)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000910:	605a      	str	r2, [r3, #4]
  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <_isatty>:

int _isatty(int file)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000928:	2301      	movs	r3, #1
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000936:	b480      	push	{r7}
 8000938:	b085      	sub	sp, #20
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f002 fcb0 	bl	80032e4 <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20050000 	.word	0x20050000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000110 	.word	0x20000110
 80009b8:	20000128 	.word	0x20000128

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff ffea 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	; (8000a2c <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f002 fc6f 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a12:	f7ff fd6d 	bl	80004f0 <main>

08000a16 <LoopForever>:

LoopForever:
    b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a18:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a24:	08003e64 	.word	0x08003e64
  ldr r2, =_sbss
 8000a28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a2c:	20000128 	.word	0x20000128

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>

08000a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f943 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 f80e 	bl	8000a64 <HAL_InitTick>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	e001      	b.n	8000a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a54:	f7ff fe66 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a58:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_InitTick+0x6c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d023      	beq.n	8000ac0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_InitTick+0x70>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_InitTick+0x6c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f941 	bl	8000d16 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10f      	bne.n	8000aba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d809      	bhi.n	8000ab4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	f000 f919 	bl	8000cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_InitTick+0x74>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e007      	b.n	8000ac4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e004      	b.n	8000ac4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e001      	b.n	8000ac4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000114 	.word	0x20000114

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000114 	.word	0x20000114

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff ffee 	bl	8000b04 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffde 	bl	8000b04 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca8:	f7ff ff8e 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff47 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff5c 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff8e 	bl	8000c1c <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5d 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffb0 	bl	8000c84 <SysTick_Config>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e166      	b.n	800100e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 8158 	beq.w	8001008 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d005      	beq.n	8000d70 <HAL_GPIO_Init+0x40>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d130      	bne.n	8000dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 0201 	and.w	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d017      	beq.n	8000e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d123      	bne.n	8000e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	6939      	ldr	r1, [r7, #16]
 8000e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0203 	and.w	r2, r3, #3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 80b2 	beq.w	8001008 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea4:	4b61      	ldr	r3, [pc, #388]	; (800102c <HAL_GPIO_Init+0x2fc>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea8:	4a60      	ldr	r2, [pc, #384]	; (800102c <HAL_GPIO_Init+0x2fc>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <HAL_GPIO_Init+0x2fc>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebc:	4a5c      	ldr	r2, [pc, #368]	; (8001030 <HAL_GPIO_Init+0x300>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee6:	d02b      	beq.n	8000f40 <HAL_GPIO_Init+0x210>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a52      	ldr	r2, [pc, #328]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d025      	beq.n	8000f3c <HAL_GPIO_Init+0x20c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a51      	ldr	r2, [pc, #324]	; (8001038 <HAL_GPIO_Init+0x308>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d01f      	beq.n	8000f38 <HAL_GPIO_Init+0x208>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a50      	ldr	r2, [pc, #320]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d019      	beq.n	8000f34 <HAL_GPIO_Init+0x204>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a4f      	ldr	r2, [pc, #316]	; (8001040 <HAL_GPIO_Init+0x310>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d013      	beq.n	8000f30 <HAL_GPIO_Init+0x200>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a4e      	ldr	r2, [pc, #312]	; (8001044 <HAL_GPIO_Init+0x314>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00d      	beq.n	8000f2c <HAL_GPIO_Init+0x1fc>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a4d      	ldr	r2, [pc, #308]	; (8001048 <HAL_GPIO_Init+0x318>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1f8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a4c      	ldr	r2, [pc, #304]	; (800104c <HAL_GPIO_Init+0x31c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d101      	bne.n	8000f24 <HAL_GPIO_Init+0x1f4>
 8000f20:	2307      	movs	r3, #7
 8000f22:	e00e      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f24:	2308      	movs	r3, #8
 8000f26:	e00c      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f28:	2306      	movs	r3, #6
 8000f2a:	e00a      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	e008      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e006      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f34:	2303      	movs	r3, #3
 8000f36:	e004      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e002      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f40:	2300      	movs	r3, #0
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	4093      	lsls	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f52:	4937      	ldr	r1, [pc, #220]	; (8001030 <HAL_GPIO_Init+0x300>)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f60:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f84:	4a32      	ldr	r2, [pc, #200]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fae:	4a28      	ldr	r2, [pc, #160]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_GPIO_Init+0x320>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	f47f ae91 	bne.w	8000d40 <HAL_GPIO_Init+0x10>
  }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000
 8001034:	48000400 	.word	0x48000400
 8001038:	48000800 	.word	0x48000800
 800103c:	48000c00 	.word	0x48000c00
 8001040:	48001000 	.word	0x48001000
 8001044:	48001400 	.word	0x48001400
 8001048:	48001800 	.word	0x48001800
 800104c:	48001c00 	.word	0x48001c00
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001070:	e002      	b.n	8001078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43d9      	mvns	r1, r3
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	400b      	ands	r3, r1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	43db      	mvns	r3, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	4904      	ldr	r1, [pc, #16]	; (80010f4 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]


}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40007000 	.word	0x40007000

080010f8 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_PWR_DisableWakeUpPin+0x28>)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	43db      	mvns	r3, r3
 800110c:	4904      	ldr	r1, [pc, #16]	; (8001120 <HAL_PWR_DisableWakeUpPin+0x28>)
 800110e:	4013      	ands	r3, r2
 8001110:	608b      	str	r3, [r1, #8]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 0307 	bic.w	r3, r3, #7
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001132:	f043 0303 	orr.w	r3, r3, #3
 8001136:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001144:	bf30      	wfi
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40007000 	.word	0x40007000
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_PWREx_GetVoltageRange+0x18>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40007000 	.word	0x40007000

08001174 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001182:	d130      	bne.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800118c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001190:	d038      	beq.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2232      	movs	r2, #50	; 0x32
 80011a8:	fb02 f303 	mul.w	r3, r2, r3
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	0c9b      	lsrs	r3, r3, #18
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b8:	e002      	b.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011cc:	d102      	bne.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f2      	bne.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e0:	d110      	bne.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e00f      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f2:	d007      	beq.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40007000 	.word	0x40007000
 8001218:	20000000 	.word	0x20000000
 800121c:	431bde83 	.word	0x431bde83

08001220 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_PWREx_EnableVddIO2+0x1c>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122e:	6053      	str	r3, [r2, #4]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f000 bc08 	b.w	8001a64 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001254:	4b96      	ldr	r3, [pc, #600]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125e:	4b94      	ldr	r3, [pc, #592]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80e4 	beq.w	800143e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <HAL_RCC_OscConfig+0x4c>
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	f040 808b 	bne.w	800139a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 8087 	bne.w	800139a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_OscConfig+0x64>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e3df      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_RCC_OscConfig+0x7e>
 80012b4:	4b7e      	ldr	r3, [pc, #504]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012bc:	e005      	b.n	80012ca <HAL_RCC_OscConfig+0x8a>
 80012be:	4b7c      	ldr	r3, [pc, #496]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d223      	bcs.n	8001316 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fd92 	bl	8001dfc <RCC_SetFlashLatencyFromMSIRange>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e3c0      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e2:	4b73      	ldr	r3, [pc, #460]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a72      	ldr	r2, [pc, #456]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	496d      	ldr	r1, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001300:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4968      	ldr	r1, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e025      	b.n	8001362 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001316:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a65      	ldr	r2, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4960      	ldr	r1, [pc, #384]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001334:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	495b      	ldr	r1, [pc, #364]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd52 	bl	8001dfc <RCC_SetFlashLatencyFromMSIRange>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e380      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001362:	f000 fc87 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001366:	4602      	mov	r2, r0
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	4950      	ldr	r1, [pc, #320]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <HAL_RCC_OscConfig+0x278>)
 8001380:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001382:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x27c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fb6c 	bl	8000a64 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d052      	beq.n	800143c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	e364      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d032      	beq.n	8001408 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fba9 	bl	8000b04 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b6:	f7ff fba5 	bl	8000b04 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e34d      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a35      	ldr	r2, [pc, #212]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4930      	ldr	r1, [pc, #192]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	492b      	ldr	r1, [pc, #172]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
 8001406:	e01a      	b.n	800143e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001414:	f7ff fb76 	bl	8000b04 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141c:	f7ff fb72 	bl	8000b04 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e31a      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x1dc>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d073      	beq.n	8001532 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b08      	cmp	r3, #8
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x21c>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d10e      	bne.n	8001474 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d10b      	bne.n	8001474 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d063      	beq.n	8001530 <HAL_RCC_OscConfig+0x2f0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d15f      	bne.n	8001530 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e2f7      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x24c>
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e025      	b.n	80014d8 <HAL_RCC_OscConfig+0x298>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001494:	d114      	bne.n	80014c0 <HAL_RCC_OscConfig+0x280>
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 800149c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a02      	ldr	r2, [pc, #8]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e013      	b.n	80014d8 <HAL_RCC_OscConfig+0x298>
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08003da8 	.word	0x08003da8
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000004 	.word	0x20000004
 80014c0:	4ba0      	ldr	r3, [pc, #640]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a9f      	ldr	r2, [pc, #636]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b9d      	ldr	r3, [pc, #628]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a9c      	ldr	r2, [pc, #624]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb10 	bl	8000b04 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb0c 	bl	8000b04 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e2b4      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2a8>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fafc 	bl	8000b04 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff faf8 	bl	8000b04 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e2a0      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d0>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d060      	beq.n	8001600 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x310>
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d119      	bne.n	800157e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d116      	bne.n	800157e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x328>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e27d      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	4973      	ldr	r1, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157c:	e040      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d023      	beq.n	80015ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001586:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fab7 	bl	8000b04 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fab3 	bl	8000b04 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e25b      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	061b      	lsls	r3, r3, #24
 80015c6:	495f      	ldr	r1, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e018      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5c      	ldr	r2, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fa93 	bl	8000b04 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fa8f 	bl	8000b04 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e237      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d03c      	beq.n	8001686 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d01c      	beq.n	800164e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161a:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fa6e 	bl	8000b04 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fa6a 	bl	8000b04 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e212      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ef      	beq.n	800162c <HAL_RCC_OscConfig+0x3ec>
 800164c:	e01b      	b.n	8001686 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001654:	4a3b      	ldr	r2, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff fa51 	bl	8000b04 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fa4d 	bl	8000b04 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1f5      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ef      	bne.n	8001666 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a6 	beq.w	80017e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10d      	bne.n	80016c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6593      	str	r3, [r2, #88]	; 0x58
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016bc:	2301      	movs	r3, #1
 80016be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d118      	bne.n	80016fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d8:	f7ff fa14 	bl	8000b04 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e0:	f7ff fa10 	bl	8000b04 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1b8      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_RCC_OscConfig+0x508>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_RCC_OscConfig+0x4d8>
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001716:	e029      	b.n	800176c <HAL_RCC_OscConfig+0x52c>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d115      	bne.n	800174c <HAL_RCC_OscConfig+0x50c>
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001736:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_RCC_OscConfig+0x504>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x52c>
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	4b9d      	ldr	r3, [pc, #628]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800175c:	4b99      	ldr	r3, [pc, #612]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	4a98      	ldr	r2, [pc, #608]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d016      	beq.n	80017a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff f9c6 	bl	8000b04 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff f9c2 	bl	8000b04 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e168      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001792:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ed      	beq.n	800177c <HAL_RCC_OscConfig+0x53c>
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff f9af 	bl	8000b04 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7ff f9ab 	bl	8000b04 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e151      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c0:	4b80      	ldr	r3, [pc, #512]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ed      	bne.n	80017aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d4:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	4a7a      	ldr	r2, [pc, #488]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01c      	beq.n	800182e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f4:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fa:	4a72      	ldr	r2, [pc, #456]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff f97e 	bl	8000b04 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180c:	f7ff f97a 	bl	8000b04 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e122      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800181e:	4b69      	ldr	r3, [pc, #420]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ef      	beq.n	800180c <HAL_RCC_OscConfig+0x5cc>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001830:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001834:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff f961 	bl	8000b04 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001846:	f7ff f95d 	bl	8000b04 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e105      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001858:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800185a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80f9 	beq.w	8001a62 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b02      	cmp	r3, #2
 8001876:	f040 80cf 	bne.w	8001a18 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800187a:	4b52      	ldr	r3, [pc, #328]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0203 	and.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	429a      	cmp	r2, r3
 800188c:	d12c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	3b01      	subs	r3, #1
 800189a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d123      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d11b      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d113      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	3b01      	subs	r3, #1
 80018ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d109      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d071      	beq.n	80019cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d068      	beq.n	80019c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018fa:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0ac      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001914:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001916:	f7ff f8f5 	bl	8000b04 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff f8f1 	bl	8000b04 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e099      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x788>)
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800194c:	3a01      	subs	r2, #1
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001956:	0212      	lsls	r2, r2, #8
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800195e:	0852      	lsrs	r2, r2, #1
 8001960:	3a01      	subs	r2, #1
 8001962:	0552      	lsls	r2, r2, #21
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800196a:	0852      	lsrs	r2, r2, #1
 800196c:	3a01      	subs	r2, #1
 800196e:	0652      	lsls	r2, r2, #25
 8001970:	4311      	orrs	r1, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001976:	06d2      	lsls	r2, r2, #27
 8001978:	430a      	orrs	r2, r1
 800197a:	4912      	ldr	r1, [pc, #72]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800197c:	4313      	orrs	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001996:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001998:	f7ff f8b4 	bl	8000b04 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f8b0 	bl	8000b04 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e058      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCC_OscConfig+0x784>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019be:	e050      	b.n	8001a62 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e04f      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d144      	bne.n	8001a62 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019f0:	f7ff f888 	bl	8000b04 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff f884 	bl	8000b04 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e02c      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x7b8>
 8001a16:	e024      	b.n	8001a62 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d01f      	beq.n	8001a5e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f86b 	bl	8000b04 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f867 	bl	8000b04 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e00f      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	4905      	ldr	r1, [pc, #20]	; (8001a6c <HAL_RCC_OscConfig+0x82c>)
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x830>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
 8001a5c:	e001      	b.n	8001a62 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	feeefffc 	.word	0xfeeefffc

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0e7      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b75      	ldr	r3, [pc, #468]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d910      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0207 	bic.w	r2, r3, #7
 8001a9e:	4970      	ldr	r1, [pc, #448]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cf      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d010      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d908      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4960      	ldr	r1, [pc, #384]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d04c      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d121      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0a6      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e09a      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e08e      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e086      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4943      	ldr	r1, [pc, #268]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b5c:	f7fe ffd2 	bl	8000b04 <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7fe ffce 	bl	8000b04 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e06e      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d208      	bcs.n	8001bba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	492b      	ldr	r1, [pc, #172]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d210      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 0207 	bic.w	r2, r3, #7
 8001bd0:	4923      	ldr	r1, [pc, #140]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e036      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4918      	ldr	r1, [pc, #96]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4910      	ldr	r1, [pc, #64]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c28:	f000 f824 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	490b      	ldr	r1, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1f4>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1f8>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1fc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe ff09 	bl	8000a64 <HAL_InitTick>
 8001c52:	4603      	mov	r3, r0
 8001c54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c56:	7afb      	ldrb	r3, [r7, #11]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003da8 	.word	0x08003da8
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d121      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d11e      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10d      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	e004      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d134      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d003      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d003      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0xac>
 8001d18:	e005      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1c:	617b      	str	r3, [r7, #20]
      break;
 8001d1e:	e005      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d22:	617b      	str	r3, [r7, #20]
      break;
 8001d24:	e002      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	617b      	str	r3, [r7, #20]
      break;
 8001d2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	3301      	adds	r3, #1
 8001d38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	fb03 f202 	mul.w	r2, r3, r2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	0e5b      	lsrs	r3, r3, #25
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d6c:	69bb      	ldr	r3, [r7, #24]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003dc0 	.word	0x08003dc0
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200

08001d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4904      	ldr	r1, [pc, #16]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08003db8 	.word	0x08003db8

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd4:	f7ff ffda 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0adb      	lsrs	r3, r3, #11
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08003db8 	.word	0x08003db8

08001dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e14:	f7ff f9a0 	bl	8001158 <HAL_PWREx_GetVoltageRange>
 8001e18:	6178      	str	r0, [r7, #20]
 8001e1a:	e014      	b.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e20:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6593      	str	r3, [r2, #88]	; 0x58
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e34:	f7ff f990 	bl	8001158 <HAL_PWREx_GetVoltageRange>
 8001e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4c:	d10b      	bne.n	8001e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d919      	bls.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2ba0      	cmp	r3, #160	; 0xa0
 8001e58:	d902      	bls.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	e013      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e60:	2301      	movs	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	e010      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d902      	bls.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	e00a      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b80      	cmp	r3, #128	; 0x80
 8001e76:	d102      	bne.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e004      	b.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b70      	cmp	r3, #112	; 0x70
 8001e82:	d101      	bne.n	8001e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e84:	2301      	movs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 0207 	bic.w	r2, r3, #7
 8001e90:	4909      	ldr	r1, [pc, #36]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40022000 	.word	0x40022000

08001ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec8:	2300      	movs	r3, #0
 8001eca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d041      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001edc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ee0:	d02a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ee2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ee6:	d824      	bhi.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eec:	d008      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ef2:	d81e      	bhi.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efc:	d010      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001efe:	e018      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f00:	4b86      	ldr	r3, [pc, #536]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a85      	ldr	r2, [pc, #532]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0c:	e015      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 facd 	bl	80024b4 <RCCEx_PLLSAI1_Config>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1e:	e00c      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3320      	adds	r3, #32
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fbb6 	bl	8002698 <RCCEx_PLLSAI2_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f30:	e003      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	74fb      	strb	r3, [r7, #19]
      break;
 8001f36:	e000      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f3a:	7cfb      	ldrb	r3, [r7, #19]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f40:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4e:	4973      	ldr	r1, [pc, #460]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f56:	e001      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d041      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f70:	d02a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f76:	d824      	bhi.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f7c:	d008      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f82:	d81e      	bhi.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d010      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f90:	4b62      	ldr	r3, [pc, #392]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a61      	ldr	r2, [pc, #388]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f9c:	e015      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fa85 	bl	80024b4 <RCCEx_PLLSAI1_Config>
 8001faa:	4603      	mov	r3, r0
 8001fac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fae:	e00c      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3320      	adds	r3, #32
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fb6e 	bl	8002698 <RCCEx_PLLSAI2_Config>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc0:	e003      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc6:	e000      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fd0:	4b52      	ldr	r3, [pc, #328]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fde:	494f      	ldr	r1, [pc, #316]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fe6:	e001      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a0 	beq.w	800213a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	4a40      	ldr	r2, [pc, #256]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201e:	6593      	str	r3, [r2, #88]	; 0x58
 8002020:	4b3e      	ldr	r3, [pc, #248]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202c:	2301      	movs	r3, #1
 800202e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800203c:	f7fe fd62 	bl	8000b04 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002042:	e009      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002044:	f7fe fd5e 	bl	8000b04 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d902      	bls.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	74fb      	strb	r3, [r7, #19]
        break;
 8002056:	e005      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ef      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d15c      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002074:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01f      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	d019      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7fe fd1d 	bl	8000b04 <HAL_GetTick>
 80020ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020cc:	e00b      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7fe fd19 	bl	8000b04 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d902      	bls.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	74fb      	strb	r3, [r7, #19]
            break;
 80020e4:	e006      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ec      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	4904      	ldr	r1, [pc, #16]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002112:	e009      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
 8002118:	e006      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	7c7b      	ldrb	r3, [r7, #17]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4ba6      	ldr	r3, [pc, #664]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4aa5      	ldr	r2, [pc, #660]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002146:	4ba0      	ldr	r3, [pc, #640]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f023 0203 	bic.w	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	499c      	ldr	r1, [pc, #624]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002168:	4b97      	ldr	r3, [pc, #604]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f023 020c 	bic.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	4994      	ldr	r1, [pc, #592]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800218a:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	498b      	ldr	r1, [pc, #556]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021ac:	4b86      	ldr	r3, [pc, #536]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4983      	ldr	r1, [pc, #524]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ce:	4b7e      	ldr	r3, [pc, #504]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021dc:	497a      	ldr	r1, [pc, #488]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f0:	4b75      	ldr	r3, [pc, #468]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4972      	ldr	r1, [pc, #456]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002212:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002220:	4969      	ldr	r1, [pc, #420]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002234:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002242:	4961      	ldr	r1, [pc, #388]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002256:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002264:	4958      	ldr	r1, [pc, #352]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	4950      	ldr	r1, [pc, #320]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4947      	ldr	r1, [pc, #284]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022bc:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	493f      	ldr	r1, [pc, #252]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d028      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022de:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4936      	ldr	r1, [pc, #216]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022fc:	d106      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002308:	60d3      	str	r3, [r2, #12]
 800230a:	e011      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002314:	d10c      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	2101      	movs	r1, #1
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f8c9 	bl	80024b4 <RCCEx_PLLSAI1_Config>
 8002322:	4603      	mov	r3, r0
 8002324:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d028      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234a:	491f      	ldr	r1, [pc, #124]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235a:	d106      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002366:	60d3      	str	r3, [r2, #12]
 8002368:	e011      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002372:	d10c      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f89a 	bl	80024b4 <RCCEx_PLLSAI1_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d02a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b8:	d108      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ba:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4a02      	ldr	r2, [pc, #8]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c4:	60d3      	str	r3, [r2, #12]
 80023c6:	e013      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80023c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	2101      	movs	r1, #1
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f869 	bl	80024b4 <RCCEx_PLLSAI1_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02f      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800240a:	4929      	ldr	r1, [pc, #164]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800241a:	d10d      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f846 	bl	80024b4 <RCCEx_PLLSAI1_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	74bb      	strb	r3, [r7, #18]
 8002436:	e011      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800243c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3320      	adds	r3, #32
 8002446:	2102      	movs	r1, #2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f925 	bl	8002698 <RCCEx_PLLSAI2_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002478:	490d      	ldr	r1, [pc, #52]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000

080024b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d018      	beq.n	8002500 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ce:	4b71      	ldr	r3, [pc, #452]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0203 	and.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d10d      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
       ||
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024e6:	4b6b      	ldr	r3, [pc, #428]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
       ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d047      	beq.n	800258a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e044      	b.n	800258a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d018      	beq.n	800253a <RCCEx_PLLSAI1_Config+0x86>
 8002508:	2b03      	cmp	r3, #3
 800250a:	d825      	bhi.n	8002558 <RCCEx_PLLSAI1_Config+0xa4>
 800250c:	2b01      	cmp	r3, #1
 800250e:	d002      	beq.n	8002516 <RCCEx_PLLSAI1_Config+0x62>
 8002510:	2b02      	cmp	r3, #2
 8002512:	d009      	beq.n	8002528 <RCCEx_PLLSAI1_Config+0x74>
 8002514:	e020      	b.n	8002558 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11d      	bne.n	800255e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002526:	e01a      	b.n	800255e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002528:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d116      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002538:	e013      	b.n	8002562 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800253a:	4b56      	ldr	r3, [pc, #344]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002556:	e006      	b.n	8002566 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e004      	b.n	8002568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255e:	bf00      	nop
 8002560:	e002      	b.n	8002568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002566:	bf00      	nop
    }

    if(status == HAL_OK)
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	430b      	orrs	r3, r1
 8002584:	4943      	ldr	r1, [pc, #268]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002586:	4313      	orrs	r3, r2
 8002588:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d17c      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3f      	ldr	r2, [pc, #252]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800259a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259c:	f7fe fab2 	bl	8000b04 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a2:	e009      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a4:	f7fe faae 	bl	8000b04 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	73fb      	strb	r3, [r7, #15]
        break;
 80025b6:	e005      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ef      	bne.n	80025a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d15f      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d110      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	0211      	lsls	r1, r2, #8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68d2      	ldr	r2, [r2, #12]
 80025e6:	06d2      	lsls	r2, r2, #27
 80025e8:	430a      	orrs	r2, r1
 80025ea:	492a      	ldr	r1, [pc, #168]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	610b      	str	r3, [r1, #16]
 80025f0:	e027      	b.n	8002642 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d112      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f8:	4b26      	ldr	r3, [pc, #152]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002600:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	0211      	lsls	r1, r2, #8
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6912      	ldr	r2, [r2, #16]
 800260e:	0852      	lsrs	r2, r2, #1
 8002610:	3a01      	subs	r2, #1
 8002612:	0552      	lsls	r2, r2, #21
 8002614:	430a      	orrs	r2, r1
 8002616:	491f      	ldr	r1, [pc, #124]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	610b      	str	r3, [r1, #16]
 800261c:	e011      	b.n	8002642 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002626:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6892      	ldr	r2, [r2, #8]
 800262e:	0211      	lsls	r1, r2, #8
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6952      	ldr	r2, [r2, #20]
 8002634:	0852      	lsrs	r2, r2, #1
 8002636:	3a01      	subs	r2, #1
 8002638:	0652      	lsls	r2, r2, #25
 800263a:	430a      	orrs	r2, r1
 800263c:	4915      	ldr	r1, [pc, #84]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800264c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe fa59 	bl	8000b04 <HAL_GetTick>
 8002652:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002654:	e009      	b.n	800266a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002656:	f7fe fa55 	bl	8000b04 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d902      	bls.n	800266a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	73fb      	strb	r3, [r7, #15]
          break;
 8002668:	e005      	b.n	8002676 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0ef      	beq.n	8002656 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000

08002698 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a6:	4b69      	ldr	r3, [pc, #420]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026b2:	4b66      	ldr	r3, [pc, #408]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10d      	bne.n	80026de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
       ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026ca:	4b60      	ldr	r3, [pc, #384]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
       ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d047      	beq.n	800276e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e044      	b.n	800276e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d018      	beq.n	800271e <RCCEx_PLLSAI2_Config+0x86>
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d825      	bhi.n	800273c <RCCEx_PLLSAI2_Config+0xa4>
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d002      	beq.n	80026fa <RCCEx_PLLSAI2_Config+0x62>
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d009      	beq.n	800270c <RCCEx_PLLSAI2_Config+0x74>
 80026f8:	e020      	b.n	800273c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026fa:	4b54      	ldr	r3, [pc, #336]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11d      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e01a      	b.n	8002742 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800270c:	4b4f      	ldr	r3, [pc, #316]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e013      	b.n	8002746 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271e:	4b4b      	ldr	r3, [pc, #300]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800272a:	4b48      	ldr	r3, [pc, #288]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800273a:	e006      	b.n	800274a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e004      	b.n	800274c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800274a:	bf00      	nop
    }

    if(status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002752:	4b3e      	ldr	r3, [pc, #248]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	430b      	orrs	r3, r1
 8002768:	4938      	ldr	r1, [pc, #224]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d166      	bne.n	8002842 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a34      	ldr	r2, [pc, #208]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 800277a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7fe f9c0 	bl	8000b04 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002788:	f7fe f9bc 	bl	8000b04 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
        break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ef      	bne.n	8002788 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d149      	bne.n	8002842 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d110      	bne.n	80027d6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	0211      	lsls	r1, r2, #8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	06d2      	lsls	r2, r2, #27
 80027cc:	430a      	orrs	r2, r1
 80027ce:	491f      	ldr	r1, [pc, #124]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	614b      	str	r3, [r1, #20]
 80027d4:	e011      	b.n	80027fa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	0211      	lsls	r1, r2, #8
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6912      	ldr	r2, [r2, #16]
 80027ec:	0852      	lsrs	r2, r2, #1
 80027ee:	3a01      	subs	r2, #1
 80027f0:	0652      	lsls	r2, r2, #25
 80027f2:	430a      	orrs	r2, r1
 80027f4:	4915      	ldr	r1, [pc, #84]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a13      	ldr	r2, [pc, #76]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe f97d 	bl	8000b04 <HAL_GetTick>
 800280a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800280c:	e009      	b.n	8002822 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800280e:	f7fe f979 	bl	8000b04 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d902      	bls.n	8002822 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	73fb      	strb	r3, [r7, #15]
          break;
 8002820:	e005      	b.n	800282e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ef      	beq.n	800280e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <RCCEx_PLLSAI2_Config+0x1b4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000

08002850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e040      	b.n	80028e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fd ff7a 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8c0 	bl	8002a14 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fb6c 	bl	8002f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fbf3 	bl	80030c8 <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002900:	2b20      	cmp	r3, #32
 8002902:	f040 8082 	bne.w	8002a0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_UART_Transmit+0x26>
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07a      	b.n	8002a0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_UART_Transmit+0x38>
 8002920:	2302      	movs	r3, #2
 8002922:	e073      	b.n	8002a0c <HAL_UART_Transmit+0x120>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2221      	movs	r2, #33	; 0x21
 8002938:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800293a:	f7fe f8e3 	bl	8000b04 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	88fa      	ldrh	r2, [r7, #6]
 800294c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d108      	bne.n	800296c <HAL_UART_Transmit+0x80>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e003      	b.n	8002974 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800297c:	e02d      	b.n	80029da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fbe6 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e039      	b.n	8002a0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10b      	bne.n	80029b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029aa:	b292      	uxth	r2, r2
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	3302      	adds	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e008      	b.n	80029c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b292      	uxth	r2, r2
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1cb      	bne.n	800297e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fbb2 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e005      	b.n	8002a0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b08a      	sub	sp, #40	; 0x28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4ba4      	ldr	r3, [pc, #656]	; (8002cd4 <UART_SetConfig+0x2c0>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a99      	ldr	r2, [pc, #612]	; (8002cd8 <UART_SetConfig+0x2c4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	430a      	orrs	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a90      	ldr	r2, [pc, #576]	; (8002cdc <UART_SetConfig+0x2c8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d126      	bne.n	8002aec <UART_SetConfig+0xd8>
 8002a9e:	4b90      	ldr	r3, [pc, #576]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d81b      	bhi.n	8002ae4 <UART_SetConfig+0xd0>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <UART_SetConfig+0xa0>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002ad5 	.word	0x08002ad5
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002add 	.word	0x08002add
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aca:	e116      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002acc:	2302      	movs	r3, #2
 8002ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ad2:	e112      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ada:	e10e      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002adc:	2308      	movs	r3, #8
 8002ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ae2:	e10a      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aea:	e106      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <UART_SetConfig+0x2d0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d138      	bne.n	8002b68 <UART_SetConfig+0x154>
 8002af6:	4b7a      	ldr	r3, [pc, #488]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d82d      	bhi.n	8002b60 <UART_SetConfig+0x14c>
 8002b04:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <UART_SetConfig+0xf8>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b41 	.word	0x08002b41
 8002b10:	08002b61 	.word	0x08002b61
 8002b14:	08002b61 	.word	0x08002b61
 8002b18:	08002b61 	.word	0x08002b61
 8002b1c:	08002b51 	.word	0x08002b51
 8002b20:	08002b61 	.word	0x08002b61
 8002b24:	08002b61 	.word	0x08002b61
 8002b28:	08002b61 	.word	0x08002b61
 8002b2c:	08002b49 	.word	0x08002b49
 8002b30:	08002b61 	.word	0x08002b61
 8002b34:	08002b61 	.word	0x08002b61
 8002b38:	08002b61 	.word	0x08002b61
 8002b3c:	08002b59 	.word	0x08002b59
 8002b40:	2300      	movs	r3, #0
 8002b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b46:	e0d8      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b4e:	e0d4      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002b50:	2304      	movs	r3, #4
 8002b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b56:	e0d0      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002b58:	2308      	movs	r3, #8
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b5e:	e0cc      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002b60:	2310      	movs	r3, #16
 8002b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b66:	e0c8      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <UART_SetConfig+0x2d4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d125      	bne.n	8002bbe <UART_SetConfig+0x1aa>
 8002b72:	4b5b      	ldr	r3, [pc, #364]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b7c:	2b30      	cmp	r3, #48	; 0x30
 8002b7e:	d016      	beq.n	8002bae <UART_SetConfig+0x19a>
 8002b80:	2b30      	cmp	r3, #48	; 0x30
 8002b82:	d818      	bhi.n	8002bb6 <UART_SetConfig+0x1a2>
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d00a      	beq.n	8002b9e <UART_SetConfig+0x18a>
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d814      	bhi.n	8002bb6 <UART_SetConfig+0x1a2>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <UART_SetConfig+0x182>
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d008      	beq.n	8002ba6 <UART_SetConfig+0x192>
 8002b94:	e00f      	b.n	8002bb6 <UART_SetConfig+0x1a2>
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b9c:	e0ad      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ba4:	e0a9      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bac:	e0a5      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002bae:	2308      	movs	r3, #8
 8002bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bb4:	e0a1      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002bb6:	2310      	movs	r3, #16
 8002bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bbc:	e09d      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a4a      	ldr	r2, [pc, #296]	; (8002cec <UART_SetConfig+0x2d8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d125      	bne.n	8002c14 <UART_SetConfig+0x200>
 8002bc8:	4b45      	ldr	r3, [pc, #276]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002bd4:	d016      	beq.n	8002c04 <UART_SetConfig+0x1f0>
 8002bd6:	2bc0      	cmp	r3, #192	; 0xc0
 8002bd8:	d818      	bhi.n	8002c0c <UART_SetConfig+0x1f8>
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d00a      	beq.n	8002bf4 <UART_SetConfig+0x1e0>
 8002bde:	2b80      	cmp	r3, #128	; 0x80
 8002be0:	d814      	bhi.n	8002c0c <UART_SetConfig+0x1f8>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <UART_SetConfig+0x1d8>
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d008      	beq.n	8002bfc <UART_SetConfig+0x1e8>
 8002bea:	e00f      	b.n	8002c0c <UART_SetConfig+0x1f8>
 8002bec:	2300      	movs	r3, #0
 8002bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bf2:	e082      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bfa:	e07e      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c02:	e07a      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c04:	2308      	movs	r3, #8
 8002c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0a:	e076      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c12:	e072      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a35      	ldr	r2, [pc, #212]	; (8002cf0 <UART_SetConfig+0x2dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12a      	bne.n	8002c74 <UART_SetConfig+0x260>
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c2c:	d01a      	beq.n	8002c64 <UART_SetConfig+0x250>
 8002c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c32:	d81b      	bhi.n	8002c6c <UART_SetConfig+0x258>
 8002c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c38:	d00c      	beq.n	8002c54 <UART_SetConfig+0x240>
 8002c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3e:	d815      	bhi.n	8002c6c <UART_SetConfig+0x258>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <UART_SetConfig+0x238>
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c48:	d008      	beq.n	8002c5c <UART_SetConfig+0x248>
 8002c4a:	e00f      	b.n	8002c6c <UART_SetConfig+0x258>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c52:	e052      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c54:	2302      	movs	r3, #2
 8002c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c5a:	e04e      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c62:	e04a      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c64:	2308      	movs	r3, #8
 8002c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6a:	e046      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c72:	e042      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <UART_SetConfig+0x2c4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d13a      	bne.n	8002cf4 <UART_SetConfig+0x2e0>
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <UART_SetConfig+0x2cc>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c8c:	d01a      	beq.n	8002cc4 <UART_SetConfig+0x2b0>
 8002c8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c92:	d81b      	bhi.n	8002ccc <UART_SetConfig+0x2b8>
 8002c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c98:	d00c      	beq.n	8002cb4 <UART_SetConfig+0x2a0>
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d815      	bhi.n	8002ccc <UART_SetConfig+0x2b8>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <UART_SetConfig+0x298>
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	d008      	beq.n	8002cbc <UART_SetConfig+0x2a8>
 8002caa:	e00f      	b.n	8002ccc <UART_SetConfig+0x2b8>
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb2:	e022      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cba:	e01e      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc2:	e01a      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cca:	e016      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd2:	e012      	b.n	8002cfa <UART_SetConfig+0x2e6>
 8002cd4:	efff69f3 	.word	0xefff69f3
 8002cd8:	40008000 	.word	0x40008000
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40004400 	.word	0x40004400
 8002ce8:	40004800 	.word	0x40004800
 8002cec:	40004c00 	.word	0x40004c00
 8002cf0:	40005000 	.word	0x40005000
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a9f      	ldr	r2, [pc, #636]	; (8002f7c <UART_SetConfig+0x568>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d17a      	bne.n	8002dfa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d824      	bhi.n	8002d56 <UART_SetConfig+0x342>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <UART_SetConfig+0x300>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d39 	.word	0x08002d39
 8002d18:	08002d57 	.word	0x08002d57
 8002d1c:	08002d41 	.word	0x08002d41
 8002d20:	08002d57 	.word	0x08002d57
 8002d24:	08002d47 	.word	0x08002d47
 8002d28:	08002d57 	.word	0x08002d57
 8002d2c:	08002d57 	.word	0x08002d57
 8002d30:	08002d57 	.word	0x08002d57
 8002d34:	08002d4f 	.word	0x08002d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d38:	f7ff f834 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	61f8      	str	r0, [r7, #28]
        break;
 8002d3e:	e010      	b.n	8002d62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <UART_SetConfig+0x56c>)
 8002d42:	61fb      	str	r3, [r7, #28]
        break;
 8002d44:	e00d      	b.n	8002d62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d46:	f7fe ff95 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002d4a:	61f8      	str	r0, [r7, #28]
        break;
 8002d4c:	e009      	b.n	8002d62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d52:	61fb      	str	r3, [r7, #28]
        break;
 8002d54:	e005      	b.n	8002d62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80fb 	beq.w	8002f60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d305      	bcc.n	8002d86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d903      	bls.n	8002d8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d8c:	e0e8      	b.n	8002f60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2200      	movs	r2, #0
 8002d92:	461c      	mov	r4, r3
 8002d94:	4615      	mov	r5, r2
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	022b      	lsls	r3, r5, #8
 8002da0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002da4:	0222      	lsls	r2, r4, #8
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	6849      	ldr	r1, [r1, #4]
 8002daa:	0849      	lsrs	r1, r1, #1
 8002dac:	2000      	movs	r0, #0
 8002dae:	4688      	mov	r8, r1
 8002db0:	4681      	mov	r9, r0
 8002db2:	eb12 0a08 	adds.w	sl, r2, r8
 8002db6:	eb43 0b09 	adc.w	fp, r3, r9
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dc8:	4650      	mov	r0, sl
 8002dca:	4659      	mov	r1, fp
 8002dcc:	f7fd fa0e 	bl	80001ec <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dde:	d308      	bcc.n	8002df2 <UART_SetConfig+0x3de>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de6:	d204      	bcs.n	8002df2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e0b6      	b.n	8002f60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002df8:	e0b2      	b.n	8002f60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e02:	d15e      	bne.n	8002ec2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d828      	bhi.n	8002e5e <UART_SetConfig+0x44a>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <UART_SetConfig+0x400>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e49 	.word	0x08002e49
 8002e20:	08002e5f 	.word	0x08002e5f
 8002e24:	08002e4f 	.word	0x08002e4f
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e5f 	.word	0x08002e5f
 8002e30:	08002e5f 	.word	0x08002e5f
 8002e34:	08002e57 	.word	0x08002e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7fe ffb4 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	61f8      	str	r0, [r7, #28]
        break;
 8002e3e:	e014      	b.n	8002e6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e40:	f7fe ffc6 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002e44:	61f8      	str	r0, [r7, #28]
        break;
 8002e46:	e010      	b.n	8002e6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e48:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <UART_SetConfig+0x56c>)
 8002e4a:	61fb      	str	r3, [r7, #28]
        break;
 8002e4c:	e00d      	b.n	8002e6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7fe ff11 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002e52:	61f8      	str	r0, [r7, #28]
        break;
 8002e54:	e009      	b.n	8002e6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5a:	61fb      	str	r3, [r7, #28]
        break;
 8002e5c:	e005      	b.n	8002e6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d077      	beq.n	8002f60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005a      	lsls	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d916      	bls.n	8002eba <UART_SetConfig+0x4a6>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e92:	d212      	bcs.n	8002eba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f023 030f 	bic.w	r3, r3, #15
 8002e9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	8afb      	ldrh	r3, [r7, #22]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	8afa      	ldrh	r2, [r7, #22]
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	e052      	b.n	8002f60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ec0:	e04e      	b.n	8002f60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d827      	bhi.n	8002f1a <UART_SetConfig+0x506>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <UART_SetConfig+0x4bc>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ef5 	.word	0x08002ef5
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002f05 	.word	0x08002f05
 8002edc:	08002f1b 	.word	0x08002f1b
 8002ee0:	08002f0b 	.word	0x08002f0b
 8002ee4:	08002f1b 	.word	0x08002f1b
 8002ee8:	08002f1b 	.word	0x08002f1b
 8002eec:	08002f1b 	.word	0x08002f1b
 8002ef0:	08002f13 	.word	0x08002f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef4:	f7fe ff56 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 8002ef8:	61f8      	str	r0, [r7, #28]
        break;
 8002efa:	e014      	b.n	8002f26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7fe ff68 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002f00:	61f8      	str	r0, [r7, #28]
        break;
 8002f02:	e010      	b.n	8002f26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <UART_SetConfig+0x56c>)
 8002f06:	61fb      	str	r3, [r7, #28]
        break;
 8002f08:	e00d      	b.n	8002f26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0a:	f7fe feb3 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8002f0e:	61f8      	str	r0, [r7, #28]
        break;
 8002f10:	e009      	b.n	8002f26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	61fb      	str	r3, [r7, #28]
        break;
 8002f18:	e005      	b.n	8002f26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f24:	bf00      	nop
    }

    if (pclk != 0U)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d019      	beq.n	8002f60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	085a      	lsrs	r2, r3, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	441a      	add	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	d909      	bls.n	8002f5a <UART_SetConfig+0x546>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d205      	bcs.n	8002f5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	e002      	b.n	8002f60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40008000 	.word	0x40008000
 8002f80:	00f42400 	.word	0x00f42400

08002f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01a      	beq.n	800309a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003082:	d10a      	bne.n	800309a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  }
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030d8:	f7fd fd14 	bl	8000b04 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d10e      	bne.n	800310a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f82d 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e023      	b.n	8003152 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d10e      	bne.n	8003136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f817 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e00d      	b.n	8003152 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b09c      	sub	sp, #112	; 0x70
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	e0a5      	b.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003172:	f000 80a1 	beq.w	80032b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fd fcc5 	bl	8000b04 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <UART_WaitOnFlagUntilTimeout+0x32>
 8003186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003188:	2b00      	cmp	r3, #0
 800318a:	d13e      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031a0:	667b      	str	r3, [r7, #100]	; 0x64
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3308      	adds	r3, #8
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	663b      	str	r3, [r7, #96]	; 0x60
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3308      	adds	r3, #8
 80031dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031de:	64ba      	str	r2, [r7, #72]	; 0x48
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e067      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d04f      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003226:	d147      	bne.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003230:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
 8003252:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e6      	bne.n	8003232 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3308      	adds	r3, #8
 800326a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	613b      	str	r3, [r7, #16]
   return(result);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	66bb      	str	r3, [r7, #104]	; 0x68
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3308      	adds	r3, #8
 8003282:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003284:	623a      	str	r2, [r7, #32]
 8003286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	69f9      	ldr	r1, [r7, #28]
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	61bb      	str	r3, [r7, #24]
   return(result);
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e010      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f43f af4a 	beq.w	800316c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3770      	adds	r7, #112	; 0x70
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <__errno>:
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <__errno+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	2000000c 	.word	0x2000000c

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4d0d      	ldr	r5, [pc, #52]	; (8003328 <__libc_init_array+0x38>)
 80032f4:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	2600      	movs	r6, #0
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	4d0b      	ldr	r5, [pc, #44]	; (8003330 <__libc_init_array+0x40>)
 8003302:	4c0c      	ldr	r4, [pc, #48]	; (8003334 <__libc_init_array+0x44>)
 8003304:	f000 fd1e 	bl	8003d44 <_init>
 8003308:	1b64      	subs	r4, r4, r5
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	2600      	movs	r6, #0
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f855 3b04 	ldr.w	r3, [r5], #4
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08003e5c 	.word	0x08003e5c
 800332c:	08003e5c 	.word	0x08003e5c
 8003330:	08003e5c 	.word	0x08003e5c
 8003334:	08003e60 	.word	0x08003e60

08003338 <memset>:
 8003338:	4402      	add	r2, r0
 800333a:	4603      	mov	r3, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <_puts_r>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	460e      	mov	r6, r1
 800334c:	4605      	mov	r5, r0
 800334e:	b118      	cbz	r0, 8003358 <_puts_r+0x10>
 8003350:	6983      	ldr	r3, [r0, #24]
 8003352:	b90b      	cbnz	r3, 8003358 <_puts_r+0x10>
 8003354:	f000 fa48 	bl	80037e8 <__sinit>
 8003358:	69ab      	ldr	r3, [r5, #24]
 800335a:	68ac      	ldr	r4, [r5, #8]
 800335c:	b913      	cbnz	r3, 8003364 <_puts_r+0x1c>
 800335e:	4628      	mov	r0, r5
 8003360:	f000 fa42 	bl	80037e8 <__sinit>
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <_puts_r+0xd0>)
 8003366:	429c      	cmp	r4, r3
 8003368:	d120      	bne.n	80033ac <_puts_r+0x64>
 800336a:	686c      	ldr	r4, [r5, #4]
 800336c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800336e:	07db      	lsls	r3, r3, #31
 8003370:	d405      	bmi.n	800337e <_puts_r+0x36>
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	0598      	lsls	r0, r3, #22
 8003376:	d402      	bmi.n	800337e <_puts_r+0x36>
 8003378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800337a:	f000 fad3 	bl	8003924 <__retarget_lock_acquire_recursive>
 800337e:	89a3      	ldrh	r3, [r4, #12]
 8003380:	0719      	lsls	r1, r3, #28
 8003382:	d51d      	bpl.n	80033c0 <_puts_r+0x78>
 8003384:	6923      	ldr	r3, [r4, #16]
 8003386:	b1db      	cbz	r3, 80033c0 <_puts_r+0x78>
 8003388:	3e01      	subs	r6, #1
 800338a:	68a3      	ldr	r3, [r4, #8]
 800338c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003390:	3b01      	subs	r3, #1
 8003392:	60a3      	str	r3, [r4, #8]
 8003394:	bb39      	cbnz	r1, 80033e6 <_puts_r+0x9e>
 8003396:	2b00      	cmp	r3, #0
 8003398:	da38      	bge.n	800340c <_puts_r+0xc4>
 800339a:	4622      	mov	r2, r4
 800339c:	210a      	movs	r1, #10
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f848 	bl	8003434 <__swbuf_r>
 80033a4:	3001      	adds	r0, #1
 80033a6:	d011      	beq.n	80033cc <_puts_r+0x84>
 80033a8:	250a      	movs	r5, #10
 80033aa:	e011      	b.n	80033d0 <_puts_r+0x88>
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <_puts_r+0xd4>)
 80033ae:	429c      	cmp	r4, r3
 80033b0:	d101      	bne.n	80033b6 <_puts_r+0x6e>
 80033b2:	68ac      	ldr	r4, [r5, #8]
 80033b4:	e7da      	b.n	800336c <_puts_r+0x24>
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <_puts_r+0xd8>)
 80033b8:	429c      	cmp	r4, r3
 80033ba:	bf08      	it	eq
 80033bc:	68ec      	ldreq	r4, [r5, #12]
 80033be:	e7d5      	b.n	800336c <_puts_r+0x24>
 80033c0:	4621      	mov	r1, r4
 80033c2:	4628      	mov	r0, r5
 80033c4:	f000 f888 	bl	80034d8 <__swsetup_r>
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d0dd      	beq.n	8003388 <_puts_r+0x40>
 80033cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80033d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033d2:	07da      	lsls	r2, r3, #31
 80033d4:	d405      	bmi.n	80033e2 <_puts_r+0x9a>
 80033d6:	89a3      	ldrh	r3, [r4, #12]
 80033d8:	059b      	lsls	r3, r3, #22
 80033da:	d402      	bmi.n	80033e2 <_puts_r+0x9a>
 80033dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033de:	f000 faa2 	bl	8003926 <__retarget_lock_release_recursive>
 80033e2:	4628      	mov	r0, r5
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	da04      	bge.n	80033f4 <_puts_r+0xac>
 80033ea:	69a2      	ldr	r2, [r4, #24]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	dc06      	bgt.n	80033fe <_puts_r+0xb6>
 80033f0:	290a      	cmp	r1, #10
 80033f2:	d004      	beq.n	80033fe <_puts_r+0xb6>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	6022      	str	r2, [r4, #0]
 80033fa:	7019      	strb	r1, [r3, #0]
 80033fc:	e7c5      	b.n	800338a <_puts_r+0x42>
 80033fe:	4622      	mov	r2, r4
 8003400:	4628      	mov	r0, r5
 8003402:	f000 f817 	bl	8003434 <__swbuf_r>
 8003406:	3001      	adds	r0, #1
 8003408:	d1bf      	bne.n	800338a <_puts_r+0x42>
 800340a:	e7df      	b.n	80033cc <_puts_r+0x84>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	250a      	movs	r5, #10
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	6022      	str	r2, [r4, #0]
 8003414:	701d      	strb	r5, [r3, #0]
 8003416:	e7db      	b.n	80033d0 <_puts_r+0x88>
 8003418:	08003e14 	.word	0x08003e14
 800341c:	08003e34 	.word	0x08003e34
 8003420:	08003df4 	.word	0x08003df4

08003424 <puts>:
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <puts+0xc>)
 8003426:	4601      	mov	r1, r0
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	f7ff bf8d 	b.w	8003348 <_puts_r>
 800342e:	bf00      	nop
 8003430:	2000000c 	.word	0x2000000c

08003434 <__swbuf_r>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	460e      	mov	r6, r1
 8003438:	4614      	mov	r4, r2
 800343a:	4605      	mov	r5, r0
 800343c:	b118      	cbz	r0, 8003446 <__swbuf_r+0x12>
 800343e:	6983      	ldr	r3, [r0, #24]
 8003440:	b90b      	cbnz	r3, 8003446 <__swbuf_r+0x12>
 8003442:	f000 f9d1 	bl	80037e8 <__sinit>
 8003446:	4b21      	ldr	r3, [pc, #132]	; (80034cc <__swbuf_r+0x98>)
 8003448:	429c      	cmp	r4, r3
 800344a:	d12b      	bne.n	80034a4 <__swbuf_r+0x70>
 800344c:	686c      	ldr	r4, [r5, #4]
 800344e:	69a3      	ldr	r3, [r4, #24]
 8003450:	60a3      	str	r3, [r4, #8]
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	071a      	lsls	r2, r3, #28
 8003456:	d52f      	bpl.n	80034b8 <__swbuf_r+0x84>
 8003458:	6923      	ldr	r3, [r4, #16]
 800345a:	b36b      	cbz	r3, 80034b8 <__swbuf_r+0x84>
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	1ac0      	subs	r0, r0, r3
 8003462:	6963      	ldr	r3, [r4, #20]
 8003464:	b2f6      	uxtb	r6, r6
 8003466:	4283      	cmp	r3, r0
 8003468:	4637      	mov	r7, r6
 800346a:	dc04      	bgt.n	8003476 <__swbuf_r+0x42>
 800346c:	4621      	mov	r1, r4
 800346e:	4628      	mov	r0, r5
 8003470:	f000 f926 	bl	80036c0 <_fflush_r>
 8003474:	bb30      	cbnz	r0, 80034c4 <__swbuf_r+0x90>
 8003476:	68a3      	ldr	r3, [r4, #8]
 8003478:	3b01      	subs	r3, #1
 800347a:	60a3      	str	r3, [r4, #8]
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	6022      	str	r2, [r4, #0]
 8003482:	701e      	strb	r6, [r3, #0]
 8003484:	6963      	ldr	r3, [r4, #20]
 8003486:	3001      	adds	r0, #1
 8003488:	4283      	cmp	r3, r0
 800348a:	d004      	beq.n	8003496 <__swbuf_r+0x62>
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	07db      	lsls	r3, r3, #31
 8003490:	d506      	bpl.n	80034a0 <__swbuf_r+0x6c>
 8003492:	2e0a      	cmp	r6, #10
 8003494:	d104      	bne.n	80034a0 <__swbuf_r+0x6c>
 8003496:	4621      	mov	r1, r4
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f911 	bl	80036c0 <_fflush_r>
 800349e:	b988      	cbnz	r0, 80034c4 <__swbuf_r+0x90>
 80034a0:	4638      	mov	r0, r7
 80034a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <__swbuf_r+0x9c>)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	d101      	bne.n	80034ae <__swbuf_r+0x7a>
 80034aa:	68ac      	ldr	r4, [r5, #8]
 80034ac:	e7cf      	b.n	800344e <__swbuf_r+0x1a>
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <__swbuf_r+0xa0>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	bf08      	it	eq
 80034b4:	68ec      	ldreq	r4, [r5, #12]
 80034b6:	e7ca      	b.n	800344e <__swbuf_r+0x1a>
 80034b8:	4621      	mov	r1, r4
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 f80c 	bl	80034d8 <__swsetup_r>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d0cb      	beq.n	800345c <__swbuf_r+0x28>
 80034c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80034c8:	e7ea      	b.n	80034a0 <__swbuf_r+0x6c>
 80034ca:	bf00      	nop
 80034cc:	08003e14 	.word	0x08003e14
 80034d0:	08003e34 	.word	0x08003e34
 80034d4:	08003df4 	.word	0x08003df4

080034d8 <__swsetup_r>:
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <__swsetup_r+0xcc>)
 80034da:	b570      	push	{r4, r5, r6, lr}
 80034dc:	681d      	ldr	r5, [r3, #0]
 80034de:	4606      	mov	r6, r0
 80034e0:	460c      	mov	r4, r1
 80034e2:	b125      	cbz	r5, 80034ee <__swsetup_r+0x16>
 80034e4:	69ab      	ldr	r3, [r5, #24]
 80034e6:	b913      	cbnz	r3, 80034ee <__swsetup_r+0x16>
 80034e8:	4628      	mov	r0, r5
 80034ea:	f000 f97d 	bl	80037e8 <__sinit>
 80034ee:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <__swsetup_r+0xd0>)
 80034f0:	429c      	cmp	r4, r3
 80034f2:	d10f      	bne.n	8003514 <__swsetup_r+0x3c>
 80034f4:	686c      	ldr	r4, [r5, #4]
 80034f6:	89a3      	ldrh	r3, [r4, #12]
 80034f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034fc:	0719      	lsls	r1, r3, #28
 80034fe:	d42c      	bmi.n	800355a <__swsetup_r+0x82>
 8003500:	06dd      	lsls	r5, r3, #27
 8003502:	d411      	bmi.n	8003528 <__swsetup_r+0x50>
 8003504:	2309      	movs	r3, #9
 8003506:	6033      	str	r3, [r6, #0]
 8003508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800350c:	81a3      	strh	r3, [r4, #12]
 800350e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003512:	e03e      	b.n	8003592 <__swsetup_r+0xba>
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <__swsetup_r+0xd4>)
 8003516:	429c      	cmp	r4, r3
 8003518:	d101      	bne.n	800351e <__swsetup_r+0x46>
 800351a:	68ac      	ldr	r4, [r5, #8]
 800351c:	e7eb      	b.n	80034f6 <__swsetup_r+0x1e>
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <__swsetup_r+0xd8>)
 8003520:	429c      	cmp	r4, r3
 8003522:	bf08      	it	eq
 8003524:	68ec      	ldreq	r4, [r5, #12]
 8003526:	e7e6      	b.n	80034f6 <__swsetup_r+0x1e>
 8003528:	0758      	lsls	r0, r3, #29
 800352a:	d512      	bpl.n	8003552 <__swsetup_r+0x7a>
 800352c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800352e:	b141      	cbz	r1, 8003542 <__swsetup_r+0x6a>
 8003530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003534:	4299      	cmp	r1, r3
 8003536:	d002      	beq.n	800353e <__swsetup_r+0x66>
 8003538:	4630      	mov	r0, r6
 800353a:	f000 fa5b 	bl	80039f4 <_free_r>
 800353e:	2300      	movs	r3, #0
 8003540:	6363      	str	r3, [r4, #52]	; 0x34
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003548:	81a3      	strh	r3, [r4, #12]
 800354a:	2300      	movs	r3, #0
 800354c:	6063      	str	r3, [r4, #4]
 800354e:	6923      	ldr	r3, [r4, #16]
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	f043 0308 	orr.w	r3, r3, #8
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	6923      	ldr	r3, [r4, #16]
 800355c:	b94b      	cbnz	r3, 8003572 <__swsetup_r+0x9a>
 800355e:	89a3      	ldrh	r3, [r4, #12]
 8003560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d003      	beq.n	8003572 <__swsetup_r+0x9a>
 800356a:	4621      	mov	r1, r4
 800356c:	4630      	mov	r0, r6
 800356e:	f000 fa01 	bl	8003974 <__smakebuf_r>
 8003572:	89a0      	ldrh	r0, [r4, #12]
 8003574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003578:	f010 0301 	ands.w	r3, r0, #1
 800357c:	d00a      	beq.n	8003594 <__swsetup_r+0xbc>
 800357e:	2300      	movs	r3, #0
 8003580:	60a3      	str	r3, [r4, #8]
 8003582:	6963      	ldr	r3, [r4, #20]
 8003584:	425b      	negs	r3, r3
 8003586:	61a3      	str	r3, [r4, #24]
 8003588:	6923      	ldr	r3, [r4, #16]
 800358a:	b943      	cbnz	r3, 800359e <__swsetup_r+0xc6>
 800358c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003590:	d1ba      	bne.n	8003508 <__swsetup_r+0x30>
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	0781      	lsls	r1, r0, #30
 8003596:	bf58      	it	pl
 8003598:	6963      	ldrpl	r3, [r4, #20]
 800359a:	60a3      	str	r3, [r4, #8]
 800359c:	e7f4      	b.n	8003588 <__swsetup_r+0xb0>
 800359e:	2000      	movs	r0, #0
 80035a0:	e7f7      	b.n	8003592 <__swsetup_r+0xba>
 80035a2:	bf00      	nop
 80035a4:	2000000c 	.word	0x2000000c
 80035a8:	08003e14 	.word	0x08003e14
 80035ac:	08003e34 	.word	0x08003e34
 80035b0:	08003df4 	.word	0x08003df4

080035b4 <__sflush_r>:
 80035b4:	898a      	ldrh	r2, [r1, #12]
 80035b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ba:	4605      	mov	r5, r0
 80035bc:	0710      	lsls	r0, r2, #28
 80035be:	460c      	mov	r4, r1
 80035c0:	d458      	bmi.n	8003674 <__sflush_r+0xc0>
 80035c2:	684b      	ldr	r3, [r1, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dc05      	bgt.n	80035d4 <__sflush_r+0x20>
 80035c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	dc02      	bgt.n	80035d4 <__sflush_r+0x20>
 80035ce:	2000      	movs	r0, #0
 80035d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035d6:	2e00      	cmp	r6, #0
 80035d8:	d0f9      	beq.n	80035ce <__sflush_r+0x1a>
 80035da:	2300      	movs	r3, #0
 80035dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035e0:	682f      	ldr	r7, [r5, #0]
 80035e2:	602b      	str	r3, [r5, #0]
 80035e4:	d032      	beq.n	800364c <__sflush_r+0x98>
 80035e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	075a      	lsls	r2, r3, #29
 80035ec:	d505      	bpl.n	80035fa <__sflush_r+0x46>
 80035ee:	6863      	ldr	r3, [r4, #4]
 80035f0:	1ac0      	subs	r0, r0, r3
 80035f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035f4:	b10b      	cbz	r3, 80035fa <__sflush_r+0x46>
 80035f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035f8:	1ac0      	subs	r0, r0, r3
 80035fa:	2300      	movs	r3, #0
 80035fc:	4602      	mov	r2, r0
 80035fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003600:	6a21      	ldr	r1, [r4, #32]
 8003602:	4628      	mov	r0, r5
 8003604:	47b0      	blx	r6
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	d106      	bne.n	800361a <__sflush_r+0x66>
 800360c:	6829      	ldr	r1, [r5, #0]
 800360e:	291d      	cmp	r1, #29
 8003610:	d82c      	bhi.n	800366c <__sflush_r+0xb8>
 8003612:	4a2a      	ldr	r2, [pc, #168]	; (80036bc <__sflush_r+0x108>)
 8003614:	40ca      	lsrs	r2, r1
 8003616:	07d6      	lsls	r6, r2, #31
 8003618:	d528      	bpl.n	800366c <__sflush_r+0xb8>
 800361a:	2200      	movs	r2, #0
 800361c:	6062      	str	r2, [r4, #4]
 800361e:	04d9      	lsls	r1, r3, #19
 8003620:	6922      	ldr	r2, [r4, #16]
 8003622:	6022      	str	r2, [r4, #0]
 8003624:	d504      	bpl.n	8003630 <__sflush_r+0x7c>
 8003626:	1c42      	adds	r2, r0, #1
 8003628:	d101      	bne.n	800362e <__sflush_r+0x7a>
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	b903      	cbnz	r3, 8003630 <__sflush_r+0x7c>
 800362e:	6560      	str	r0, [r4, #84]	; 0x54
 8003630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003632:	602f      	str	r7, [r5, #0]
 8003634:	2900      	cmp	r1, #0
 8003636:	d0ca      	beq.n	80035ce <__sflush_r+0x1a>
 8003638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800363c:	4299      	cmp	r1, r3
 800363e:	d002      	beq.n	8003646 <__sflush_r+0x92>
 8003640:	4628      	mov	r0, r5
 8003642:	f000 f9d7 	bl	80039f4 <_free_r>
 8003646:	2000      	movs	r0, #0
 8003648:	6360      	str	r0, [r4, #52]	; 0x34
 800364a:	e7c1      	b.n	80035d0 <__sflush_r+0x1c>
 800364c:	6a21      	ldr	r1, [r4, #32]
 800364e:	2301      	movs	r3, #1
 8003650:	4628      	mov	r0, r5
 8003652:	47b0      	blx	r6
 8003654:	1c41      	adds	r1, r0, #1
 8003656:	d1c7      	bne.n	80035e8 <__sflush_r+0x34>
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0c4      	beq.n	80035e8 <__sflush_r+0x34>
 800365e:	2b1d      	cmp	r3, #29
 8003660:	d001      	beq.n	8003666 <__sflush_r+0xb2>
 8003662:	2b16      	cmp	r3, #22
 8003664:	d101      	bne.n	800366a <__sflush_r+0xb6>
 8003666:	602f      	str	r7, [r5, #0]
 8003668:	e7b1      	b.n	80035ce <__sflush_r+0x1a>
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003670:	81a3      	strh	r3, [r4, #12]
 8003672:	e7ad      	b.n	80035d0 <__sflush_r+0x1c>
 8003674:	690f      	ldr	r7, [r1, #16]
 8003676:	2f00      	cmp	r7, #0
 8003678:	d0a9      	beq.n	80035ce <__sflush_r+0x1a>
 800367a:	0793      	lsls	r3, r2, #30
 800367c:	680e      	ldr	r6, [r1, #0]
 800367e:	bf08      	it	eq
 8003680:	694b      	ldreq	r3, [r1, #20]
 8003682:	600f      	str	r7, [r1, #0]
 8003684:	bf18      	it	ne
 8003686:	2300      	movne	r3, #0
 8003688:	eba6 0807 	sub.w	r8, r6, r7
 800368c:	608b      	str	r3, [r1, #8]
 800368e:	f1b8 0f00 	cmp.w	r8, #0
 8003692:	dd9c      	ble.n	80035ce <__sflush_r+0x1a>
 8003694:	6a21      	ldr	r1, [r4, #32]
 8003696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003698:	4643      	mov	r3, r8
 800369a:	463a      	mov	r2, r7
 800369c:	4628      	mov	r0, r5
 800369e:	47b0      	blx	r6
 80036a0:	2800      	cmp	r0, #0
 80036a2:	dc06      	bgt.n	80036b2 <__sflush_r+0xfe>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b0:	e78e      	b.n	80035d0 <__sflush_r+0x1c>
 80036b2:	4407      	add	r7, r0
 80036b4:	eba8 0800 	sub.w	r8, r8, r0
 80036b8:	e7e9      	b.n	800368e <__sflush_r+0xda>
 80036ba:	bf00      	nop
 80036bc:	20400001 	.word	0x20400001

080036c0 <_fflush_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	690b      	ldr	r3, [r1, #16]
 80036c4:	4605      	mov	r5, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	b913      	cbnz	r3, 80036d0 <_fflush_r+0x10>
 80036ca:	2500      	movs	r5, #0
 80036cc:	4628      	mov	r0, r5
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	b118      	cbz	r0, 80036da <_fflush_r+0x1a>
 80036d2:	6983      	ldr	r3, [r0, #24]
 80036d4:	b90b      	cbnz	r3, 80036da <_fflush_r+0x1a>
 80036d6:	f000 f887 	bl	80037e8 <__sinit>
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <_fflush_r+0x6c>)
 80036dc:	429c      	cmp	r4, r3
 80036de:	d11b      	bne.n	8003718 <_fflush_r+0x58>
 80036e0:	686c      	ldr	r4, [r5, #4]
 80036e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <_fflush_r+0xa>
 80036ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036ec:	07d0      	lsls	r0, r2, #31
 80036ee:	d404      	bmi.n	80036fa <_fflush_r+0x3a>
 80036f0:	0599      	lsls	r1, r3, #22
 80036f2:	d402      	bmi.n	80036fa <_fflush_r+0x3a>
 80036f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036f6:	f000 f915 	bl	8003924 <__retarget_lock_acquire_recursive>
 80036fa:	4628      	mov	r0, r5
 80036fc:	4621      	mov	r1, r4
 80036fe:	f7ff ff59 	bl	80035b4 <__sflush_r>
 8003702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003704:	07da      	lsls	r2, r3, #31
 8003706:	4605      	mov	r5, r0
 8003708:	d4e0      	bmi.n	80036cc <_fflush_r+0xc>
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	059b      	lsls	r3, r3, #22
 800370e:	d4dd      	bmi.n	80036cc <_fflush_r+0xc>
 8003710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003712:	f000 f908 	bl	8003926 <__retarget_lock_release_recursive>
 8003716:	e7d9      	b.n	80036cc <_fflush_r+0xc>
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <_fflush_r+0x70>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d101      	bne.n	8003722 <_fflush_r+0x62>
 800371e:	68ac      	ldr	r4, [r5, #8]
 8003720:	e7df      	b.n	80036e2 <_fflush_r+0x22>
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <_fflush_r+0x74>)
 8003724:	429c      	cmp	r4, r3
 8003726:	bf08      	it	eq
 8003728:	68ec      	ldreq	r4, [r5, #12]
 800372a:	e7da      	b.n	80036e2 <_fflush_r+0x22>
 800372c:	08003e14 	.word	0x08003e14
 8003730:	08003e34 	.word	0x08003e34
 8003734:	08003df4 	.word	0x08003df4

08003738 <std>:
 8003738:	2300      	movs	r3, #0
 800373a:	b510      	push	{r4, lr}
 800373c:	4604      	mov	r4, r0
 800373e:	e9c0 3300 	strd	r3, r3, [r0]
 8003742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003746:	6083      	str	r3, [r0, #8]
 8003748:	8181      	strh	r1, [r0, #12]
 800374a:	6643      	str	r3, [r0, #100]	; 0x64
 800374c:	81c2      	strh	r2, [r0, #14]
 800374e:	6183      	str	r3, [r0, #24]
 8003750:	4619      	mov	r1, r3
 8003752:	2208      	movs	r2, #8
 8003754:	305c      	adds	r0, #92	; 0x5c
 8003756:	f7ff fdef 	bl	8003338 <memset>
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <std+0x38>)
 800375c:	6263      	str	r3, [r4, #36]	; 0x24
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <std+0x3c>)
 8003760:	62a3      	str	r3, [r4, #40]	; 0x28
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <std+0x40>)
 8003764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <std+0x44>)
 8003768:	6224      	str	r4, [r4, #32]
 800376a:	6323      	str	r3, [r4, #48]	; 0x30
 800376c:	bd10      	pop	{r4, pc}
 800376e:	bf00      	nop
 8003770:	08003bd5 	.word	0x08003bd5
 8003774:	08003bf7 	.word	0x08003bf7
 8003778:	08003c2f 	.word	0x08003c2f
 800377c:	08003c53 	.word	0x08003c53

08003780 <_cleanup_r>:
 8003780:	4901      	ldr	r1, [pc, #4]	; (8003788 <_cleanup_r+0x8>)
 8003782:	f000 b8af 	b.w	80038e4 <_fwalk_reent>
 8003786:	bf00      	nop
 8003788:	080036c1 	.word	0x080036c1

0800378c <__sfmoreglue>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	2268      	movs	r2, #104	; 0x68
 8003790:	1e4d      	subs	r5, r1, #1
 8003792:	4355      	muls	r5, r2
 8003794:	460e      	mov	r6, r1
 8003796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800379a:	f000 f997 	bl	8003acc <_malloc_r>
 800379e:	4604      	mov	r4, r0
 80037a0:	b140      	cbz	r0, 80037b4 <__sfmoreglue+0x28>
 80037a2:	2100      	movs	r1, #0
 80037a4:	e9c0 1600 	strd	r1, r6, [r0]
 80037a8:	300c      	adds	r0, #12
 80037aa:	60a0      	str	r0, [r4, #8]
 80037ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037b0:	f7ff fdc2 	bl	8003338 <memset>
 80037b4:	4620      	mov	r0, r4
 80037b6:	bd70      	pop	{r4, r5, r6, pc}

080037b8 <__sfp_lock_acquire>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__sfp_lock_acquire+0x8>)
 80037ba:	f000 b8b3 	b.w	8003924 <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	20000119 	.word	0x20000119

080037c4 <__sfp_lock_release>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__sfp_lock_release+0x8>)
 80037c6:	f000 b8ae 	b.w	8003926 <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000119 	.word	0x20000119

080037d0 <__sinit_lock_acquire>:
 80037d0:	4801      	ldr	r0, [pc, #4]	; (80037d8 <__sinit_lock_acquire+0x8>)
 80037d2:	f000 b8a7 	b.w	8003924 <__retarget_lock_acquire_recursive>
 80037d6:	bf00      	nop
 80037d8:	2000011a 	.word	0x2000011a

080037dc <__sinit_lock_release>:
 80037dc:	4801      	ldr	r0, [pc, #4]	; (80037e4 <__sinit_lock_release+0x8>)
 80037de:	f000 b8a2 	b.w	8003926 <__retarget_lock_release_recursive>
 80037e2:	bf00      	nop
 80037e4:	2000011a 	.word	0x2000011a

080037e8 <__sinit>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	f7ff fff0 	bl	80037d0 <__sinit_lock_acquire>
 80037f0:	69a3      	ldr	r3, [r4, #24]
 80037f2:	b11b      	cbz	r3, 80037fc <__sinit+0x14>
 80037f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037f8:	f7ff bff0 	b.w	80037dc <__sinit_lock_release>
 80037fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003800:	6523      	str	r3, [r4, #80]	; 0x50
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <__sinit+0x68>)
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <__sinit+0x6c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	62a2      	str	r2, [r4, #40]	; 0x28
 800380a:	42a3      	cmp	r3, r4
 800380c:	bf04      	itt	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	61a3      	streq	r3, [r4, #24]
 8003812:	4620      	mov	r0, r4
 8003814:	f000 f820 	bl	8003858 <__sfp>
 8003818:	6060      	str	r0, [r4, #4]
 800381a:	4620      	mov	r0, r4
 800381c:	f000 f81c 	bl	8003858 <__sfp>
 8003820:	60a0      	str	r0, [r4, #8]
 8003822:	4620      	mov	r0, r4
 8003824:	f000 f818 	bl	8003858 <__sfp>
 8003828:	2200      	movs	r2, #0
 800382a:	60e0      	str	r0, [r4, #12]
 800382c:	2104      	movs	r1, #4
 800382e:	6860      	ldr	r0, [r4, #4]
 8003830:	f7ff ff82 	bl	8003738 <std>
 8003834:	68a0      	ldr	r0, [r4, #8]
 8003836:	2201      	movs	r2, #1
 8003838:	2109      	movs	r1, #9
 800383a:	f7ff ff7d 	bl	8003738 <std>
 800383e:	68e0      	ldr	r0, [r4, #12]
 8003840:	2202      	movs	r2, #2
 8003842:	2112      	movs	r1, #18
 8003844:	f7ff ff78 	bl	8003738 <std>
 8003848:	2301      	movs	r3, #1
 800384a:	61a3      	str	r3, [r4, #24]
 800384c:	e7d2      	b.n	80037f4 <__sinit+0xc>
 800384e:	bf00      	nop
 8003850:	08003df0 	.word	0x08003df0
 8003854:	08003781 	.word	0x08003781

08003858 <__sfp>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	4607      	mov	r7, r0
 800385c:	f7ff ffac 	bl	80037b8 <__sfp_lock_acquire>
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <__sfp+0x84>)
 8003862:	681e      	ldr	r6, [r3, #0]
 8003864:	69b3      	ldr	r3, [r6, #24]
 8003866:	b913      	cbnz	r3, 800386e <__sfp+0x16>
 8003868:	4630      	mov	r0, r6
 800386a:	f7ff ffbd 	bl	80037e8 <__sinit>
 800386e:	3648      	adds	r6, #72	; 0x48
 8003870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003874:	3b01      	subs	r3, #1
 8003876:	d503      	bpl.n	8003880 <__sfp+0x28>
 8003878:	6833      	ldr	r3, [r6, #0]
 800387a:	b30b      	cbz	r3, 80038c0 <__sfp+0x68>
 800387c:	6836      	ldr	r6, [r6, #0]
 800387e:	e7f7      	b.n	8003870 <__sfp+0x18>
 8003880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003884:	b9d5      	cbnz	r5, 80038bc <__sfp+0x64>
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <__sfp+0x88>)
 8003888:	60e3      	str	r3, [r4, #12]
 800388a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800388e:	6665      	str	r5, [r4, #100]	; 0x64
 8003890:	f000 f847 	bl	8003922 <__retarget_lock_init_recursive>
 8003894:	f7ff ff96 	bl	80037c4 <__sfp_lock_release>
 8003898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800389c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038a0:	6025      	str	r5, [r4, #0]
 80038a2:	61a5      	str	r5, [r4, #24]
 80038a4:	2208      	movs	r2, #8
 80038a6:	4629      	mov	r1, r5
 80038a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038ac:	f7ff fd44 	bl	8003338 <memset>
 80038b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038b8:	4620      	mov	r0, r4
 80038ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038bc:	3468      	adds	r4, #104	; 0x68
 80038be:	e7d9      	b.n	8003874 <__sfp+0x1c>
 80038c0:	2104      	movs	r1, #4
 80038c2:	4638      	mov	r0, r7
 80038c4:	f7ff ff62 	bl	800378c <__sfmoreglue>
 80038c8:	4604      	mov	r4, r0
 80038ca:	6030      	str	r0, [r6, #0]
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d1d5      	bne.n	800387c <__sfp+0x24>
 80038d0:	f7ff ff78 	bl	80037c4 <__sfp_lock_release>
 80038d4:	230c      	movs	r3, #12
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	e7ee      	b.n	80038b8 <__sfp+0x60>
 80038da:	bf00      	nop
 80038dc:	08003df0 	.word	0x08003df0
 80038e0:	ffff0001 	.word	0xffff0001

080038e4 <_fwalk_reent>:
 80038e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e8:	4606      	mov	r6, r0
 80038ea:	4688      	mov	r8, r1
 80038ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038f0:	2700      	movs	r7, #0
 80038f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038f6:	f1b9 0901 	subs.w	r9, r9, #1
 80038fa:	d505      	bpl.n	8003908 <_fwalk_reent+0x24>
 80038fc:	6824      	ldr	r4, [r4, #0]
 80038fe:	2c00      	cmp	r4, #0
 8003900:	d1f7      	bne.n	80038f2 <_fwalk_reent+0xe>
 8003902:	4638      	mov	r0, r7
 8003904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003908:	89ab      	ldrh	r3, [r5, #12]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d907      	bls.n	800391e <_fwalk_reent+0x3a>
 800390e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003912:	3301      	adds	r3, #1
 8003914:	d003      	beq.n	800391e <_fwalk_reent+0x3a>
 8003916:	4629      	mov	r1, r5
 8003918:	4630      	mov	r0, r6
 800391a:	47c0      	blx	r8
 800391c:	4307      	orrs	r7, r0
 800391e:	3568      	adds	r5, #104	; 0x68
 8003920:	e7e9      	b.n	80038f6 <_fwalk_reent+0x12>

08003922 <__retarget_lock_init_recursive>:
 8003922:	4770      	bx	lr

08003924 <__retarget_lock_acquire_recursive>:
 8003924:	4770      	bx	lr

08003926 <__retarget_lock_release_recursive>:
 8003926:	4770      	bx	lr

08003928 <__swhatbuf_r>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	460e      	mov	r6, r1
 800392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003930:	2900      	cmp	r1, #0
 8003932:	b096      	sub	sp, #88	; 0x58
 8003934:	4614      	mov	r4, r2
 8003936:	461d      	mov	r5, r3
 8003938:	da08      	bge.n	800394c <__swhatbuf_r+0x24>
 800393a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	602a      	str	r2, [r5, #0]
 8003942:	061a      	lsls	r2, r3, #24
 8003944:	d410      	bmi.n	8003968 <__swhatbuf_r+0x40>
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	e00e      	b.n	800396a <__swhatbuf_r+0x42>
 800394c:	466a      	mov	r2, sp
 800394e:	f000 f9a7 	bl	8003ca0 <_fstat_r>
 8003952:	2800      	cmp	r0, #0
 8003954:	dbf1      	blt.n	800393a <__swhatbuf_r+0x12>
 8003956:	9a01      	ldr	r2, [sp, #4]
 8003958:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800395c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003960:	425a      	negs	r2, r3
 8003962:	415a      	adcs	r2, r3
 8003964:	602a      	str	r2, [r5, #0]
 8003966:	e7ee      	b.n	8003946 <__swhatbuf_r+0x1e>
 8003968:	2340      	movs	r3, #64	; 0x40
 800396a:	2000      	movs	r0, #0
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	b016      	add	sp, #88	; 0x58
 8003970:	bd70      	pop	{r4, r5, r6, pc}
	...

08003974 <__smakebuf_r>:
 8003974:	898b      	ldrh	r3, [r1, #12]
 8003976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003978:	079d      	lsls	r5, r3, #30
 800397a:	4606      	mov	r6, r0
 800397c:	460c      	mov	r4, r1
 800397e:	d507      	bpl.n	8003990 <__smakebuf_r+0x1c>
 8003980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	6123      	str	r3, [r4, #16]
 8003988:	2301      	movs	r3, #1
 800398a:	6163      	str	r3, [r4, #20]
 800398c:	b002      	add	sp, #8
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	ab01      	add	r3, sp, #4
 8003992:	466a      	mov	r2, sp
 8003994:	f7ff ffc8 	bl	8003928 <__swhatbuf_r>
 8003998:	9900      	ldr	r1, [sp, #0]
 800399a:	4605      	mov	r5, r0
 800399c:	4630      	mov	r0, r6
 800399e:	f000 f895 	bl	8003acc <_malloc_r>
 80039a2:	b948      	cbnz	r0, 80039b8 <__smakebuf_r+0x44>
 80039a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a8:	059a      	lsls	r2, r3, #22
 80039aa:	d4ef      	bmi.n	800398c <__smakebuf_r+0x18>
 80039ac:	f023 0303 	bic.w	r3, r3, #3
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	e7e3      	b.n	8003980 <__smakebuf_r+0xc>
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <__smakebuf_r+0x7c>)
 80039ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	6020      	str	r0, [r4, #0]
 80039c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c4:	81a3      	strh	r3, [r4, #12]
 80039c6:	9b00      	ldr	r3, [sp, #0]
 80039c8:	6163      	str	r3, [r4, #20]
 80039ca:	9b01      	ldr	r3, [sp, #4]
 80039cc:	6120      	str	r0, [r4, #16]
 80039ce:	b15b      	cbz	r3, 80039e8 <__smakebuf_r+0x74>
 80039d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039d4:	4630      	mov	r0, r6
 80039d6:	f000 f975 	bl	8003cc4 <_isatty_r>
 80039da:	b128      	cbz	r0, 80039e8 <__smakebuf_r+0x74>
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	81a3      	strh	r3, [r4, #12]
 80039e8:	89a0      	ldrh	r0, [r4, #12]
 80039ea:	4305      	orrs	r5, r0
 80039ec:	81a5      	strh	r5, [r4, #12]
 80039ee:	e7cd      	b.n	800398c <__smakebuf_r+0x18>
 80039f0:	08003781 	.word	0x08003781

080039f4 <_free_r>:
 80039f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039f6:	2900      	cmp	r1, #0
 80039f8:	d044      	beq.n	8003a84 <_free_r+0x90>
 80039fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039fe:	9001      	str	r0, [sp, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f1a1 0404 	sub.w	r4, r1, #4
 8003a06:	bfb8      	it	lt
 8003a08:	18e4      	addlt	r4, r4, r3
 8003a0a:	f000 f97d 	bl	8003d08 <__malloc_lock>
 8003a0e:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <_free_r+0x94>)
 8003a10:	9801      	ldr	r0, [sp, #4]
 8003a12:	6813      	ldr	r3, [r2, #0]
 8003a14:	b933      	cbnz	r3, 8003a24 <_free_r+0x30>
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	6014      	str	r4, [r2, #0]
 8003a1a:	b003      	add	sp, #12
 8003a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a20:	f000 b978 	b.w	8003d14 <__malloc_unlock>
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	d908      	bls.n	8003a3a <_free_r+0x46>
 8003a28:	6825      	ldr	r5, [r4, #0]
 8003a2a:	1961      	adds	r1, r4, r5
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	bf01      	itttt	eq
 8003a30:	6819      	ldreq	r1, [r3, #0]
 8003a32:	685b      	ldreq	r3, [r3, #4]
 8003a34:	1949      	addeq	r1, r1, r5
 8003a36:	6021      	streq	r1, [r4, #0]
 8003a38:	e7ed      	b.n	8003a16 <_free_r+0x22>
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	b10b      	cbz	r3, 8003a44 <_free_r+0x50>
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d9fa      	bls.n	8003a3a <_free_r+0x46>
 8003a44:	6811      	ldr	r1, [r2, #0]
 8003a46:	1855      	adds	r5, r2, r1
 8003a48:	42a5      	cmp	r5, r4
 8003a4a:	d10b      	bne.n	8003a64 <_free_r+0x70>
 8003a4c:	6824      	ldr	r4, [r4, #0]
 8003a4e:	4421      	add	r1, r4
 8003a50:	1854      	adds	r4, r2, r1
 8003a52:	42a3      	cmp	r3, r4
 8003a54:	6011      	str	r1, [r2, #0]
 8003a56:	d1e0      	bne.n	8003a1a <_free_r+0x26>
 8003a58:	681c      	ldr	r4, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	6053      	str	r3, [r2, #4]
 8003a5e:	4421      	add	r1, r4
 8003a60:	6011      	str	r1, [r2, #0]
 8003a62:	e7da      	b.n	8003a1a <_free_r+0x26>
 8003a64:	d902      	bls.n	8003a6c <_free_r+0x78>
 8003a66:	230c      	movs	r3, #12
 8003a68:	6003      	str	r3, [r0, #0]
 8003a6a:	e7d6      	b.n	8003a1a <_free_r+0x26>
 8003a6c:	6825      	ldr	r5, [r4, #0]
 8003a6e:	1961      	adds	r1, r4, r5
 8003a70:	428b      	cmp	r3, r1
 8003a72:	bf04      	itt	eq
 8003a74:	6819      	ldreq	r1, [r3, #0]
 8003a76:	685b      	ldreq	r3, [r3, #4]
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	bf04      	itt	eq
 8003a7c:	1949      	addeq	r1, r1, r5
 8003a7e:	6021      	streq	r1, [r4, #0]
 8003a80:	6054      	str	r4, [r2, #4]
 8003a82:	e7ca      	b.n	8003a1a <_free_r+0x26>
 8003a84:	b003      	add	sp, #12
 8003a86:	bd30      	pop	{r4, r5, pc}
 8003a88:	2000011c 	.word	0x2000011c

08003a8c <sbrk_aligned>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4e0e      	ldr	r6, [pc, #56]	; (8003ac8 <sbrk_aligned+0x3c>)
 8003a90:	460c      	mov	r4, r1
 8003a92:	6831      	ldr	r1, [r6, #0]
 8003a94:	4605      	mov	r5, r0
 8003a96:	b911      	cbnz	r1, 8003a9e <sbrk_aligned+0x12>
 8003a98:	f000 f88c 	bl	8003bb4 <_sbrk_r>
 8003a9c:	6030      	str	r0, [r6, #0]
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f000 f887 	bl	8003bb4 <_sbrk_r>
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	d00a      	beq.n	8003ac0 <sbrk_aligned+0x34>
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d007      	beq.n	8003ac4 <sbrk_aligned+0x38>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 f87c 	bl	8003bb4 <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d101      	bne.n	8003ac4 <sbrk_aligned+0x38>
 8003ac0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	20000120 	.word	0x20000120

08003acc <_malloc_r>:
 8003acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad0:	1ccd      	adds	r5, r1, #3
 8003ad2:	f025 0503 	bic.w	r5, r5, #3
 8003ad6:	3508      	adds	r5, #8
 8003ad8:	2d0c      	cmp	r5, #12
 8003ada:	bf38      	it	cc
 8003adc:	250c      	movcc	r5, #12
 8003ade:	2d00      	cmp	r5, #0
 8003ae0:	4607      	mov	r7, r0
 8003ae2:	db01      	blt.n	8003ae8 <_malloc_r+0x1c>
 8003ae4:	42a9      	cmp	r1, r5
 8003ae6:	d905      	bls.n	8003af4 <_malloc_r+0x28>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	2600      	movs	r6, #0
 8003aee:	4630      	mov	r0, r6
 8003af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af4:	4e2e      	ldr	r6, [pc, #184]	; (8003bb0 <_malloc_r+0xe4>)
 8003af6:	f000 f907 	bl	8003d08 <__malloc_lock>
 8003afa:	6833      	ldr	r3, [r6, #0]
 8003afc:	461c      	mov	r4, r3
 8003afe:	bb34      	cbnz	r4, 8003b4e <_malloc_r+0x82>
 8003b00:	4629      	mov	r1, r5
 8003b02:	4638      	mov	r0, r7
 8003b04:	f7ff ffc2 	bl	8003a8c <sbrk_aligned>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	d14d      	bne.n	8003baa <_malloc_r+0xde>
 8003b0e:	6834      	ldr	r4, [r6, #0]
 8003b10:	4626      	mov	r6, r4
 8003b12:	2e00      	cmp	r6, #0
 8003b14:	d140      	bne.n	8003b98 <_malloc_r+0xcc>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	4631      	mov	r1, r6
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	eb04 0803 	add.w	r8, r4, r3
 8003b20:	f000 f848 	bl	8003bb4 <_sbrk_r>
 8003b24:	4580      	cmp	r8, r0
 8003b26:	d13a      	bne.n	8003b9e <_malloc_r+0xd2>
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	3503      	adds	r5, #3
 8003b2c:	1a6d      	subs	r5, r5, r1
 8003b2e:	f025 0503 	bic.w	r5, r5, #3
 8003b32:	3508      	adds	r5, #8
 8003b34:	2d0c      	cmp	r5, #12
 8003b36:	bf38      	it	cc
 8003b38:	250c      	movcc	r5, #12
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	f7ff ffa5 	bl	8003a8c <sbrk_aligned>
 8003b42:	3001      	adds	r0, #1
 8003b44:	d02b      	beq.n	8003b9e <_malloc_r+0xd2>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	442b      	add	r3, r5
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	e00e      	b.n	8003b6c <_malloc_r+0xa0>
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	1b52      	subs	r2, r2, r5
 8003b52:	d41e      	bmi.n	8003b92 <_malloc_r+0xc6>
 8003b54:	2a0b      	cmp	r2, #11
 8003b56:	d916      	bls.n	8003b86 <_malloc_r+0xba>
 8003b58:	1961      	adds	r1, r4, r5
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	6025      	str	r5, [r4, #0]
 8003b5e:	bf18      	it	ne
 8003b60:	6059      	strne	r1, [r3, #4]
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	bf08      	it	eq
 8003b66:	6031      	streq	r1, [r6, #0]
 8003b68:	5162      	str	r2, [r4, r5]
 8003b6a:	604b      	str	r3, [r1, #4]
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	f104 060b 	add.w	r6, r4, #11
 8003b72:	f000 f8cf 	bl	8003d14 <__malloc_unlock>
 8003b76:	f026 0607 	bic.w	r6, r6, #7
 8003b7a:	1d23      	adds	r3, r4, #4
 8003b7c:	1af2      	subs	r2, r6, r3
 8003b7e:	d0b6      	beq.n	8003aee <_malloc_r+0x22>
 8003b80:	1b9b      	subs	r3, r3, r6
 8003b82:	50a3      	str	r3, [r4, r2]
 8003b84:	e7b3      	b.n	8003aee <_malloc_r+0x22>
 8003b86:	6862      	ldr	r2, [r4, #4]
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	bf0c      	ite	eq
 8003b8c:	6032      	streq	r2, [r6, #0]
 8003b8e:	605a      	strne	r2, [r3, #4]
 8003b90:	e7ec      	b.n	8003b6c <_malloc_r+0xa0>
 8003b92:	4623      	mov	r3, r4
 8003b94:	6864      	ldr	r4, [r4, #4]
 8003b96:	e7b2      	b.n	8003afe <_malloc_r+0x32>
 8003b98:	4634      	mov	r4, r6
 8003b9a:	6876      	ldr	r6, [r6, #4]
 8003b9c:	e7b9      	b.n	8003b12 <_malloc_r+0x46>
 8003b9e:	230c      	movs	r3, #12
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	f000 f8b6 	bl	8003d14 <__malloc_unlock>
 8003ba8:	e7a1      	b.n	8003aee <_malloc_r+0x22>
 8003baa:	6025      	str	r5, [r4, #0]
 8003bac:	e7de      	b.n	8003b6c <_malloc_r+0xa0>
 8003bae:	bf00      	nop
 8003bb0:	2000011c 	.word	0x2000011c

08003bb4 <_sbrk_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4d06      	ldr	r5, [pc, #24]	; (8003bd0 <_sbrk_r+0x1c>)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	4604      	mov	r4, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	f7fc fec6 	bl	8000950 <_sbrk>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_sbrk_r+0x1a>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_sbrk_r+0x1a>
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	20000124 	.word	0x20000124

08003bd4 <__sread>:
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bdc:	f000 f8a0 	bl	8003d20 <_read_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	bfab      	itete	ge
 8003be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003be6:	89a3      	ldrhlt	r3, [r4, #12]
 8003be8:	181b      	addge	r3, r3, r0
 8003bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bee:	bfac      	ite	ge
 8003bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bf2:	81a3      	strhlt	r3, [r4, #12]
 8003bf4:	bd10      	pop	{r4, pc}

08003bf6 <__swrite>:
 8003bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfa:	461f      	mov	r7, r3
 8003bfc:	898b      	ldrh	r3, [r1, #12]
 8003bfe:	05db      	lsls	r3, r3, #23
 8003c00:	4605      	mov	r5, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	4616      	mov	r6, r2
 8003c06:	d505      	bpl.n	8003c14 <__swrite+0x1e>
 8003c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f000 f868 	bl	8003ce4 <_lseek_r>
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	4632      	mov	r2, r6
 8003c22:	463b      	mov	r3, r7
 8003c24:	4628      	mov	r0, r5
 8003c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2a:	f000 b817 	b.w	8003c5c <_write_r>

08003c2e <__sseek>:
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	460c      	mov	r4, r1
 8003c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c36:	f000 f855 	bl	8003ce4 <_lseek_r>
 8003c3a:	1c43      	adds	r3, r0, #1
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	bf15      	itete	ne
 8003c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c4a:	81a3      	strheq	r3, [r4, #12]
 8003c4c:	bf18      	it	ne
 8003c4e:	81a3      	strhne	r3, [r4, #12]
 8003c50:	bd10      	pop	{r4, pc}

08003c52 <__sclose>:
 8003c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c56:	f000 b813 	b.w	8003c80 <_close_r>
	...

08003c5c <_write_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4d07      	ldr	r5, [pc, #28]	; (8003c7c <_write_r+0x20>)
 8003c60:	4604      	mov	r4, r0
 8003c62:	4608      	mov	r0, r1
 8003c64:	4611      	mov	r1, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	602a      	str	r2, [r5, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7fc fe26 	bl	80008bc <_write>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_write_r+0x1e>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_write_r+0x1e>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20000124 	.word	0x20000124

08003c80 <_close_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4d06      	ldr	r5, [pc, #24]	; (8003c9c <_close_r+0x1c>)
 8003c84:	2300      	movs	r3, #0
 8003c86:	4604      	mov	r4, r0
 8003c88:	4608      	mov	r0, r1
 8003c8a:	602b      	str	r3, [r5, #0]
 8003c8c:	f7fc fe2c 	bl	80008e8 <_close>
 8003c90:	1c43      	adds	r3, r0, #1
 8003c92:	d102      	bne.n	8003c9a <_close_r+0x1a>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	b103      	cbz	r3, 8003c9a <_close_r+0x1a>
 8003c98:	6023      	str	r3, [r4, #0]
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	20000124 	.word	0x20000124

08003ca0 <_fstat_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4d07      	ldr	r5, [pc, #28]	; (8003cc0 <_fstat_r+0x20>)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	4611      	mov	r1, r2
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	f7fc fe27 	bl	8000900 <_fstat>
 8003cb2:	1c43      	adds	r3, r0, #1
 8003cb4:	d102      	bne.n	8003cbc <_fstat_r+0x1c>
 8003cb6:	682b      	ldr	r3, [r5, #0]
 8003cb8:	b103      	cbz	r3, 8003cbc <_fstat_r+0x1c>
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	bd38      	pop	{r3, r4, r5, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000124 	.word	0x20000124

08003cc4 <_isatty_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	4d06      	ldr	r5, [pc, #24]	; (8003ce0 <_isatty_r+0x1c>)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fc fe26 	bl	8000920 <_isatty>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_isatty_r+0x1a>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_isatty_r+0x1a>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20000124 	.word	0x20000124

08003ce4 <_lseek_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4d07      	ldr	r5, [pc, #28]	; (8003d04 <_lseek_r+0x20>)
 8003ce8:	4604      	mov	r4, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	602a      	str	r2, [r5, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fc fe1f 	bl	8000936 <_lseek>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_lseek_r+0x1e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_lseek_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	20000124 	.word	0x20000124

08003d08 <__malloc_lock>:
 8003d08:	4801      	ldr	r0, [pc, #4]	; (8003d10 <__malloc_lock+0x8>)
 8003d0a:	f7ff be0b 	b.w	8003924 <__retarget_lock_acquire_recursive>
 8003d0e:	bf00      	nop
 8003d10:	20000118 	.word	0x20000118

08003d14 <__malloc_unlock>:
 8003d14:	4801      	ldr	r0, [pc, #4]	; (8003d1c <__malloc_unlock+0x8>)
 8003d16:	f7ff be06 	b.w	8003926 <__retarget_lock_release_recursive>
 8003d1a:	bf00      	nop
 8003d1c:	20000118 	.word	0x20000118

08003d20 <_read_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d07      	ldr	r5, [pc, #28]	; (8003d40 <_read_r+0x20>)
 8003d24:	4604      	mov	r4, r0
 8003d26:	4608      	mov	r0, r1
 8003d28:	4611      	mov	r1, r2
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	602a      	str	r2, [r5, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f7fc fda6 	bl	8000880 <_read>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_read_r+0x1e>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_read_r+0x1e>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000124 	.word	0x20000124

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
