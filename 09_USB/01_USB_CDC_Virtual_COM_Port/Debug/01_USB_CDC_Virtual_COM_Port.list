
01_USB_CDC_Virtual_COM_Port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a8  080072a8  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080072a8  080072a8  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072a8  080072a8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080072b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  20000190  08007440  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  08007440  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fff9  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfb  00000000  00000000  000301b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00033d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ff5  00000000  00000000  000349d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001089b  00000000  00000000  0005c9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e60f4  00000000  00000000  0006d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  001533a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007208 	.word	0x08007208

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08007208 	.word	0x08007208

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f954 	bl	8000478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f809 	bl	80001e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f856 	bl	8000284 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001d8:	f006 f996 	bl	8006508 <MX_USB_DEVICE_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	  CDC_Transmit_FS(myBuf, strlen((char *)myBuf));
	  HAL_Delay(1000);
 80001dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e0:	f000 f9c6 	bl	8000570 <HAL_Delay>
 80001e4:	e7fa      	b.n	80001dc <main+0x14>

080001e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b096      	sub	sp, #88	; 0x58
 80001ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2244      	movs	r2, #68	; 0x44
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f006 ffff 	bl	80071f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fa:	463b      	mov	r3, r7
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000208:	f44f 7000 	mov.w	r0, #512	; 0x200
 800020c:	f001 fe90 	bl	8001f30 <HAL_PWREx_ControlVoltageScaling>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000216:	f000 f895 	bl	8000344 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	2303      	movs	r3, #3
 800022a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800022c:	2301      	movs	r3, #1
 800022e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000230:	230c      	movs	r3, #12
 8000232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000234:	2307      	movs	r3, #7
 8000236:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000238:	2302      	movs	r3, #2
 800023a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800023c:	2302      	movs	r3, #2
 800023e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fed9 	bl	8001ffc <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000250:	f000 f878 	bl	8000344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2303      	movs	r3, #3
 800025a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	463b      	mov	r3, r7
 800026a:	2102      	movs	r1, #2
 800026c:	4618      	mov	r0, r3
 800026e:	f002 faa1 	bl	80027b4 <HAL_RCC_ClockConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000278:	f000 f864 	bl	8000344 <Error_Handler>
  }
}
 800027c:	bf00      	nop
 800027e:	3758      	adds	r7, #88	; 0x58
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <MX_GPIO_Init+0x8c>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029e:	4a1c      	ldr	r2, [pc, #112]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ae:	60bb      	str	r3, [r7, #8]
 80002b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002b8:	f043 0302 	orr.w	r3, r3, #2
 80002bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	4a10      	ldr	r2, [pc, #64]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_GPIO_Init+0x8c>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2104      	movs	r1, #4
 80002e6:	480b      	ldr	r0, [pc, #44]	; (8000314 <MX_GPIO_Init+0x90>)
 80002e8:	f000 fc22 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_USER_LED_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_Pin;
 80002ec:	2304      	movs	r3, #4
 80002ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	4619      	mov	r1, r3
 8000302:	4804      	ldr	r0, [pc, #16]	; (8000314 <MX_GPIO_Init+0x90>)
 8000304:	f000 fa6a 	bl	80007dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000308:	bf00      	nop
 800030a:	3720      	adds	r7, #32
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	48000400 	.word	0x48000400

08000318 <CDC_ReceiveCallback>:

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallback(uint8_t *buf, uint32_t len)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(buf, len);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	4619      	mov	r1, r3
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f006 f9b1 	bl	8006690 <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(BSP_USER_LED_GPIO_Port, BSP_USER_LED_Pin);
 800032e:	2104      	movs	r1, #4
 8000330:	4803      	ldr	r0, [pc, #12]	; (8000340 <CDC_ReceiveCallback+0x28>)
 8000332:	f000 fc15 	bl	8000b60 <HAL_GPIO_TogglePin>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	48000400 	.word	0x48000400

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <Error_Handler+0x8>
	...

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <HAL_MspInit+0x44>)
 8000358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035a:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <HAL_MspInit+0x44>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6613      	str	r3, [r2, #96]	; 0x60
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <HAL_MspInit+0x44>)
 8000364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <HAL_MspInit+0x44>)
 8000370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <HAL_MspInit+0x44>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000378:	6593      	str	r3, [r2, #88]	; 0x58
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_MspInit+0x44>)
 800037c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800039c:	e7fe      	b.n	800039c <NMI_Handler+0x4>

0800039e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <HardFault_Handler+0x4>

080003a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <MemManage_Handler+0x4>

080003aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <BusFault_Handler+0x4>

080003b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <UsageFault_Handler+0x4>

080003b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e4:	f000 f8a4 	bl	8000530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003f0:	4802      	ldr	r0, [pc, #8]	; (80003fc <OTG_FS_IRQHandler+0x10>)
 80003f2:	f000 fd22 	bl	8000e3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20001684 	.word	0x20001684

08000400 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <SystemInit+0x20>)
 8000406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <SystemInit+0x20>)
 800040c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000428:	f7ff ffea 	bl	8000400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800042c:	480c      	ldr	r0, [pc, #48]	; (8000460 <LoopForever+0x6>)
  ldr r1, =_edata
 800042e:	490d      	ldr	r1, [pc, #52]	; (8000464 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <LoopForever+0xe>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000434:	e002      	b.n	800043c <LoopCopyDataInit>

08000436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800043a:	3304      	adds	r3, #4

0800043c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800043c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000440:	d3f9      	bcc.n	8000436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000442:	4a0a      	ldr	r2, [pc, #40]	; (800046c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000444:	4c0a      	ldr	r4, [pc, #40]	; (8000470 <LoopForever+0x16>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000448:	e001      	b.n	800044e <LoopFillZerobss>

0800044a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800044c:	3204      	adds	r2, #4

0800044e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000450:	d3fb      	bcc.n	800044a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000452:	f006 fead 	bl	80071b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000456:	f7ff feb7 	bl	80001c8 <main>

0800045a <LoopForever>:

LoopForever:
    b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800045c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000464:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000468:	080072b0 	.word	0x080072b0
  ldr r2, =_sbss
 800046c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000470:	20001db0 	.word	0x20001db0

08000474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>
	...

08000478 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800047e:	2300      	movs	r3, #0
 8000480:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_Init+0x3c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <HAL_Init+0x3c>)
 8000488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800048c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800048e:	2003      	movs	r0, #3
 8000490:	f000 f962 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
 8000496:	f000 f80f 	bl	80004b8 <HAL_InitTick>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004a0:	2301      	movs	r3, #1
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	e001      	b.n	80004aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004a6:	f7ff ff53 	bl	8000350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40022000 	.word	0x40022000

080004b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004c4:	4b17      	ldr	r3, [pc, #92]	; (8000524 <HAL_InitTick+0x6c>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d023      	beq.n	8000514 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <HAL_InitTick+0x70>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <HAL_InitTick+0x6c>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	fbb3 f3f1 	udiv	r3, r3, r1
 80004de:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f96d 	bl	80007c2 <HAL_SYSTICK_Config>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d10f      	bne.n	800050e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d809      	bhi.n	8000508 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f4:	2200      	movs	r2, #0
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004fc:	f000 f937 	bl	800076e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_InitTick+0x74>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6013      	str	r3, [r2, #0]
 8000506:	e007      	b.n	8000518 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000508:	2301      	movs	r3, #1
 800050a:	73fb      	strb	r3, [r7, #15]
 800050c:	e004      	b.n	8000518 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800050e:	2301      	movs	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e001      	b.n	8000518 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x20>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x24>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_IncTick+0x24>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000008 	.word	0x20000008
 8000554:	200001ac 	.word	0x200001ac

08000558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return uwTick;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <HAL_GetTick+0x14>)
 800055e:	681b      	ldr	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	200001ac 	.word	0x200001ac

08000570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff ffee 	bl	8000558 <HAL_GetTick>
 800057c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000588:	d005      	beq.n	8000596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_Delay+0x44>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4413      	add	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000596:	bf00      	nop
 8000598:	f7ff ffde 	bl	8000558 <HAL_GetTick>
 800059c:	4602      	mov	r2, r0
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d8f7      	bhi.n	8000598 <HAL_Delay+0x28>
  {
  }
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000008 	.word	0x20000008

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff29 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff3e 	bl	8000600 <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff31 	bl	800061c <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffa2 	bl	8000714 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ea:	e17f      	b.n	8000aec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	2101      	movs	r1, #1
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f000 8171 	beq.w	8000ae6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0303 	and.w	r3, r3, #3
 800080c:	2b01      	cmp	r3, #1
 800080e:	d005      	beq.n	800081c <HAL_GPIO_Init+0x40>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	2b02      	cmp	r3, #2
 800081a:	d130      	bne.n	800087e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	2203      	movs	r2, #3
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	43db      	mvns	r3, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000852:	2201      	movs	r2, #1
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	4013      	ands	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	f003 0201 	and.w	r2, r3, #1
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	2b03      	cmp	r3, #3
 8000888:	d118      	bne.n	80008bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000890:	2201      	movs	r2, #1
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	f003 0201 	and.w	r2, r3, #1
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 0303 	and.w	r3, r3, #3
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d017      	beq.n	80008f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4013      	ands	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	2b02      	cmp	r3, #2
 8000902:	d123      	bne.n	800094c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	08da      	lsrs	r2, r3, #3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3208      	adds	r2, #8
 800090c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	220f      	movs	r2, #15
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	691a      	ldr	r2, [r3, #16]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4313      	orrs	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3208      	adds	r2, #8
 8000946:	6939      	ldr	r1, [r7, #16]
 8000948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	2203      	movs	r2, #3
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 0203 	and.w	r2, r3, #3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80ac 	beq.w	8000ae6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b5f      	ldr	r3, [pc, #380]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a5e      	ldr	r2, [pc, #376]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <HAL_GPIO_Init+0x330>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009a6:	4a5a      	ldr	r2, [pc, #360]	; (8000b10 <HAL_GPIO_Init+0x334>)
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3302      	adds	r3, #2
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009d0:	d025      	beq.n	8000a1e <HAL_GPIO_Init+0x242>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4f      	ldr	r2, [pc, #316]	; (8000b14 <HAL_GPIO_Init+0x338>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01f      	beq.n	8000a1a <HAL_GPIO_Init+0x23e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4e      	ldr	r2, [pc, #312]	; (8000b18 <HAL_GPIO_Init+0x33c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d019      	beq.n	8000a16 <HAL_GPIO_Init+0x23a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4d      	ldr	r2, [pc, #308]	; (8000b1c <HAL_GPIO_Init+0x340>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0x236>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4c      	ldr	r2, [pc, #304]	; (8000b20 <HAL_GPIO_Init+0x344>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_Init+0x232>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4b      	ldr	r2, [pc, #300]	; (8000b24 <HAL_GPIO_Init+0x348>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0x22e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4a      	ldr	r2, [pc, #296]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_GPIO_Init+0x22a>
 8000a02:	2306      	movs	r3, #6
 8000a04:	e00c      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a06:	2307      	movs	r3, #7
 8000a08:	e00a      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a30:	4937      	ldr	r1, [pc, #220]	; (8000b10 <HAL_GPIO_Init+0x334>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a62:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_GPIO_Init+0x350>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa22 f303 	lsr.w	r3, r2, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f47f ae78 	bne.w	80007ec <HAL_GPIO_Init+0x10>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	48000c00 	.word	0x48000c00
 8000b20:	48001000 	.word	0x48001000
 8000b24:	48001400 	.word	0x48001400
 8000b28:	48001800 	.word	0x48001800
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	041a      	lsls	r2, r3, #16
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43d9      	mvns	r1, r3
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	400b      	ands	r3, r1
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b96:	b08f      	sub	sp, #60	; 0x3c
 8000b98:	af0a      	add	r7, sp, #40	; 0x28
 8000b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e116      	b.n	8000dd4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d106      	bne.n	8000bc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f005 febf 	bl	8006944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2203      	movs	r2, #3
 8000bca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fd72 	bl	80036ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	687e      	ldr	r6, [r7, #4]
 8000bf2:	466d      	mov	r5, sp
 8000bf4:	f106 0410 	add.w	r4, r6, #16
 8000bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c08:	1d33      	adds	r3, r6, #4
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	6838      	ldr	r0, [r7, #0]
 8000c0e:	f002 fc85 	bl	800351c <USB_CoreInit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e0d7      	b.n	8000dd4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fd60 	bl	80036f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e04a      	b.n	8000ccc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	333d      	adds	r3, #61	; 0x3d
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c4a:	7bfa      	ldrb	r2, [r7, #15]
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	440b      	add	r3, r1
 8000c58:	333c      	adds	r3, #60	; 0x3c
 8000c5a:	7bfa      	ldrb	r2, [r7, #15]
 8000c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	b298      	uxth	r0, r3
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	440b      	add	r3, r1
 8000c70:	3344      	adds	r3, #68	; 0x44
 8000c72:	4602      	mov	r2, r0
 8000c74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	3340      	adds	r3, #64	; 0x40
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4413      	add	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	3348      	adds	r3, #72	; 0x48
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	440b      	add	r3, r1
 8000cac:	334c      	adds	r3, #76	; 0x4c
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4413      	add	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	3354      	adds	r3, #84	; 0x54
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3af      	bcc.n	8000c36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e044      	b.n	8000d66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4413      	add	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d1e:	7bfa      	ldrb	r2, [r7, #15]
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	440b      	add	r3, r1
 8000d42:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	440b      	add	r3, r1
 8000d58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	3301      	adds	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	7bfa      	ldrb	r2, [r7, #15]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3b5      	bcc.n	8000cdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	687e      	ldr	r6, [r7, #4]
 8000d78:	466d      	mov	r5, sp
 8000d7a:	f106 0410 	add.w	r4, r6, #16
 8000d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d8e:	1d33      	adds	r3, r6, #4
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	6838      	ldr	r0, [r7, #0]
 8000d94:	f002 fcf8 	bl	8003788 <USB_DevInit>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2202      	movs	r2, #2
 8000da2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e014      	b.n	8000dd4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d102      	bne.n	8000dc8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f001 f882 	bl	8001ecc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fd80 	bl	80048d2 <USB_DevDisconnect>

  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ddc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_PCD_Start+0x1c>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e01c      	b.n	8000e32 <HAL_PCD_Start+0x56>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d105      	bne.n	8000e14 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fc47 	bl	80036ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fd34 	bl	8004890 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e3a:	b590      	push	{r4, r7, lr}
 8000e3c:	b08d      	sub	sp, #52	; 0x34
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fdf2 	bl	8004a3a <USB_GetMode>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f040 847e 	bne.w	800175a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fd56 	bl	8004914 <USB_ReadInterrupts>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8474 	beq.w	8001758 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fd43 	bl	8004914 <USB_ReadInterrupts>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d107      	bne.n	8000ea8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f002 0202 	and.w	r2, r2, #2
 8000ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 fd31 	bl	8004914 <USB_ReadInterrupts>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	2b10      	cmp	r3, #16
 8000eba:	d161      	bne.n	8000f80 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0210 	bic.w	r2, r2, #16
 8000eca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	f003 020f 	and.w	r2, r3, #15
 8000ed8:	4613      	mov	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4413      	add	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3304      	adds	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	0c5b      	lsrs	r3, r3, #17
 8000ef0:	f003 030f 	and.w	r3, r3, #15
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d124      	bne.n	8000f42 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d035      	beq.n	8000f70 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	6a38      	ldr	r0, [r7, #32]
 8000f18:	f003 fb68 	bl	80045ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	091b      	lsrs	r3, r3, #4
 8000f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f28:	441a      	add	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	6a1a      	ldr	r2, [r3, #32]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f3a:	441a      	add	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	621a      	str	r2, [r3, #32]
 8000f40:	e016      	b.n	8000f70 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	0c5b      	lsrs	r3, r3, #17
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d110      	bne.n	8000f70 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000f54:	2208      	movs	r2, #8
 8000f56:	4619      	mov	r1, r3
 8000f58:	6a38      	ldr	r0, [r7, #32]
 8000f5a:	f003 fb47 	bl	80045ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	6a1a      	ldr	r2, [r3, #32]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f6a:	441a      	add	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	699a      	ldr	r2, [r3, #24]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0210 	orr.w	r2, r2, #16
 8000f7e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 fcc5 	bl	8004914 <USB_ReadInterrupts>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f94:	f040 80a7 	bne.w	80010e6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fcca 	bl	800493a <USB_ReadDevAllOutEpInterrupt>
 8000fa6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000fa8:	e099      	b.n	80010de <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 808e 	beq.w	80010d2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fcee 	bl	80049a2 <USB_ReadDevOutEPInterrupt>
 8000fc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00c      	beq.n	8000fec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	015a      	lsls	r2, r3, #5
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 fe96 	bl	8001d18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00c      	beq.n	8001010 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	015a      	lsls	r2, r3, #5
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001002:	461a      	mov	r2, r3
 8001004:	2308      	movs	r3, #8
 8001006:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fed2 	bl	8001db4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	d008      	beq.n	800102c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	015a      	lsls	r2, r3, #5
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	4413      	add	r3, r2
 8001022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001026:	461a      	mov	r2, r3
 8001028:	2310      	movs	r3, #16
 800102a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d030      	beq.n	8001098 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	2b80      	cmp	r3, #128	; 0x80
 8001040:	d109      	bne.n	8001056 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001054:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	3304      	adds	r3, #4
 800106a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2200      	movs	r2, #0
 8001078:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f005 fda5 	bl	8006bd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	015a      	lsls	r2, r3, #5
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	4413      	add	r3, r2
 800108e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001092:	461a      	mov	r2, r3
 8001094:	2302      	movs	r3, #2
 8001096:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d008      	beq.n	80010b4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	015a      	lsls	r2, r3, #5
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4413      	add	r3, r2
 80010aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010ae:	461a      	mov	r2, r3
 80010b0:	2320      	movs	r3, #32
 80010b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d009      	beq.n	80010d2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	015a      	lsls	r2, r3, #5
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	4413      	add	r3, r2
 80010c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010ca:	461a      	mov	r2, r3
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	3301      	adds	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010da:	085b      	lsrs	r3, r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80010de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f47f af62 	bne.w	8000faa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fc12 	bl	8004914 <USB_ReadInterrupts>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010fa:	f040 80a4 	bne.w	8001246 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fc33 	bl	800496e <USB_ReadDevAllInEpInterrupt>
 8001108:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800110e:	e096      	b.n	800123e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 808b 	beq.w	8001232 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fc59 	bl	80049de <USB_ReadDevInEPInterrupt>
 800112c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	2201      	movs	r2, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800114c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	69f9      	ldr	r1, [r7, #28]
 8001154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001158:	4013      	ands	r3, r2
 800115a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	015a      	lsls	r2, r3, #5
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	4413      	add	r3, r2
 8001164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001168:	461a      	mov	r2, r3
 800116a:	2301      	movs	r3, #1
 800116c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f005 fc96 	bl	8006aa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	015a      	lsls	r2, r3, #5
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	4413      	add	r3, r2
 800118c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001190:	461a      	mov	r2, r3
 8001192:	2308      	movs	r3, #8
 8001194:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	015a      	lsls	r2, r3, #5
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	4413      	add	r3, r2
 80011a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011ac:	461a      	mov	r2, r3
 80011ae:	2310      	movs	r3, #16
 80011b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	015a      	lsls	r2, r3, #5
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011c8:	461a      	mov	r2, r3
 80011ca:	2340      	movs	r3, #64	; 0x40
 80011cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d023      	beq.n	8001220 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80011d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011da:	6a38      	ldr	r0, [r7, #32]
 80011dc:	f002 fc20 	bl	8003a20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80011e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	3338      	adds	r3, #56	; 0x38
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	3304      	adds	r3, #4
 80011f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	78db      	ldrb	r3, [r3, #3]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2200      	movs	r2, #0
 8001200:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f005 fcf3 	bl	8006bf4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800121a:	461a      	mov	r2, r3
 800121c:	2302      	movs	r3, #2
 800121e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800122a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fcea 	bl	8001c06 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	3301      	adds	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f af65 	bne.w	8001110 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fb62 	bl	8004914 <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800125a:	d122      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f005 ff27 	bl	80070d8 <HAL_PCDEx_LPM_Callback>
 800128a:	e002      	b.n	8001292 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f005 fc77 	bl	8006b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	695a      	ldr	r2, [r3, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80012a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fb34 	bl	8004914 <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012b6:	d112      	bne.n	80012de <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d102      	bne.n	80012ce <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f005 fc33 	bl	8006b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80012dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fb16 	bl	8004914 <USB_ReadInterrupts>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012f2:	d121      	bne.n	8001338 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001302:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d111      	bne.n	8001332 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	f003 020f 	and.w	r2, r3, #15
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001328:	2101      	movs	r1, #1
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f005 fed4 	bl	80070d8 <HAL_PCDEx_LPM_Callback>
 8001330:	e002      	b.n	8001338 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f005 fbfe 	bl	8006b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 fae9 	bl	8004914 <USB_ReadInterrupts>
 8001342:	4603      	mov	r3, r0
 8001344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800134c:	f040 80b5 	bne.w	80014ba <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2110      	movs	r1, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fb58 	bl	8003a20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001374:	e046      	b.n	8001404 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	015a      	lsls	r2, r3, #5
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	4413      	add	r3, r2
 800137e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001382:	461a      	mov	r2, r3
 8001384:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001388:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	015a      	lsls	r2, r3, #5
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	4413      	add	r3, r2
 8001392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139a:	0151      	lsls	r1, r2, #5
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	440a      	add	r2, r1
 80013a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80013a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	015a      	lsls	r2, r3, #5
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b6:	461a      	mov	r2, r3
 80013b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80013bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	015a      	lsls	r2, r3, #5
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ce:	0151      	lsls	r1, r2, #5
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	440a      	add	r2, r1
 80013d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80013d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ee:	0151      	lsls	r1, r2, #5
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	440a      	add	r2, r1
 80013f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80013f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	3301      	adds	r3, #1
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800140a:	429a      	cmp	r2, r3
 800140c:	d3b3      	bcc.n	8001376 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800141c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001420:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800143a:	f043 030b 	orr.w	r3, r3, #11
 800143e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001450:	f043 030b 	orr.w	r3, r3, #11
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	e015      	b.n	8001484 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001466:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800146a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800146e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800147e:	f043 030b 	orr.w	r3, r3, #11
 8001482:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001492:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001496:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f003 faf9 	bl	8004a9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80014b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fa28 	bl	8004914 <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ce:	d124      	bne.n	800151a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fabe 	bl	8004a56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fb1b 	bl	8003b1a <USB_GetDevSpeed>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681c      	ldr	r4, [r3, #0]
 80014f0:	f001 faec 	bl	8002acc <HAL_RCC_GetHCLKFreq>
 80014f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4620      	mov	r0, r4
 8001500:	f002 f838 	bl	8003574 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f005 faf6 	bl	8006af6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001518:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f003 f9f8 	bl	8004914 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b08      	cmp	r3, #8
 800152c:	d10a      	bne.n	8001544 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f005 fad3 	bl	8006ada <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f002 0208 	and.w	r2, r2, #8
 8001542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f003 f9e3 	bl	8004914 <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b80      	cmp	r3, #128	; 0x80
 8001556:	d122      	bne.n	800159e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001564:	2301      	movs	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	e014      	b.n	8001594 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d105      	bne.n	800158e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fb0b 	bl	8001ba4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3301      	adds	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159a:	429a      	cmp	r2, r3
 800159c:	d3e5      	bcc.n	800156a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 f9b6 	bl	8004914 <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015b2:	d13b      	bne.n	800162c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015b4:	2301      	movs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
 80015b8:	e02b      	b.n	8001612 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3340      	adds	r3, #64	; 0x40
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d115      	bne.n	800160c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80015e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da12      	bge.n	800160c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	333f      	adds	r3, #63	; 0x3f
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 facc 	bl	8001ba4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	3301      	adds	r3, #1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	429a      	cmp	r2, r3
 800161a:	d3ce      	bcc.n	80015ba <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800162a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f003 f96f 	bl	8004914 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001640:	d155      	bne.n	80016ee <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001642:	2301      	movs	r3, #1
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	e045      	b.n	80016d4 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d12e      	bne.n	80016ce <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001670:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001672:	2b00      	cmp	r3, #0
 8001674:	da2b      	bge.n	80016ce <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001682:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001686:	429a      	cmp	r2, r3
 8001688:	d121      	bne.n	80016ce <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168e:	4613      	mov	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10a      	bne.n	80016ce <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ca:	6053      	str	r3, [r2, #4]
            break;
 80016cc:	e007      	b.n	80016de <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	3301      	adds	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3b4      	bcc.n	8001648 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80016ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 f90e 	bl	8004914 <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001702:	d10a      	bne.n	800171a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f005 fa87 	bl	8006c18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f8f8 	bl	8004914 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b04      	cmp	r3, #4
 800172c:	d115      	bne.n	800175a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f005 fa77 	bl	8006c34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e000      	b.n	800175a <HAL_PCD_IRQHandler+0x920>
      return;
 8001758:	bf00      	nop
    }
  }
}
 800175a:	3734      	adds	r7, #52	; 0x34
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}

08001760 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_PCD_SetAddress+0x1a>
 8001776:	2302      	movs	r3, #2
 8001778:	e013      	b.n	80017a2 <HAL_PCD_SetAddress+0x42>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f856 	bl	8004844 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	4608      	mov	r0, r1
 80017b4:	4611      	mov	r1, r2
 80017b6:	461a      	mov	r2, r3
 80017b8:	4603      	mov	r3, r0
 80017ba:	70fb      	strb	r3, [r7, #3]
 80017bc:	460b      	mov	r3, r1
 80017be:	803b      	strh	r3, [r7, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da0f      	bge.n	80017f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	f003 020f 	and.w	r2, r3, #15
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	3338      	adds	r3, #56	; 0x38
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4413      	add	r3, r2
 80017e4:	3304      	adds	r3, #4
 80017e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	705a      	strb	r2, [r3, #1]
 80017ee:	e00f      	b.n	8001810 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	f003 020f 	and.w	r2, r3, #15
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	3304      	adds	r3, #4
 8001808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800181c:	883a      	ldrh	r2, [r7, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	78ba      	ldrb	r2, [r7, #2]
 8001826:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800183a:	78bb      	ldrb	r3, [r7, #2]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d102      	bne.n	8001846 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_PCD_EP_Open+0xaa>
 8001850:	2302      	movs	r3, #2
 8001852:	e00e      	b.n	8001872 <HAL_PCD_EP_Open+0xc8>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 f978 	bl	8003b58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001870:	7afb      	ldrb	r3, [r7, #11]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	da0f      	bge.n	80018ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	f003 020f 	and.w	r2, r3, #15
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3338      	adds	r3, #56	; 0x38
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	3304      	adds	r3, #4
 80018a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	705a      	strb	r2, [r3, #1]
 80018ac:	e00f      	b.n	80018ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 020f 	and.w	r2, r3, #15
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	3304      	adds	r3, #4
 80018c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_PCD_EP_Close+0x6e>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e00e      	b.n	8001906 <HAL_PCD_EP_Close+0x8c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 f9b6 	bl	8003c68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	460b      	mov	r3, r1
 800191c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191e:	7afb      	ldrb	r3, [r7, #11]
 8001920:	f003 020f 	and.w	r2, r3, #15
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2200      	movs	r2, #0
 8001948:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2200      	movs	r2, #0
 800194e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	b2da      	uxtb	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6979      	ldr	r1, [r7, #20]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fc37 	bl	80041e0 <USB_EP0StartXfer>
 8001972:	e005      	b.n	8001980 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6979      	ldr	r1, [r7, #20]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fa50 	bl	8003e20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 020f 	and.w	r2, r3, #15
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80019ac:	681b      	ldr	r3, [r3, #0]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	460b      	mov	r3, r1
 80019c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	f003 020f 	and.w	r2, r3, #15
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	3338      	adds	r3, #56	; 0x38
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	3304      	adds	r3, #4
 80019e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2201      	movs	r2, #1
 80019f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d106      	bne.n	8001a1e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6979      	ldr	r1, [r7, #20]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fbe2 	bl	80041e0 <USB_EP0StartXfer>
 8001a1c:	e005      	b.n	8001a2a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6979      	ldr	r1, [r7, #20]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 f9fb 	bl	8003e20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 020f 	and.w	r2, r3, #15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d901      	bls.n	8001a52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e04e      	b.n	8001af0 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da0f      	bge.n	8001a7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 020f 	and.w	r2, r3, #15
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	3338      	adds	r3, #56	; 0x38
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3304      	adds	r3, #4
 8001a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	705a      	strb	r2, [r3, #1]
 8001a78:	e00d      	b.n	8001a96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_PCD_EP_SetStall+0x82>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e01c      	b.n	8001af0 <HAL_PCD_EP_SetStall+0xbc>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fde9 	bl	800469c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f002 ffdb 	bl	8004a9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d901      	bls.n	8001b16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e042      	b.n	8001b9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da0f      	bge.n	8001b3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 020f 	and.w	r2, r3, #15
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	705a      	strb	r2, [r3, #1]
 8001b3c:	e00f      	b.n	8001b5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	f003 020f 	and.w	r2, r3, #15
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_PCD_EP_ClrStall+0x86>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e00e      	b.n	8001b9c <HAL_PCD_EP_ClrStall+0xa4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 fdf3 	bl	8004778 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da0c      	bge.n	8001bd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	f003 020f 	and.w	r2, r3, #15
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	3338      	adds	r3, #56	; 0x38
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e00c      	b.n	8001bec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 020f 	and.w	r2, r3, #15
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fc16 	bl	8004424 <USB_EPStopXfer>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b088      	sub	sp, #32
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	3338      	adds	r3, #56	; 0x38
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a1a      	ldr	r2, [r3, #32]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d901      	bls.n	8001c3e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e067      	b.n	8001d0e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d902      	bls.n	8001c5a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3303      	adds	r3, #3
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c62:	e026      	b.n	8001cb2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d902      	bls.n	8001c80 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3303      	adds	r3, #3
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6919      	ldr	r1, [r3, #16]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	6978      	ldr	r0, [r7, #20]
 8001c96:	f002 fc6f 	bl	8004578 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	441a      	add	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	441a      	add	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d809      	bhi.n	8001cdc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d203      	bcs.n	8001cdc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1c3      	bne.n	8001c64 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d811      	bhi.n	8001d0c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	2201      	movs	r2, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	6939      	ldr	r1, [r7, #16]
 8001d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d08:	4013      	ands	r3, r2
 8001d0a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	333c      	adds	r3, #60	; 0x3c
 8001d30:	3304      	adds	r3, #4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <PCD_EP_OutXfrComplete_int+0x98>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d124      	bne.n	8001d98 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d6a:	6093      	str	r3, [r2, #8]
 8001d6c:	e01a      	b.n	8001da4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d84:	461a      	mov	r2, r3
 8001d86:	2320      	movs	r3, #32
 8001d88:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f004 fe6d 	bl	8006a70 <HAL_PCD_DataOutStageCallback>
 8001d96:	e005      	b.n	8001da4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f004 fe66 	bl	8006a70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	4f54310a 	.word	0x4f54310a

08001db4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	333c      	adds	r3, #60	; 0x3c
 8001dcc:	3304      	adds	r3, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <PCD_EP_OutSetupPacket_int+0x64>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d90e      	bls.n	8001e08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d009      	beq.n	8001e08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e00:	461a      	mov	r2, r3
 8001e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f004 fe1f 	bl	8006a4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	4f54300a 	.word	0x4f54300a

08001e1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e3a:	883b      	ldrh	r3, [r7, #0]
 8001e3c:	0419      	lsls	r1, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
 8001e48:	e028      	b.n	8001e9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	0c1b      	lsrs	r3, r3, #16
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4413      	add	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e00d      	b.n	8001e7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3340      	adds	r3, #64	; 0x40
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4413      	add	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	3301      	adds	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3ec      	bcc.n	8001e5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e84:	883b      	ldrh	r3, [r7, #0]
 8001e86:	0418      	lsls	r0, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4302      	orrs	r2, r0
 8001e94:	3340      	adds	r3, #64	; 0x40
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	f043 0303 	orr.w	r3, r3, #3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40007000 	.word	0x40007000

08001f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f3e:	d130      	bne.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4c:	d038      	beq.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f56:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2232      	movs	r2, #50	; 0x32
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	3301      	adds	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f74:	e002      	b.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f88:	d102      	bne.n	8001f90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f2      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d110      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e00f      	b.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d007      	beq.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb8:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	431bde83 	.word	0x431bde83

08001fdc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	6053      	str	r3, [r2, #4]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e3ca      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200e:	4b97      	ldr	r3, [pc, #604]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002018:	4b94      	ldr	r3, [pc, #592]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80e4 	beq.w	80021f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_RCC_OscConfig+0x4a>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	f040 808b 	bne.w	8002154 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b01      	cmp	r3, #1
 8002042:	f040 8087 	bne.w	8002154 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002046:	4b89      	ldr	r3, [pc, #548]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x62>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e3a2      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1a      	ldr	r2, [r3, #32]
 8002062:	4b82      	ldr	r3, [pc, #520]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <HAL_RCC_OscConfig+0x7c>
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002076:	e005      	b.n	8002084 <HAL_RCC_OscConfig+0x88>
 8002078:	4b7c      	ldr	r3, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002084:	4293      	cmp	r3, r2
 8002086:	d223      	bcs.n	80020d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fd29 	bl	8002ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e383      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209c:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a72      	ldr	r2, [pc, #456]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	496d      	ldr	r1, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	4b6c      	ldr	r3, [pc, #432]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	4968      	ldr	r1, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
 80020ce:	e025      	b.n	800211c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4960      	ldr	r1, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	495b      	ldr	r1, [pc, #364]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fce9 	bl	8002ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e343      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800211c:	f000 fc4a 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	4950      	ldr	r1, [pc, #320]	; (8002270 <HAL_RCC_OscConfig+0x274>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <HAL_RCC_OscConfig+0x278>)
 800213a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800213c:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCC_OscConfig+0x27c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f9b9 	bl	80004b8 <HAL_InitTick>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d052      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	e327      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d032      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800215c:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a42      	ldr	r2, [pc, #264]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002168:	f7fe f9f6 	bl	8000558 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002170:	f7fe f9f2 	bl	8000558 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e310      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a36      	ldr	r2, [pc, #216]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4931      	ldr	r1, [pc, #196]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ac:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	492c      	ldr	r1, [pc, #176]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e01a      	b.n	80021f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ce:	f7fe f9c3 	bl	8000558 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d6:	f7fe f9bf 	bl	8000558 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e2dd      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1da>
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d074      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b08      	cmp	r3, #8
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x21a>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d10e      	bne.n	800222e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d064      	beq.n	80022ec <HAL_RCC_OscConfig+0x2f0>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d160      	bne.n	80022ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e2ba      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x24a>
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e026      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224e:	d115      	bne.n	800227c <HAL_RCC_OscConfig+0x280>
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a02      	ldr	r2, [pc, #8]	; (800226c <HAL_RCC_OscConfig+0x270>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x298>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	08007268 	.word	0x08007268
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004
 800227c:	4ba0      	ldr	r3, [pc, #640]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a9f      	ldr	r2, [pc, #636]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a9c      	ldr	r2, [pc, #624]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe f95c 	bl	8000558 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe f958 	bl	8000558 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e276      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b6:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2a8>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe f948 	bl	8000558 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe f944 	bl	8000558 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e262      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x2d0>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d060      	beq.n	80023bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x310>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d119      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d116      	bne.n	800233a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x328>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e23f      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4973      	ldr	r1, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	e040      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d023      	beq.n	800238a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002342:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe f903 	bl	8000558 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe f8ff 	bl	8000558 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e21d      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	495f      	ldr	r1, [pc, #380]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002384:	4313      	orrs	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
 8002388:	e018      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe f8df 	bl	8000558 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe f8db 	bl	8000558 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1f9      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d03c      	beq.n	8002442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01c      	beq.n	800240a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d6:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe f8ba 	bl	8000558 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe f8b6 	bl	8000558 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1d4      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ef      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3ec>
 8002408:	e01b      	b.n	8002442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800240c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002410:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe f89d 	bl	8000558 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002422:	f7fe f899 	bl	8000558 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1b7      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ef      	bne.n	8002422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80a6 	beq.w	800259c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	; 0x58
 800246c:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d118      	bne.n	80024ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002494:	f7fe f860 	bl	8000558 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe f85c 	bl	8000558 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e17a      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x508>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4d8>
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d2:	e029      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d115      	bne.n	8002508 <HAL_RCC_OscConfig+0x50c>
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a03      	ldr	r2, [pc, #12]	; (8002500 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x52c>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	4b9c      	ldr	r3, [pc, #624]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a9b      	ldr	r2, [pc, #620]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	4b98      	ldr	r3, [pc, #608]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a97      	ldr	r2, [pc, #604]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d016      	beq.n	800255e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe f812 	bl	8000558 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe f80e 	bl	8000558 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e12a      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ed      	beq.n	8002538 <HAL_RCC_OscConfig+0x53c>
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255e:	f7fd fffb 	bl	8000558 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fd fff7 	bl	8000558 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e113      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800257c:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ed      	bne.n	8002566 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7ffb      	ldrb	r3, [r7, #31]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b7a      	ldr	r3, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	4a79      	ldr	r2, [pc, #484]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80fe 	beq.w	80027a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	f040 80d0 	bne.w	8002750 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025b0:	4b72      	ldr	r3, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x780>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d130      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	3b01      	subs	r3, #1
 80025d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d127      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11f      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025f0:	2a07      	cmp	r2, #7
 80025f2:	bf14      	ite	ne
 80025f4:	2201      	movne	r2, #1
 80025f6:	2200      	moveq	r2, #0
 80025f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d113      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d109      	bne.n	8002626 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d06e      	beq.n	8002704 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d069      	beq.n	8002700 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0ad      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002648:	4b4c      	ldr	r3, [pc, #304]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a4b      	ldr	r2, [pc, #300]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800264e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002654:	f7fd ff80 	bl	8000558 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fd ff7c 	bl	8000558 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e09a      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267a:	4b40      	ldr	r3, [pc, #256]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b40      	ldr	r3, [pc, #256]	; (8002780 <HAL_RCC_OscConfig+0x784>)
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800268a:	3a01      	subs	r2, #1
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002694:	0212      	lsls	r2, r2, #8
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800269c:	0852      	lsrs	r2, r2, #1
 800269e:	3a01      	subs	r2, #1
 80026a0:	0552      	lsls	r2, r2, #21
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a8:	0852      	lsrs	r2, r2, #1
 80026aa:	3a01      	subs	r2, #1
 80026ac:	0652      	lsls	r2, r2, #25
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026b4:	0912      	lsrs	r2, r2, #4
 80026b6:	0452      	lsls	r2, r2, #17
 80026b8:	430a      	orrs	r2, r1
 80026ba:	4930      	ldr	r1, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x780>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_RCC_OscConfig+0x780>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2d      	ldr	r2, [pc, #180]	; (800277c <HAL_RCC_OscConfig+0x780>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x780>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	; (800277c <HAL_RCC_OscConfig+0x780>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d8:	f7fd ff3e 	bl	8000558 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fd ff3a 	bl	8000558 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e058      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_RCC_OscConfig+0x780>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fe:	e050      	b.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e04f      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d148      	bne.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002726:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002728:	f7fd ff16 	bl	8000558 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fd ff12 	bl	8000558 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e030      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x734>
 800274e:	e028      	b.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d023      	beq.n	800279e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_OscConfig+0x780>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_RCC_OscConfig+0x780>)
 800275c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fd fef9 	bl	8000558 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002768:	e00c      	b.n	8002784 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7fd fef5 	bl	8000558 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d905      	bls.n	8002784 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e013      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
 800277c:	40021000 	.word	0x40021000
 8002780:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_RCC_OscConfig+0x7b0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ec      	bne.n	800276a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_OscConfig+0x7b0>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4905      	ldr	r1, [pc, #20]	; (80027ac <HAL_RCC_OscConfig+0x7b0>)
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_OscConfig+0x7b4>)
 8002798:	4013      	ands	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
 800279c:	e001      	b.n	80027a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	feeefffc 	.word	0xfeeefffc

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0e7      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b75      	ldr	r3, [pc, #468]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d910      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b72      	ldr	r3, [pc, #456]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4970      	ldr	r1, [pc, #448]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b6e      	ldr	r3, [pc, #440]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cf      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002810:	429a      	cmp	r2, r3
 8002812:	d908      	bls.n	8002826 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4960      	ldr	r1, [pc, #384]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d04c      	beq.n	80028cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b03      	cmp	r3, #3
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d121      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0a6      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e09a      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800286a:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e08e      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e086      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4943      	ldr	r1, [pc, #268]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fd fe5c 	bl	8000558 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fd fe58 	bl	8000558 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e06e      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d208      	bcs.n	80028fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	492b      	ldr	r1, [pc, #172]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d210      	bcs.n	800292a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 0207 	bic.w	r2, r3, #7
 8002910:	4923      	ldr	r1, [pc, #140]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_RCC_ClockConfig+0x1ec>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e036      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4918      	ldr	r1, [pc, #96]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4910      	ldr	r1, [pc, #64]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002968:	f000 f824 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	490b      	ldr	r1, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1f4>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 8002986:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1fc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fd93 	bl	80004b8 <HAL_InitTick>
 8002992:	4603      	mov	r3, r0
 8002994:	72fb      	strb	r3, [r7, #11]

  return status;
 8002996:	7afb      	ldrb	r3, [r7, #11]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08007268 	.word	0x08007268
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c2:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d121      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d11e      	bne.n	8002a26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 80029f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e005      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a10:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e004      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	d134      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d003      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xac>
 8002a58:	e005      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a5c:	617b      	str	r3, [r7, #20]
      break;
 8002a5e:	e005      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a62:	617b      	str	r3, [r7, #20]
      break;
 8002a64:	e002      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	617b      	str	r3, [r7, #20]
      break;
 8002a6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	fb03 f202 	mul.w	r2, r3, r2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	0e5b      	lsrs	r3, r3, #25
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aac:	69bb      	ldr	r3, [r7, #24]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08007278 	.word	0x08007278
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000

08002ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002afc:	f7ff fa0a 	bl	8001f14 <HAL_PWREx_GetVoltageRange>
 8002b00:	6178      	str	r0, [r7, #20]
 8002b02:	e014      	b.n	8002b2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b1c:	f7ff f9fa 	bl	8001f14 <HAL_PWREx_GetVoltageRange>
 8002b20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b34:	d10b      	bne.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b80      	cmp	r3, #128	; 0x80
 8002b3a:	d919      	bls.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b40:	d902      	bls.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b42:	2302      	movs	r3, #2
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e013      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b48:	2301      	movs	r3, #1
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e010      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d902      	bls.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b54:	2303      	movs	r3, #3
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e00a      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d102      	bne.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b60:	2302      	movs	r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e004      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b70      	cmp	r3, #112	; 0x70
 8002b6a:	d101      	bne.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	4909      	ldr	r1, [pc, #36]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40022000 	.word	0x40022000

08002ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bac:	2300      	movs	r3, #0
 8002bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d041      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc8:	d02a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bce:	d824      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bda:	d81e      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be4:	d010      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002be6:	e018      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002be8:	4b86      	ldr	r3, [pc, #536]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a85      	ldr	r2, [pc, #532]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf4:	e015      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fabb 	bl	8003178 <RCCEx_PLLSAI1_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c06:	e00c      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3320      	adds	r3, #32
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fba6 	bl	8003360 <RCCEx_PLLSAI2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c18:	e003      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c28:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c36:	4973      	ldr	r1, [pc, #460]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c3e:	e001      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d041      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c58:	d02a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c5e:	d824      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c6a:	d81e      	bhi.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c74:	d010      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c76:	e018      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c78:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a61      	ldr	r2, [pc, #388]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c84:	e015      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fa73 	bl	8003178 <RCCEx_PLLSAI1_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c96:	e00c      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3320      	adds	r3, #32
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fb5e 	bl	8003360 <RCCEx_PLLSAI2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ca8:	e003      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	74fb      	strb	r3, [r7, #19]
      break;
 8002cae:	e000      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cb8:	4b52      	ldr	r3, [pc, #328]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc6:	494f      	ldr	r1, [pc, #316]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cce:	e001      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a0 	beq.w	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
 8002d08:	4b3e      	ldr	r3, [pc, #248]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d24:	f7fd fc18 	bl	8000558 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d2a:	e009      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fd fc14 	bl	8000558 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d902      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d3e:	e005      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ef      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d15c      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01f      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d019      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d7c:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fd fbd3 	bl	8000558 <HAL_GetTick>
 8002db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db4:	e00b      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fd fbcf 	bl	8000558 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d902      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	74fb      	strb	r3, [r7, #19]
            break;
 8002dcc:	e006      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ec      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df2:	4904      	ldr	r1, [pc, #16]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dfa:	e009      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
 8002e00:	e006      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e10:	7c7b      	ldrb	r3, [r7, #17]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b9e      	ldr	r3, [pc, #632]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	4a9d      	ldr	r2, [pc, #628]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2e:	4b98      	ldr	r3, [pc, #608]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f023 0203 	bic.w	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	4994      	ldr	r1, [pc, #592]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e50:	4b8f      	ldr	r3, [pc, #572]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f023 020c 	bic.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	498c      	ldr	r1, [pc, #560]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e72:	4b87      	ldr	r3, [pc, #540]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4983      	ldr	r1, [pc, #524]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e94:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	497b      	ldr	r1, [pc, #492]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec4:	4972      	ldr	r1, [pc, #456]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	496a      	ldr	r1, [pc, #424]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	4961      	ldr	r1, [pc, #388]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f1c:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	4959      	ldr	r1, [pc, #356]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3e:	4b54      	ldr	r3, [pc, #336]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	4950      	ldr	r1, [pc, #320]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f60:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	4948      	ldr	r1, [pc, #288]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f82:	4b43      	ldr	r3, [pc, #268]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	493f      	ldr	r1, [pc, #252]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d028      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb2:	4937      	ldr	r1, [pc, #220]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a31      	ldr	r2, [pc, #196]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fce:	60d3      	str	r3, [r2, #12]
 8002fd0:	e011      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f8c8 	bl	8003178 <RCCEx_PLLSAI1_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d028      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	491f      	ldr	r1, [pc, #124]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003020:	d106      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302c:	60d3      	str	r3, [r2, #12]
 800302e:	e011      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003038:	d10c      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f899 	bl	8003178 <RCCEx_PLLSAI1_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	4908      	ldr	r1, [pc, #32]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800307e:	d109      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a02      	ldr	r2, [pc, #8]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800308a:	60d3      	str	r3, [r2, #12]
 800308c:	e014      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f867 	bl	8003178 <RCCEx_PLLSAI1_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d02f      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d2:	4928      	ldr	r1, [pc, #160]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e2:	d10d      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	2102      	movs	r1, #2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f844 	bl	8003178 <RCCEx_PLLSAI1_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d014      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	74bb      	strb	r3, [r7, #18]
 80030fe:	e011      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003108:	d10c      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3320      	adds	r3, #32
 800310e:	2102      	movs	r1, #2
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f925 	bl	8003360 <RCCEx_PLLSAI2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313e:	490d      	ldr	r1, [pc, #52]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003162:	4904      	ldr	r1, [pc, #16]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800316a:	7cbb      	ldrb	r3, [r7, #18]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000

08003178 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003186:	4b75      	ldr	r3, [pc, #468]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d018      	beq.n	80031c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003192:	4b72      	ldr	r3, [pc, #456]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0203 	and.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10d      	bne.n	80031be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
       ||
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031aa:	4b6c      	ldr	r3, [pc, #432]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d047      	beq.n	800324e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
 80031c2:	e044      	b.n	800324e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d018      	beq.n	80031fe <RCCEx_PLLSAI1_Config+0x86>
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d825      	bhi.n	800321c <RCCEx_PLLSAI1_Config+0xa4>
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d002      	beq.n	80031da <RCCEx_PLLSAI1_Config+0x62>
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d009      	beq.n	80031ec <RCCEx_PLLSAI1_Config+0x74>
 80031d8:	e020      	b.n	800321c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031da:	4b60      	ldr	r3, [pc, #384]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11d      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ea:	e01a      	b.n	8003222 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ec:	4b5b      	ldr	r3, [pc, #364]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d116      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fc:	e013      	b.n	8003226 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031fe:	4b57      	ldr	r3, [pc, #348]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800320a:	4b54      	ldr	r3, [pc, #336]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800321a:	e006      	b.n	800322a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      break;
 8003220:	e004      	b.n	800322c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800322a:	bf00      	nop
    }

    if(status == HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003232:	4b4a      	ldr	r3, [pc, #296]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	430b      	orrs	r3, r1
 8003248:	4944      	ldr	r1, [pc, #272]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 800324a:	4313      	orrs	r3, r2
 800324c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d17d      	bne.n	8003350 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003254:	4b41      	ldr	r3, [pc, #260]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a40      	ldr	r2, [pc, #256]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 800325a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fd f97a 	bl	8000558 <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003266:	e009      	b.n	800327c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003268:	f7fd f976 	bl	8000558 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d902      	bls.n	800327c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
        break;
 800327a:	e005      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327c:	4b37      	ldr	r3, [pc, #220]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ef      	bne.n	8003268 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d160      	bne.n	8003350 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800329c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6892      	ldr	r2, [r2, #8]
 80032a4:	0211      	lsls	r1, r2, #8
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	0912      	lsrs	r2, r2, #4
 80032ac:	0452      	lsls	r2, r2, #17
 80032ae:	430a      	orrs	r2, r1
 80032b0:	492a      	ldr	r1, [pc, #168]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	610b      	str	r3, [r1, #16]
 80032b6:	e027      	b.n	8003308 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d112      	bne.n	80032e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032be:	4b27      	ldr	r3, [pc, #156]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6892      	ldr	r2, [r2, #8]
 80032ce:	0211      	lsls	r1, r2, #8
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6912      	ldr	r2, [r2, #16]
 80032d4:	0852      	lsrs	r2, r2, #1
 80032d6:	3a01      	subs	r2, #1
 80032d8:	0552      	lsls	r2, r2, #21
 80032da:	430a      	orrs	r2, r1
 80032dc:	491f      	ldr	r1, [pc, #124]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	610b      	str	r3, [r1, #16]
 80032e2:	e011      	b.n	8003308 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6892      	ldr	r2, [r2, #8]
 80032f4:	0211      	lsls	r1, r2, #8
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6952      	ldr	r2, [r2, #20]
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0652      	lsls	r2, r2, #25
 8003300:	430a      	orrs	r2, r1
 8003302:	4916      	ldr	r1, [pc, #88]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003308:	4b14      	ldr	r3, [pc, #80]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 800330e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003312:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fd f920 	bl	8000558 <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800331a:	e009      	b.n	8003330 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331c:	f7fd f91c 	bl	8000558 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	73fb      	strb	r3, [r7, #15]
          break;
 800332e:	e005      	b.n	800333c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ef      	beq.n	800331c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	4904      	ldr	r1, [pc, #16]	; (800335c <RCCEx_PLLSAI1_Config+0x1e4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000

08003360 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800336e:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0203 	and.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d10d      	bne.n	80033a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
       ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003392:	4b61      	ldr	r3, [pc, #388]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
       ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d047      	beq.n	8003436 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e044      	b.n	8003436 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d018      	beq.n	80033e6 <RCCEx_PLLSAI2_Config+0x86>
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d825      	bhi.n	8003404 <RCCEx_PLLSAI2_Config+0xa4>
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d002      	beq.n	80033c2 <RCCEx_PLLSAI2_Config+0x62>
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d009      	beq.n	80033d4 <RCCEx_PLLSAI2_Config+0x74>
 80033c0:	e020      	b.n	8003404 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033c2:	4b55      	ldr	r3, [pc, #340]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d11d      	bne.n	800340a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d2:	e01a      	b.n	800340a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d116      	bne.n	800340e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e4:	e013      	b.n	800340e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003402:	e006      	b.n	8003412 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      break;
 8003408:	e004      	b.n	8003414 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003412:	bf00      	nop
    }

    if(status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	430b      	orrs	r3, r1
 8003430:	4939      	ldr	r1, [pc, #228]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d167      	bne.n	800350c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800343c:	4b36      	ldr	r3, [pc, #216]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a35      	ldr	r2, [pc, #212]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fd f886 	bl	8000558 <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800344e:	e009      	b.n	8003464 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003450:	f7fd f882 	bl	8000558 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d902      	bls.n	8003464 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	73fb      	strb	r3, [r7, #15]
        break;
 8003462:	e005      	b.n	8003470 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003464:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1ef      	bne.n	8003450 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d14a      	bne.n	800350c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6892      	ldr	r2, [r2, #8]
 800348c:	0211      	lsls	r1, r2, #8
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68d2      	ldr	r2, [r2, #12]
 8003492:	0912      	lsrs	r2, r2, #4
 8003494:	0452      	lsls	r2, r2, #17
 8003496:	430a      	orrs	r2, r1
 8003498:	491f      	ldr	r1, [pc, #124]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	4313      	orrs	r3, r2
 800349c:	614b      	str	r3, [r1, #20]
 800349e:	e011      	b.n	80034c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6892      	ldr	r2, [r2, #8]
 80034b0:	0211      	lsls	r1, r2, #8
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6912      	ldr	r2, [r2, #16]
 80034b6:	0852      	lsrs	r2, r2, #1
 80034b8:	3a01      	subs	r2, #1
 80034ba:	0652      	lsls	r2, r2, #25
 80034bc:	430a      	orrs	r2, r1
 80034be:	4916      	ldr	r1, [pc, #88]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd f842 	bl	8000558 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034d6:	e009      	b.n	80034ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034d8:	f7fd f83e 	bl	8000558 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d902      	bls.n	80034ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	73fb      	strb	r3, [r7, #15]
          break;
 80034ea:	e005      	b.n	80034f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4904      	ldr	r1, [pc, #16]	; (8003518 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003508:	4313      	orrs	r3, r2
 800350a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000

0800351c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800351c:	b084      	sub	sp, #16
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	f107 001c 	add.w	r0, r7, #28
 800352a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f001 faf6 	bl	8004b2c <USB_CoreReset>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
 8003556:	e005      	b.n	8003564 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003564:	7bfb      	ldrb	r3, [r7, #15]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003570:	b004      	add	sp, #16
 8003572:	4770      	bx	lr

08003574 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d165      	bne.n	8003654 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a3e      	ldr	r2, [pc, #248]	; (8003684 <USB_SetTurnaroundTime+0x110>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d906      	bls.n	800359e <USB_SetTurnaroundTime+0x2a>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4a3d      	ldr	r2, [pc, #244]	; (8003688 <USB_SetTurnaroundTime+0x114>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d202      	bcs.n	800359e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003598:	230f      	movs	r3, #15
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e05c      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4a39      	ldr	r2, [pc, #228]	; (8003688 <USB_SetTurnaroundTime+0x114>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d306      	bcc.n	80035b4 <USB_SetTurnaroundTime+0x40>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4a38      	ldr	r2, [pc, #224]	; (800368c <USB_SetTurnaroundTime+0x118>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d202      	bcs.n	80035b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035ae:	230e      	movs	r3, #14
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e051      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4a35      	ldr	r2, [pc, #212]	; (800368c <USB_SetTurnaroundTime+0x118>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d306      	bcc.n	80035ca <USB_SetTurnaroundTime+0x56>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4a34      	ldr	r2, [pc, #208]	; (8003690 <USB_SetTurnaroundTime+0x11c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d202      	bcs.n	80035ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035c4:	230d      	movs	r3, #13
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e046      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4a30      	ldr	r2, [pc, #192]	; (8003690 <USB_SetTurnaroundTime+0x11c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d306      	bcc.n	80035e0 <USB_SetTurnaroundTime+0x6c>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <USB_SetTurnaroundTime+0x120>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d802      	bhi.n	80035e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035da:	230c      	movs	r3, #12
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e03b      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <USB_SetTurnaroundTime+0x120>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d906      	bls.n	80035f6 <USB_SetTurnaroundTime+0x82>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <USB_SetTurnaroundTime+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d802      	bhi.n	80035f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035f0:	230b      	movs	r3, #11
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e030      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <USB_SetTurnaroundTime+0x124>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d906      	bls.n	800360c <USB_SetTurnaroundTime+0x98>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a26      	ldr	r2, [pc, #152]	; (800369c <USB_SetTurnaroundTime+0x128>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d802      	bhi.n	800360c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003606:	230a      	movs	r3, #10
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e025      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4a23      	ldr	r2, [pc, #140]	; (800369c <USB_SetTurnaroundTime+0x128>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d906      	bls.n	8003622 <USB_SetTurnaroundTime+0xae>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <USB_SetTurnaroundTime+0x12c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d202      	bcs.n	8003622 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800361c:	2309      	movs	r3, #9
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e01a      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <USB_SetTurnaroundTime+0x12c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d306      	bcc.n	8003638 <USB_SetTurnaroundTime+0xc4>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <USB_SetTurnaroundTime+0x130>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d802      	bhi.n	8003638 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003632:	2308      	movs	r3, #8
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e00f      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <USB_SetTurnaroundTime+0x130>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d906      	bls.n	800364e <USB_SetTurnaroundTime+0xda>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <USB_SetTurnaroundTime+0x134>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d202      	bcs.n	800364e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003648:	2307      	movs	r3, #7
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e004      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800364e:	2306      	movs	r3, #6
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e001      	b.n	8003658 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003654:	2309      	movs	r3, #9
 8003656:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	00d8acbf 	.word	0x00d8acbf
 8003688:	00e4e1c0 	.word	0x00e4e1c0
 800368c:	00f42400 	.word	0x00f42400
 8003690:	01067380 	.word	0x01067380
 8003694:	011a499f 	.word	0x011a499f
 8003698:	01312cff 	.word	0x01312cff
 800369c:	014ca43f 	.word	0x014ca43f
 80036a0:	016e3600 	.word	0x016e3600
 80036a4:	01a6ab1f 	.word	0x01a6ab1f
 80036a8:	01e84800 	.word	0x01e84800

080036ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d115      	bne.n	800373e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800371e:	2001      	movs	r0, #1
 8003720:	f7fc ff26 	bl	8000570 <HAL_Delay>
      ms++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f001 f985 	bl	8004a3a <USB_GetMode>
 8003730:	4603      	mov	r3, r0
 8003732:	2b01      	cmp	r3, #1
 8003734:	d01e      	beq.n	8003774 <USB_SetCurrentMode+0x84>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b31      	cmp	r3, #49	; 0x31
 800373a:	d9f0      	bls.n	800371e <USB_SetCurrentMode+0x2e>
 800373c:	e01a      	b.n	8003774 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d115      	bne.n	8003770 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003750:	2001      	movs	r0, #1
 8003752:	f7fc ff0d 	bl	8000570 <HAL_Delay>
      ms++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 f96c 	bl	8004a3a <USB_GetMode>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <USB_SetCurrentMode+0x84>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b31      	cmp	r3, #49	; 0x31
 800376c:	d9f0      	bls.n	8003750 <USB_SetCurrentMode+0x60>
 800376e:	e001      	b.n	8003774 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e005      	b.n	8003780 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b32      	cmp	r3, #50	; 0x32
 8003778:	d101      	bne.n	800377e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003788:	b084      	sub	sp, #16
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	e009      	b.n	80037bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	3340      	adds	r3, #64	; 0x40
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	2200      	movs	r2, #0
 80037b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	3301      	adds	r3, #1
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b0e      	cmp	r3, #14
 80037c0:	d9f2      	bls.n	80037a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d11c      	bne.n	8003802 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e005      	b.n	800380e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003814:	461a      	mov	r2, r3
 8003816:	2300      	movs	r3, #0
 8003818:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003820:	4619      	mov	r1, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003828:	461a      	mov	r2, r3
 800382a:	680b      	ldr	r3, [r1, #0]
 800382c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800382e:	2103      	movs	r1, #3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f959 	bl	8003ae8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003836:	2110      	movs	r1, #16
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8f1 	bl	8003a20 <USB_FlushTxFifo>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f91d 	bl	8003a88 <USB_FlushRxFifo>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	461a      	mov	r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386a:	461a      	mov	r2, r3
 800386c:	2300      	movs	r3, #0
 800386e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003876:	461a      	mov	r2, r3
 8003878:	2300      	movs	r3, #0
 800387a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e043      	b.n	800390a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003898:	d118      	bne.n	80038cc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	461a      	mov	r2, r3
 80038ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e013      	b.n	80038de <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c2:	461a      	mov	r2, r3
 80038c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e008      	b.n	80038de <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d8:	461a      	mov	r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ea:	461a      	mov	r2, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	461a      	mov	r2, r3
 80038fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003902:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3301      	adds	r3, #1
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	429a      	cmp	r2, r3
 8003910:	d3b7      	bcc.n	8003882 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e043      	b.n	80039a0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800392a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800392e:	d118      	bne.n	8003962 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e013      	b.n	8003974 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e008      	b.n	8003974 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	461a      	mov	r2, r3
 8003994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3301      	adds	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3b7      	bcc.n	8003918 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f043 0210 	orr.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <USB_DevInit+0x294>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f043 0208 	orr.w	r2, r3, #8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a02:	f043 0304 	orr.w	r3, r3, #4
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a16:	b004      	add	sp, #16
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	803c3800 	.word	0x803c3800

08003a20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3301      	adds	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <USB_FlushTxFifo+0x64>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e01b      	b.n	8003a78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	daf2      	bge.n	8003a2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	019b      	lsls	r3, r3, #6
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <USB_FlushTxFifo+0x64>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e006      	b.n	8003a78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d0f0      	beq.n	8003a58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	00030d40 	.word	0x00030d40

08003a88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <USB_FlushRxFifo+0x5c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e018      	b.n	8003ad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	daf2      	bge.n	8003a94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3301      	adds	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <USB_FlushRxFifo+0x5c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e006      	b.n	8003ad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d0f0      	beq.n	8003ab8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	00030d40 	.word	0x00030d40

08003ae8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b087      	sub	sp, #28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0306 	and.w	r3, r3, #6
 8003b32:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d002      	beq.n	8003b40 <USB_GetDevSpeed+0x26>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d102      	bne.n	8003b46 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b40:	2302      	movs	r3, #2
 8003b42:	75fb      	strb	r3, [r7, #23]
 8003b44:	e001      	b.n	8003b4a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003b46:	230f      	movs	r3, #15
 8003b48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d13a      	bne.n	8003bea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d155      	bne.n	8003c58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	791b      	ldrb	r3, [r3, #4]
 8003bc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	059b      	lsls	r3, r3, #22
 8003bce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e036      	b.n	8003c58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11a      	bne.n	8003c58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	791b      	ldrb	r3, [r3, #4]
 8003c3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d161      	bne.n	8003d48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c9a:	d11f      	bne.n	8003cdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d20:	4013      	ands	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0159      	lsls	r1, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <USB_DeactivateEndpoint+0x1b0>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
 8003d46:	e060      	b.n	8003e0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d5e:	d11f      	bne.n	8003da0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	43db      	mvns	r3, r3
 8003dba:	68f9      	ldr	r1, [r7, #12]
 8003dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de4:	4013      	ands	r3, r2
 8003de6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	440b      	add	r3, r1
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	4619      	mov	r1, r3
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <USB_DeactivateEndpoint+0x1b4>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	ec337800 	.word	0xec337800
 8003e1c:	eff37800 	.word	0xeff37800

08003e20 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f040 810a 	bne.w	8004052 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d132      	bne.n	8003eac <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea4:	0cdb      	lsrs	r3, r3, #19
 8003ea6:	04db      	lsls	r3, r3, #19
 8003ea8:	6113      	str	r3, [r2, #16]
 8003eaa:	e074      	b.n	8003f96 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec6:	0cdb      	lsrs	r3, r3, #19
 8003ec8:	04db      	lsls	r3, r3, #19
 8003eca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003eea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6999      	ldr	r1, [r3, #24]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	440b      	add	r3, r1
 8003f08:	1e59      	subs	r1, r3, #1
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f14:	4b9e      	ldr	r3, [pc, #632]	; (8004190 <USB_EPStartXfer+0x370>)
 8003f16:	400b      	ands	r3, r1
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	0148      	lsls	r0, r1, #5
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	4401      	add	r1, r0
 8003f20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3e:	6939      	ldr	r1, [r7, #16]
 8003f40:	0148      	lsls	r0, r1, #5
 8003f42:	6979      	ldr	r1, [r7, #20]
 8003f44:	4401      	add	r1, r0
 8003f46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	791b      	ldrb	r3, [r3, #4]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d11f      	bne.n	8003f96 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f94:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fb4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	791b      	ldrb	r3, [r3, #4]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d015      	beq.n	8003fea <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8106 	beq.w	80041d4 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	634b      	str	r3, [r1, #52]	; 0x34
 8003fe8:	e0f4      	b.n	80041d4 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d110      	bne.n	800401c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00f      	b.n	800403c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6919      	ldr	r1, [r3, #16]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	b29b      	uxth	r3, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa94 	bl	8004578 <USB_WritePacket>
 8004050:	e0c0      	b.n	80041d4 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406c:	0cdb      	lsrs	r3, r3, #19
 800406e:	04db      	lsls	r3, r3, #19
 8004070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	440a      	add	r2, r1
 8004088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004094:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d123      	bne.n	80040e6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	0148      	lsls	r0, r1, #5
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	4401      	add	r1, r0
 80040bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040c0:	4313      	orrs	r3, r2
 80040c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e2:	6113      	str	r3, [r2, #16]
 80040e4:	e037      	b.n	8004156 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	89fa      	ldrh	r2, [r7, #14]
 8004102:	fb03 f202 	mul.w	r2, r3, r2
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	89fb      	ldrh	r3, [r7, #14]
 800411a:	04d9      	lsls	r1, r3, #19
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <USB_EPStartXfer+0x370>)
 800411e:	400b      	ands	r3, r1
 8004120:	6939      	ldr	r1, [r7, #16]
 8004122:	0148      	lsls	r0, r1, #5
 8004124:	6979      	ldr	r1, [r7, #20]
 8004126:	4401      	add	r1, r0
 8004128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800412c:	4313      	orrs	r3, r2
 800412e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004146:	6939      	ldr	r1, [r7, #16]
 8004148:	0148      	lsls	r0, r1, #5
 800414a:	6979      	ldr	r1, [r7, #20]
 800414c:	4401      	add	r1, r0
 800414e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004152:	4313      	orrs	r3, r2
 8004154:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	791b      	ldrb	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d12a      	bne.n	80041b4 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d112      	bne.n	8004194 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	440a      	add	r2, r1
 8004184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e011      	b.n	80041b4 <USB_EPStartXfer+0x394>
 8004190:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop

080041e0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f040 80ab 	bne.w	8004354 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d132      	bne.n	800426c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	0151      	lsls	r1, r2, #5
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	440a      	add	r2, r1
 8004240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	440a      	add	r2, r1
 8004260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004264:	0cdb      	lsrs	r3, r3, #19
 8004266:	04db      	lsls	r3, r3, #19
 8004268:	6113      	str	r3, [r2, #16]
 800426a:	e04e      	b.n	800430a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004286:	0cdb      	lsrs	r3, r3, #19
 8004288:	04db      	lsls	r3, r3, #19
 800428a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	699a      	ldr	r2, [r3, #24]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d903      	bls.n	80042c4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	0148      	lsls	r0, r1, #5
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	4401      	add	r1, r0
 8004302:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004306:	4313      	orrs	r3, r2
 8004308:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004328:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d071      	beq.n	8004416 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	2101      	movs	r1, #1
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800434e:	4313      	orrs	r3, r2
 8004350:	634b      	str	r3, [r1, #52]	; 0x34
 8004352:	e060      	b.n	8004416 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436e:	0cdb      	lsrs	r3, r3, #19
 8004370:	04db      	lsls	r3, r3, #19
 8004372:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	440a      	add	r2, r1
 800438a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004392:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004396:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	0148      	lsls	r0, r1, #5
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	4401      	add	r1, r0
 80043ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043f2:	4313      	orrs	r3, r2
 80043f4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004410:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	785b      	ldrb	r3, [r3, #1]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d14a      	bne.n	80044d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800445a:	f040 8086 	bne.w	800456a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	0151      	lsls	r1, r2, #5
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	440a      	add	r2, r1
 8004478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004480:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	7812      	ldrb	r2, [r2, #0]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	440a      	add	r2, r1
 800449c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d902      	bls.n	80044bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ba:	e056      	b.n	800456a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d4:	d0e7      	beq.n	80044a6 <USB_EPStopXfer+0x82>
 80044d6:	e048      	b.n	800456a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f0:	d13b      	bne.n	800456a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	440a      	add	r2, r1
 800450c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004510:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004514:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	0151      	lsls	r1, r2, #5
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	440a      	add	r2, r1
 8004530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004538:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f242 7210 	movw	r2, #10000	; 0x2710
 8004546:	4293      	cmp	r3, r2
 8004548:	d902      	bls.n	8004550 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
          break;
 800454e:	e00c      	b.n	800456a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004568:	d0e7      	beq.n	800453a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	4611      	mov	r1, r2
 8004584:	461a      	mov	r2, r3
 8004586:	460b      	mov	r3, r1
 8004588:	71fb      	strb	r3, [r7, #7]
 800458a:	4613      	mov	r3, r2
 800458c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004596:	88bb      	ldrh	r3, [r7, #4]
 8004598:	3303      	adds	r3, #3
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e018      	b.n	80045d6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	031a      	lsls	r2, r3, #12
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b0:	461a      	mov	r2, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	3301      	adds	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3301      	adds	r3, #1
 80045ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d3e2      	bcc.n	80045a4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3724      	adds	r7, #36	; 0x24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b08b      	sub	sp, #44	; 0x2c
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	b29b      	uxth	r3, r3
 8004608:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004612:	2300      	movs	r3, #0
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	e014      	b.n	8004642 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	601a      	str	r2, [r3, #0]
    pDest++;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	3301      	adds	r3, #1
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	3301      	adds	r3, #1
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	3301      	adds	r3, #1
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	3301      	adds	r3, #1
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	3301      	adds	r3, #1
 8004640:	623b      	str	r3, [r7, #32]
 8004642:	6a3a      	ldr	r2, [r7, #32]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	429a      	cmp	r2, r3
 8004648:	d3e6      	bcc.n	8004618 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800464a:	8bfb      	ldrh	r3, [r7, #30]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01e      	beq.n	800468e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465a:	461a      	mov	r2, r3
 800465c:	f107 0310 	add.w	r3, r7, #16
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
 8004670:	b2da      	uxtb	r2, r3
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	701a      	strb	r2, [r3, #0]
      i++;
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	3301      	adds	r3, #1
 800467a:	623b      	str	r3, [r7, #32]
      pDest++;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	3301      	adds	r3, #1
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004682:	8bfb      	ldrh	r3, [r7, #30]
 8004684:	3b01      	subs	r3, #1
 8004686:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004688:	8bfb      	ldrh	r3, [r7, #30]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ea      	bne.n	8004664 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004690:	4618      	mov	r0, r3
 8004692:	372c      	adds	r7, #44	; 0x2c
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d12c      	bne.n	8004712 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	db12      	blt.n	80046f0 <USB_EPSetStall+0x54>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00f      	beq.n	80046f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e02b      	b.n	800476a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	db12      	blt.n	800474a <USB_EPSetStall+0xae>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004744:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004748:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	0151      	lsls	r1, r2, #5
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	440a      	add	r2, r1
 8004760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004768:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d128      	bne.n	80047e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	791b      	ldrb	r3, [r3, #4]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d003      	beq.n	80047c4 <USB_EPClearStall+0x4c>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	791b      	ldrb	r3, [r3, #4]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d138      	bne.n	8004836 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	e027      	b.n	8004836 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004804:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	791b      	ldrb	r3, [r3, #4]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d003      	beq.n	8004816 <USB_EPClearStall+0x9e>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	791b      	ldrb	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d10f      	bne.n	8004836 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004834:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004862:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004866:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048be:	f023 0302 	bic.w	r3, r3, #2
 80048c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048ec:	f023 0303 	bic.w	r3, r3, #3
 80048f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004900:	f043 0302 	orr.w	r3, r3, #2
 8004904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800492c:	68fb      	ldr	r3, [r7, #12]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	0c1b      	lsrs	r3, r3, #16
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	b29b      	uxth	r3, r3
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4013      	ands	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049d0:	68bb      	ldr	r3, [r7, #8]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0e:	01db      	lsls	r3, r3, #7
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0301 	and.w	r3, r3, #1
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	333c      	adds	r3, #60	; 0x3c
 8004aae:	3304      	adds	r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <USB_EP0_OutStart+0x8c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d90a      	bls.n	8004ad2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004acc:	d101      	bne.n	8004ad2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e024      	b.n	8004b1c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b00:	f043 0318 	orr.w	r3, r3, #24
 8004b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b18:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	4f54300a 	.word	0x4f54300a

08004b2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <USB_CoreReset+0x64>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e01b      	b.n	8004b82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	daf2      	bge.n	8004b38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f043 0201 	orr.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3301      	adds	r3, #1
 8004b66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <USB_CoreReset+0x64>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d0f0      	beq.n	8004b62 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	00030d40 	.word	0x00030d40

08004b94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ba0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ba4:	f002 fae6 	bl	8007174 <USBD_static_malloc>
 8004ba8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e066      	b.n	8004c8a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	7c1b      	ldrb	r3, [r3, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d119      	bne.n	8004c00 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	2181      	movs	r1, #129	; 0x81
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f002 f8b9 	bl	8006d4c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be4:	2202      	movs	r2, #2
 8004be6:	2101      	movs	r1, #1
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f002 f8af 	bl	8006d4c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2210      	movs	r2, #16
 8004bfa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004bfe:	e016      	b.n	8004c2e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	2202      	movs	r2, #2
 8004c04:	2181      	movs	r1, #129	; 0x81
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f002 f8a0 	bl	8006d4c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c12:	2340      	movs	r3, #64	; 0x40
 8004c14:	2202      	movs	r2, #2
 8004c16:	2101      	movs	r1, #1
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f002 f897 	bl	8006d4c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c2e:	2308      	movs	r3, #8
 8004c30:	2203      	movs	r2, #3
 8004c32:	2182      	movs	r1, #130	; 0x82
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f002 f889 	bl	8006d4c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	7c1b      	ldrb	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c6e:	2101      	movs	r1, #1
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f002 f9e5 	bl	8007040 <USBD_LL_PrepareReceive>
 8004c76:	e007      	b.n	8004c88 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c7e:	2340      	movs	r3, #64	; 0x40
 8004c80:	2101      	movs	r1, #1
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f002 f9dc 	bl	8007040 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004c9e:	2181      	movs	r1, #129	; 0x81
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f002 f891 	bl	8006dc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004cac:	2101      	movs	r1, #1
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f002 f88a 	bl	8006dc8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004cbc:	2182      	movs	r1, #130	; 0x82
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f002 f882 	bl	8006dc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f002 fa4e 	bl	8007190 <USBD_static_free>
    pdev->pClassData = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e0af      	b.n	8004e90 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d03f      	beq.n	8004dbc <USBD_CDC_Setup+0xb4>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	f040 809f 	bne.w	8004e80 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	88db      	ldrh	r3, [r3, #6]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02e      	beq.n	8004da8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	b25b      	sxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da16      	bge.n	8004d82 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004d60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	88d2      	ldrh	r2, [r2, #6]
 8004d66:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	88db      	ldrh	r3, [r3, #6]
 8004d6c:	2b07      	cmp	r3, #7
 8004d6e:	bf28      	it	cs
 8004d70:	2307      	movcs	r3, #7
 8004d72:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	89fa      	ldrh	r2, [r7, #14]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 fb43 	bl	8006406 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004d80:	e085      	b.n	8004e8e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	785a      	ldrb	r2, [r3, #1]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	88db      	ldrh	r3, [r3, #6]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004d98:	6939      	ldr	r1, [r7, #16]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	88db      	ldrh	r3, [r3, #6]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 fb5c 	bl	800645e <USBD_CtlPrepareRx>
      break;
 8004da6:	e072      	b.n	8004e8e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	7850      	ldrb	r0, [r2, #1]
 8004db4:	2200      	movs	r2, #0
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	4798      	blx	r3
      break;
 8004dba:	e068      	b.n	8004e8e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b0b      	cmp	r3, #11
 8004dc2:	d852      	bhi.n	8004e6a <USBD_CDC_Setup+0x162>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <USBD_CDC_Setup+0xc4>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004dfd 	.word	0x08004dfd
 8004dd0:	08004e79 	.word	0x08004e79
 8004dd4:	08004e6b 	.word	0x08004e6b
 8004dd8:	08004e6b 	.word	0x08004e6b
 8004ddc:	08004e6b 	.word	0x08004e6b
 8004de0:	08004e6b 	.word	0x08004e6b
 8004de4:	08004e6b 	.word	0x08004e6b
 8004de8:	08004e6b 	.word	0x08004e6b
 8004dec:	08004e6b 	.word	0x08004e6b
 8004df0:	08004e6b 	.word	0x08004e6b
 8004df4:	08004e27 	.word	0x08004e27
 8004df8:	08004e51 	.word	0x08004e51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d107      	bne.n	8004e18 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e08:	f107 030a 	add.w	r3, r7, #10
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 faf8 	bl	8006406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e16:	e032      	b.n	8004e7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 fa82 	bl	8006324 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e20:	2303      	movs	r3, #3
 8004e22:	75fb      	strb	r3, [r7, #23]
          break;
 8004e24:	e02b      	b.n	8004e7e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d107      	bne.n	8004e42 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e32:	f107 030d 	add.w	r3, r7, #13
 8004e36:	2201      	movs	r2, #1
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fae3 	bl	8006406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e40:	e01d      	b.n	8004e7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 fa6d 	bl	8006324 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e4e:	e016      	b.n	8004e7e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d00f      	beq.n	8004e7c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f001 fa60 	bl	8006324 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e64:	2303      	movs	r3, #3
 8004e66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e68:	e008      	b.n	8004e7c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 fa59 	bl	8006324 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e72:	2303      	movs	r3, #3
 8004e74:	75fb      	strb	r3, [r7, #23]
          break;
 8004e76:	e002      	b.n	8004e7e <USBD_CDC_Setup+0x176>
          break;
 8004e78:	bf00      	nop
 8004e7a:	e008      	b.n	8004e8e <USBD_CDC_Setup+0x186>
          break;
 8004e7c:	bf00      	nop
      }
      break;
 8004e7e:	e006      	b.n	8004e8e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fa4e 	bl	8006324 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004eaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e04f      	b.n	8004f5a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ec0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d029      	beq.n	8004f2c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3318      	adds	r3, #24
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	78f9      	ldrb	r1, [r7, #3]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4403      	add	r3, r0
 8004ef8:	3348      	adds	r3, #72	; 0x48
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d110      	bne.n	8004f2c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3318      	adds	r3, #24
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f1e:	78f9      	ldrb	r1, [r7, #3]
 8004f20:	2300      	movs	r3, #0
 8004f22:	2200      	movs	r2, #0
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f002 f853 	bl	8006fd0 <USBD_LL_Transmit>
 8004f2a:	e015      	b.n	8004f58 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e015      	b.n	8004fb0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f002 f891 	bl	80070b0 <USBD_LL_GetRxDataSize>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004faa:	4611      	mov	r1, r2
 8004fac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e01b      	b.n	800500a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d015      	beq.n	8005008 <USBD_CDC_EP0_RxReady+0x50>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004fe2:	2bff      	cmp	r3, #255	; 0xff
 8004fe4:	d010      	beq.n	8005008 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004ff4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ffc:	b292      	uxth	r2, r2
 8004ffe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	22ff      	movs	r2, #255	; 0xff
 8005004:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2243      	movs	r2, #67	; 0x43
 8005020:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	20000094 	.word	0x20000094

08005034 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2243      	movs	r2, #67	; 0x43
 8005040:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005042:	4b03      	ldr	r3, [pc, #12]	; (8005050 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	20000050 	.word	0x20000050

08005054 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2243      	movs	r2, #67	; 0x43
 8005060:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	200000d8 	.word	0x200000d8

08005074 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	220a      	movs	r2, #10
 8005080:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	2000000c 	.word	0x2000000c

08005094 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e004      	b.n	80050b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80050d8:	2303      	movs	r3, #3
 80050da:	e008      	b.n	80050ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800510a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005112:	2303      	movs	r3, #3
 8005114:	e004      	b.n	8005120 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800513a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800514a:	2303      	movs	r3, #3
 800514c:	e01a      	b.n	8005184 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005154:	2b00      	cmp	r3, #0
 8005156:	d114      	bne.n	8005182 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2201      	movs	r2, #1
 800515c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005176:	2181      	movs	r1, #129	; 0x81
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f001 ff29 	bl	8006fd0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800519a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e016      	b.n	80051d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7c1b      	ldrb	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051bc:	2101      	movs	r1, #1
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f001 ff3e 	bl	8007040 <USBD_LL_PrepareReceive>
 80051c4:	e007      	b.n	80051d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051cc:	2340      	movs	r3, #64	; 0x40
 80051ce:	2101      	movs	r1, #1
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f001 ff35 	bl	8007040 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e01f      	b.n	8005238 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	79fa      	ldrb	r2, [r7, #7]
 800522a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f001 fd0f 	bl	8006c50 <USBD_LL_Init>
 8005232:	4603      	mov	r3, r0
 8005234:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005236:	7dfb      	ldrb	r3, [r7, #23]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005254:	2303      	movs	r3, #3
 8005256:	e016      	b.n	8005286 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	f107 020e 	add.w	r2, r7, #14
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fd26 	bl	8006ce8 <USBD_LL_Start>
 800529c:	4603      	mov	r3, r0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80052c8:	2303      	movs	r3, #3
 80052ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	4611      	mov	r1, r2
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	4611      	mov	r1, r2
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
  }

  return USBD_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 ffba 	bl	80062b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800534a:	461a      	mov	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2b02      	cmp	r3, #2
 800535e:	d01a      	beq.n	8005396 <USBD_LL_SetupStage+0x72>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d822      	bhi.n	80053aa <USBD_LL_SetupStage+0x86>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <USBD_LL_SetupStage+0x4a>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d00a      	beq.n	8005382 <USBD_LL_SetupStage+0x5e>
 800536c:	e01d      	b.n	80053aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa62 	bl	8005840 <USBD_StdDevReq>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e020      	b.n	80053c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fac6 	bl	800591c <USBD_StdItfReq>
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
      break;
 8005394:	e016      	b.n	80053c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fb05 	bl	80059ae <USBD_StdEPReq>
 80053a4:	4603      	mov	r3, r0
 80053a6:	73fb      	strb	r3, [r7, #15]
      break;
 80053a8:	e00c      	b.n	80053c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f001 fd3b 	bl	8006e34 <USBD_LL_StallEP>
 80053be:	4603      	mov	r3, r0
 80053c0:	73fb      	strb	r3, [r7, #15]
      break;
 80053c2:	bf00      	nop
  }

  return ret;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	460b      	mov	r3, r1
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d138      	bne.n	8005454 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d14a      	bne.n	800548a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d913      	bls.n	8005428 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	1ad2      	subs	r2, r2, r3
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	4293      	cmp	r3, r2
 8005418:	bf28      	it	cs
 800541a:	4613      	movcs	r3, r2
 800541c:	461a      	mov	r2, r3
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f001 f839 	bl	8006498 <USBD_CtlContinueRx>
 8005426:	e030      	b.n	800548a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b03      	cmp	r3, #3
 8005432:	d10b      	bne.n	800544c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f001 f834 	bl	80064ba <USBD_CtlSendStatus>
 8005452:	e01a      	b.n	800548a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b03      	cmp	r3, #3
 800545e:	d114      	bne.n	800548a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	7afa      	ldrb	r2, [r7, #11]
 8005476:	4611      	mov	r1, r2
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	4798      	blx	r3
 800547c:	4603      	mov	r3, r0
 800547e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	e000      	b.n	800548c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	460b      	mov	r3, r1
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80054a2:	7afb      	ldrb	r3, [r7, #11]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d16b      	bne.n	8005580 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3314      	adds	r3, #20
 80054ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d156      	bne.n	8005566 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d914      	bls.n	80054ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	1ad2      	subs	r2, r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 ffae 	bl	800643c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054e0:	2300      	movs	r3, #0
 80054e2:	2200      	movs	r2, #0
 80054e4:	2100      	movs	r1, #0
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f001 fdaa 	bl	8007040 <USBD_LL_PrepareReceive>
 80054ec:	e03b      	b.n	8005566 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d11c      	bne.n	8005534 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005502:	429a      	cmp	r2, r3
 8005504:	d316      	bcc.n	8005534 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005510:	429a      	cmp	r2, r3
 8005512:	d20f      	bcs.n	8005534 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005514:	2200      	movs	r2, #0
 8005516:	2100      	movs	r1, #0
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 ff8f 	bl	800643c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005526:	2300      	movs	r3, #0
 8005528:	2200      	movs	r2, #0
 800552a:	2100      	movs	r1, #0
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f001 fd87 	bl	8007040 <USBD_LL_PrepareReceive>
 8005532:	e018      	b.n	8005566 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b03      	cmp	r3, #3
 800553e:	d10b      	bne.n	8005558 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f001 fc6a 	bl	8006e34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 ffbd 	bl	80064e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d122      	bne.n	80055b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fe98 	bl	80052a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800557e:	e01a      	b.n	80055b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d114      	bne.n	80055b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00e      	beq.n	80055b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	7afa      	ldrb	r2, [r7, #11]
 80055a2:	4611      	mov	r1, r2
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	4798      	blx	r3
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	e000      	b.n	80055b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e02f      	b.n	8005654 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00f      	beq.n	800561e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6852      	ldr	r2, [r2, #4]
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	4611      	mov	r1, r2
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	2200      	movs	r2, #0
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f001 fb91 	bl	8006d4c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2240      	movs	r2, #64	; 0x40
 8005636:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800563a:	2340      	movs	r3, #64	; 0x40
 800563c:	2200      	movs	r2, #0
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fb83 	bl	8006d4c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568a:	b2da      	uxtb	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2204      	movs	r2, #4
 8005696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d106      	bne.n	80056ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e012      	b.n	8005714 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d10b      	bne.n	8005712 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005732:	2303      	movs	r3, #3
 8005734:	e014      	b.n	8005760 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b03      	cmp	r3, #3
 8005740:	d10d      	bne.n	800575e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	4611      	mov	r1, r2
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800577e:	2303      	movs	r3, #3
 8005780:	e014      	b.n	80057ac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b03      	cmp	r3, #3
 800578c:	d10d      	bne.n	80057aa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	4611      	mov	r1, r2
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	4611      	mov	r1, r2
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
  }

  return USBD_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005802:	b480      	push	{r7}
 8005804:	b087      	sub	sp, #28
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	3301      	adds	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005820:	8a3b      	ldrh	r3, [r7, #16]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	b21a      	sxth	r2, r3
 8005826:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800582a:	4313      	orrs	r3, r2
 800582c:	b21b      	sxth	r3, r3
 800582e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005830:	89fb      	ldrh	r3, [r7, #14]
}
 8005832:	4618      	mov	r0, r3
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d005      	beq.n	8005866 <USBD_StdDevReq+0x26>
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d853      	bhi.n	8005906 <USBD_StdDevReq+0xc6>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <USBD_StdDevReq+0x3a>
 8005862:	2b20      	cmp	r3, #32
 8005864:	d14f      	bne.n	8005906 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	4798      	blx	r3
 8005874:	4603      	mov	r3, r0
 8005876:	73fb      	strb	r3, [r7, #15]
      break;
 8005878:	e04a      	b.n	8005910 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b09      	cmp	r3, #9
 8005880:	d83b      	bhi.n	80058fa <USBD_StdDevReq+0xba>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <USBD_StdDevReq+0x48>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058dd 	.word	0x080058dd
 800588c:	080058f1 	.word	0x080058f1
 8005890:	080058fb 	.word	0x080058fb
 8005894:	080058e7 	.word	0x080058e7
 8005898:	080058fb 	.word	0x080058fb
 800589c:	080058bb 	.word	0x080058bb
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058fb 	.word	0x080058fb
 80058a8:	080058d3 	.word	0x080058d3
 80058ac:	080058c5 	.word	0x080058c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f9de 	bl	8005c74 <USBD_GetDescriptor>
          break;
 80058b8:	e024      	b.n	8005904 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fb6d 	bl	8005f9c <USBD_SetAddress>
          break;
 80058c2:	e01f      	b.n	8005904 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fbac 	bl	8006024 <USBD_SetConfig>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]
          break;
 80058d0:	e018      	b.n	8005904 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc4b 	bl	8006170 <USBD_GetConfig>
          break;
 80058da:	e013      	b.n	8005904 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fc7c 	bl	80061dc <USBD_GetStatus>
          break;
 80058e4:	e00e      	b.n	8005904 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fcab 	bl	8006244 <USBD_SetFeature>
          break;
 80058ee:	e009      	b.n	8005904 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fcba 	bl	800626c <USBD_ClrFeature>
          break;
 80058f8:	e004      	b.n	8005904 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fd11 	bl	8006324 <USBD_CtlError>
          break;
 8005902:	bf00      	nop
      }
      break;
 8005904:	e004      	b.n	8005910 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fd0b 	bl	8006324 <USBD_CtlError>
      break;
 800590e:	bf00      	nop
  }

  return ret;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop

0800591c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d005      	beq.n	8005942 <USBD_StdItfReq+0x26>
 8005936:	2b40      	cmp	r3, #64	; 0x40
 8005938:	d82f      	bhi.n	800599a <USBD_StdItfReq+0x7e>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <USBD_StdItfReq+0x26>
 800593e:	2b20      	cmp	r3, #32
 8005940:	d12b      	bne.n	800599a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005948:	b2db      	uxtb	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	2b02      	cmp	r3, #2
 800594e:	d81d      	bhi.n	800598c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	889b      	ldrh	r3, [r3, #4]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d813      	bhi.n	8005982 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	88db      	ldrh	r3, [r3, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d110      	bne.n	8005996 <USBD_StdItfReq+0x7a>
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fd9d 	bl	80064ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005980:	e009      	b.n	8005996 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fccd 	bl	8006324 <USBD_CtlError>
          break;
 800598a:	e004      	b.n	8005996 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fcc8 	bl	8006324 <USBD_CtlError>
          break;
 8005994:	e000      	b.n	8005998 <USBD_StdItfReq+0x7c>
          break;
 8005996:	bf00      	nop
      }
      break;
 8005998:	e004      	b.n	80059a4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fcc1 	bl	8006324 <USBD_CtlError>
      break;
 80059a2:	bf00      	nop
  }

  return ret;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	889b      	ldrh	r3, [r3, #4]
 80059c0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d007      	beq.n	80059de <USBD_StdEPReq+0x30>
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	f200 8145 	bhi.w	8005c5e <USBD_StdEPReq+0x2b0>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <USBD_StdEPReq+0x44>
 80059d8:	2b20      	cmp	r3, #32
 80059da:	f040 8140 	bne.w	8005c5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e13a      	b.n	8005c68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d007      	beq.n	8005a0a <USBD_StdEPReq+0x5c>
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	f300 8129 	bgt.w	8005c52 <USBD_StdEPReq+0x2a4>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d07f      	beq.n	8005b04 <USBD_StdEPReq+0x156>
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d03c      	beq.n	8005a82 <USBD_StdEPReq+0xd4>
 8005a08:	e123      	b.n	8005c52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d002      	beq.n	8005a1c <USBD_StdEPReq+0x6e>
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d016      	beq.n	8005a48 <USBD_StdEPReq+0x9a>
 8005a1a:	e02c      	b.n	8005a76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <USBD_StdEPReq+0x90>
 8005a22:	7bbb      	ldrb	r3, [r7, #14]
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d00a      	beq.n	8005a3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 fa01 	bl	8006e34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 f9fd 	bl	8006e34 <USBD_LL_StallEP>
 8005a3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a3c:	e020      	b.n	8005a80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fc6f 	bl	8006324 <USBD_CtlError>
              break;
 8005a46:	e01b      	b.n	8005a80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	885b      	ldrh	r3, [r3, #2]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10e      	bne.n	8005a6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <USBD_StdEPReq+0xc0>
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d008      	beq.n	8005a6e <USBD_StdEPReq+0xc0>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	88db      	ldrh	r3, [r3, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 f9e3 	bl	8006e34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fd23 	bl	80064ba <USBD_CtlSendStatus>

              break;
 8005a74:	e004      	b.n	8005a80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fc53 	bl	8006324 <USBD_CtlError>
              break;
 8005a7e:	bf00      	nop
          }
          break;
 8005a80:	e0ec      	b.n	8005c5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d002      	beq.n	8005a94 <USBD_StdEPReq+0xe6>
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d016      	beq.n	8005ac0 <USBD_StdEPReq+0x112>
 8005a92:	e030      	b.n	8005af6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <USBD_StdEPReq+0x108>
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d00a      	beq.n	8005ab6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 f9c5 	bl	8006e34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aaa:	2180      	movs	r1, #128	; 0x80
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 f9c1 	bl	8006e34 <USBD_LL_StallEP>
 8005ab2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ab4:	e025      	b.n	8005b02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fc33 	bl	8006324 <USBD_CtlError>
              break;
 8005abe:	e020      	b.n	8005b02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	885b      	ldrh	r3, [r3, #2]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11b      	bne.n	8005b00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 f9e2 	bl	8006ea0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fcec 	bl	80064ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005af4:	e004      	b.n	8005b00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fc13 	bl	8006324 <USBD_CtlError>
              break;
 8005afe:	e000      	b.n	8005b02 <USBD_StdEPReq+0x154>
              break;
 8005b00:	bf00      	nop
          }
          break;
 8005b02:	e0ab      	b.n	8005c5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d002      	beq.n	8005b16 <USBD_StdEPReq+0x168>
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d032      	beq.n	8005b7a <USBD_StdEPReq+0x1cc>
 8005b14:	e097      	b.n	8005c46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <USBD_StdEPReq+0x17e>
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d004      	beq.n	8005b2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fbfd 	bl	8006324 <USBD_CtlError>
                break;
 8005b2a:	e091      	b.n	8005c50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	da0b      	bge.n	8005b4c <USBD_StdEPReq+0x19e>
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	3310      	adds	r3, #16
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	e00b      	b.n	8005b64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4413      	add	r3, r2
 8005b62:	3304      	adds	r3, #4
 8005b64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fc47 	bl	8006406 <USBD_CtlSendData>
              break;
 8005b78:	e06a      	b.n	8005c50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da11      	bge.n	8005ba6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	3324      	adds	r3, #36	; 0x24
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d117      	bne.n	8005bcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fbc0 	bl	8006324 <USBD_CtlError>
                  break;
 8005ba4:	e054      	b.n	8005c50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	f003 020f 	and.w	r2, r3, #15
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d104      	bne.n	8005bcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fbad 	bl	8006324 <USBD_CtlError>
                  break;
 8005bca:	e041      	b.n	8005c50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da0b      	bge.n	8005bec <USBD_StdEPReq+0x23e>
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	3310      	adds	r3, #16
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	3304      	adds	r3, #4
 8005bea:	e00b      	b.n	8005c04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <USBD_StdEPReq+0x264>
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d103      	bne.n	8005c1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e00e      	b.n	8005c38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f974 	bl	8006f0c <USBD_LL_IsStallEP>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e002      	b.n	8005c38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fbe1 	bl	8006406 <USBD_CtlSendData>
              break;
 8005c44:	e004      	b.n	8005c50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fb6b 	bl	8006324 <USBD_CtlError>
              break;
 8005c4e:	bf00      	nop
          }
          break;
 8005c50:	e004      	b.n	8005c5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb65 	bl	8006324 <USBD_CtlError>
          break;
 8005c5a:	bf00      	nop
      }
      break;
 8005c5c:	e004      	b.n	8005c68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb5f 	bl	8006324 <USBD_CtlError>
      break;
 8005c66:	bf00      	nop
  }

  return ret;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	885b      	ldrh	r3, [r3, #2]
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	2b0e      	cmp	r3, #14
 8005c96:	f200 8152 	bhi.w	8005f3e <USBD_GetDescriptor+0x2ca>
 8005c9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <USBD_GetDescriptor+0x2c>)
 8005c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca0:	08005d11 	.word	0x08005d11
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d69 	.word	0x08005d69
 8005cac:	08005f3f 	.word	0x08005f3f
 8005cb0:	08005f3f 	.word	0x08005f3f
 8005cb4:	08005edf 	.word	0x08005edf
 8005cb8:	08005f0b 	.word	0x08005f0b
 8005cbc:	08005f3f 	.word	0x08005f3f
 8005cc0:	08005f3f 	.word	0x08005f3f
 8005cc4:	08005f3f 	.word	0x08005f3f
 8005cc8:	08005f3f 	.word	0x08005f3f
 8005ccc:	08005f3f 	.word	0x08005f3f
 8005cd0:	08005f3f 	.word	0x08005f3f
 8005cd4:	08005f3f 	.word	0x08005f3f
 8005cd8:	08005cdd 	.word	0x08005cdd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	7c12      	ldrb	r2, [r2, #16]
 8005cf4:	f107 0108 	add.w	r1, r7, #8
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cfe:	e126      	b.n	8005f4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fb0e 	bl	8006324 <USBD_CtlError>
        err++;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	72fb      	strb	r3, [r7, #11]
      break;
 8005d0e:	e11e      	b.n	8005f4e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	7c12      	ldrb	r2, [r2, #16]
 8005d1c:	f107 0108 	add.w	r1, r7, #8
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	60f8      	str	r0, [r7, #12]
      break;
 8005d26:	e112      	b.n	8005f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7c1b      	ldrb	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10d      	bne.n	8005d4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	f107 0208 	add.w	r2, r7, #8
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	2202      	movs	r2, #2
 8005d48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d4a:	e100      	b.n	8005f4e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f107 0208 	add.w	r2, r7, #8
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	2202      	movs	r2, #2
 8005d64:	701a      	strb	r2, [r3, #0]
      break;
 8005d66:	e0f2      	b.n	8005f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	885b      	ldrh	r3, [r3, #2]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	f200 80ac 	bhi.w	8005ecc <USBD_GetDescriptor+0x258>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <USBD_GetDescriptor+0x108>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005d95 	.word	0x08005d95
 8005d80:	08005dc9 	.word	0x08005dc9
 8005d84:	08005dfd 	.word	0x08005dfd
 8005d88:	08005e31 	.word	0x08005e31
 8005d8c:	08005e65 	.word	0x08005e65
 8005d90:	08005e99 	.word	0x08005e99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	7c12      	ldrb	r2, [r2, #16]
 8005dac:	f107 0108 	add.w	r1, r7, #8
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db6:	e091      	b.n	8005edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fab2 	bl	8006324 <USBD_CtlError>
            err++;
 8005dc0:	7afb      	ldrb	r3, [r7, #11]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc6:	e089      	b.n	8005edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	7c12      	ldrb	r2, [r2, #16]
 8005de0:	f107 0108 	add.w	r1, r7, #8
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dea:	e077      	b.n	8005edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa98 	bl	8006324 <USBD_CtlError>
            err++;
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	3301      	adds	r3, #1
 8005df8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dfa:	e06f      	b.n	8005edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	7c12      	ldrb	r2, [r2, #16]
 8005e14:	f107 0108 	add.w	r1, r7, #8
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
 8005e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1e:	e05d      	b.n	8005edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa7e 	bl	8006324 <USBD_CtlError>
            err++;
 8005e28:	7afb      	ldrb	r3, [r7, #11]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2e:	e055      	b.n	8005edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	7c12      	ldrb	r2, [r2, #16]
 8005e48:	f107 0108 	add.w	r1, r7, #8
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4798      	blx	r3
 8005e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e52:	e043      	b.n	8005edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa64 	bl	8006324 <USBD_CtlError>
            err++;
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	72fb      	strb	r3, [r7, #11]
          break;
 8005e62:	e03b      	b.n	8005edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	7c12      	ldrb	r2, [r2, #16]
 8005e7c:	f107 0108 	add.w	r1, r7, #8
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e86:	e029      	b.n	8005edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa4a 	bl	8006324 <USBD_CtlError>
            err++;
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	3301      	adds	r3, #1
 8005e94:	72fb      	strb	r3, [r7, #11]
          break;
 8005e96:	e021      	b.n	8005edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	7c12      	ldrb	r2, [r2, #16]
 8005eb0:	f107 0108 	add.w	r1, r7, #8
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3
 8005eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eba:	e00f      	b.n	8005edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa30 	bl	8006324 <USBD_CtlError>
            err++;
 8005ec4:	7afb      	ldrb	r3, [r7, #11]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8005eca:	e007      	b.n	8005edc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa28 	bl	8006324 <USBD_CtlError>
          err++;
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005eda:	bf00      	nop
      }
      break;
 8005edc:	e037      	b.n	8005f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7c1b      	ldrb	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	f107 0208 	add.w	r2, r7, #8
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4798      	blx	r3
 8005ef6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ef8:	e029      	b.n	8005f4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa11 	bl	8006324 <USBD_CtlError>
        err++;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	3301      	adds	r3, #1
 8005f06:	72fb      	strb	r3, [r7, #11]
      break;
 8005f08:	e021      	b.n	8005f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7c1b      	ldrb	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f107 0208 	add.w	r2, r7, #8
 8005f1e:	4610      	mov	r0, r2
 8005f20:	4798      	blx	r3
 8005f22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	2207      	movs	r2, #7
 8005f2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f2c:	e00f      	b.n	8005f4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f9f7 	bl	8006324 <USBD_CtlError>
        err++;
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f3c:	e007      	b.n	8005f4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9ef 	bl	8006324 <USBD_CtlError>
      err++;
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f4c:	bf00      	nop
  }

  if (err != 0U)
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11e      	bne.n	8005f92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	88db      	ldrh	r3, [r3, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d016      	beq.n	8005f8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005f5c:	893b      	ldrh	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	88da      	ldrh	r2, [r3, #6]
 8005f66:	893b      	ldrh	r3, [r7, #8]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	bf28      	it	cs
 8005f6c:	4613      	movcs	r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f72:	893b      	ldrh	r3, [r7, #8]
 8005f74:	461a      	mov	r2, r3
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fa44 	bl	8006406 <USBD_CtlSendData>
 8005f7e:	e009      	b.n	8005f94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f9ce 	bl	8006324 <USBD_CtlError>
 8005f88:	e004      	b.n	8005f94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa95 	bl	80064ba <USBD_CtlSendStatus>
 8005f90:	e000      	b.n	8005f94 <USBD_GetDescriptor+0x320>
    return;
 8005f92:	bf00      	nop
  }
}
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop

08005f9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	889b      	ldrh	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d131      	bne.n	8006012 <USBD_SetAddress+0x76>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	88db      	ldrh	r3, [r3, #6]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d12d      	bne.n	8006012 <USBD_SetAddress+0x76>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	885b      	ldrh	r3, [r3, #2]
 8005fba:	2b7f      	cmp	r3, #127	; 0x7f
 8005fbc:	d829      	bhi.n	8006012 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	885b      	ldrh	r3, [r3, #2]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d104      	bne.n	8005fe0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9a3 	bl	8006324 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fde:	e01d      	b.n	800601c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	7bfa      	ldrb	r2, [r7, #15]
 8005fe4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 ffb9 	bl	8006f64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa61 	bl	80064ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006006:	e009      	b.n	800601c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006010:	e004      	b.n	800601c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f985 	bl	8006324 <USBD_CtlError>
  }
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	885b      	ldrh	r3, [r3, #2]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	4b4c      	ldr	r3, [pc, #304]	; (800616c <USBD_SetConfig+0x148>)
 800603a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800603c:	4b4b      	ldr	r3, [pc, #300]	; (800616c <USBD_SetConfig+0x148>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d905      	bls.n	8006050 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f96c 	bl	8006324 <USBD_CtlError>
    return USBD_FAIL;
 800604c:	2303      	movs	r3, #3
 800604e:	e088      	b.n	8006162 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d002      	beq.n	8006062 <USBD_SetConfig+0x3e>
 800605c:	2b03      	cmp	r3, #3
 800605e:	d025      	beq.n	80060ac <USBD_SetConfig+0x88>
 8006060:	e071      	b.n	8006146 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006062:	4b42      	ldr	r3, [pc, #264]	; (800616c <USBD_SetConfig+0x148>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01c      	beq.n	80060a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800606a:	4b40      	ldr	r3, [pc, #256]	; (800616c <USBD_SetConfig+0x148>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006074:	4b3d      	ldr	r3, [pc, #244]	; (800616c <USBD_SetConfig+0x148>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff f91e 	bl	80052bc <USBD_SetClassConfig>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f949 	bl	8006324 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006092:	e065      	b.n	8006160 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fa10 	bl	80064ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2203      	movs	r2, #3
 800609e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060a2:	e05d      	b.n	8006160 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fa08 	bl	80064ba <USBD_CtlSendStatus>
      break;
 80060aa:	e059      	b.n	8006160 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80060ac:	4b2f      	ldr	r3, [pc, #188]	; (800616c <USBD_SetConfig+0x148>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d112      	bne.n	80060da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <USBD_SetConfig+0x148>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060c6:	4b29      	ldr	r3, [pc, #164]	; (800616c <USBD_SetConfig+0x148>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff f911 	bl	80052f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9f1 	bl	80064ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80060d8:	e042      	b.n	8006160 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <USBD_SetConfig+0x148>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d02a      	beq.n	800613e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff f8ff 	bl	80052f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060f6:	4b1d      	ldr	r3, [pc, #116]	; (800616c <USBD_SetConfig+0x148>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006100:	4b1a      	ldr	r3, [pc, #104]	; (800616c <USBD_SetConfig+0x148>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff f8d8 	bl	80052bc <USBD_SetClassConfig>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00f      	beq.n	8006136 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f903 	bl	8006324 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff f8e4 	bl	80052f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006134:	e014      	b.n	8006160 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9bf 	bl	80064ba <USBD_CtlSendStatus>
      break;
 800613c:	e010      	b.n	8006160 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f9bb 	bl	80064ba <USBD_CtlSendStatus>
      break;
 8006144:	e00c      	b.n	8006160 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f8eb 	bl	8006324 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800614e:	4b07      	ldr	r3, [pc, #28]	; (800616c <USBD_SetConfig+0x148>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff f8cd 	bl	80052f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800615a:	2303      	movs	r3, #3
 800615c:	73fb      	strb	r3, [r7, #15]
      break;
 800615e:	bf00      	nop
  }

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	200001b0 	.word	0x200001b0

08006170 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	88db      	ldrh	r3, [r3, #6]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d004      	beq.n	800618c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f8cd 	bl	8006324 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800618a:	e023      	b.n	80061d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	dc02      	bgt.n	800619e <USBD_GetConfig+0x2e>
 8006198:	2b00      	cmp	r3, #0
 800619a:	dc03      	bgt.n	80061a4 <USBD_GetConfig+0x34>
 800619c:	e015      	b.n	80061ca <USBD_GetConfig+0x5a>
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d00b      	beq.n	80061ba <USBD_GetConfig+0x4a>
 80061a2:	e012      	b.n	80061ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3308      	adds	r3, #8
 80061ae:	2201      	movs	r2, #1
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f927 	bl	8006406 <USBD_CtlSendData>
        break;
 80061b8:	e00c      	b.n	80061d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	2201      	movs	r2, #1
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f91f 	bl	8006406 <USBD_CtlSendData>
        break;
 80061c8:	e004      	b.n	80061d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8a9 	bl	8006324 <USBD_CtlError>
        break;
 80061d2:	bf00      	nop
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d81e      	bhi.n	8006232 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	88db      	ldrh	r3, [r3, #6]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d004      	beq.n	8006206 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f890 	bl	8006324 <USBD_CtlError>
        break;
 8006204:	e01a      	b.n	800623c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f043 0202 	orr.w	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	330c      	adds	r3, #12
 8006226:	2202      	movs	r2, #2
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8eb 	bl	8006406 <USBD_CtlSendData>
      break;
 8006230:	e004      	b.n	800623c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f875 	bl	8006324 <USBD_CtlError>
      break;
 800623a:	bf00      	nop
  }
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	885b      	ldrh	r3, [r3, #2]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d106      	bne.n	8006264 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f92b 	bl	80064ba <USBD_CtlSendStatus>
  }
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	2b02      	cmp	r3, #2
 8006282:	d80b      	bhi.n	800629c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	885b      	ldrh	r3, [r3, #2]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d10c      	bne.n	80062a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f910 	bl	80064ba <USBD_CtlSendStatus>
      }
      break;
 800629a:	e004      	b.n	80062a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f840 	bl	8006324 <USBD_CtlError>
      break;
 80062a4:	e000      	b.n	80062a8 <USBD_ClrFeature+0x3c>
      break;
 80062a6:	bf00      	nop
  }
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff fa91 	bl	8005802 <SWAPBYTE>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fa84 	bl	8005802 <SWAPBYTE>
 80062fa:	4603      	mov	r3, r0
 80062fc:	461a      	mov	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3301      	adds	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fa77 	bl	8005802 <SWAPBYTE>
 8006314:	4603      	mov	r3, r0
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	80da      	strh	r2, [r3, #6]
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fd7f 	bl	8006e34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006336:	2100      	movs	r1, #0
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fd7b 	bl	8006e34 <USBD_LL_StallEP>
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b086      	sub	sp, #24
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d036      	beq.n	80063ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006360:	6938      	ldr	r0, [r7, #16]
 8006362:	f000 f836 	bl	80063d2 <USBD_GetLen>
 8006366:	4603      	mov	r3, r0
 8006368:	3301      	adds	r3, #1
 800636a:	b29b      	uxth	r3, r3
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4413      	add	r3, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	3301      	adds	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4413      	add	r3, r2
 800638c:	2203      	movs	r2, #3
 800638e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	3301      	adds	r3, #1
 8006394:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006396:	e013      	b.n	80063c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	4413      	add	r3, r2
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3301      	adds	r3, #1
 80063a8:	613b      	str	r3, [r7, #16]
    idx++;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	3301      	adds	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	4413      	add	r3, r2
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
    idx++;
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	3301      	adds	r3, #1
 80063be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e7      	bne.n	8006398 <USBD_GetString+0x52>
 80063c8:	e000      	b.n	80063cc <USBD_GetString+0x86>
    return;
 80063ca:	bf00      	nop
  }
}
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063e2:	e005      	b.n	80063f0 <USBD_GetLen+0x1e>
  {
    len++;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	3301      	adds	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1f5      	bne.n	80063e4 <USBD_GetLen+0x12>
  }

  return len;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2202      	movs	r2, #2
 8006416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	2100      	movs	r1, #0
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fdcf 	bl	8006fd0 <USBD_LL_Transmit>

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	2100      	movs	r1, #0
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fdbe 	bl	8006fd0 <USBD_LL_Transmit>

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2203      	movs	r2, #3
 800646e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	2100      	movs	r1, #0
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fdd9 	bl	8007040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	2100      	movs	r1, #0
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fdc8 	bl	8007040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2204      	movs	r2, #4
 80064c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064ca:	2300      	movs	r3, #0
 80064cc:	2200      	movs	r2, #0
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fd7d 	bl	8006fd0 <USBD_LL_Transmit>

  return USBD_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2205      	movs	r2, #5
 80064ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064f0:	2300      	movs	r3, #0
 80064f2:	2200      	movs	r2, #0
 80064f4:	2100      	movs	r1, #0
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fda2 	bl	8007040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800650c:	2200      	movs	r2, #0
 800650e:	4912      	ldr	r1, [pc, #72]	; (8006558 <MX_USB_DEVICE_Init+0x50>)
 8006510:	4812      	ldr	r0, [pc, #72]	; (800655c <MX_USB_DEVICE_Init+0x54>)
 8006512:	f7fe fe65 	bl	80051e0 <USBD_Init>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800651c:	f7f9 ff12 	bl	8000344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006520:	490f      	ldr	r1, [pc, #60]	; (8006560 <MX_USB_DEVICE_Init+0x58>)
 8006522:	480e      	ldr	r0, [pc, #56]	; (800655c <MX_USB_DEVICE_Init+0x54>)
 8006524:	f7fe fe8c 	bl	8005240 <USBD_RegisterClass>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800652e:	f7f9 ff09 	bl	8000344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006532:	490c      	ldr	r1, [pc, #48]	; (8006564 <MX_USB_DEVICE_Init+0x5c>)
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <MX_USB_DEVICE_Init+0x54>)
 8006536:	f7fe fdad 	bl	8005094 <USBD_CDC_RegisterInterface>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006540:	f7f9 ff00 	bl	8000344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006544:	4805      	ldr	r0, [pc, #20]	; (800655c <MX_USB_DEVICE_Init+0x54>)
 8006546:	f7fe fea2 	bl	800528e <USBD_Start>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006550:	f7f9 fef8 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006554:	bf00      	nop
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000130 	.word	0x20000130
 800655c:	200001b4 	.word	0x200001b4
 8006560:	20000018 	.word	0x20000018
 8006564:	2000011c 	.word	0x2000011c

08006568 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800656c:	2200      	movs	r2, #0
 800656e:	4905      	ldr	r1, [pc, #20]	; (8006584 <CDC_Init_FS+0x1c>)
 8006570:	4805      	ldr	r0, [pc, #20]	; (8006588 <CDC_Init_FS+0x20>)
 8006572:	f7fe fda4 	bl	80050be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006576:	4905      	ldr	r1, [pc, #20]	; (800658c <CDC_Init_FS+0x24>)
 8006578:	4803      	ldr	r0, [pc, #12]	; (8006588 <CDC_Init_FS+0x20>)
 800657a:	f7fe fdbe 	bl	80050fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800657e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000c84 	.word	0x20000c84
 8006588:	200001b4 	.word	0x200001b4
 800658c:	20000484 	.word	0x20000484

08006590 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006594:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006596:	4618      	mov	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	6039      	str	r1, [r7, #0]
 80065aa:	71fb      	strb	r3, [r7, #7]
 80065ac:	4613      	mov	r3, r2
 80065ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	2b23      	cmp	r3, #35	; 0x23
 80065b4:	d84a      	bhi.n	800664c <CDC_Control_FS+0xac>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <CDC_Control_FS+0x1c>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	0800664d 	.word	0x0800664d
 80065c0:	0800664d 	.word	0x0800664d
 80065c4:	0800664d 	.word	0x0800664d
 80065c8:	0800664d 	.word	0x0800664d
 80065cc:	0800664d 	.word	0x0800664d
 80065d0:	0800664d 	.word	0x0800664d
 80065d4:	0800664d 	.word	0x0800664d
 80065d8:	0800664d 	.word	0x0800664d
 80065dc:	0800664d 	.word	0x0800664d
 80065e0:	0800664d 	.word	0x0800664d
 80065e4:	0800664d 	.word	0x0800664d
 80065e8:	0800664d 	.word	0x0800664d
 80065ec:	0800664d 	.word	0x0800664d
 80065f0:	0800664d 	.word	0x0800664d
 80065f4:	0800664d 	.word	0x0800664d
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	0800664d 	.word	0x0800664d
 8006600:	0800664d 	.word	0x0800664d
 8006604:	0800664d 	.word	0x0800664d
 8006608:	0800664d 	.word	0x0800664d
 800660c:	0800664d 	.word	0x0800664d
 8006610:	0800664d 	.word	0x0800664d
 8006614:	0800664d 	.word	0x0800664d
 8006618:	0800664d 	.word	0x0800664d
 800661c:	0800664d 	.word	0x0800664d
 8006620:	0800664d 	.word	0x0800664d
 8006624:	0800664d 	.word	0x0800664d
 8006628:	0800664d 	.word	0x0800664d
 800662c:	0800664d 	.word	0x0800664d
 8006630:	0800664d 	.word	0x0800664d
 8006634:	0800664d 	.word	0x0800664d
 8006638:	0800664d 	.word	0x0800664d
 800663c:	0800664d 	.word	0x0800664d
 8006640:	0800664d 	.word	0x0800664d
 8006644:	0800664d 	.word	0x0800664d
 8006648:	0800664d 	.word	0x0800664d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800664c:	bf00      	nop
  }

  return (USBD_OK);
 800664e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4808      	ldr	r0, [pc, #32]	; (800668c <CDC_Receive_FS+0x30>)
 800666a:	f7fe fd46 	bl	80050fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800666e:	4807      	ldr	r0, [pc, #28]	; (800668c <CDC_Receive_FS+0x30>)
 8006670:	f7fe fd8c 	bl	800518c <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallback(Buf, Len[0]);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7f9 fe4c 	bl	8000318 <CDC_ReceiveCallback>
  return (USBD_OK);
 8006680:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	200001b4 	.word	0x200001b4

08006690 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80066a0:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <CDC_Transmit_FS+0x48>)
 80066a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e00b      	b.n	80066ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80066b6:	887b      	ldrh	r3, [r7, #2]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4806      	ldr	r0, [pc, #24]	; (80066d8 <CDC_Transmit_FS+0x48>)
 80066be:	f7fe fcfe 	bl	80050be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80066c2:	4805      	ldr	r0, [pc, #20]	; (80066d8 <CDC_Transmit_FS+0x48>)
 80066c4:	f7fe fd32 	bl	800512c <USBD_CDC_TransmitPacket>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200001b4 	.word	0x200001b4

080066dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80066ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2212      	movs	r2, #18
 8006710:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006712:	4b03      	ldr	r3, [pc, #12]	; (8006720 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	20000150 	.word	0x20000150

08006724 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2204      	movs	r2, #4
 8006734:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006736:	4b03      	ldr	r3, [pc, #12]	; (8006744 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000170 	.word	0x20000170

08006748 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	6039      	str	r1, [r7, #0]
 8006752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	4907      	ldr	r1, [pc, #28]	; (800677c <USBD_FS_ProductStrDescriptor+0x34>)
 800675e:	4808      	ldr	r0, [pc, #32]	; (8006780 <USBD_FS_ProductStrDescriptor+0x38>)
 8006760:	f7ff fdf1 	bl	8006346 <USBD_GetString>
 8006764:	e004      	b.n	8006770 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	4904      	ldr	r1, [pc, #16]	; (800677c <USBD_FS_ProductStrDescriptor+0x34>)
 800676a:	4805      	ldr	r0, [pc, #20]	; (8006780 <USBD_FS_ProductStrDescriptor+0x38>)
 800676c:	f7ff fdeb 	bl	8006346 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006770:	4b02      	ldr	r3, [pc, #8]	; (800677c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20001484 	.word	0x20001484
 8006780:	08007220 	.word	0x08007220

08006784 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	6039      	str	r1, [r7, #0]
 800678e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	4904      	ldr	r1, [pc, #16]	; (80067a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006794:	4804      	ldr	r0, [pc, #16]	; (80067a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006796:	f7ff fdd6 	bl	8006346 <USBD_GetString>
  return USBD_StrDesc;
 800679a:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20001484 	.word	0x20001484
 80067a8:	08007238 	.word	0x08007238

080067ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	221a      	movs	r2, #26
 80067bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80067be:	f000 f855 	bl	800686c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80067c2:	4b02      	ldr	r3, [pc, #8]	; (80067cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000174 	.word	0x20000174

080067d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	4907      	ldr	r1, [pc, #28]	; (8006804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067e6:	4808      	ldr	r0, [pc, #32]	; (8006808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067e8:	f7ff fdad 	bl	8006346 <USBD_GetString>
 80067ec:	e004      	b.n	80067f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	4904      	ldr	r1, [pc, #16]	; (8006804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80067f2:	4805      	ldr	r0, [pc, #20]	; (8006808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067f4:	f7ff fda7 	bl	8006346 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20001484 	.word	0x20001484
 8006808:	0800724c 	.word	0x0800724c

0800680c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	4907      	ldr	r1, [pc, #28]	; (8006840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006822:	4808      	ldr	r0, [pc, #32]	; (8006844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006824:	f7ff fd8f 	bl	8006346 <USBD_GetString>
 8006828:	e004      	b.n	8006834 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	4904      	ldr	r1, [pc, #16]	; (8006840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006830:	f7ff fd89 	bl	8006346 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20001484 	.word	0x20001484
 8006844:	08007258 	.word	0x08007258

08006848 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	220c      	movs	r2, #12
 8006858:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	20000164 	.word	0x20000164

0800686c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006872:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <Get_SerialNum+0x44>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <Get_SerialNum+0x48>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <Get_SerialNum+0x4c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006892:	2208      	movs	r2, #8
 8006894:	4909      	ldr	r1, [pc, #36]	; (80068bc <Get_SerialNum+0x50>)
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f814 	bl	80068c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800689c:	2204      	movs	r2, #4
 800689e:	4908      	ldr	r1, [pc, #32]	; (80068c0 <Get_SerialNum+0x54>)
 80068a0:	68b8      	ldr	r0, [r7, #8]
 80068a2:	f000 f80f 	bl	80068c4 <IntToUnicode>
  }
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	1fff7590 	.word	0x1fff7590
 80068b4:	1fff7594 	.word	0x1fff7594
 80068b8:	1fff7598 	.word	0x1fff7598
 80068bc:	20000176 	.word	0x20000176
 80068c0:	20000186 	.word	0x20000186

080068c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	75fb      	strb	r3, [r7, #23]
 80068da:	e027      	b.n	800692c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	0f1b      	lsrs	r3, r3, #28
 80068e0:	2b09      	cmp	r3, #9
 80068e2:	d80b      	bhi.n	80068fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	0f1b      	lsrs	r3, r3, #28
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	4619      	mov	r1, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	440b      	add	r3, r1
 80068f4:	3230      	adds	r2, #48	; 0x30
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	e00a      	b.n	8006912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	0f1b      	lsrs	r3, r3, #28
 8006900:	b2da      	uxtb	r2, r3
 8006902:	7dfb      	ldrb	r3, [r7, #23]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4619      	mov	r1, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	440b      	add	r3, r1
 800690c:	3237      	adds	r2, #55	; 0x37
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	3301      	adds	r3, #1
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	4413      	add	r3, r2
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	3301      	adds	r3, #1
 800692a:	75fb      	strb	r3, [r7, #23]
 800692c:	7dfa      	ldrb	r2, [r7, #23]
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	429a      	cmp	r2, r3
 8006932:	d3d3      	bcc.n	80068dc <IntToUnicode+0x18>
  }
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b0ac      	sub	sp, #176	; 0xb0
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800694c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	609a      	str	r2, [r3, #8]
 8006958:	60da      	str	r2, [r3, #12]
 800695a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800695c:	f107 0314 	add.w	r3, r7, #20
 8006960:	2288      	movs	r2, #136	; 0x88
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fc47 	bl	80071f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006972:	d164      	bne.n	8006a3e <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006978:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800697a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800697e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006982:	f107 0314 	add.w	r3, r7, #20
 8006986:	4618      	mov	r0, r3
 8006988:	f7fc f90c 	bl	8002ba4 <HAL_RCCEx_PeriphCLKConfig>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8006992:	f7f9 fcd7 	bl	8000344 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006996:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 8006998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699a:	4a2b      	ldr	r2, [pc, #172]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069a2:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 80069a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b6:	2302      	movs	r3, #2
 80069b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069c2:	2303      	movs	r3, #3
 80069c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069c8:	230a      	movs	r3, #10
 80069ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80069d2:	4619      	mov	r1, r3
 80069d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069d8:	f7f9 ff00 	bl	80007dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069dc:	4b1a      	ldr	r3, [pc, #104]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 80069e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069e8:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 80069ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f4:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 80069f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d114      	bne.n	8006a2a <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a00:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	4a10      	ldr	r2, [pc, #64]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 8006a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8006a18:	f7fb fae0 	bl	8001fdc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <HAL_PCD_MspInit+0x104>)
 8006a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a26:	6593      	str	r3, [r2, #88]	; 0x58
 8006a28:	e001      	b.n	8006a2e <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006a2a:	f7fb fad7 	bl	8001fdc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2100      	movs	r1, #0
 8006a32:	2043      	movs	r0, #67	; 0x43
 8006a34:	f7f9 fe9b 	bl	800076e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a38:	2043      	movs	r0, #67	; 0x43
 8006a3a:	f7f9 feb4 	bl	80007a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a3e:	bf00      	nop
 8006a40:	37b0      	adds	r7, #176	; 0xb0
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40021000 	.word	0x40021000

08006a4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f7fe fc5e 	bl	8005324 <USBD_LL_SetupStage>
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f7fe fc98 	bl	80053ce <USBD_LL_DataOutStage>
}
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006ab8:	78fa      	ldrb	r2, [r7, #3]
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	334c      	adds	r3, #76	; 0x4c
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7fe fce1 	bl	8005494 <USBD_LL_DataInStage>
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe fdf5 	bl	80056d8 <USBD_LL_SOF>
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006afe:	2301      	movs	r3, #1
 8006b00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d001      	beq.n	8006b0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006b0a:	f7f9 fc1b 	bl	8000344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b14:	7bfa      	ldrb	r2, [r7, #15]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fd9f 	bl	800565c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fd4b 	bl	80055c0 <USBD_LL_Reset>
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe fd8e 	bl	800567c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b68:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <HAL_PCD_SuspendCallback+0x48>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	4a03      	ldr	r2, [pc, #12]	; (8006b7c <HAL_PCD_SuspendCallback+0x48>)
 8006b6e:	f043 0306 	orr.w	r3, r3, #6
 8006b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <HAL_PCD_ResumeCallback+0x4c>)
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	4a07      	ldr	r2, [pc, #28]	; (8006bcc <HAL_PCD_ResumeCallback+0x4c>)
 8006bae:	f023 0306 	bic.w	r3, r3, #6
 8006bb2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006bb4:	f000 faf6 	bl	80071a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe fd72 	bl	80056a8 <USBD_LL_Resume>
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	e000ed00 	.word	0xe000ed00

08006bd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fdbe 	bl	8005768 <USBD_LL_IsoOUTIncomplete>
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe fd86 	bl	800571c <USBD_LL_IsoINIncomplete>
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fdc4 	bl	80057b4 <USBD_LL_DevConnected>
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fdc1 	bl	80057ca <USBD_LL_DevDisconnected>
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d13c      	bne.n	8006cda <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c60:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c70:	4b1c      	ldr	r3, [pc, #112]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006c78:	4b1a      	ldr	r3, [pc, #104]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c7a:	2206      	movs	r2, #6
 8006c7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c7e:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c80:	2202      	movs	r2, #2
 8006c82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c84:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c86:	2202      	movs	r2, #2
 8006c88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c8a:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c90:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c96:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ca2:	4b10      	ldr	r3, [pc, #64]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cae:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006cb0:	f7f9 ff70 	bl	8000b94 <HAL_PCD_Init>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006cba:	f7f9 fb43 	bl	8000344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006cbe:	2180      	movs	r1, #128	; 0x80
 8006cc0:	4808      	ldr	r0, [pc, #32]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006cc2:	f7fb f8f2 	bl	8001eaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006cc6:	2240      	movs	r2, #64	; 0x40
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4806      	ldr	r0, [pc, #24]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006ccc:	f7fb f8a6 	bl	8001e1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006cd0:	2280      	movs	r2, #128	; 0x80
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	4803      	ldr	r0, [pc, #12]	; (8006ce4 <USBD_LL_Init+0x94>)
 8006cd6:	f7fb f8a1 	bl	8001e1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20001684 	.word	0x20001684

08006ce8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fa f86c 	bl	8000ddc <HAL_PCD_Start>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d816      	bhi.n	8006d3c <USBD_LL_Start+0x54>
 8006d0e:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <USBD_LL_Start+0x2c>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d2b 	.word	0x08006d2b
 8006d1c:	08006d31 	.word	0x08006d31
 8006d20:	08006d37 	.word	0x08006d37
    case HAL_OK :
      usb_status = USBD_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
    break;
 8006d28:	e00b      	b.n	8006d42 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d2e:	e008      	b.n	8006d42 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
    break;
 8006d34:	e005      	b.n	8006d42 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d36:	2303      	movs	r3, #3
 8006d38:	73fb      	strb	r3, [r7, #15]
    break;
 8006d3a:	e002      	b.n	8006d42 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d40:	bf00      	nop
  }
  return usb_status;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	70fb      	strb	r3, [r7, #3]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70bb      	strb	r3, [r7, #2]
 8006d62:	4613      	mov	r3, r2
 8006d64:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d74:	78bb      	ldrb	r3, [r7, #2]
 8006d76:	883a      	ldrh	r2, [r7, #0]
 8006d78:	78f9      	ldrb	r1, [r7, #3]
 8006d7a:	f7fa fd16 	bl	80017aa <HAL_PCD_EP_Open>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d817      	bhi.n	8006db8 <USBD_LL_OpenEP+0x6c>
 8006d88:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <USBD_LL_OpenEP+0x44>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006da1 	.word	0x08006da1
 8006d94:	08006da7 	.word	0x08006da7
 8006d98:	08006dad 	.word	0x08006dad
 8006d9c:	08006db3 	.word	0x08006db3
    case HAL_OK :
      usb_status = USBD_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
    break;
 8006da4:	e00b      	b.n	8006dbe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006da6:	2303      	movs	r3, #3
 8006da8:	73fb      	strb	r3, [r7, #15]
    break;
 8006daa:	e008      	b.n	8006dbe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006dac:	2301      	movs	r3, #1
 8006dae:	73fb      	strb	r3, [r7, #15]
    break;
 8006db0:	e005      	b.n	8006dbe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	73fb      	strb	r3, [r7, #15]
    break;
 8006db6:	e002      	b.n	8006dbe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006db8:	2303      	movs	r3, #3
 8006dba:	73fb      	strb	r3, [r7, #15]
    break;
 8006dbc:	bf00      	nop
  }
  return usb_status;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	4611      	mov	r1, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fa fd47 	bl	800187a <HAL_PCD_EP_Close>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d816      	bhi.n	8006e24 <USBD_LL_CloseEP+0x5c>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <USBD_LL_CloseEP+0x34>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e13 	.word	0x08006e13
 8006e04:	08006e19 	.word	0x08006e19
 8006e08:	08006e1f 	.word	0x08006e1f
    case HAL_OK :
      usb_status = USBD_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e10:	e00b      	b.n	8006e2a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e12:	2303      	movs	r3, #3
 8006e14:	73fb      	strb	r3, [r7, #15]
    break;
 8006e16:	e008      	b.n	8006e2a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e1c:	e005      	b.n	8006e2a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	73fb      	strb	r3, [r7, #15]
    break;
 8006e22:	e002      	b.n	8006e2a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	73fb      	strb	r3, [r7, #15]
    break;
 8006e28:	bf00      	nop
  }
  return usb_status;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fa fdee 	bl	8001a34 <HAL_PCD_EP_SetStall>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d816      	bhi.n	8006e90 <USBD_LL_StallEP+0x5c>
 8006e62:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <USBD_LL_StallEP+0x34>)
 8006e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e7f 	.word	0x08006e7f
 8006e70:	08006e85 	.word	0x08006e85
 8006e74:	08006e8b 	.word	0x08006e8b
    case HAL_OK :
      usb_status = USBD_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e7c:	e00b      	b.n	8006e96 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	73fb      	strb	r3, [r7, #15]
    break;
 8006e82:	e008      	b.n	8006e96 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
    break;
 8006e88:	e005      	b.n	8006e96 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8e:	e002      	b.n	8006e96 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	73fb      	strb	r3, [r7, #15]
    break;
 8006e94:	bf00      	nop
  }
  return usb_status;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fa fe1a 	bl	8001af8 <HAL_PCD_EP_ClrStall>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d816      	bhi.n	8006efc <USBD_LL_ClearStallEP+0x5c>
 8006ece:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <USBD_LL_ClearStallEP+0x34>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006ee5 	.word	0x08006ee5
 8006ed8:	08006eeb 	.word	0x08006eeb
 8006edc:	08006ef1 	.word	0x08006ef1
 8006ee0:	08006ef7 	.word	0x08006ef7
    case HAL_OK :
      usb_status = USBD_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ee8:	e00b      	b.n	8006f02 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006eea:	2303      	movs	r3, #3
 8006eec:	73fb      	strb	r3, [r7, #15]
    break;
 8006eee:	e008      	b.n	8006f02 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ef4:	e005      	b.n	8006f02 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8006efa:	e002      	b.n	8006f02 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006efc:	2303      	movs	r3, #3
 8006efe:	73fb      	strb	r3, [r7, #15]
    break;
 8006f00:	bf00      	nop
  }
  return usb_status;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da0b      	bge.n	8006f40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	4613      	mov	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	333e      	adds	r3, #62	; 0x3e
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	e00b      	b.n	8006f58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006f56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	4611      	mov	r1, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fa fbec 	bl	8001760 <HAL_PCD_SetAddress>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d816      	bhi.n	8006fc0 <USBD_LL_SetUSBAddress+0x5c>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <USBD_LL_SetUSBAddress+0x34>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fa9 	.word	0x08006fa9
 8006f9c:	08006faf 	.word	0x08006faf
 8006fa0:	08006fb5 	.word	0x08006fb5
 8006fa4:	08006fbb 	.word	0x08006fbb
    case HAL_OK :
      usb_status = USBD_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
    break;
 8006fac:	e00b      	b.n	8006fc6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb2:	e008      	b.n	8006fc6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb8:	e005      	b.n	8006fc6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8006fbe:	e002      	b.n	8006fc6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc4:	bf00      	nop
  }
  return usb_status;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fee:	7af9      	ldrb	r1, [r7, #11]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	f7fa fce1 	bl	80019ba <HAL_PCD_EP_Transmit>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006ffc:	7dbb      	ldrb	r3, [r7, #22]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d816      	bhi.n	8007030 <USBD_LL_Transmit+0x60>
 8007002:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <USBD_LL_Transmit+0x38>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	08007019 	.word	0x08007019
 800700c:	0800701f 	.word	0x0800701f
 8007010:	08007025 	.word	0x08007025
 8007014:	0800702b 	.word	0x0800702b
    case HAL_OK :
      usb_status = USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	75fb      	strb	r3, [r7, #23]
    break;
 800701c:	e00b      	b.n	8007036 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	75fb      	strb	r3, [r7, #23]
    break;
 8007022:	e008      	b.n	8007036 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
    break;
 8007028:	e005      	b.n	8007036 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	75fb      	strb	r3, [r7, #23]
    break;
 800702e:	e002      	b.n	8007036 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007030:	2303      	movs	r3, #3
 8007032:	75fb      	strb	r3, [r7, #23]
    break;
 8007034:	bf00      	nop
  }
  return usb_status;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	460b      	mov	r3, r1
 800704e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800705e:	7af9      	ldrb	r1, [r7, #11]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	f7fa fc53 	bl	800190e <HAL_PCD_EP_Receive>
 8007068:	4603      	mov	r3, r0
 800706a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800706c:	7dbb      	ldrb	r3, [r7, #22]
 800706e:	2b03      	cmp	r3, #3
 8007070:	d816      	bhi.n	80070a0 <USBD_LL_PrepareReceive+0x60>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <USBD_LL_PrepareReceive+0x38>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007089 	.word	0x08007089
 800707c:	0800708f 	.word	0x0800708f
 8007080:	08007095 	.word	0x08007095
 8007084:	0800709b 	.word	0x0800709b
    case HAL_OK :
      usb_status = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	75fb      	strb	r3, [r7, #23]
    break;
 800708c:	e00b      	b.n	80070a6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	75fb      	strb	r3, [r7, #23]
    break;
 8007092:	e008      	b.n	80070a6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007094:	2301      	movs	r3, #1
 8007096:	75fb      	strb	r3, [r7, #23]
    break;
 8007098:	e005      	b.n	80070a6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800709a:	2303      	movs	r3, #3
 800709c:	75fb      	strb	r3, [r7, #23]
    break;
 800709e:	e002      	b.n	80070a6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80070a0:	2303      	movs	r3, #3
 80070a2:	75fb      	strb	r3, [r7, #23]
    break;
 80070a4:	bf00      	nop
  }
  return usb_status;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070c2:	78fa      	ldrb	r2, [r7, #3]
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fa fc5f 	bl	800198a <HAL_PCD_EP_GetRxCount>
 80070cc:	4603      	mov	r3, r0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_PCDEx_LPM_Callback+0x18>
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d01f      	beq.n	800712e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80070ee:	e03b      	b.n	8007168 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80070f8:	f000 f854 	bl	80071a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070fc:	4b1c      	ldr	r3, [pc, #112]	; (8007170 <HAL_PCDEx_LPM_Callback+0x98>)
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <HAL_PCDEx_LPM_Callback+0x98>)
 8007102:	f023 0306 	bic.w	r3, r3, #6
 8007106:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fabe 	bl	80056a8 <USBD_LL_Resume>
    break;
 800712c:	e01c      	b.n	8007168 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007140:	f043 0301 	orr.w	r3, r3, #1
 8007144:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe fa95 	bl	800567c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800715a:	4b05      	ldr	r3, [pc, #20]	; (8007170 <HAL_PCDEx_LPM_Callback+0x98>)
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	4a04      	ldr	r2, [pc, #16]	; (8007170 <HAL_PCDEx_LPM_Callback+0x98>)
 8007160:	f043 0306 	orr.w	r3, r3, #6
 8007164:	6113      	str	r3, [r2, #16]
    break;
 8007166:	bf00      	nop
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	e000ed00 	.word	0xe000ed00

08007174 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800717c:	4b03      	ldr	r3, [pc, #12]	; (800718c <USBD_static_malloc+0x18>)
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20001b90 	.word	0x20001b90

08007190 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80071a8:	f7f9 f81d 	bl	80001e6 <SystemClock_Config>
}
 80071ac:	bf00      	nop
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <__libc_init_array>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	4d0d      	ldr	r5, [pc, #52]	; (80071e8 <__libc_init_array+0x38>)
 80071b4:	4c0d      	ldr	r4, [pc, #52]	; (80071ec <__libc_init_array+0x3c>)
 80071b6:	1b64      	subs	r4, r4, r5
 80071b8:	10a4      	asrs	r4, r4, #2
 80071ba:	2600      	movs	r6, #0
 80071bc:	42a6      	cmp	r6, r4
 80071be:	d109      	bne.n	80071d4 <__libc_init_array+0x24>
 80071c0:	4d0b      	ldr	r5, [pc, #44]	; (80071f0 <__libc_init_array+0x40>)
 80071c2:	4c0c      	ldr	r4, [pc, #48]	; (80071f4 <__libc_init_array+0x44>)
 80071c4:	f000 f820 	bl	8007208 <_init>
 80071c8:	1b64      	subs	r4, r4, r5
 80071ca:	10a4      	asrs	r4, r4, #2
 80071cc:	2600      	movs	r6, #0
 80071ce:	42a6      	cmp	r6, r4
 80071d0:	d105      	bne.n	80071de <__libc_init_array+0x2e>
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d8:	4798      	blx	r3
 80071da:	3601      	adds	r6, #1
 80071dc:	e7ee      	b.n	80071bc <__libc_init_array+0xc>
 80071de:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e2:	4798      	blx	r3
 80071e4:	3601      	adds	r6, #1
 80071e6:	e7f2      	b.n	80071ce <__libc_init_array+0x1e>
 80071e8:	080072a8 	.word	0x080072a8
 80071ec:	080072a8 	.word	0x080072a8
 80071f0:	080072a8 	.word	0x080072a8
 80071f4:	080072ac 	.word	0x080072ac

080071f8 <memset>:
 80071f8:	4402      	add	r2, r0
 80071fa:	4603      	mov	r3, r0
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d100      	bne.n	8007202 <memset+0xa>
 8007200:	4770      	bx	lr
 8007202:	f803 1b01 	strb.w	r1, [r3], #1
 8007206:	e7f9      	b.n	80071fc <memset+0x4>

08007208 <_init>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr

08007214 <_fini>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	bf00      	nop
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr
